[10386, 10387]
1 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoCompiler.compile(java.io.File,java.io.File[])::CD,7:CD,54:CD,118:CD,122:CD,128:CD,135:CD,139:CD,212:CD,216:CD,579:CD,580:JM,321:JM,200:JM,8
7 :: PRED :: IF :: Z :: if (p2 $null  == #(null)) goto 86::CD,8:CD,9:CD,577:CF,54
8 :: EXPR :: assign :: I :: v7 = p2 $null .length::CF,9
9 :: PRED :: IF :: Z :: if (v23 >= v7) goto 86::CD,8:CD,10:CD,11:CD,37:CD,52:CD,577:CF,54
10 :: NORM :: declaration :: Ljava/io/BufferedReader :: v8 = new java.io.BufferedReader::CF,11
11 :: NORM :: declaration :: Ljava/io/FileReader :: v9 = new java.io.FileReader::
37 :: CALL :: call :: V :: p0 $null .parseDataFile(v8, v18)::CL,9002
52 :: EXPR :: assign :: Ljava/lang/Object :: v22 = v23 + #(1)::DD,577
54 :: PRED :: IF :: Z :: if (p1 $null  == #(null)) goto 164::CF,118:CD,55:CD,59:CD,89
55 :: CALL :: call :: Z :: v25 = p1 $null .exists()::JM,59
59 :: PRED :: IF :: Z :: if (v25 != #(0)) goto 131::CD,60
60 :: CALL :: call :: Z :: v27 = p1 $null .mkdirs()::
89 :: CALL :: call :: Z :: v29 = p1 $null .isDirectory()::
118 :: NORM :: declaration :: Ljava/util/TreeMap :: v30 = new java.util.TreeMap::
122 :: NORM :: declaration :: Ljava/util/TreeMap :: v32 = new java.util.TreeMap::JM,241
128 :: CALL :: call :: V :: v34.println(#(Writing zoneinfo files))::
132 :: EXPR :: reference :: Ljava/util/List :: v37 = p0 $null .iZones::JM,139
135 :: CALL :: call :: I :: v39 = v37.size()::JM,139
139 :: PRED :: IF :: Z :: if (v65 >= v39) goto 322::CD,135:CD,143:CD,148:JM,9573:CD,156:CD,164:CD,174:CD,179:CD,207:CD,579:CF,580
140 :: EXPR :: reference :: Ljava/util/List :: v40 = p0 $null .iZones::JM,148
143 :: CALL :: call :: Ljava/lang/Object :: v42 = v40.get(v65)::JM,148
148 :: EXPR :: assign :: Ljava/lang/Object :: v43 = CHECKCAST v42::
156 :: CALL :: call :: V :: v43.addToBuilder(v44, v46)::CL,9586
164 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v50 = v44.toDateTimeZone(v48, #(1))::CL,9601
174 :: CALL :: call :: Z :: v54 = test(v52, v50)::JM,179:CL,9875
179 :: PRED :: IF :: Z :: if (v54 == #(0)) goto 310::CD,180:CD,184:CD,190:CD,194:CD,200:CF,207
180 :: CALL :: call :: Ljava/lang/String :: v56 = v50.getID()::CL,9866
184 :: CALL :: call :: Ljava/lang/Object :: v58 = v30.put(v56, v50)::
190 :: CALL :: call :: Ljava/lang/String :: v60 = v50.getID()::CL,9866
194 :: CALL :: call :: Ljava/lang/Object :: v62 = v32.put(v60, v43)::
200 :: PRED :: IF :: Z :: if (p1 $null  == #(null)) goto 310::CD,201:CF,207
201 :: CALL :: call :: V :: p0 $null .writeZone(p1 $null , v44, v50)::JM,321:JM,7:JM,8:CL,10347
207 :: EXPR :: assign :: Ljava/lang/Object :: v64 = v65 + #(1)::DD,579
209 :: EXPR :: reference :: Ljava/util/List :: v66 = p0 $null .iGoodLinks::JM,216
212 :: CALL :: call :: I :: v68 = v66.size()::JM,216
216 :: PRED :: IF :: Z :: if (v142 >= v68) goto 573::CD,212:CD,220:CD,225:CD,229:CD,230:CD,235:CD,236:CD,241:CD,242:CD,381:CD,580
217 :: EXPR :: reference :: Ljava/util/List :: v69 = p0 $null .iGoodLinks::JM,225
220 :: CALL :: call :: Ljava/lang/Object :: v71 = v69.get(v142)::JM,225
225 :: EXPR :: assign :: Ljava/lang/Object :: v72 = CHECKCAST v71::JM,241
226 :: EXPR :: reference :: Ljava/util/List :: v73 = p0 $null .iGoodLinks::JM,235
229 :: EXPR :: assign :: Ljava/lang/Object :: v74 = v142 + #(1)::JM,235
230 :: CALL :: call :: Ljava/lang/Object :: v76 = v73.get(v74)::JM,235
235 :: EXPR :: assign :: Ljava/lang/Object :: v77 = CHECKCAST v76::JM,241
236 :: CALL :: call :: Ljava/lang/Object :: v79 = v32.get(v72)::JM,241
241 :: EXPR :: assign :: Ljava/lang/Object :: v80 = CHECKCAST v79::DD,242
242 :: PRED :: IF :: Z :: if (v80 != #(null)) goto 430::CD,245:CD,249:CD,254:CD,259:CD,264:CD,269:CD,274:CD,278:JM,9573:CD,290:CD,295:CD,305:CD,310:CD,328:CD,332:CD,338:CD,341
245 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v103 = new java.lang.StringBuilder::
249 :: CALL :: call :: Ljava/lang/StringBuilder :: v107 = v103.append(#(Cannot find source zone '))::
254 :: CALL :: call :: Ljava/lang/StringBuilder :: v109 = v107.append(v72)::
259 :: CALL :: call :: Ljava/lang/StringBuilder :: v112 = v109.append(#(' to link alias '))::
264 :: CALL :: call :: Ljava/lang/StringBuilder :: v114 = v112.append(v77)::
269 :: CALL :: call :: Ljava/lang/StringBuilder :: v117 = v114.append(#(' to))::
274 :: CALL :: call :: Ljava/lang/String :: v119 = v117.toString()::
278 :: CALL :: call :: V :: v102.println(v119)::
290 :: CALL :: call :: V :: v80.addToBuilder(v81, v83)::CL,9586
295 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v86 = v81.toDateTimeZone(v77, #(1))::CL,9601
305 :: CALL :: call :: Z :: v90 = test(v88, v86)::JM,310:CL,9875
310 :: PRED :: IF :: Z :: if (v90 == #(0)) goto 503::CD,311:CD,315:CD,321
311 :: CALL :: call :: Ljava/lang/String :: v92 = v86.getID()::CL,9866
315 :: CALL :: call :: Ljava/lang/Object :: v94 = v30.put(v92, v86)::
321 :: PRED :: IF :: Z :: if (p1 $null  == #(null)) goto 503::CD,322
322 :: CALL :: call :: V :: p0 $null .writeZone(p1 $null , v81, v86)::JM,7:JM,8:CL,10347
328 :: CALL :: call :: Ljava/lang/String :: v97 = v86.getID()::CL,9866
332 :: CALL :: call :: Ljava/lang/Object :: v99 = v30.put(v97, v86)::
338 :: CALL :: call :: Z :: v101 = verbose()::JM,341:CL,10527
341 :: PRED :: IF :: Z :: if (v101 == #(0)) goto 561::CD,344:CD,348:CD,353:CD,358:CD,363:CD,368:CD,373:CD,377:CF,381
344 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v122 = new java.lang.StringBuilder::
348 :: CALL :: call :: Ljava/lang/StringBuilder :: v126 = v122.append(#(Good link: ))::
353 :: CALL :: call :: Ljava/lang/StringBuilder :: v128 = v126.append(v77)::
358 :: CALL :: call :: Ljava/lang/StringBuilder :: v131 = v128.append(#( -> ))::
363 :: CALL :: call :: Ljava/lang/StringBuilder :: v133 = v131.append(v72)::
368 :: CALL :: call :: Ljava/lang/StringBuilder :: v136 = v133.append(#( revived))::
373 :: CALL :: call :: Ljava/lang/String :: v138 = v136.toString()::
377 :: CALL :: call :: V :: v121.println(v138)::
381 :: EXPR :: assign :: Ljava/lang/Object :: v141 = v142 + #(2)::DD,580
577 :: EXPR :: assign :: null :: PHI v23 = v22, #(0)::DD,9:DD,52:CF,8
579 :: EXPR :: assign :: null :: PHI v65 = v64, #(0)::DD,139:JM,148:DD,207
580 :: EXPR :: assign :: null :: PHI v142 = v141, #(0)::DD,216:JM,225:DD,229:DD,381
1010 :: NORM :: declaration :: Ljava/util/HashMap :: v4 = new java.util.HashMap::
1017 :: NORM :: declaration :: Ljava/util/ArrayList :: v6 = new java.util.ArrayList::DD,1021
1021 :: EXPR :: modify :: Ljava/util/List :: p0 $null .iZones = v6::
1024 :: NORM :: declaration :: Ljava/util/ArrayList :: v8 = new java.util.ArrayList::DD,1028
1028 :: EXPR :: modify :: Ljava/util/List :: p0 $null .iGoodLinks = v8::
1031 :: NORM :: declaration :: Ljava/util/ArrayList :: v10 = new java.util.ArrayList::
1152 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoLogger.<clinit>()::
1167 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.RuleSet.<clinit>()::CD,1180
1180 :: CALL :: call :: I :: v9 = v7.get(v3)::CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,11332
1280 :: ENTR :: entry :: null :: org.joda.time.chrono.ISOChronology.<clinit>()::CD,1283:JM,20518:JM,20521:JM,20524:CD,1305
1283 :: NORM :: declaration :: Ljava/util/concurrent/ConcurrentHashMap :: v2 = new java.util.concurrent.ConcurrentHashMap::
1305 :: CALL :: call :: Ljava/lang/Object :: v12 = v8.put(v9, v10)::
1320 :: ENTR :: entry :: null :: org.joda.time.DateTimeUtils.<clinit>()::
1346 :: ENTR :: entry :: null :: org.joda.time.Period.<clinit>()::JM,20739:JM,20727:JM,20732
1358 :: ENTR :: entry :: null :: org.joda.time.base.BasePeriod.<clinit>()::
1370 :: ENTR :: entry :: null :: org.joda.time.PeriodType.<clinit>()::CD,1373
1373 :: NORM :: declaration :: Ljava/util/HashMap :: v2 = new java.util.HashMap::
1416 :: ENTR :: entry :: null :: org.joda.time.UTCDateTimeZone.<clinit>()::JM,20785:JM,20779
1428 :: ENTR :: entry :: null :: org.joda.time.chrono.GregorianChronology.<clinit>()::CD,1431:CD,1439
1431 :: NORM :: declaration :: Ljava/util/concurrent/ConcurrentHashMap :: v2 = new java.util.concurrent.ConcurrentHashMap::
1439 :: CALL :: call :: Lorg/joda/time/chrono/GregorianChronology :: v6 = getInstance(v4)::CL,11480
1450 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicGJChronology.<clinit>()::CD,1453:CD,1502:CD,1504:CD,1553:CD,1555:CD,1556:CD,1558:CD,1559:CD,1561:CD,1597:CD,1598:CD,1599
1453 :: NORM :: declaration :: [I :: v3 = new []::DD,1502
1454 :: EXPR :: modify :: I :: v3[#(0)] = #(31)::
1458 :: EXPR :: modify :: I :: v3[#(1)] = #(28)::
1462 :: EXPR :: modify :: I :: v3[#(2)] = #(31)::
1466 :: EXPR :: modify :: I :: v3[#(3)] = #(30)::
1470 :: EXPR :: modify :: I :: v3[#(4)] = #(31)::
1474 :: EXPR :: modify :: I :: v3[#(5)] = #(30)::
1478 :: EXPR :: modify :: I :: v3[#(6)] = #(31)::
1482 :: EXPR :: modify :: I :: v3[#(7)] = #(31)::
1486 :: EXPR :: modify :: I :: v3[#(8)] = #(30)::
1490 :: EXPR :: modify :: I :: v3[#(9)] = #(31)::
1494 :: EXPR :: modify :: I :: v3[#(10)] = #(30)::
1498 :: EXPR :: modify :: I :: v3[#(11)] = #(31)::
1502 :: EXPR :: modify :: [I :: org.joda.time.chrono.BasicGJChronology.MIN_DAYS_PER_MONTH_ARRAY = v3::
1504 :: NORM :: declaration :: [I :: v19 = new []::DD,1553
1505 :: EXPR :: modify :: I :: v19[#(0)] = #(31)::
1509 :: EXPR :: modify :: I :: v19[#(1)] = #(29)::
1513 :: EXPR :: modify :: I :: v19[#(2)] = #(31)::
1517 :: EXPR :: modify :: I :: v19[#(3)] = #(30)::
1521 :: EXPR :: modify :: I :: v19[#(4)] = #(31)::
1525 :: EXPR :: modify :: I :: v19[#(5)] = #(30)::
1529 :: EXPR :: modify :: I :: v19[#(6)] = #(31)::
1533 :: EXPR :: modify :: I :: v19[#(7)] = #(31)::
1537 :: EXPR :: modify :: I :: v19[#(8)] = #(30)::
1541 :: EXPR :: modify :: I :: v19[#(9)] = #(31)::
1545 :: EXPR :: modify :: I :: v19[#(10)] = #(30)::
1549 :: EXPR :: modify :: I :: v19[#(11)] = #(31)::
1553 :: EXPR :: modify :: [I :: org.joda.time.chrono.BasicGJChronology.MAX_DAYS_PER_MONTH_ARRAY = v19::
1555 :: NORM :: declaration :: [J :: v21 = new []::CF,1556
1556 :: EXPR :: modify :: [J :: org.joda.time.chrono.BasicGJChronology.MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = v21::
1558 :: NORM :: declaration :: [J :: v22 = new []::CF,1559
1559 :: EXPR :: modify :: [J :: org.joda.time.chrono.BasicGJChronology.MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = v22::
1561 :: PRED :: IF :: Z :: if (v42 >= #(11)) goto 234::CD,1562:CD,1568:CD,1569:CD,1570:CD,1571:CD,1573:CD,1578:CD,1584:CD,1585:CD,1586:CD,1587:CD,1589:CD,1594:CD,1597:CD,1598:CD,1599
1562 :: EXPR :: reference :: [I :: v24 = org.joda.time.chrono.BasicGJChronology.MIN_DAYS_PER_MONTH_ARRAY::
1564 :: EXPR :: reference :: I :: v25 = v24[v42]::DD,1568
1568 :: EXPR :: assign :: J :: v26 = CONVERT I to J v25::DD,1569
1569 :: EXPR :: assign :: Ljava/lang/Object :: v28 = v26 * #(86400000 l)::DD,1570
1570 :: EXPR :: assign :: Ljava/lang/Object :: v29 = v40 + v28::DD,1574:DD,1597
1571 :: EXPR :: reference :: [J :: v30 = org.joda.time.chrono.BasicGJChronology.MIN_TOTAL_MILLIS_BY_MONTH_ARRAY::CF,1573
1573 :: EXPR :: assign :: Ljava/lang/Object :: v31 = v42 + #(1)::
1574 :: EXPR :: modify :: J :: v30[v31] = v29::
1578 :: EXPR :: reference :: [I :: v32 = org.joda.time.chrono.BasicGJChronology.MAX_DAYS_PER_MONTH_ARRAY::
1580 :: EXPR :: reference :: I :: v33 = v32[v42]::DD,1584
1584 :: EXPR :: assign :: J :: v34 = CONVERT I to J v33::DD,1585
1585 :: EXPR :: assign :: Ljava/lang/Object :: v35 = v34 * #(86400000 l)::DD,1586
1586 :: EXPR :: assign :: Ljava/lang/Object :: v36 = v41 + v35::DD,1590:DD,1598
1587 :: EXPR :: reference :: [J :: v37 = org.joda.time.chrono.BasicGJChronology.MAX_TOTAL_MILLIS_BY_MONTH_ARRAY::CF,1589
1589 :: EXPR :: assign :: Ljava/lang/Object :: v38 = v42 + #(1)::
1590 :: EXPR :: modify :: J :: v37[v38] = v36::
1594 :: EXPR :: assign :: Ljava/lang/Object :: v39 = v42 + #(1)::DD,1599
1597 :: EXPR :: assign :: null :: PHI v40 = v29, #(0 l)::CF,1598:DD,1570
1598 :: EXPR :: assign :: null :: PHI v41 = v36, #(0 l)::CF,1599:DD,1586
1599 :: EXPR :: assign :: null :: PHI v42 = v39, #(0)::DD,1561:DD,1573:DD,1589:DD,1594
1712 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.<clinit>()::JM,11509:JM,20966:JM,20972:JM,11586:JM,29378:JM,20996:JM,11590:JM,11591:JM,21002:JM,11599:JM,11605:JM,21014:JM,11576:JM,21020:JM,29372:JM,11582:JM,21204:JM,21193:JM,21210:JM,11695
7269 :: ENTR :: entry :: null :: org.joda.time.LocalDate.<clinit>()::CD,7272:CD,7283:CD,7293:CD,7303:CD,7313:CD,7323:CD,7333:CD,7343
7272 :: NORM :: declaration :: Ljava/util/HashSet :: v2 = new java.util.HashSet::
7283 :: CALL :: call :: Z :: v8 = v4.add(v6)::
7293 :: CALL :: call :: Z :: v13 = v9.add(v11)::
7303 :: CALL :: call :: Z :: v18 = v14.add(v16)::
7313 :: CALL :: call :: Z :: v23 = v19.add(v21)::
7323 :: CALL :: call :: Z :: v28 = v24.add(v26)::
7333 :: CALL :: call :: Z :: v33 = v29.add(v31)::
7343 :: CALL :: call :: Z :: v38 = v34.add(v36)::
7359 :: ENTR :: entry :: null :: org.joda.time.DurationFieldType.<clinit>()::JM,21257:JM,11805
7507 :: ENTR :: entry :: null :: org.joda.time.field.MillisDurationField.<clinit>()::
7519 :: ENTR :: entry :: null :: org.joda.time.DateTimeFieldType.<clinit>()::JM,11840:JM,21281:JM,11834:JM,11837
7977 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.<clinit>()::CD,7980:CD,7985:CD,7990:CD,7995:CD,8000:CD,8005:CD,8010:CD,8015:CD,8020:CD,8025:CD,8030:CD,8035:CD,8040:CD,8045:CD,8050:CD,8055:CD,8060:CD,8065:CD,8070:CD,8075:CD,8080:CD,8085:CD,8090:CD,8095:CD,8100:CD,8105:CD,8110:CD,8115:CD,8120:CD,8125:CD,8130:CD,8135:CD,8140:CD,8145:CD,8150:CD,8155:CD,8160:CD,8165:CD,8170:CD,8175:CD,8180:CD,8185:CD,8190:CD,8195:CD,8200:CD,8205:CD,8210:CD,8215:CD,8220:CD,8225:CD,8230:CD,8235:CD,8240:CD,8245:CD,8250:CD,8255:CD,8260:CD,8265:CD,8270
7980 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v3 = yearElement()::CL,11859
7985 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v5 = monthElement()::CL,11888
7990 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v7 = dayOfMonthElement()::CL,11921
7995 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v9 = weekyearElement()::CL,11954
8000 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v11 = weekElement()::CL,11983
8005 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v13 = dayOfWeekElement()::CL,12016
8010 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v15 = dayOfYearElement()::CL,12049
8015 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v17 = hourElement()::CL,12082
8020 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v19 = minuteElement()::CL,12109
8025 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v21 = secondElement()::CL,12142
8030 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v23 = fractionElement()::CL,12175
8035 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v25 = offsetElement()::CL,12210
8040 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v27 = literalTElement()::CL,12243
8045 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v29 = yearMonth()::CL,12270
8050 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v31 = yearMonthDay()::CL,12307
8055 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v33 = weekyearWeek()::CL,12352
8060 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v35 = weekyearWeekDay()::CL,12389
8065 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v37 = hourMinute()::CL,12434
8070 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v39 = hourMinuteSecond()::CL,12471
8075 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v41 = hourMinuteSecondMillis()::CL,12516
8080 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v43 = hourMinuteSecondFraction()::CL,12575
8085 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v45 = dateHour()::CL,12628
8090 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v47 = dateHourMinute()::CL,12673
8095 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v49 = dateHourMinuteSecond()::CL,12718
8100 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v51 = dateHourMinuteSecondMillis()::CL,12763
8105 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v53 = dateHourMinuteSecondFraction()::CL,12808
8110 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v55 = time()::CL,12853
8115 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v57 = timeNoMillis()::CL,12890
8120 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v59 = tTime()::CL,12927
8125 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v61 = tTimeNoMillis()::CL,12964
8130 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v63 = dateTime()::CL,13001
8135 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v65 = dateTimeNoMillis()::CL,13038
8140 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v67 = weekDateTime()::CL,13075
8145 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v69 = weekDateTimeNoMillis()::CL,13112
8150 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v71 = ordinalDate()::CL,13149
8155 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v73 = ordinalDateTime()::CL,13186
8160 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v75 = ordinalDateTimeNoMillis()::CL,13223
8165 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v77 = basicDate()::CL,13260
8170 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v79 = basicTime()::CL,13309
8175 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v81 = basicTimeNoMillis()::CL,13386
8180 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v83 = basicTTime()::CL,13449
8185 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v85 = basicTTimeNoMillis()::CL,13486
8190 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v87 = basicDateTime()::CL,13523
8195 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v89 = basicDateTimeNoMillis()::CL,13560
8200 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v91 = basicOrdinalDate()::CL,13597
8205 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v93 = basicOrdinalDateTime()::CL,13636
8210 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v95 = basicOrdinalDateTimeNoMillis()::CL,13673
8215 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v97 = basicWeekDate()::CL,13710
8220 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v99 = basicWeekDateTime()::CL,13765
8225 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v101 = basicWeekDateTimeNoMillis()::CL,13802
8230 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v103 = dateElementParser()::CL,13839
8235 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v105 = timeElementParser()::CL,14000
8240 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v107 = dateParser()::CL,14254
8245 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v109 = localDateParser()::CL,14313
8250 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v111 = timeParser()::CL,14332
8255 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v113 = localTimeParser()::CL,14385
8260 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v115 = dateTimeParser()::CL,14430
8265 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v117 = dateOptionalTimeParser()::CL,14516
8270 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v119 = localDateOptionalTimeParser()::CL,14591
8479 :: ENTR :: entry :: null :: org.joda.time.chrono.ISOYearOfEraDateTimeField.<clinit>()::JM,29378:JM,21204:JM,21193:JM,21210:JM,29372
8491 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.LazyInit.<clinit>()::CD,8494:CD,8499
8494 :: CALL :: call :: Ljava/util/Map :: v3 = buildMap()::CL,14729
8499 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v5 = buildFormatter()::CL,15074
8586 :: ENTR :: entry :: null :: org.joda.time.tz.UTCProvider.<clinit>()::CD,8589
8589 :: CALL :: call :: Ljava/util/Set :: v4 = singleton(#(UTC))::JM,8589
8697 :: ENTR :: entry :: null :: org.joda.time.chrono.GJLocaleSymbols.<clinit>()::CD,8700
8700 :: NORM :: declaration :: Ljava/util/concurrent/ConcurrentHashMap :: v2 = new java.util.concurrent.ConcurrentHashMap::
8729 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormat.<clinit>()::CD,8732
8732 :: NORM :: declaration :: Ljava/util/concurrent/ConcurrentHashMap :: v2 = new java.util.concurrent.ConcurrentHashMap::
8776 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId.<clinit>()::CD,8779:CD,8785:CD,8787:CD,8788:CD,8796:CD,8800:CD,8802:CD,8803:CD,8810:CD,8814:CD,8817:CD,8823:CD,8825:CD,8829:CD,8833
8779 :: NORM :: declaration :: Lorg/joda/time/format/DateTimeFormatterBuilder$TimeZoneId :: v2 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId::DD,8785
8785 :: EXPR :: modify :: Lorg/joda/time/format/DateTimeFormatterBuilder$TimeZoneId :: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.INSTANCE = v2::
8787 :: NORM :: declaration :: [Lorg/joda/time/format/DateTimeFormatterBuilder$TimeZoneId :: v7 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[]::
8788 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatterBuilder$TimeZoneId :: v8 = org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.INSTANCE::DD,8790
8790 :: EXPR :: modify :: Ljava/lang/Object :: v7[#(0)] = v8::
8796 :: NORM :: declaration :: Ljava/util/ArrayList :: v9 = new java.util.ArrayList::DD,8800
8800 :: EXPR :: modify :: Ljava/util/List :: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.BASE_GROUPED_IDS = v9::
8802 :: NORM :: declaration :: Ljava/util/ArrayList :: v11 = new java.util.ArrayList::DD,8810
8803 :: CALL :: call :: Ljava/util/Set :: v13 = getAvailableIDs()::CL,15242
8810 :: EXPR :: modify :: Ljava/util/List :: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.ALL_IDS = v11::
8814 :: CALL :: call :: V :: sort(v15)::
8817 :: NORM :: declaration :: Ljava/util/HashMap :: v17 = new java.util.HashMap::
8823 :: EXPR :: reference :: Ljava/util/List :: v19 = org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.ALL_IDS::JM,8833:JM,8838
8825 :: CALL :: call :: Ljava/util/Iterator :: v21 = v19.iterator()::JM,8833:JM,8838
8829 :: CALL :: call :: Z :: v23 = v21.hasNext()::JM,8833:JM,8838
8833 :: PRED :: IF :: Z :: if (v23 == #(0)) goto 226::CD,8829:CD,8834:CD,8838:CD,8839:CD,8844:JM,8833
8834 :: CALL :: call :: Ljava/lang/Object :: v25 = v21.next()::JM,8833:JM,8838
8838 :: EXPR :: assign :: Ljava/lang/Object :: v26 = CHECKCAST v25::JM,8849:JM,8850:JM,8844:JM,8926
8839 :: CALL :: call :: I :: v29 = v26.indexOf(#(47))::JM,8849:JM,8850:JM,8844:JM,8926
8844 :: PRED :: IF :: Z :: if (v29 < #(0)) goto 203::CD,8845:CD,8849:CD,8856:CD,8857:CD,8863:CD,8870:CD,8875:CD,8890:CD,8895:CD,8896:CD,8902:CD,8904:CD,8926
8845 :: CALL :: call :: I :: v31 = v26.length()::JM,8849
8849 :: PRED :: IF :: Z :: if (v29 >= v31) goto 125::CF,8926:CD,8850
8850 :: EXPR :: assign :: Ljava/lang/Object :: v32 = v29 + #(1)::DD,8926
8856 :: EXPR :: assign :: Ljava/lang/Object :: v36 = v33 + #(1)::
8857 :: CALL :: call :: Ljava/lang/String :: v38 = v26.substring(#(0), v36)::
8863 :: CALL :: call :: Ljava/lang/String :: v40 = v26.substring(v33)::
8870 :: CALL :: call :: Z :: v43 = v41.containsKey(v38)::JM,8875
8875 :: PRED :: IF :: Z :: if (v43 != #(0)) goto 179::CD,8878:CD,8882
8878 :: NORM :: declaration :: Ljava/util/ArrayList :: v45 = new java.util.ArrayList::
8882 :: CALL :: call :: Ljava/lang/Object :: v48 = v44.put(v38, v45)::
8890 :: CALL :: call :: Ljava/lang/Object :: v51 = v49.get(v38)::JM,8895
8895 :: EXPR :: assign :: Ljava/lang/Object :: v52 = CHECKCAST v51::
8896 :: CALL :: call :: Z :: v54 = v52.add(v40)::
8902 :: EXPR :: reference :: Ljava/util/List :: v55 = org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.BASE_GROUPED_IDS::
8904 :: CALL :: call :: Z :: v57 = v55.add(v26)::
8926 :: EXPR :: assign :: null :: PHI v33 = v29, v32::DD,8856
8990 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TextField.<clinit>()::CD,8993
8993 :: NORM :: declaration :: Ljava/util/concurrent/ConcurrentHashMap :: v2 = new java.util.concurrent.ConcurrentHashMap::
9002 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoCompiler.parseDataFile(java.io.BufferedReader,boolean)::CD,9008:CD,9012:CD,9248:CD,9258:JM,9170:JM,9027:JM,9034:JM,9259:JM,9021
9008 :: CALL :: call :: Ljava/lang/String :: v7 = p1 $null .readLine()::JM,9170:JM,9027:JM,9012:JM,9034:JM,9259:JM,9021
9012 :: PRED :: IF :: Z :: if (v7 == #(null)) goto 413::CD,9008:CD,9013:CD,9017:CD,9021:CD,9258:JM,9027:JM,9034:JM,9259:CF,9248
9013 :: CALL :: call :: Ljava/lang/String :: v9 = v7.trim()::JM,9027:JM,9034:JM,9259:JM,9021
9017 :: CALL :: call :: I :: v11 = v9.length()::JM,9027:JM,9034:JM,9259:JM,9021
9021 :: PRED :: IF :: Z :: if (v11 == #(0)) goto 3::CF,9258:CD,9022:CD,9027:JM,9034:JM,9259:JM,9021
9022 :: CALL :: call :: C :: v14 = v9.charAt(#(0))::JM,9027:JM,9034:JM,9259:JM,9021
9027 :: PRED :: IF :: Z :: if (v14 != #(35)) goto 45::CD,9029:CD,9034:CD,9041:CD,9047:CD,9052:CD,9056:CD,9259:CD,9258:JM,9027:JM,9021
9029 :: CALL :: call :: I :: v17 = v7.indexOf(#(35))::JM,9027:JM,9034:JM,9259:JM,9021
9034 :: PRED :: IF :: Z :: if (v17 < #(0)) goto 65::CF,9259:CD,9035:JM,9027:JM,9034:JM,9021
9035 :: CALL :: call :: Ljava/lang/String :: v19 = v7.substring(#(0), v17)::JM,9027:JM,9034:JM,9259:JM,9021
9041 :: NORM :: declaration :: Ljava/util/StringTokenizer :: v21 = new java.util.StringTokenizer::JM,9061:JM,9081:JM,9138:JM,9091:JM,9161:JM,9188:JM,9176:JM,9182
9047 :: CALL :: call :: C :: v25 = v20.charAt(#(0))::JM,9056
9052 :: CALL :: call :: Z :: v27 = isWhitespace(v25)::JM,9056
9056 :: PRED :: IF :: Z :: if (v27 == #(0)) goto 112::CD,9057:CD,9061:CD,9068:CD,9077:CD,9081:CD,9260:CD,9258
9057 :: CALL :: call :: Z :: v29 = v21.hasMoreTokens()::JM,9061
9061 :: PRED :: IF :: Z :: if (v29 == #(0)) goto 112::CD,9062:CD,9068:CD,9077:CD,9081:CD,9260:CD,9258
9062 :: PRED :: IF :: Z :: if (v105 == #(null)) goto 3::CF,9258:CD,9063
9063 :: CALL :: call :: V :: v105.chain(v21)::CL,15583
9068 :: PRED :: IF :: Z :: if (v105 == #(null)) goto 130::CD,9072:JM,9081
9069 :: EXPR :: reference :: Ljava/util/List :: v32 = p0 $null .iZones::
9072 :: CALL :: call :: Z :: v34 = v32.add(v105)::
9077 :: CALL :: call :: Z :: v36 = v21.hasMoreTokens()::JM,9081
9081 :: PRED :: IF :: Z :: if (v36 == #(0)) goto 409::CF,9260:CD,9082:CD,9086:CD,9091:JM,9138:JM,9161
9082 :: CALL :: call :: Ljava/lang/String :: v38 = v21.nextToken()::JM,9138:JM,9091:JM,9161
9086 :: CALL :: call :: Z :: v41 = v38.equalsIgnoreCase(#(Rule))::JM,9138:JM,9091:JM,9161
9091 :: PRED :: IF :: Z :: if (v41 == #(0)) goto 233::JM,24000:JM,23873:JM,23939:JM,23945:JM,15690:JM,23946:JM,24075:JM,15629:JM,23886:JM,23951:JM,24081:JM,24082:JM,23955:JM,24083:JM,24084:JM,24085:JM,24086:JM,15640:JM,23896:JM,23961:JM,15709:JM,15713:JM,15651:JM,15655:JM,15720:JM,23912:JM,23976:JM,23918:JM,15663:JM,23919:JM,23985:JM,23924:JM,15670:JM,23928:JM,23869:JM,23934:CD,9103:CD,9108:CD,9109:CD,9133:CD,9138:CD,9260:JM,9091:JM,9161
9103 :: CALL :: call :: Ljava/lang/Object :: v47 = v44.get(v45)::JM,9108
9108 :: EXPR :: assign :: Ljava/lang/Object :: v48 = CHECKCAST v47::DD,9109
9109 :: PRED :: IF :: Z :: if (v48 != #(null)) goto 223::JM,15762:JM,15772:CD,9121:CD,9128
9121 :: CALL :: call :: Ljava/lang/Object :: v54 = v51.put(v52, v49)::
9128 :: CALL :: call :: V :: v48.addRule(v42)::CL,15784
9133 :: CALL :: call :: Z :: v59 = v38.equalsIgnoreCase(#(Zone))::JM,9138:JM,9091:JM,9161
9138 :: PRED :: IF :: Z :: if (v59 == #(0)) goto 275::CD,9139:CD,9150:JM,23712:JM,23683:JM,23715:JM,23732:JM,23701:JM,23719:JM,23690:JM,15837:JM,23679:CD,9156:CD,9161:CD,9260:JM,9138:JM,9091
9139 :: CALL :: call :: I :: v61 = v21.countTokens()::
9150 :: NORM :: declaration :: Lorg/joda/time/tz/ZoneInfoCompiler$Zone :: v63 = new org.joda.time.tz.ZoneInfoCompiler$Zone::DD,9260
9156 :: CALL :: call :: Z :: v67 = v38.equalsIgnoreCase(#(Link))::JM,9138:JM,9091:JM,9161
9161 :: PRED :: IF :: Z :: if (v67 == #(0)) goto 383::CD,9162:CD,9166:CD,9170:CD,9225:CD,9229:CD,9234:CD,9239:CD,9243:CD,9260
9162 :: CALL :: call :: Ljava/lang/String :: v69 = v21.nextToken()::
9166 :: CALL :: call :: Ljava/lang/String :: v71 = v21.nextToken()::JM,9188:JM,9176:JM,9182
9170 :: PRED :: IF :: Z :: if (p2 $null  != #(0)) goto 330::CD,9171:CD,9176:CD,9192:CD,9200:JM,9188:JM,9182
9171 :: CALL :: call :: Z :: v74 = v71.equals(#(US/Pacific-New))::JM,9188:JM,9176:JM,9182
9176 :: PRED :: IF :: Z :: if (v74 != #(0)) goto 330::CD,9177:CD,9182:CD,9192:CD,9200:JM,9188:JM,9176
9177 :: CALL :: call :: Z :: v77 = v71.startsWith(#(Etc/))::JM,9188:JM,9176:JM,9182
9182 :: PRED :: IF :: Z :: if (v77 != #(0)) goto 330::CD,9183:CD,9188:CD,9192:CD,9200:JM,9176:JM,9182
9183 :: CALL :: call :: Z :: v80 = v71.equals(#(GMT))::JM,9188:JM,9176:JM,9182
9188 :: PRED :: IF :: Z :: if (v80 == #(0)) goto 357::CD,9192:CD,9200:CD,9209:CD,9217
9189 :: EXPR :: reference :: Ljava/util/List :: v81 = p0 $null .iBackLinks::
9192 :: CALL :: call :: Z :: v83 = v81.add(v69)::
9197 :: EXPR :: reference :: Ljava/util/List :: v84 = p0 $null .iBackLinks::
9200 :: CALL :: call :: Z :: v86 = v84.add(v71)::JM,9188:JM,9176:JM,9182
9206 :: EXPR :: reference :: Ljava/util/List :: v87 = p0 $null .iGoodLinks::
9209 :: CALL :: call :: Z :: v89 = v87.add(v69)::
9214 :: EXPR :: reference :: Ljava/util/List :: v90 = p0 $null .iGoodLinks::
9217 :: CALL :: call :: Z :: v92 = v90.add(v71)::JM,9188:JM,9176:JM,9182
9225 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v94 = new java.lang.StringBuilder::
9229 :: CALL :: call :: Ljava/lang/StringBuilder :: v98 = v94.append(#(Unknown line: ))::
9234 :: CALL :: call :: Ljava/lang/StringBuilder :: v100 = v98.append(v20)::
9239 :: CALL :: call :: Ljava/lang/String :: v102 = v100.toString()::
9243 :: CALL :: call :: V :: v93.println(v102)::
9248 :: PRED :: IF :: Z :: if (v105 == #(null)) goto 427::CD,9252
9249 :: EXPR :: reference :: Ljava/util/List :: v106 = p0 $null .iZones::
9252 :: CALL :: call :: Z :: v108 = v106.add(v105)::
9258 :: EXPR :: assign :: null :: PHI v105 = v105, v105, v105, v105, v104, #(null)::JM,9170:JM,9027:JM,9012:JM,9034:JM,9259:JM,9021:DD,9062:DD,9068:DD,9248:DD,9258
9259 :: EXPR :: assign :: null :: PHI v20 = v7, v19::CF,9041:JM,9056
9260 :: EXPR :: assign :: null :: PHI v104 = #(null), #(null), v63, #(null), #(null)::DD,9258
9573 :: NORM :: declaration :: Ljava/util/ArrayList :: v4 = new java.util.ArrayList::
9586 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoCompiler.Zone.addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)::CD,9592
9592 :: CALL :: call :: V :: addToBuilder(p0 $null , p1 $null , p2 $null )::CL,15986
9601 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone(java.lang.String,boolean)::CE,9602:CD,9613:CD,9620:CD,9624:CD,9700:CD,9704:CD,9765:CD,9767
9602 :: EXIT :: exit :: Lorg/joda/time/DateTimeZone :: org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone(java.lang.String,boolean)::JM,27344
9613 :: NORM :: declaration :: Ljava/util/ArrayList :: v6 = new java.util.ArrayList::JM,9704:JM,9719
9617 :: EXPR :: reference :: Ljava/util/ArrayList :: v10 = p0 $null .iRuleSets::JM,9685:JM,9624
9620 :: CALL :: call :: I :: v12 = v10.size()::JM,9685:JM,9624
9624 :: PRED :: IF :: Z :: if (v54 >= v12) goto 202::CD,9628:CD,9634:CD,9639:CD,9698:CD,9765:CD,9767:CD,9772:CD,9774:JM,9704
9625 :: EXPR :: reference :: Ljava/util/ArrayList :: v13 = p0 $null .iRuleSets::
9628 :: CALL :: call :: Ljava/lang/Object :: v15 = v13.get(v54)::
9634 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder$Transition :: v18 = v16.firstTransition(v52)::JM,9639:CL,16123
9639 :: PRED :: IF :: Z :: if (v18 != #(null)) goto 85::CD,9641:JM,16496:CD,9660:CD,9666:CD,9693:CD,9768:CD,9771:CD,9772:CD,9774
9641 :: CALL :: call :: Z :: v20 = p0 $null .addTransition(v6, v18)::CL,16320
9660 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder$Transition :: v28 = v25.nextTransition(v40, v41)::JM,9666:CL,16546
9666 :: PRED :: IF :: Z :: if (v28 == #(null)) goto 190::CD,9667:CD,9673
9667 :: CALL :: call :: Z :: v30 = p0 $null .addTransition(v6, v28)::JM,9673:CL,16320
9673 :: PRED :: IF :: Z :: if (v30 == #(0)) goto 149::CD,9660:CD,9666:CD,9674:CD,9684:CD,9768:CD,9771
9674 :: PRED :: IF :: Z :: if (v39 == #(null)) goto 149::CD,9660:CD,9666:CD,9684:CD,9768:CD,9771
9684 :: PRED :: IF :: Z :: if (v39 != #(null)) goto 120::CF,9768:CD,9685:CD,9686:CD,9771
9685 :: EXPR :: assign :: Ljava/lang/Object :: v36 = v12 - #(1)::CF,9686
9686 :: PRED :: IF :: Z :: if (v55 != v36) goto 120::CF,9768:CD,9687:CD,9771
9687 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone :: v38 = v25.buildTailZone(p1 $null )::JM,9768:CL,16692
9693 :: CALL :: call :: J :: v44 = v25.getUpperLimit(v41)::CL,16770
9698 :: EXPR :: assign :: Ljava/lang/Object :: v50 = v56 + #(1)::DD,9767
9700 :: CALL :: call :: I :: v58 = v6.size()::JM,9704
9704 :: PRED :: IF :: Z :: if (v58 != #(0)) goto 226::CD,9705:CD,9715:CD,9719
9705 :: PRED :: IF :: Z :: if (v51 == #(null)) goto 221::CD,9706:CD,9707:CD,9714
9706 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v51::DD,9602
9707 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v80 = buildFixedZone(p1 $null , #(UTC), #(0), #(0))::JM,9714:CL,16804
9714 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v80::DD,9602
9715 :: CALL :: call :: I :: v60 = v6.size()::JM,9719
9719 :: PRED :: IF :: Z :: if (v60 != #(1)) goto 273::CD,9720:CD,9747:CD,9754:CD,9758
9720 :: PRED :: IF :: Z :: if (v51 != #(null)) goto 273::CD,9721:CD,9739:CD,9746:CD,9747:CD,9754:CD,9758
9721 :: CALL :: call :: Ljava/lang/Object :: v68 = v6.get(#(0))::
9739 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v77 = buildFixedZone(p1 $null , v71, v73, v75)::JM,9746:CL,16804
9746 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v77::DD,9602
9747 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone :: v62 = create(p1 $null , p2 $null , v6, v51)::JM,9764:CL,16880
9754 :: CALL :: call :: Z :: v64 = v62.isCachable()::JM,9758:CL,17565
9758 :: PRED :: IF :: Z :: if (v64 == #(0)) goto 294::CD,9759:CD,9763:CD,9764
9759 :: CALL :: call :: Lorg/joda/time/tz/CachedDateTimeZone :: v66 = forZone(v62)::JM,9763:CL,17657
9763 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v66::DD,9602
9764 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v62::DD,9602
9765 :: EXPR :: assign :: null :: PHI v51 = v45, #(null)::DD,9705:DD,9706:DD,9720:DD,9768:DD,9772
9767 :: EXPR :: assign :: null :: PHI v54 = v50, #(0)::DD,9624:DD,9771:DD,9774
9768 :: EXPR :: assign :: null :: PHI v39 = v39, v39, v38, v51::DD,9674:DD,9684:DD,9768:DD,9772
9771 :: EXPR :: assign :: null :: PHI v55 = v55, v55, v55, v54::DD,9686:DD,9771:DD,9774
9772 :: EXPR :: assign :: null :: PHI v45 = v51, v39::DD,9765
9774 :: EXPR :: assign :: null :: PHI v56 = v54, v55::DD,9698
9866 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.getID()::CE,9867:CD,9873
9867 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.DateTimeZone.getID()::JM,9889:JM,19590:JM,19709:JM,19768:JM,28975:JM,28991:JM,29009:JM,60039
9870 :: EXPR :: reference :: Ljava/lang/String :: v3 = p0 $null .iID::DD,9873
9873 :: NORM :: compound :: Ljava/lang/String :: return v3::CF,9867
9875 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoCompiler.test(java.lang.String,org.joda.time.DateTimeZone)::CE,9876:CD,9880:CD,9884:CD,9889
9876 :: EXIT :: exit :: Z :: org.joda.time.tz.ZoneInfoCompiler.test(java.lang.String,org.joda.time.DateTimeZone)::JM,179:JM,310
9880 :: CALL :: call :: Ljava/lang/String :: v5 = p2 $null .getID()::JM,9889:CL,9866
9884 :: CALL :: call :: Z :: v7 = p1 $null .equals(v5)::JM,9889
9889 :: PRED :: IF :: Z :: if (v7 != #(0)) goto 13::CD,9890:CD,9898:CD,9911:CD,9917:CD,9922:CD,9927:CD,9932:CD,9936:CD,9941:CD,9942:CD,10222:CD,10223:CD,10224
9890 :: NORM :: compound :: Z :: return #(1)::DD,9876
9898 :: CALL :: call :: J :: v16 = v12.set(#(0 l), #(1850))::JM,10222:CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
9911 :: CALL :: call :: J :: v23 = v20.set(#(0 l), #(2050))::JM,9943:CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
9917 :: CALL :: call :: I :: v25 = p2 $null .getOffset(v16)::JM,10223:CL,18682:CL,18565:CL,18650:CL,18672:CL,18689
9922 :: CALL :: call :: I :: v27 = p2 $null .getStandardOffset(v16)::JM,9962:CL,18822:CL,18793:CL,18803:CL,18832:CL,18708
9927 :: CALL :: call :: Ljava/lang/String :: v29 = p2 $null .getNameKey(v16)::JM,10224:CL,18924:CL,18943:CL,18839:CL,18950:CL,18960
9932 :: NORM :: declaration :: Ljava/util/ArrayList :: v30 = new java.util.ArrayList::JM,10226:JM,10144
9936 :: CALL :: call :: J :: v33 = p2 $null .nextTransition(v55)::JM,9941:JM,9943:JM,10222:CL,19000:CL,19083:CL,18977:CL,18993:CL,19007
9941 :: EXPR :: assign :: Z :: v34 = v33 == v55::DD,9942
9942 :: PRED :: IF :: Z :: if (v34 == #(0)) goto 300::CD,9943:CD,9944:CD,10104:CD,10117:CD,10123:CD,10127:CD,10128:CD,10225:CD,10226
9943 :: EXPR :: assign :: Z :: v35 = v33 == v23::DD,9944
9944 :: PRED :: IF :: Z :: if (v35 <= #(0)) goto 102::CD,9946:CD,9951:CD,9956:CD,9961:CD,10104:CD,10117:CD,10123:CD,10127:CD,10128:CD,10225:CD,10226
9946 :: CALL :: call :: I :: v37 = p2 $null .getOffset(v33)::JM,9961:JM,10223:CL,18682:CL,18565:CL,18650:CL,18672:CL,18689
9951 :: CALL :: call :: I :: v39 = p2 $null .getStandardOffset(v33)::JM,9962:CL,18822:CL,18793:CL,18803:CL,18832:CL,18708
9956 :: CALL :: call :: Ljava/lang/String :: v41 = p2 $null .getNameKey(v33)::JM,10224:JM,9968:JM,10017:JM,10022:JM,10028:CL,18924:CL,18943:CL,18839:CL,18950:CL,18960
9961 :: PRED :: IF :: Z :: if (v56 != v37) goto 196::CD,9962:CD,10017
9962 :: PRED :: IF :: Z :: if (v27 != v39) goto 196::CD,9963:CD,9968:CD,10017
9963 :: CALL :: call :: Z :: v43 = v57.equals(v41)::JM,9968:JM,10224:JM,10017:JM,10022:JM,10028
9968 :: PRED :: IF :: Z :: if (v43 == #(0)) goto 196::CD,9971:CD,9975:CD,9980:CD,9984:CD,9989:JM,27297:JM,27277:CD,10003:CD,10008:CD,10012:CD,10016:CD,10017
9971 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v86 = new java.lang.StringBuilder::
9975 :: CALL :: call :: Ljava/lang/StringBuilder :: v90 = v86.append(#(*d* Error in ))::
9980 :: CALL :: call :: Ljava/lang/String :: v92 = p2 $null .getID()::CL,9866
9984 :: CALL :: call :: Ljava/lang/StringBuilder :: v94 = v90.append(v92)::
9989 :: CALL :: call :: Ljava/lang/StringBuilder :: v96 = v94.append(#( ))::
10003 :: CALL :: call :: Ljava/lang/StringBuilder :: v102 = v96.append(v97)::
10008 :: CALL :: call :: Ljava/lang/String :: v104 = v102.toString()::
10012 :: CALL :: call :: V :: v85.println(v104)::
10016 :: NORM :: compound :: Z :: return #(0)::DD,9876
10017 :: PRED :: IF :: Z :: if (v41 == #(null)) goto 218::CD,10018:CD,10022:CD,10031:CD,10035:CD,10040:CD,10044:CD,10049:JM,27297:JM,27277:CD,10063:CD,10068:CD,10073:CD,10078:CD,10082:CD,10086:JM,10224:JM,9968:JM,10028
10018 :: CALL :: call :: I :: v46 = v41.length()::JM,10224:JM,9968:JM,10022:JM,10028
10022 :: PRED :: IF :: Z :: if (v46 >= #(3)) goto 280::CD,9936:CD,9941:CD,9942:CD,10023:CD,10028:CD,10087:CD,10091:CD,10222:CD,10223:CD,10224
10023 :: CALL :: call :: Z :: v50 = #(??).equals(v41)::JM,10028:JM,10224:JM,9968:JM,10022
10028 :: PRED :: IF :: Z :: if (v50 != #(0)) goto 280::CD,9936:CD,9941:CD,9942:CD,10031:CD,10035:CD,10040:CD,10044:CD,10049:JM,27297:JM,27277:CD,10063:CD,10068:CD,10073:CD,10078:CD,10082:CD,10086:CD,10087:CD,10091:CD,10222:CD,10223:CD,10224
10031 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v59 = new java.lang.StringBuilder::
10035 :: CALL :: call :: Ljava/lang/StringBuilder :: v63 = v59.append(#(*s* Error in ))::
10040 :: CALL :: call :: Ljava/lang/String :: v65 = p2 $null .getID()::CL,9866
10044 :: CALL :: call :: Ljava/lang/StringBuilder :: v67 = v63.append(v65)::
10049 :: CALL :: call :: Ljava/lang/StringBuilder :: v70 = v67.append(#( ))::
10063 :: CALL :: call :: Ljava/lang/StringBuilder :: v76 = v70.append(v71)::
10068 :: CALL :: call :: Ljava/lang/StringBuilder :: v79 = v76.append(#(, nameKey=))::
10073 :: CALL :: call :: Ljava/lang/StringBuilder :: v81 = v79.append(v41)::JM,10224:JM,9968:JM,10022:JM,10028
10078 :: CALL :: call :: Ljava/lang/String :: v83 = v81.toString()::
10082 :: CALL :: call :: V :: v58.println(v83)::
10086 :: NORM :: compound :: Z :: return #(0)::DD,9876
10087 :: CALL :: call :: Ljava/lang/Long :: v52 = valueOf(v33)::JM,10222
10091 :: CALL :: call :: Z :: v54 = v30.add(v52)::
10104 :: CALL :: call :: J :: v111 = v109.set(#(0 l), #(2050))::JM,10225:CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
10117 :: CALL :: call :: J :: v117 = v115.set(#(0 l), #(1850))::JM,10136:CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
10123 :: CALL :: call :: I :: v119 = v30.size()::JM,10226
10127 :: EXPR :: assign :: Ljava/lang/Object :: v121 = v135 + #(-1)::DD,10128:JM,10144:DD,10226
10128 :: PRED :: IF :: Z :: if (v121 < #(0)) goto 475::CD,10129:CD,10134:CD,10135:CD,10221
10129 :: CALL :: call :: J :: v123 = p2 $null .previousTransition(v134)::JM,10225:JM,10134:JM,10150:JM,10136:CL,19324:CL,19210:CL,19194:CL,19425:CL,19317
10134 :: EXPR :: assign :: Z :: v124 = v123 == v134::DD,10135
10135 :: PRED :: IF :: Z :: if (v124 == #(0)) goto 475::CD,10136:CD,10137:CD,10221
10136 :: EXPR :: assign :: Z :: v125 = v123 == v117::DD,10137
10137 :: PRED :: IF :: Z :: if (v125 >= #(0)) goto 378::CD,10139:CD,10144:CD,10145:CD,10149:CD,10150:CD,10151:CD,10221
10139 :: CALL :: call :: Ljava/lang/Object :: v127 = v30.get(v121)::JM,10144
10144 :: EXPR :: assign :: Ljava/lang/Object :: v128 = CHECKCAST v127::JM,10149
10145 :: CALL :: call :: J :: v130 = v128.longValue()::JM,10149
10149 :: EXPR :: assign :: Ljava/lang/Object :: v132 = v130 - #(1 l)::DD,10150
10150 :: EXPR :: assign :: Z :: v133 = v132 == v123::DD,10151
10151 :: PRED :: IF :: Z :: if (v133 == #(0)) goto 471::CD,10127:CD,10128:CD,10154:CD,10158:CD,10163:CD,10167:CD,10172:JM,27297:JM,27277:CD,10186:CD,10191:CD,10206:CD,10211:CD,10215:CD,10219:CD,10225:CD,10226
10154 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v138 = new java.lang.StringBuilder::
10158 :: CALL :: call :: Ljava/lang/StringBuilder :: v142 = v138.append(#(*r* Error in ))::
10163 :: CALL :: call :: Ljava/lang/String :: v144 = p2 $null .getID()::CL,9866
10167 :: CALL :: call :: Ljava/lang/StringBuilder :: v146 = v142.append(v144)::
10172 :: CALL :: call :: Ljava/lang/StringBuilder :: v148 = v146.append(#( ))::
10186 :: CALL :: call :: Ljava/lang/StringBuilder :: v154 = v148.append(v149)::
10191 :: CALL :: call :: Ljava/lang/StringBuilder :: v157 = v154.append(#( != ))::
10206 :: CALL :: call :: Ljava/lang/StringBuilder :: v164 = v157.append(v158)::
10211 :: CALL :: call :: Ljava/lang/String :: v166 = v164.toString()::
10215 :: CALL :: call :: V :: v137.println(v166)::
10219 :: NORM :: compound :: Z :: return #(0)::DD,9876
10221 :: NORM :: compound :: Z :: return #(1)::DD,9876
10222 :: EXPR :: assign :: null :: PHI v55 = v33, v16::CF,10223:DD,9941
10223 :: EXPR :: assign :: null :: PHI v56 = v37, v25::CF,10224:DD,9961
10224 :: EXPR :: assign :: null :: PHI v57 = v41, v29::JM,9968
10225 :: EXPR :: assign :: null :: PHI v134 = v123, v111::CF,10226:DD,10134
10226 :: EXPR :: assign :: null :: PHI v135 = v121, v119::DD,10127
10347 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoCompiler.writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)::CD,10354:CD,10357:CD,10386:CD,10387:CD,10396:CD,10400:CD,10404:CD,10422:CD,10444:CD,10452:CD,10457
10354 :: CALL :: call :: Z :: v7 = verbose()::JM,10357:CL,10527
10357 :: PRED :: IF :: Z :: if (v7 == #(0)) goto 34::CF,10386:CD,10360:CD,10364:CD,10369:CD,10373:CD,10378:CD,10382
10360 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v10 = new java.lang.StringBuilder::
10364 :: CALL :: call :: Ljava/lang/StringBuilder :: v14 = v10.append(#(Writing ))::
10369 :: CALL :: call :: Ljava/lang/String :: v16 = p3 $null .getID()::CL,9866
10373 :: CALL :: call :: Ljava/lang/StringBuilder :: v18 = v14.append(v16)::
10378 :: CALL :: call :: Ljava/lang/String :: v20 = v18.toString()::
10382 :: CALL :: call :: V :: v9.println(v20)::
10386 :: NORM :: declaration :: Ljava/io/File :: v22 = new java.io.File::
10387 :: CALL :: call :: Ljava/lang/String :: v24 = p3 $null .getID()::CL,9866
10396 :: CALL :: call :: Ljava/io/File :: v27 = v22.getParentFile()::
10400 :: CALL :: call :: Z :: v29 = v27.exists()::JM,10404
10404 :: PRED :: IF :: Z :: if (v29 != #(0)) goto 68::CD,10405:CD,10409
10405 :: CALL :: call :: Ljava/io/File :: v31 = v22.getParentFile()::
10409 :: CALL :: call :: Z :: v33 = v31.mkdirs()::
10422 :: CALL :: call :: V :: p2 $null .writeTo(v37, v34)::CL,19432
10444 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v47 = readFrom(v42, v45)::CL,19535
10452 :: CALL :: call :: Z :: v50 = p3 $null .equals(v47)::JM,10457:CL,19655:CL,19567:CL,19686:CL,19745:CL,19647
10457 :: PRED :: IF :: Z :: if (v50 != #(0)) goto 176::CD,10460:CD,10464:CD,10469:CD,10473:CD,10478:CD,10483:CD,10487
10460 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v52 = new java.lang.StringBuilder::
10464 :: CALL :: call :: Ljava/lang/StringBuilder :: v56 = v52.append(#(*e* Error in ))::
10469 :: CALL :: call :: Ljava/lang/String :: v58 = p3 $null .getID()::CL,9866
10473 :: CALL :: call :: Ljava/lang/StringBuilder :: v60 = v56.append(v58)::
10478 :: CALL :: call :: Ljava/lang/StringBuilder :: v63 = v60.append(#(: Didn't read properl...))::
10483 :: CALL :: call :: Ljava/lang/String :: v65 = v63.toString()::
10487 :: CALL :: call :: V :: v51.println(v65)::
10527 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoLogger.verbose()::CE,10528:CD,10532:CD,10536:CD,10537:CD,10541
10528 :: EXIT :: exit :: Z :: org.joda.time.tz.ZoneInfoLogger.verbose()::JM,341:JM,10357:JM,17092:JM,17257
10532 :: CALL :: call :: Ljava/lang/Object :: v4 = v2.get()::JM,10536
10536 :: EXPR :: assign :: Ljava/lang/Object :: v5 = CHECKCAST v4::JM,10541
10537 :: CALL :: call :: Z :: v7 = v5.booleanValue()::JM,10541
10541 :: NORM :: compound :: Z :: return v7::DD,10528
10971 :: ENTR :: entry :: null :: org.joda.time.chrono.ISOChronology.getInstanceUTC()::CF,10972:CD,10974:CD,10976
10972 :: EXIT :: exit :: Lorg/joda/time/chrono/ISOChronology :: org.joda.time.chrono.ISOChronology.getInstanceUTC()::JM,59729
10974 :: EXPR :: reference :: Lorg/joda/time/chrono/ISOChronology :: v2 = org.joda.time.chrono.ISOChronology.INSTANCE_UTC::CF,10976
10976 :: NORM :: compound :: Lorg/joda/time/chrono/ISOChronology :: return v2::CF,10972
10978 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.year()::CE,10979:CD,10985
10979 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.year()::JM,28615:JM,36495
10982 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iYear::DD,10985
10985 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,10979
10987 :: ENTR :: entry :: null :: org.joda.time.field.OffsetDateTimeField.get(long)::CE,10988:CD,10992:CD,11000:CD,11001
10988 :: EXIT :: exit :: I :: org.joda.time.field.OffsetDateTimeField.get(long)::JM,11026:JM,11077:JM,11110:JM,11116:JM,11138:JM,11139:JM,11141:JM,11168:JM,11170:JM,11164:JM,11346:JM,11350:JM,11356:JM,16604:JM,20084:JM,20267:JM,20268:JM,20271:JM,24848:JM,24846:JM,31439:JM,31471:JM,31613:JM,31637:JM,32546:JM,56543:JM,61714:JM,61708:JM,61709
10992 :: CALL :: call :: I :: v5 = p0 $null .get(p1 $null )::JM,11000:CL,20071
10997 :: EXPR :: reference :: I :: v6 = p0 $null .iOffset::DD,11000
11000 :: EXPR :: assign :: Ljava/lang/Object :: v7 = v5 + v6::CF,11001
11001 :: NORM :: compound :: I :: return v7::DD,10988
11005 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.get(long)::CE,11006:CD,11013:CD,11021:CD,11026
11006 :: EXIT :: exit :: I :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.get(long)::JM,11026:JM,11077:JM,11110:JM,11116:JM,11138:JM,11139:JM,11141:JM,11168:JM,11170:JM,11164:JM,11346:JM,11350:JM,11356:JM,16604:JM,20084:JM,20267:JM,20268:JM,20271:JM,24848:JM,24846:JM,31439:JM,31471:JM,31613:JM,31637:JM,32546:JM,56543:JM,61714:JM,61708:JM,61709
11013 :: CALL :: call :: J :: v6 = v4.convertUTCToLocal(p1 $null )::CL,20087
11021 :: CALL :: call :: I :: v9 = v7.get(v6)::JM,11026:CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,11332
11026 :: NORM :: compound :: I :: return v9::DD,11006
11032 :: ENTR :: entry :: null :: org.joda.time.chrono.GJDayOfWeekDateTimeField.get(long)::CE,11033:CD,11040:CD,11045
11033 :: EXIT :: exit :: I :: org.joda.time.chrono.GJDayOfWeekDateTimeField.get(long)::JM,11026:JM,11077:JM,11110:JM,11116:JM,11138:JM,11139:JM,11141:JM,11168:JM,11170:JM,11164:JM,11346:JM,11350:JM,11356:JM,16604:JM,18354:JM,20084:JM,20267:JM,20268:JM,20271:JM,24848:JM,24846:JM,31439:JM,31471:JM,31613:JM,31637:JM,32546:JM,56543:JM,61714:JM,61708:JM,61709
11040 :: CALL :: call :: I :: v6 = v4.getDayOfWeek(p1 $null )::JM,11045:CL,20128
11045 :: NORM :: compound :: I :: return v6::CF,11033
11048 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicMonthOfYearDateTimeField.get(long)::CE,11049:CD,11056:CD,11061
11049 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicMonthOfYearDateTimeField.get(long)::JM,11026:JM,11077:JM,11110:JM,11116:JM,11138:JM,11139:JM,11141:JM,11168:JM,11170:JM,11164:JM,11346:JM,11350:JM,11356:JM,16604:JM,20084:JM,20267:JM,20268:JM,20271:JM,24848:JM,24846:JM,31439:JM,31471:JM,31613:JM,31637:JM,32546:JM,56543:JM,61714:JM,61708:JM,61709
11056 :: CALL :: call :: I :: v6 = v4.getMonthOfYear(p1 $null )::JM,11061:CL,20172
11061 :: NORM :: compound :: I :: return v6::DD,11049
11064 :: ENTR :: entry :: null :: org.joda.time.field.DelegatedDateTimeField.get(long)::CE,11065:CD,11072:CD,11077
11065 :: EXIT :: exit :: I :: org.joda.time.field.DelegatedDateTimeField.get(long)::JM,11026:JM,11077:JM,11110:JM,11116:JM,11138:JM,11139:JM,11141:JM,11168:JM,11170:JM,11164:JM,11346:JM,11350:JM,11356:JM,16604:JM,20084:JM,20267:JM,20268:JM,20271:JM,24848:JM,24846:JM,31439:JM,31471:JM,31613:JM,31637:JM,32546:JM,56543:JM,61714:JM,61708:JM,61709
11072 :: CALL :: call :: I :: v6 = v4.get(p1 $null )::JM,11077:CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,11332
11077 :: NORM :: compound :: I :: return v6::DD,11065
11080 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicWeekyearDateTimeField.get(long)::CE,11081:CD,11088:CD,11093
11081 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicWeekyearDateTimeField.get(long)::JM,11026:JM,11077:JM,11110:JM,11116:JM,11138:JM,11139:JM,11141:JM,11168:JM,11170:JM,11164:JM,11346:JM,11350:JM,11356:JM,16604:JM,18094:JM,20084:JM,20267:JM,20268:JM,20271:JM,24848:JM,24846:JM,31439:JM,31471:JM,31613:JM,31637:JM,32546:JM,56543:JM,61714:JM,61708:JM,61709
11088 :: CALL :: call :: I :: v6 = v4.getWeekyear(p1 $null )::JM,11093:CL,20193
11093 :: NORM :: compound :: I :: return v6::DD,11081
11096 :: ENTR :: entry :: null :: org.joda.time.field.ZeroIsMaxDateTimeField.get(long)::CE,11097:CD,11105:CD,11110:CD,11115:CD,11116
11097 :: EXIT :: exit :: I :: org.joda.time.field.ZeroIsMaxDateTimeField.get(long)::JM,11026:JM,11077:JM,11110:JM,11116:JM,11138:JM,11139:JM,11141:JM,11168:JM,11170:JM,11164:JM,11346:JM,11350:JM,11356:JM,16604:JM,20084:JM,20267:JM,20268:JM,20271:JM,24848:JM,24846:JM,31439:JM,31471:JM,31613:JM,31637:JM,32546:JM,56543:JM,61714:JM,61708:JM,61709
11105 :: CALL :: call :: I :: v7 = v5.get(p1 $null )::JM,11110:JM,11116:CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,20253:CL,11332
11110 :: PRED :: IF :: Z :: if (v7 != #(0)) goto 19::CF,11116:CD,11111
11111 :: CALL :: call :: I :: v10 = p0 $null .getMaximumValue()::JM,11116:CL,20279
11115 :: NORM :: compound :: I :: return v11::DD,11097
11116 :: EXPR :: assign :: null :: PHI v11 = v7, v10::CF,11115
11124 :: ENTR :: entry :: null :: org.joda.time.chrono.GJYearOfEraDateTimeField.get(long)::CE,11125:CD,11133:CD,11138:CD,11140:CD,11141
11125 :: EXIT :: exit :: I :: org.joda.time.chrono.GJYearOfEraDateTimeField.get(long)::JM,11026:JM,11077:JM,11110:JM,11116:JM,11138:JM,11139:JM,11141:JM,11168:JM,11170:JM,11164:JM,11346:JM,11350:JM,11356:JM,16604:JM,20084:JM,20267:JM,20268:JM,20271:JM,24848:JM,24846:JM,31439:JM,31471:JM,31613:JM,31637:JM,32546:JM,56543:JM,61714:JM,61708:JM,61709
11133 :: CALL :: call :: I :: v7 = v5.get(p1 $null )::JM,11138:JM,11139:JM,11141:CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,20253:CL,11332
11138 :: PRED :: IF :: Z :: if (v7 > #(0)) goto 18::CF,11141:CD,11139
11139 :: EXPR :: assign :: Ljava/lang/Object :: v10 = #(1) - v7::DD,11141
11140 :: NORM :: compound :: I :: return v11::DD,11125
11141 :: EXPR :: assign :: null :: PHI v11 = v7, v10::CF,11140
11150 :: ENTR :: entry :: null :: org.joda.time.field.DividedDateTimeField.get(long)::CE,11151:CD,11159:CD,11164
11151 :: EXIT :: exit :: I :: org.joda.time.field.DividedDateTimeField.get(long)::JM,11026:JM,11077:JM,11110:JM,11116:JM,11138:JM,11139:JM,11141:JM,11168:JM,11170:JM,11164:JM,11346:JM,11350:JM,11356:JM,16604:JM,20084:JM,20267:JM,20268:JM,20271:JM,24848:JM,24846:JM,31439:JM,31471:JM,31613:JM,31637:JM,32546:JM,56543:JM,61714:JM,61708:JM,61709
11159 :: CALL :: call :: I :: v7 = v5.get(p1 $null )::JM,11168:JM,11170:JM,11164:CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,20253:CL,11332
11164 :: PRED :: IF :: Z :: if (v7 < #(0)) goto 22::CD,11168:CD,11169:CD,11170:CD,11174:CD,11175:CD,11176
11165 :: EXPR :: reference :: I :: v14 = p0 $null .iDivisor::DD,11168
11168 :: EXPR :: assign :: Ljava/lang/Object :: v15 = v7 / v14::CF,11169
11169 :: NORM :: compound :: I :: return v15::DD,11151
11170 :: EXPR :: assign :: Ljava/lang/Object :: v10 = v7 + #(1)::DD,11174
11171 :: EXPR :: reference :: I :: v11 = p0 $null .iDivisor::DD,11174
11174 :: EXPR :: assign :: Ljava/lang/Object :: v12 = v10 / v11::DD,11175
11175 :: EXPR :: assign :: Ljava/lang/Object :: v13 = v12 - #(1)::CF,11176
11176 :: NORM :: compound :: I :: return v13::DD,11151
11188 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicDayOfYearDateTimeField.get(long)::CE,11189:CD,11196:CD,11201
11189 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicDayOfYearDateTimeField.get(long)::JM,11026:JM,11077:JM,11110:JM,11116:JM,11138:JM,11139:JM,11141:JM,11168:JM,11170:JM,11164:JM,11346:JM,11350:JM,11356:JM,16604:JM,18354:JM,20084:JM,20267:JM,20268:JM,20271:JM,24848:JM,24846:JM,31439:JM,31471:JM,31613:JM,31637:JM,32546:JM,56543:JM,61714:JM,61708:JM,61709
11196 :: CALL :: call :: I :: v6 = v4.getDayOfYear(p1 $null )::JM,11201:CL,20295
11201 :: NORM :: compound :: I :: return v6::DD,11189
11204 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.get(long)::CE,11205:CD,11212:CD,11217
11205 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.get(long)::JM,11026:JM,11077:JM,11110:JM,11116:JM,11138:JM,11139:JM,11141:JM,11168:JM,11170:JM,11164:JM,11346:JM,11350:JM,11356:JM,16604:JM,18354:JM,20084:JM,20267:JM,20268:JM,20271:JM,24848:JM,24846:JM,31439:JM,31471:JM,31613:JM,31637:JM,32546:JM,56543:JM,61714:JM,61708:JM,61709
11212 :: CALL :: call :: I :: v6 = v4.getWeekOfWeekyear(p1 $null )::JM,11217:CL,20316
11217 :: NORM :: compound :: I :: return v6::DD,11205
11220 :: ENTR :: entry :: null :: org.joda.time.chrono.GJEraDateTimeField.get(long)::CE,11221:CD,11228:CD,11233
11221 :: EXIT :: exit :: I :: org.joda.time.chrono.GJEraDateTimeField.get(long)::JM,11026:JM,11077:JM,11110:JM,11116:JM,11138:JM,11139:JM,11141:JM,11168:JM,11170:JM,11164:JM,11346:JM,11350:JM,11356:JM,16604:JM,18528:JM,20084:JM,20267:JM,20268:JM,20271:JM,24848:JM,24846:JM,31439:JM,31471:JM,31613:JM,31637:JM,32546:JM,48974:JM,56543:JM,61714:JM,61708:JM,61709
11228 :: CALL :: call :: I :: v6 = v4.getYear(p1 $null )::JM,11233:CL,20337
11233 :: PRED :: IF :: Z :: if (v6 > #(0)) goto 14::CD,11234:CD,11235
11234 :: NORM :: compound :: I :: return #(0)::DD,11221
11235 :: NORM :: compound :: I :: return #(1)::DD,11221
11241 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicYearDateTimeField.get(long)::CE,11242:CD,11249:CD,11254
11242 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicYearDateTimeField.get(long)::JM,11026:JM,11077:JM,11110:JM,11116:JM,11138:JM,11139:JM,11141:JM,11168:JM,11170:JM,11164:JM,11346:JM,11350:JM,11356:JM,16604:JM,20084:JM,20267:JM,20268:JM,20271:JM,24848:JM,24846:JM,31439:JM,31471:JM,31613:JM,31637:JM,32546:JM,56543:JM,61714:JM,61708:JM,61709
11249 :: CALL :: call :: I :: v6 = v4.getYear(p1 $null )::JM,11254:CL,20337
11254 :: NORM :: compound :: I :: return v6::DD,11242
11257 :: ENTR :: entry :: null :: org.joda.time.field.PreciseDateTimeField.get(long)::CE,11258:CD,11262:CD,11263:JM,11280:JM,11268
11258 :: EXIT :: exit :: I :: org.joda.time.field.PreciseDateTimeField.get(long)::JM,11026:JM,11077:JM,11110:JM,11116:JM,11138:JM,11139:JM,11141:JM,11168:JM,11170:JM,11164:JM,11346:JM,11350:JM,11356:JM,16604:JM,17851:JM,18354:JM,20084:JM,20267:JM,20268:JM,20271:JM,24848:JM,24846:JM,31439:JM,31471:JM,31613:JM,31637:JM,32546:JM,56543:JM,61714:JM,61708:JM,61709
11262 :: EXPR :: assign :: Z :: v5 = p1 $null  == #(0 l)::DD,11263
11263 :: PRED :: IF :: Z :: if (v5 < #(0)) goto 21::CD,11264:CD,11268:CD,11272:CD,11273:CD,11274:CD,11275:CD,11279:CD,11280:CD,11281:CD,11285:CD,11289:CD,11290:CD,11291:CD,11292:CD,11293
11264 :: CALL :: call :: J :: v21 = p0 $null .getUnitMillis()::JM,11268:CL,20430
11268 :: EXPR :: assign :: Ljava/lang/Object :: v22 = p1 $null  / v21::DD,11273
11269 :: EXPR :: reference :: I :: v23 = p0 $null .iRange::DD,11272
11272 :: EXPR :: assign :: J :: v24 = CONVERT I to J v23::CF,11273
11273 :: EXPR :: assign :: Ljava/lang/Object :: v25 = v22 % v24::CF,11274
11274 :: EXPR :: assign :: I :: v26 = CONVERT J to I v25::CF,11275
11275 :: NORM :: compound :: I :: return v26::CF,11258
11276 :: EXPR :: reference :: I :: v7 = p0 $null .iRange::DD,11279
11279 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v7 - #(1)::DD,11292:CF,11280
11280 :: EXPR :: assign :: Ljava/lang/Object :: v11 = p1 $null  + #(1 l)::DD,11285
11281 :: CALL :: call :: J :: v13 = p0 $null .getUnitMillis()::JM,11285:CL,20430
11285 :: EXPR :: assign :: Ljava/lang/Object :: v14 = v11 / v13::DD,11290
11286 :: EXPR :: reference :: I :: v15 = p0 $null .iRange::DD,11289
11289 :: EXPR :: assign :: J :: v16 = CONVERT I to J v15::CF,11290
11290 :: EXPR :: assign :: Ljava/lang/Object :: v17 = v14 % v16::CF,11291
11291 :: EXPR :: assign :: I :: v18 = CONVERT J to I v17::CF,11292
11292 :: EXPR :: assign :: Ljava/lang/Object :: v19 = v9 + v18::CF,11293
11293 :: NORM :: compound :: I :: return v19::CF,11258
11306 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.get(long)::CE,11307:CD,11311
11307 :: EXIT :: exit :: I :: org.joda.time.field.UnsupportedDateTimeField.get(long)::JM,11026:JM,11077:JM,11110:JM,11116:JM,11138:JM,11139:JM,11141:JM,11168:JM,11170:JM,11164:JM,11346:JM,11350:JM,11356:JM,16604:JM,20084:JM,20267:JM,20268:JM,20271:JM,24848:JM,24846:JM,31439:JM,31471:JM,31613:JM,31637:JM,32546:JM,56543:JM,61714:JM,61708:JM,61709
11311 :: CALL :: call :: Ljava/lang/UnsupportedOperationException :: v5 = p0 $null .unsupported()::CL,20439
11316 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicDayOfMonthDateTimeField.get(long)::CE,11317:CD,11324:CD,11329
11317 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicDayOfMonthDateTimeField.get(long)::JM,11026:JM,11077:JM,11110:JM,11116:JM,11138:JM,11139:JM,11141:JM,11168:JM,11170:JM,11164:JM,11346:JM,11350:JM,11356:JM,16604:JM,18354:JM,20084:JM,20267:JM,20268:JM,20271:JM,24848:JM,24846:JM,31439:JM,31471:JM,31613:JM,31637:JM,32546:JM,56543:JM,61714:JM,61708:JM,61709
11324 :: CALL :: call :: I :: v6 = v4.getDayOfMonth(p1 $null )::JM,11329:CL,20474
11329 :: NORM :: compound :: I :: return v6::DD,11317
11332 :: ENTR :: entry :: null :: org.joda.time.field.RemainderDateTimeField.get(long)::CE,11333:CD,11341:CD,11346
11333 :: EXIT :: exit :: I :: org.joda.time.field.RemainderDateTimeField.get(long)::JM,11026:JM,11077:JM,11110:JM,11116:JM,11138:JM,11139:JM,11141:JM,11168:JM,11170:JM,11164:JM,11346:JM,11350:JM,11356:JM,16604:JM,20084:JM,20267:JM,20268:JM,20271:JM,24848:JM,24846:JM,31439:JM,31471:JM,31613:JM,31637:JM,32546:JM,56543:JM,61714:JM,61708:JM,61709
11341 :: CALL :: call :: I :: v7 = v5.get(p1 $null )::JM,11346:JM,11350:JM,11356:CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,20253:CL,11332
11346 :: PRED :: IF :: Z :: if (v7 < #(0)) goto 21::CD,11350:CD,11351:CD,11355:CD,11356:CD,11360:CD,11361:CD,11362
11347 :: EXPR :: reference :: I :: v16 = p0 $null .iDivisor::DD,11350
11350 :: EXPR :: assign :: Ljava/lang/Object :: v17 = v7 % v16::CF,11351
11351 :: NORM :: compound :: I :: return v17::DD,11333
11352 :: EXPR :: reference :: I :: v9 = p0 $null .iDivisor::DD,11355
11355 :: EXPR :: assign :: Ljava/lang/Object :: v11 = v9 - #(1)::DD,11361:CF,11356
11356 :: EXPR :: assign :: Ljava/lang/Object :: v12 = v7 + #(1)::DD,11360
11357 :: EXPR :: reference :: I :: v13 = p0 $null .iDivisor::DD,11360
11360 :: EXPR :: assign :: Ljava/lang/Object :: v14 = v12 % v13::CF,11361
11361 :: EXPR :: assign :: Ljava/lang/Object :: v15 = v11 + v14::CF,11362
11362 :: NORM :: compound :: I :: return v15::DD,11333
11480 :: ENTR :: entry :: null :: org.joda.time.chrono.GregorianChronology.getInstance(org.joda.time.DateTimeZone)::CD,11484
11484 :: CALL :: call :: Lorg/joda/time/chrono/GregorianChronology :: v5 = getInstance(p1 $null , #(4))::CL,20794
11492 :: ENTR :: entry :: null :: org.joda.time.DurationFieldType.seconds()::CF,11493:CD,11495:CD,11497
11493 :: EXIT :: exit :: Lorg/joda/time/DurationFieldType :: org.joda.time.DurationFieldType.seconds()::JM,46367
11495 :: EXPR :: reference :: Lorg/joda/time/DurationFieldType :: v2 = org.joda.time.DurationFieldType.SECONDS_TYPE::CF,11497
11497 :: NORM :: compound :: Lorg/joda/time/DurationFieldType :: return v2::CF,11493
11509 :: EXPR :: modify :: J :: p0 $null .iUnitMillis = p2 $null ::
11517 :: ENTR :: entry :: null :: org.joda.time.DurationFieldType.minutes()::CF,11518:CD,11520:CD,11522
11518 :: EXIT :: exit :: Lorg/joda/time/DurationFieldType :: org.joda.time.DurationFieldType.minutes()::JM,46360
11520 :: EXPR :: reference :: Lorg/joda/time/DurationFieldType :: v2 = org.joda.time.DurationFieldType.MINUTES_TYPE::CF,11522
11522 :: NORM :: compound :: Lorg/joda/time/DurationFieldType :: return v2::CF,11518
11524 :: ENTR :: entry :: null :: org.joda.time.DurationFieldType.hours()::CF,11525:CD,11527:CD,11529
11525 :: EXIT :: exit :: Lorg/joda/time/DurationFieldType :: org.joda.time.DurationFieldType.hours()::JM,46353
11527 :: EXPR :: reference :: Lorg/joda/time/DurationFieldType :: v2 = org.joda.time.DurationFieldType.HOURS_TYPE::CF,11529
11529 :: NORM :: compound :: Lorg/joda/time/DurationFieldType :: return v2::CF,11525
11538 :: ENTR :: entry :: null :: org.joda.time.DurationFieldType.days()::CF,11539:CD,11541:CD,11543
11539 :: EXIT :: exit :: Lorg/joda/time/DurationFieldType :: org.joda.time.DurationFieldType.days()::JM,25097:JM,46346
11541 :: EXPR :: reference :: Lorg/joda/time/DurationFieldType :: v2 = org.joda.time.DurationFieldType.DAYS_TYPE::CF,11543
11543 :: NORM :: compound :: Lorg/joda/time/DurationFieldType :: return v2::CF,11539
11545 :: ENTR :: entry :: null :: org.joda.time.DurationFieldType.weeks()::CF,11546:CD,11548:CD,11550
11546 :: EXIT :: exit :: Lorg/joda/time/DurationFieldType :: org.joda.time.DurationFieldType.weeks()::JM,46339
11548 :: EXPR :: reference :: Lorg/joda/time/DurationFieldType :: v2 = org.joda.time.DurationFieldType.WEEKS_TYPE::CF,11550
11550 :: NORM :: compound :: Lorg/joda/time/DurationFieldType :: return v2::CF,11546
11576 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v21 = new java.lang.IllegalArgumentException::JM,29378:JM,20996:JM,11605:JM,21014:JM,21002:JM,21020:JM,29372
11582 :: CALL :: call :: J :: v11 = p3 $null .getUnitMillis()::JM,11590:CL,21151:CL,21164:CL,21125:CL,21116:CL,21131:CL,21170
11586 :: CALL :: call :: J :: v13 = p0 $null .getUnitMillis()::JM,11590:CL,20430
11590 :: EXPR :: assign :: Ljava/lang/Object :: v14 = v11 / v13::CF,11591
11591 :: EXPR :: assign :: I :: v15 = CONVERT J to I v14::DD,11592
11592 :: EXPR :: modify :: I :: p0 $null .iRange = v15::
11599 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v18 = new java.lang.IllegalArgumentException::JM,29378:JM,20996:JM,11605:JM,21014:JM,21002:JM,21020:JM,29372
11605 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iRangeField = p3 $null ::
11695 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v9 = new java.lang.IllegalArgumentException::JM,29378:JM,21204:JM,21193:JM,21210:JM,29372
11760 :: ENTR :: entry :: null :: org.joda.time.DurationFieldType.months()::CF,11761:CD,11763:CD,11765
11761 :: EXIT :: exit :: Lorg/joda/time/DurationFieldType :: org.joda.time.DurationFieldType.months()::JM,25090:JM,46332
11763 :: EXPR :: reference :: Lorg/joda/time/DurationFieldType :: v2 = org.joda.time.DurationFieldType.MONTHS_TYPE::CF,11765
11765 :: NORM :: compound :: Lorg/joda/time/DurationFieldType :: return v2::CF,11761
11774 :: ENTR :: entry :: null :: org.joda.time.DurationFieldType.years()::CF,11775:CD,11777:CD,11779
11775 :: EXIT :: exit :: Lorg/joda/time/DurationFieldType :: org.joda.time.DurationFieldType.years()::JM,25083:JM,46325
11777 :: EXPR :: reference :: Lorg/joda/time/DurationFieldType :: v2 = org.joda.time.DurationFieldType.YEARS_TYPE::CF,11779
11779 :: NORM :: compound :: Lorg/joda/time/DurationFieldType :: return v2::CF,11775
11805 :: EXPR :: modify :: B :: p0 $null .iOrdinal = p2 $null ::
11834 :: EXPR :: modify :: B :: p0 $null .iOrdinal = p2 $null ::
11837 :: EXPR :: modify :: Lorg/joda/time/DurationFieldType :: p0 $null .iUnitType = p3 $null ::
11840 :: EXPR :: modify :: Lorg/joda/time/DurationFieldType :: p0 $null .iRangeType = p4 $null ::
11852 :: ENTR :: entry :: null :: org.joda.time.DurationFieldType.millis()::CF,11853:CD,11855:CD,11857
11853 :: EXIT :: exit :: Lorg/joda/time/DurationFieldType :: org.joda.time.DurationFieldType.millis()::JM,46374
11855 :: EXPR :: reference :: Lorg/joda/time/DurationFieldType :: v2 = org.joda.time.DurationFieldType.MILLIS_TYPE::CF,11857
11857 :: NORM :: compound :: Lorg/joda/time/DurationFieldType :: return v2::CF,11853
11859 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.yearElement()::CD,11862:CD,11864
11862 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.ye::DD,11864
11864 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 23::JM,21295:CD,11869:CD,11875
11869 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.appendYear(#(4), #(9))::CL,21306
11875 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = v10.toFormatter()::CL,21326
11888 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.monthElement()::CD,11891:CD,11893
11891 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.mye::DD,11893
11893 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 26::JM,21295:CD,11898:CD,11903:CD,11908
11898 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v9 = v5.appendLiteral(#(45))::CL,21386
11903 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v12 = v9.appendMonthOfYear(#(2))::CL,21405
11908 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v14 = v12.toFormatter()::CL,21326
11921 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.dayOfMonthElement()::CD,11924:CD,11926
11924 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.dme::DD,11926
11926 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 26::JM,21295:CD,11931:CD,11936:CD,11941
11931 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v9 = v5.appendLiteral(#(45))::CL,21386
11936 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v12 = v9.appendDayOfMonth(#(2))::CL,21424
11941 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v14 = v12.toFormatter()::CL,21326
11954 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.weekyearElement()::CD,11957:CD,11959
11957 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.we::DD,11959
11959 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 23::JM,21295:CD,11964:CD,11970
11964 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.appendWeekyear(#(4), #(9))::CL,21443
11970 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = v10.toFormatter()::CL,21326
11983 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.weekElement()::CD,11986:CD,11988
11986 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.wwe::DD,11988
11988 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 26::JM,21295:CD,11993:CD,11998:CD,12003
11993 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v9 = v5.appendLiteral(#(-W))::CL,21463
11998 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v12 = v9.appendWeekOfWeekyear(#(2))::CL,21519
12003 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v14 = v12.toFormatter()::CL,21326
12016 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.dayOfWeekElement()::CD,12019:CD,12021
12019 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.dwe::DD,12021
12021 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 26::JM,21295:CD,12026:CD,12031:CD,12036
12026 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v9 = v5.appendLiteral(#(45))::CL,21386
12031 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v12 = v9.appendDayOfWeek(#(1))::CL,21538
12036 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v14 = v12.toFormatter()::CL,21326
12049 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.dayOfYearElement()::CD,12052:CD,12054
12052 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.dye::DD,12054
12054 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 26::JM,21295:CD,12059:CD,12064:CD,12069
12059 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v9 = v5.appendLiteral(#(45))::CL,21386
12064 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v12 = v9.appendDayOfYear(#(3))::CL,21557
12069 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v14 = v12.toFormatter()::CL,21326
12082 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.hourElement()::CD,12085:CD,12087
12085 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.hde::DD,12087
12087 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 21::JM,21295:CD,12092:CD,12097
12092 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v9 = v5.appendHourOfDay(#(2))::CL,21576
12097 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v11 = v9.toFormatter()::CL,21326
12109 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.minuteElement()::CD,12112:CD,12114
12112 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.mhe::DD,12114
12114 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 26::JM,21295:CD,12119:CD,12124:CD,12129
12119 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v9 = v5.appendLiteral(#(58))::CL,21386
12124 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v12 = v9.appendMinuteOfHour(#(2))::CL,21595
12129 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v14 = v12.toFormatter()::CL,21326
12142 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.secondElement()::CD,12145:CD,12147
12145 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.sme::DD,12147
12147 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 26::JM,21295:CD,12152:CD,12157:CD,12162
12152 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v9 = v5.appendLiteral(#(58))::CL,21386
12157 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v12 = v9.appendSecondOfMinute(#(2))::CL,21614
12162 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v14 = v12.toFormatter()::CL,21326
12175 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.fractionElement()::CD,12178:CD,12180
12178 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.fse::DD,12180
12180 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 28::JM,21295:CD,12185:CD,12190:CD,12196
12185 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v9 = v5.appendLiteral(#(46))::CL,21386
12190 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v13 = v9.appendFractionOfSecond(#(3), #(9))::CL,21633
12196 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v15 = v13.toFormatter()::CL,21326
12210 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.offsetElement()::CD,12213:CD,12215
12213 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.ze::DD,12215
12215 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 25::JM,21295:CD,12220:CD,12228
12220 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v12 = v5.appendTimeZoneOffset(#(Z), #(1), #(2), #(4))::CL,21653
12228 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v14 = v12.toFormatter()::CL,21326
12243 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.literalTElement()::CD,12246:CD,12248
12246 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.lte::DD,12248
12248 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 22::JM,21295:CD,12253:CD,12258
12253 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v9 = v5.appendLiteral(#(84))::CL,21386
12258 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v11 = v9.toFormatter()::CL,21326
12270 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.yearMonth()::CD,12273:CD,12275
12273 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.ym::DD,12275
12275 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,12280:CD,12283:CD,12288:CD,12291:CD,12296
12280 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = yearElement()::CL,11859
12283 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
12288 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = monthElement()::CL,11888
12291 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
12296 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
12307 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.yearMonthDay()::CD,12310:CD,12312
12310 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.ymd::DD,12312
12312 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 35::JM,21295:CD,12317:CD,12320:CD,12325:CD,12328:CD,12333:CD,12336:CD,12341
12317 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = yearElement()::CL,11859
12320 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
12325 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = monthElement()::CL,11888
12328 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
12333 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = dayOfMonthElement()::CL,11921
12336 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v18 = v14.append(v16)::CL,21683
12341 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v20 = v18.toFormatter()::CL,21326
12352 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.weekyearWeek()::CD,12355:CD,12357
12355 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.ww::DD,12357
12357 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,12362:CD,12365:CD,12370:CD,12373:CD,12378
12362 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = weekyearElement()::CL,11954
12365 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
12370 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = weekElement()::CL,11983
12373 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
12378 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
12389 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.weekyearWeekDay()::CD,12392:CD,12394
12392 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.wwd::DD,12394
12394 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 35::JM,21295:CD,12399:CD,12402:CD,12407:CD,12410:CD,12415:CD,12418:CD,12423
12399 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = weekyearElement()::CL,11954
12402 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
12407 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = weekElement()::CL,11983
12410 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
12415 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = dayOfWeekElement()::CL,12016
12418 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v18 = v14.append(v16)::CL,21683
12423 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v20 = v18.toFormatter()::CL,21326
12434 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.hourMinute()::CD,12437:CD,12439
12437 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.hm::DD,12439
12439 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,12444:CD,12447:CD,12452:CD,12455:CD,12460
12444 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = hourElement()::CL,12082
12447 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
12452 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = minuteElement()::CL,12109
12455 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
12460 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
12471 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.hourMinuteSecond()::CD,12474:CD,12476
12474 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.hms::DD,12476
12476 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 35::JM,21295:CD,12481:CD,12484:CD,12489:CD,12492:CD,12497:CD,12500:CD,12505
12481 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = hourElement()::CL,12082
12484 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
12489 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = minuteElement()::CL,12109
12492 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
12497 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = secondElement()::CL,12142
12500 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v18 = v14.append(v16)::CL,21683
12505 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v20 = v18.toFormatter()::CL,21326
12516 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.hourMinuteSecondMillis()::CD,12519:CD,12521
12519 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.hmsl::DD,12521
12521 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 45::JM,21295:CD,12526:CD,12529:CD,12534:CD,12537:CD,12542:CD,12545:CD,12550:CD,12555:CD,12561
12526 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = hourElement()::CL,12082
12529 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
12534 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = minuteElement()::CL,12109
12537 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
12542 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = secondElement()::CL,12142
12545 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v18 = v14.append(v16)::CL,21683
12550 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v21 = v18.appendLiteral(#(46))::CL,21386
12555 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v24 = v21.appendFractionOfSecond(#(3), #(3))::CL,21633
12561 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v26 = v24.toFormatter()::CL,21326
12575 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.hourMinuteSecondFraction()::CD,12578:CD,12580
12578 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.hmsf::DD,12580
12580 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 41::JM,21295:CD,12585:CD,12588:CD,12593:CD,12596:CD,12601:CD,12604:CD,12609:CD,12612:CD,12617
12585 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = hourElement()::CL,12082
12588 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
12593 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = minuteElement()::CL,12109
12596 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
12601 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = secondElement()::CL,12142
12604 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v18 = v14.append(v16)::CL,21683
12609 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v20 = fractionElement()::CL,12175
12612 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v22 = v18.append(v20)::CL,21683
12617 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v24 = v22.toFormatter()::CL,21326
12628 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.dateHour()::CD,12631:CD,12633
12631 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.dh::DD,12633
12633 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 35::JM,21295:CD,12641:CD,12646:CD,12649:CD,12657:CD,12662
12641 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
12646 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = literalTElement()::CL,12243
12649 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
12657 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v18 = v14.append(v16)::CL,21683
12662 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v20 = v18.toFormatter()::CL,21326
12673 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.dateHourMinute()::CD,12676:CD,12678
12676 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.dhm::DD,12678
12678 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 35::JM,21295:CD,12686:CD,12691:CD,12694:CD,12699:CD,12702:CD,12707
12686 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
12691 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = literalTElement()::CL,12243
12694 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
12699 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = hourMinute()::CL,12434
12702 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v18 = v14.append(v16)::CL,21683
12707 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v20 = v18.toFormatter()::CL,21326
12718 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.dateHourMinuteSecond()::CD,12721:CD,12723
12721 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.dhms::DD,12723
12723 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 35::JM,21295:CD,12731:CD,12736:CD,12739:CD,12744:CD,12747:CD,12752
12731 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
12736 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = literalTElement()::CL,12243
12739 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
12744 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = hourMinuteSecond()::CL,12471
12747 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v18 = v14.append(v16)::CL,21683
12752 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v20 = v18.toFormatter()::CL,21326
12763 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.dateHourMinuteSecondMillis()::CD,12766:CD,12768
12766 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.dhmsl::DD,12768
12768 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 35::JM,21295:CD,12776:CD,12781:CD,12784:CD,12789:CD,12792:CD,12797
12776 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
12781 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = literalTElement()::CL,12243
12784 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
12789 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = hourMinuteSecondMillis()::CL,12516
12792 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v18 = v14.append(v16)::CL,21683
12797 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v20 = v18.toFormatter()::CL,21326
12808 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.dateHourMinuteSecondFraction()::CD,12811:CD,12813
12811 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.dhmsf::DD,12813
12813 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 35::JM,21295:CD,12821:CD,12826:CD,12829:CD,12834:CD,12837:CD,12842
12821 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
12826 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = literalTElement()::CL,12243
12829 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
12834 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = hourMinuteSecondFraction()::CL,12575
12837 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v18 = v14.append(v16)::CL,21683
12842 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v20 = v18.toFormatter()::CL,21326
12853 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.time()::CD,12856:CD,12858
12856 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.t::DD,12858
12858 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,12863:CD,12866:CD,12871:CD,12874:CD,12879
12863 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = hourMinuteSecondFraction()::CL,12575
12866 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
12871 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = offsetElement()::CL,12210
12874 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
12879 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
12890 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.timeNoMillis()::CD,12893:CD,12895
12893 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.tx::DD,12895
12895 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,12900:CD,12903:CD,12908:CD,12911:CD,12916
12900 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = hourMinuteSecond()::CL,12471
12903 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
12908 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = offsetElement()::CL,12210
12911 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
12916 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
12927 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.tTime()::CD,12930:CD,12932
12930 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.tt::DD,12932
12932 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,12937:CD,12940:CD,12945:CD,12948:CD,12953
12937 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = literalTElement()::CL,12243
12940 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
12945 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = time()::CL,12853
12948 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
12953 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
12964 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.tTimeNoMillis()::CD,12967:CD,12969
12967 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.ttx::DD,12969
12969 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,12974:CD,12977:CD,12982:CD,12985:CD,12990
12974 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = literalTElement()::CL,12243
12977 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
12982 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = timeNoMillis()::CL,12890
12985 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
12990 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
13001 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.dateTime()::CD,13004:CD,13006
13004 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.dt::DD,13006
13006 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,13014:CD,13019:CD,13022:CD,13027
13014 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
13019 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = tTime()::CL,12927
13022 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
13027 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
13038 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.dateTimeNoMillis()::CD,13041:CD,13043
13041 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.dtx::DD,13043
13043 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,13051:CD,13056:CD,13059:CD,13064
13051 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
13056 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = tTimeNoMillis()::CL,12964
13059 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
13064 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
13075 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.weekDateTime()::CD,13078:CD,13080
13078 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.wdt::DD,13080
13080 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,13088:CD,13093:CD,13096:CD,13101
13088 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
13093 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = tTime()::CL,12927
13096 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
13101 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
13112 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.weekDateTimeNoMillis()::CD,13115:CD,13117
13115 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.wdtx::DD,13117
13117 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,13125:CD,13130:CD,13133:CD,13138
13125 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
13130 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = tTimeNoMillis()::CL,12964
13133 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
13138 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
13149 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.ordinalDate()::CD,13152:CD,13154
13152 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.od::DD,13154
13154 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,13159:CD,13162:CD,13167:CD,13170:CD,13175
13159 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = yearElement()::CL,11859
13162 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
13167 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = dayOfYearElement()::CL,12049
13170 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
13175 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
13186 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.ordinalDateTime()::CD,13189:CD,13191
13189 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.odt::DD,13191
13191 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,13196:CD,13199:CD,13204:CD,13207:CD,13212
13196 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = ordinalDate()::CL,13149
13199 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
13204 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = tTime()::CL,12927
13207 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
13212 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
13223 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.ordinalDateTimeNoMillis()::CD,13226:CD,13228
13226 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.odtx::DD,13228
13228 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,13233:CD,13236:CD,13241:CD,13244:CD,13249
13233 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = ordinalDate()::CL,13149
13236 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
13241 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = tTimeNoMillis()::CL,12964
13244 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
13249 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
13260 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.basicDate()::CD,13263:CD,13265
13263 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.bd::DD,13265
13265 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 36::JM,21295:CD,13270:CD,13279:CD,13288:CD,13294
13270 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v9 = v5.appendYear(#(4), #(4))::CL,21306
13279 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v9.appendFixedDecimal(v11, #(2))::CL,21743
13288 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v18 = v14.appendFixedDecimal(v16, #(2))::CL,21743
13294 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v20 = v18.toFormatter()::CL,21326
13309 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.basicTime()::CD,13312:CD,13314
13312 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.bt::DD,13314
13314 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 57::JM,21295:CD,13322:CD,13331:CD,13340:CD,13346:CD,13351:CD,13357:CD,13365
13322 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v11 = v5.appendFixedDecimal(v8, #(2))::CL,21743
13331 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v15 = v11.appendFixedDecimal(v13, #(2))::CL,21743
13340 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v19 = v15.appendFixedDecimal(v17, #(2))::CL,21743
13346 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v22 = v19.appendLiteral(#(46))::CL,21386
13351 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v26 = v22.appendFractionOfSecond(#(3), #(9))::CL,21633
13357 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v30 = v26.appendTimeZoneOffset(#(Z), #(0), #(2), #(2))::CL,21653
13365 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v32 = v30.toFormatter()::CL,21326
13386 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.basicTimeNoMillis()::CD,13389:CD,13391
13389 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.btx::DD,13391
13391 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 46::JM,21295:CD,13399:CD,13408:CD,13417:CD,13423:CD,13431
13399 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v11 = v5.appendFixedDecimal(v8, #(2))::CL,21743
13408 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v15 = v11.appendFixedDecimal(v13, #(2))::CL,21743
13417 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v19 = v15.appendFixedDecimal(v17, #(2))::CL,21743
13423 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v23 = v19.appendTimeZoneOffset(#(Z), #(0), #(2), #(2))::CL,21653
13431 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v25 = v23.toFormatter()::CL,21326
13449 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.basicTTime()::CD,13452:CD,13454
13452 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.btt::DD,13454
13454 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,13459:CD,13462:CD,13467:CD,13470:CD,13475
13459 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = literalTElement()::CL,12243
13462 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
13467 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = basicTime()::CL,13309
13470 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
13475 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
13486 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.basicTTimeNoMillis()::CD,13489:CD,13491
13489 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.bttx::DD,13491
13491 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,13496:CD,13499:CD,13504:CD,13507:CD,13512
13496 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = literalTElement()::CL,12243
13499 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
13504 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = basicTimeNoMillis()::CL,13386
13507 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
13512 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
13523 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.basicDateTime()::CD,13526:CD,13528
13526 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.bdt::DD,13528
13528 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,13533:CD,13536:CD,13541:CD,13544:CD,13549
13533 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = basicDate()::CL,13260
13536 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
13541 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = basicTTime()::CL,13449
13544 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
13549 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
13560 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.basicDateTimeNoMillis()::CD,13563:CD,13565
13563 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.bdtx::DD,13565
13565 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,13570:CD,13573:CD,13578:CD,13581:CD,13586
13570 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = basicDate()::CL,13260
13573 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
13578 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = basicTTimeNoMillis()::CL,13486
13581 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
13586 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
13597 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.basicOrdinalDate()::CD,13600:CD,13602
13600 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.bod::DD,13602
13602 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,13607:CD,13616:CD,13622
13607 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v9 = v5.appendYear(#(4), #(4))::CL,21306
13616 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v9.appendFixedDecimal(v11, #(3))::CL,21743
13622 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
13636 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.basicOrdinalDateTime()::CD,13639:CD,13641
13639 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.bodt::DD,13641
13641 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,13646:CD,13649:CD,13654:CD,13657:CD,13662
13646 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = basicOrdinalDate()::CL,13597
13649 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
13654 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = basicTTime()::CL,13449
13657 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
13662 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
13673 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.basicOrdinalDateTimeNoMillis()::CD,13676:CD,13678
13676 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.bodtx::DD,13678
13678 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,13683:CD,13686:CD,13691:CD,13694:CD,13699
13683 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = basicOrdinalDate()::CL,13597
13686 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
13691 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = basicTTimeNoMillis()::CL,13486
13694 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
13699 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
13710 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.basicWeekDate()::CD,13713:CD,13715
13713 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.bwd::DD,13715
13715 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 41::JM,21295:CD,13720:CD,13726:CD,13734:CD,13743:CD,13749
13720 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v9 = v5.appendWeekyear(#(4), #(4))::CL,21443
13726 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v12 = v9.appendLiteral(#(87))::CL,21386
13734 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v17 = v12.appendFixedDecimal(v14, #(2))::CL,21743
13743 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v22 = v17.appendFixedDecimal(v19, #(1))::CL,21743
13749 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v24 = v22.toFormatter()::CL,21326
13765 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.basicWeekDateTime()::CD,13768:CD,13770
13768 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.bwdt::DD,13770
13770 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,13775:CD,13778:CD,13783:CD,13786:CD,13791
13775 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = basicWeekDate()::CL,13710
13778 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
13783 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = basicTTime()::CL,13449
13786 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
13791 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
13802 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.basicWeekDateTimeNoMillis()::CD,13805:CD,13807
13805 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.bwdtx::DD,13807
13807 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 29::JM,21295:CD,13812:CD,13815:CD,13820:CD,13823:CD,13828
13812 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = basicWeekDate()::CL,13710
13815 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = v5.append(v8)::CL,21683
13820 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v12 = basicTTimeNoMillis()::CL,13486
13823 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.append(v12)::CL,21683
13828 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v16 = v14.toFormatter()::CL,21326
13839 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.dateElementParser()::CD,13842:CD,13844
13842 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.dpe::DD,13844
13844 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 131::JM,21295:CD,13854:CD,13857:CD,13866:CD,13869:CD,13874:CD,13877:CD,13881:CD,13886:CD,13890:CD,13895:CD,13907:CD,13910:CD,13915:CD,13918:CD,13923:CD,13926:CD,13930:CD,13935:CD,13947:CD,13950:CD,13955:CD,13958:CD,13963:CD,13971:CD,13977
13854 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v13 = yearElement()::CL,11859
13857 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v15 = v10.append(v13)::CL,21683
13866 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v19 = monthElement()::CL,11888
13869 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v21 = v16.append(v19)::CL,21683
13874 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v23 = dayOfMonthElement()::CL,11921
13877 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v25 = v23.getParser()::CL,21831
13881 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v27 = v21.appendOptional(v25)::CL,21844
13886 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v29 = v27.toParser()::CL,21892
13890 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v31 = v15.appendOptional(v29)::CL,21844
13895 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v33 = v31.toParser()::CL,21892
13907 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v38 = weekyearElement()::CL,11954
13910 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v40 = v35.append(v38)::CL,21683
13915 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v42 = weekElement()::CL,11983
13918 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v44 = v40.append(v42)::CL,21683
13923 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v46 = dayOfWeekElement()::CL,12016
13926 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v48 = v46.getParser()::CL,21831
13930 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v50 = v44.appendOptional(v48)::CL,21844
13935 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v52 = v50.toParser()::CL,21892
13947 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v57 = yearElement()::CL,11859
13950 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v59 = v54.append(v57)::CL,21683
13955 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v61 = dayOfYearElement()::CL,12049
13958 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v63 = v59.append(v61)::CL,21683
13963 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v65 = v63.toParser()::CL,21892
13971 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v67 = v5.append(#(null), v8)::CL,21926
13977 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v69 = v67.toFormatter()::CL,21326
14000 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.timeElementParser()::CD,14003:CD,14005
14003 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.tpe::DD,14005
14005 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 209::JM,21295:CD,14015:CD,14020:CD,14032:CD,14037:CD,14045:CD,14051:CD,14059:CD,14062:CD,14072:CD,14075:CD,14085:CD,14088:CD,14097:CD,14102:CD,14108:CD,14112:CD,14117:CD,14129:CD,14134:CD,14140:CD,14152:CD,14158:CD,14170:CD,14175:CD,14181:CD,14193:CD,14199
14015 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v14 = v10.appendLiteral(#(46))::CL,21386
14020 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v16 = v14.toParser()::CL,21892
14032 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v22 = v18.appendLiteral(#(44))::CL,21386
14037 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v24 = v22.toParser()::CL,21892
14045 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v26 = v5.append(#(null), v8)::CL,21926
14051 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v28 = v26.toParser()::CL,21892
14059 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v32 = hourElement()::CL,12082
14062 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v34 = v29.append(v32)::CL,21683
14072 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v40 = minuteElement()::CL,12109
14075 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v42 = v37.append(v40)::CL,21683
14085 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v47 = secondElement()::CL,12142
14088 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v49 = v44.append(v47)::CL,21683
14097 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v53 = v50.append(v28)::CL,22069
14102 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v56 = v53.appendFractionOfSecond(#(1), #(9))::CL,21633
14108 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v58 = v56.toParser()::CL,21892
14112 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v60 = v49.appendOptional(v58)::CL,21844
14117 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v62 = v60.toParser()::CL,21892
14129 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v66 = v63.append(v28)::CL,22069
14134 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v68 = v66.appendFractionOfMinute(#(1), #(9))::CL,22094
14140 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v70 = v68.toParser()::CL,21892
14152 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v72 = v42.append(#(null), v43)::CL,21926
14158 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v74 = v72.toParser()::CL,21892
14170 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v78 = v75.append(v28)::CL,22069
14175 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v80 = v78.appendFractionOfHour(#(1), #(9))::CL,22114
14181 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v82 = v80.toParser()::CL,21892
14193 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v84 = v34.append(#(null), v36)::CL,21926
14199 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v86 = v84.toFormatter()::CL,21326
14254 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.dateParser()::CD,14257:CD,14259
14257 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.dp::DD,14259
14259 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 49::JM,21295:CD,14264:CD,14269:CD,14272:CD,14277:CD,14285:CD,14288:CD,14293:CD,14298
14264 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v9 = v5.appendLiteral(#(84))::CL,21386
14269 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v11 = offsetElement()::CL,12210
14272 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v13 = v9.append(v11)::CL,21683
14277 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v15 = v13.toParser()::CL,21892
14285 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v19 = dateElementParser()::CL,13839
14288 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v21 = v16.append(v19)::CL,21683
14293 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v23 = v21.appendOptional(v15)::CL,21844
14298 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v25 = v23.toFormatter()::CL,21326
14313 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.localDateParser()::CD,14316:CD,14318
14316 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.ldp::DD,14318
14318 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 13::CD,14319:CD,14322
14319 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v6 = dateElementParser()::CL,13839
14322 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = v6.withZoneUTC()::CL,22134
14332 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.timeParser()::CD,14335:CD,14337
14335 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.tp::DD,14337
14337 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 41::JM,21295:CD,14342:CD,14345:CD,14349:CD,14354:CD,14357:CD,14362:CD,14365:CD,14369:CD,14374
14342 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = literalTElement()::CL,12243
14345 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v10 = v8.getParser()::CL,21831
14349 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v12 = v5.appendOptional(v10)::CL,21844
14354 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v14 = timeElementParser()::CL,14000
14357 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v16 = v12.append(v14)::CL,21683
14362 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v18 = offsetElement()::CL,12210
14365 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v20 = v18.getParser()::CL,21831
14369 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v22 = v16.appendOptional(v20)::CL,21844
14374 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v24 = v22.toFormatter()::CL,21326
14385 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.localTimeParser()::CD,14388:CD,14390
14388 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.ltp::DD,14390
14390 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 35::JM,21295:CD,14395:CD,14398:CD,14402:CD,14407:CD,14410:CD,14415:CD,14419
14395 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v8 = literalTElement()::CL,12243
14398 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v10 = v8.getParser()::CL,21831
14402 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v12 = v5.appendOptional(v10)::CL,21844
14407 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v14 = timeElementParser()::CL,14000
14410 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v16 = v12.append(v14)::CL,21683
14415 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v18 = v16.toFormatter()::CL,21326
14419 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v20 = v18.withZoneUTC()::CL,22134
14430 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.dateTimeParser()::CD,14433:CD,14435
14433 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.dtp::DD,14435
14435 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 69::JM,21295:CD,14440:CD,14445:CD,14448:CD,14453:CD,14456:CD,14460:CD,14465:CD,14478:CD,14481:CD,14489:CD,14495
14440 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v9 = v5.appendLiteral(#(84))::CL,21386
14445 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v11 = timeElementParser()::CL,14000
14448 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v13 = v9.append(v11)::CL,21683
14453 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v15 = offsetElement()::CL,12210
14456 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v17 = v15.getParser()::CL,21831
14460 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v19 = v13.appendOptional(v17)::CL,21844
14465 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v21 = v19.toParser()::CL,21892
14478 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v29 = dateOptionalTimeParser()::CL,14516
14481 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v31 = v29.getParser()::CL,21831
14489 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v33 = v22.append(#(null), v25)::CL,21926
14495 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v35 = v33.toFormatter()::CL,21326
14516 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.dateOptionalTimeParser()::CD,14519:CD,14521
14519 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.dotp::DD,14521
14521 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 61::JM,21295:CD,14526:CD,14531:CD,14534:CD,14538:CD,14543:CD,14546:CD,14550:CD,14555:CD,14563:CD,14566:CD,14571:CD,14576
14526 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v9 = v5.appendLiteral(#(84))::CL,21386
14531 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v11 = timeElementParser()::CL,14000
14534 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v13 = v11.getParser()::CL,21831
14538 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v15 = v9.appendOptional(v13)::CL,21844
14543 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v17 = offsetElement()::CL,12210
14546 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v19 = v17.getParser()::CL,21831
14550 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v21 = v15.appendOptional(v19)::CL,21844
14555 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v23 = v21.toParser()::CL,21892
14563 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v27 = dateElementParser()::CL,13839
14566 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v29 = v24.append(v27)::CL,21683
14571 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v31 = v29.appendOptional(v23)::CL,21844
14576 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v33 = v31.toFormatter()::CL,21326
14591 :: ENTR :: entry :: null :: org.joda.time.format.ISODateTimeFormat.Constants.localDateOptionalTimeParser()::CD,14594:CD,14596
14594 :: EXPR :: reference :: Lorg/joda/time/format/DateTimeFormatter :: v2 = org.joda.time.format.ISODateTimeFormat$Constants.ldotp::DD,14596
14596 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 52::JM,21295:CD,14601:CD,14606:CD,14609:CD,14614:CD,14622:CD,14625:CD,14630:CD,14635:CD,14639
14601 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v9 = v5.appendLiteral(#(84))::CL,21386
14606 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v11 = timeElementParser()::CL,14000
14609 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v13 = v9.append(v11)::CL,21683
14614 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v15 = v13.toParser()::CL,21892
14622 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v19 = dateElementParser()::CL,13839
14625 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v21 = v16.append(v19)::CL,21683
14630 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v23 = v21.appendOptional(v15)::CL,21844
14635 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v25 = v23.toFormatter()::CL,21326
14639 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v27 = v25.withZoneUTC()::CL,22134
14729 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.LazyInit.buildMap()::CD,14732:CD,14736:CD,14742:CD,14748:CD,14754:CD,14760:CD,14766:CD,14772:CD,14778:CD,14784:CD,14790:CD,14796:CD,14802:CD,14808:CD,14814:CD,14820:CD,14826:CD,14832:CD,14838:CD,14844:CD,14850:CD,14856:CD,14862:CD,14868:CD,14874:CD,14880:CD,14886:CD,14892:CD,14898:CD,14904:CD,14910:CD,14916:CD,14922:CD,14928:CD,14934
14732 :: NORM :: declaration :: Ljava/util/HashMap :: v2 = new java.util.HashMap::JM,14934
14736 :: CALL :: call :: Ljava/lang/Object :: v7 = v2.put(#(GMT), #(UTC))::
14742 :: CALL :: call :: Ljava/lang/Object :: v10 = v2.put(#(WET), #(WET))::
14748 :: CALL :: call :: Ljava/lang/Object :: v13 = v2.put(#(CET), #(CET))::
14754 :: CALL :: call :: Ljava/lang/Object :: v16 = v2.put(#(MET), #(CET))::
14760 :: CALL :: call :: Ljava/lang/Object :: v19 = v2.put(#(ECT), #(CET))::
14766 :: CALL :: call :: Ljava/lang/Object :: v22 = v2.put(#(EET), #(EET))::
14772 :: CALL :: call :: Ljava/lang/Object :: v26 = v2.put(#(MIT), #(Pacific/Apia))::
14778 :: CALL :: call :: Ljava/lang/Object :: v30 = v2.put(#(HST), #(Pacific/Honolulu))::
14784 :: CALL :: call :: Ljava/lang/Object :: v34 = v2.put(#(AST), #(America/Anchorage))::
14790 :: CALL :: call :: Ljava/lang/Object :: v38 = v2.put(#(PST), #(America/Los_Angeles))::
14796 :: CALL :: call :: Ljava/lang/Object :: v42 = v2.put(#(MST), #(America/Denver))::
14802 :: CALL :: call :: Ljava/lang/Object :: v46 = v2.put(#(PNT), #(America/Phoenix))::
14808 :: CALL :: call :: Ljava/lang/Object :: v50 = v2.put(#(CST), #(America/Chicago))::
14814 :: CALL :: call :: Ljava/lang/Object :: v54 = v2.put(#(EST), #(America/New_York))::
14820 :: CALL :: call :: Ljava/lang/Object :: v58 = v2.put(#(IET), #(America/Indiana/India...))::
14826 :: CALL :: call :: Ljava/lang/Object :: v62 = v2.put(#(PRT), #(America/Puerto_Rico))::
14832 :: CALL :: call :: Ljava/lang/Object :: v66 = v2.put(#(CNT), #(America/St_Johns))::
14838 :: CALL :: call :: Ljava/lang/Object :: v70 = v2.put(#(AGT), #(America/Argentina/Bue...))::
14844 :: CALL :: call :: Ljava/lang/Object :: v74 = v2.put(#(BET), #(America/Sao_Paulo))::
14850 :: CALL :: call :: Ljava/lang/Object :: v78 = v2.put(#(ART), #(Africa/Cairo))::
14856 :: CALL :: call :: Ljava/lang/Object :: v82 = v2.put(#(CAT), #(Africa/Harare))::
14862 :: CALL :: call :: Ljava/lang/Object :: v86 = v2.put(#(EAT), #(Africa/Addis_Ababa))::
14868 :: CALL :: call :: Ljava/lang/Object :: v90 = v2.put(#(NET), #(Asia/Yerevan))::
14874 :: CALL :: call :: Ljava/lang/Object :: v94 = v2.put(#(PLT), #(Asia/Karachi))::
14880 :: CALL :: call :: Ljava/lang/Object :: v98 = v2.put(#(IST), #(Asia/Kolkata))::
14886 :: CALL :: call :: Ljava/lang/Object :: v102 = v2.put(#(BST), #(Asia/Dhaka))::
14892 :: CALL :: call :: Ljava/lang/Object :: v106 = v2.put(#(VST), #(Asia/Ho_Chi_Minh))::
14898 :: CALL :: call :: Ljava/lang/Object :: v110 = v2.put(#(CTT), #(Asia/Shanghai))::
14904 :: CALL :: call :: Ljava/lang/Object :: v114 = v2.put(#(JST), #(Asia/Tokyo))::
14910 :: CALL :: call :: Ljava/lang/Object :: v118 = v2.put(#(ACT), #(Australia/Darwin))::
14916 :: CALL :: call :: Ljava/lang/Object :: v122 = v2.put(#(AET), #(Australia/Sydney))::
14922 :: CALL :: call :: Ljava/lang/Object :: v126 = v2.put(#(SST), #(Pacific/Guadalcanal))::
14928 :: CALL :: call :: Ljava/lang/Object :: v130 = v2.put(#(NST), #(Pacific/Auckland))::
14934 :: CALL :: call :: Ljava/util/Map :: v132 = unmodifiableMap(v2)::JM,14934
15074 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.LazyInit.buildFormatter()::JM,21295:CD,15085:CD,15093:CD,15097
15085 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v11 = v4.appendTimeZoneOffset(#(null), #(1), #(2), #(4))::CL,21653
15093 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v13 = v11.toFormatter()::CL,21326
15097 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v15 = v13.withChronology(v2)::CL,22404
15242 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.getAvailableIDs()::CE,15243:CD,15245:CD,15248:CD,15252
15243 :: EXIT :: exit :: Ljava/util/Set :: org.joda.time.DateTimeZone.getAvailableIDs()::
15245 :: CALL :: call :: Lorg/joda/time/tz/Provider :: v3 = getProvider()::CL,22835
15248 :: CALL :: call :: Ljava/util/Set :: v5 = v3.getAvailableIDs()::JM,15252:CL,22876:CL,22885
15252 :: NORM :: compound :: Ljava/util/Set :: return v5::DD,15243
15583 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoCompiler.Zone.chain(java.util.StringTokenizer)::CD,15591
15588 :: EXPR :: reference :: Lorg/joda/time/tz/ZoneInfoCompiler$Zone :: v4 = p0 $null .iNext::DD,15591
15591 :: PRED :: IF :: Z :: if (v4 == #(null)) goto 19::CD,15595:JM,23712:JM,23683:JM,23715:JM,23732:JM,23701:JM,23719:JM,23690:JM,23679
15595 :: CALL :: call :: V :: v9.chain(p1 $null )::CL,15583
15629 :: CALL :: call :: I :: v6 = p1 $null .countTokens()::JM,24000:JM,23873:JM,23939:JM,23945:JM,23946:JM,24075:JM,23886:JM,23951:JM,24081:JM,24082:JM,23955:JM,24083:JM,24084:JM,24085:JM,24086:JM,23896:JM,23961:JM,23912:JM,23976:JM,23918:JM,23919:JM,23985:JM,23924:JM,23928:JM,23869:JM,23934
15640 :: CALL :: call :: Ljava/lang/String :: v9 = p1 $null .nextToken()::JM,24000:JM,23873:JM,23939:JM,23945:JM,23946:JM,24075:JM,23886:JM,23951:JM,24081:JM,24082:JM,23955:JM,24083:JM,24084:JM,24085:JM,24086:JM,23896:JM,23961:JM,23912:JM,23976:JM,23918:JM,23919:JM,23985:JM,23924:JM,23928:JM,23869:JM,23934
15651 :: CALL :: call :: Ljava/lang/String :: v13 = p1 $null .nextToken()::JM,24000:JM,23873:JM,23939:JM,23945:JM,23946:JM,24075:JM,23886:JM,23951:JM,24081:JM,24082:JM,23955:JM,24083:JM,24084:JM,24085:JM,24086:JM,23896:JM,23961:JM,23912:JM,23976:JM,23918:JM,23919:JM,23985:JM,23924:JM,23928:JM,23869:JM,23934
15655 :: CALL :: call :: I :: v16 = parseYear(v13, #(0))::CL,23771
15663 :: CALL :: call :: Ljava/lang/String :: v18 = p1 $null .nextToken()::JM,24000:JM,23873:JM,23939:JM,23945:JM,23946:JM,24075:JM,23886:JM,23951:JM,24081:JM,24082:JM,23955:JM,24083:JM,24084:JM,24085:JM,24086:JM,23896:JM,23961:JM,23912:JM,23976:JM,23918:JM,23919:JM,23985:JM,23924:JM,23928:JM,23869:JM,23934
15670 :: CALL :: call :: I :: v21 = parseYear(v18, v19)::CL,23771
15690 :: CALL :: call :: Ljava/lang/String :: v25 = p1 $null .nextToken()::JM,24000:JM,23873:JM,23939:JM,23945:JM,23946:JM,24075:JM,23886:JM,23951:JM,24081:JM,24082:JM,23955:JM,24083:JM,24084:JM,24085:JM,24086:JM,23896:JM,23961:JM,23912:JM,23976:JM,23918:JM,23919:JM,23985:JM,23924:JM,23928:JM,23869:JM,23934
15709 :: CALL :: call :: Ljava/lang/String :: v31 = p1 $null .nextToken()::JM,24000:JM,23873:JM,23939:JM,23945:JM,23946:JM,24075:JM,23886:JM,23951:JM,24081:JM,24082:JM,23955:JM,24083:JM,24084:JM,24085:JM,24086:JM,23896:JM,23961:JM,23912:JM,23976:JM,23918:JM,23919:JM,23985:JM,23924:JM,23928:JM,23869:JM,23934
15713 :: CALL :: call :: I :: v33 = parseTime(v31)::CL,24183
15720 :: CALL :: call :: Ljava/lang/String :: v35 = p1 $null .nextToken()::JM,24000:JM,23873:JM,23939:JM,23945:JM,23946:JM,24075:JM,23886:JM,23951:JM,24081:JM,24082:JM,23955:JM,24083:JM,24084:JM,24085:JM,24086:JM,23896:JM,23961:JM,23912:JM,23976:JM,23918:JM,23919:JM,23985:JM,23924:JM,23928:JM,23869:JM,23934
15762 :: NORM :: declaration :: Ljava/util/ArrayList :: v5 = new java.util.ArrayList::DD,15766
15766 :: EXPR :: modify :: Ljava/util/List :: p0 $null .iRules = v5::
15769 :: EXPR :: reference :: Ljava/util/List :: v7 = p0 $null .iRules::
15772 :: CALL :: call :: Z :: v9 = v7.add(p1 $null )::
15784 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoCompiler.RuleSet.addRule(org.joda.time.tz.ZoneInfoCompiler.Rule)::CD,15795:CD,15810:CD,15819
15792 :: EXPR :: reference :: Ljava/util/List :: v5 = p0 $null .iRules::
15795 :: CALL :: call :: Ljava/lang/Object :: v8 = v5.get(#(0))::
15810 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v16 = new java.lang.IllegalArgumentException::
15816 :: EXPR :: reference :: Ljava/util/List :: v13 = p0 $null .iRules::
15819 :: CALL :: call :: Z :: v15 = v13.add(p1 $null )::
15837 :: CALL :: call :: Ljava/lang/String :: v5 = p1 $null .nextToken()::JM,23712:JM,23683:JM,23715:JM,23732:JM,23701:JM,23719:JM,23690:JM,23679
15986 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoCompiler.Zone.addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)::CD,15992:CD,16043:CD,16047:CD,16055:CD,16060:CD,16072:CD,16099
15992 :: PRED :: IF :: Z :: if (v35 == #(null)) goto 147::CD,15996:CD,16004:CD,16080
15996 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder :: v8 = p2 $null .setStandardOffset(v6)::CL,24434
16001 :: EXPR :: reference :: Ljava/lang/String :: v9 = v35.iRules::DD,16004
16004 :: PRED :: IF :: Z :: if (v9 != #(null)) goto 34::CD,16008:CD,16018:CD,16025
16008 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder :: v13 = p2 $null .setFixedSavings(v10, #(0))::CL,24451
16018 :: CALL :: call :: I :: v16 = parseTime(v14)::CL,24183
16025 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder :: v19 = p2 $null .setFixedSavings(v17, v16)::CL,24451
16043 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v37 = new java.lang.StringBuilder::
16047 :: CALL :: call :: Ljava/lang/StringBuilder :: v41 = v37.append(#(Rules not found: ))::
16052 :: EXPR :: reference :: Ljava/lang/String :: v42 = v35.iRules::
16055 :: CALL :: call :: Ljava/lang/StringBuilder :: v44 = v41.append(v42)::
16060 :: CALL :: call :: Ljava/lang/String :: v46 = v44.toString()::
16072 :: CALL :: call :: V :: v24.addRecurring(p2 $null , v25)::CL,24471
16077 :: EXPR :: reference :: I :: v28 = v35.iUntilYear::DD,16080
16080 :: PRED :: IF :: Z :: if (v28 != #(2147483647)) goto 128::CD,15992:CD,16088:CD,16099
16088 :: CALL :: call :: V :: v30.addCutover(p2 $null , v31)::CL,24515
16093 :: EXPR :: reference :: Lorg/joda/time/tz/ZoneInfoCompiler$Zone :: v33 = v35.iNext::DD,16099
16099 :: EXPR :: assign :: null :: PHI v35 = v33, p1 $null ::DD,15992
16123 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.RuleSet.firstTransition(long)::CE,16124:CD,16131:JM,16182:JM,16173
16124 :: EXIT :: exit :: Lorg/joda/time/tz/DateTimeZoneBuilder$Transition :: org.joda.time.tz.DateTimeZoneBuilder.RuleSet.firstTransition(long)::JM,9639
16128 :: EXPR :: reference :: Ljava/lang/String :: v4 = p0 $null .iInitialNameKey::DD,16131
16131 :: PRED :: IF :: Z :: if (v4 == #(null)) goto 33::CF,16154:CF,16132:CD,16153:CD,16162:CD,16168:CD,16250:CD,16253:CD,16255
16132 :: NORM :: declaration :: Lorg/joda/time/tz/DateTimeZoneBuilder$Transition :: v47 = new org.joda.time.tz.DateTimeZoneBuilder$Transition::DD,16153
16153 :: NORM :: compound :: Lorg/joda/time/tz/DateTimeZoneBuilder$Transition :: return v47::DD,16124
16154 :: NORM :: declaration :: Ljava/util/ArrayList :: v6 = new java.util.ArrayList::JM,16193
16155 :: EXPR :: reference :: Ljava/util/ArrayList :: v7 = p0 $null .iRules::
16162 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder$Transition :: v12 = p0 $null .nextTransition(v21, v22)::JM,16168:CL,16546
16168 :: PRED :: IF :: Z :: if (v12 == #(null)) goto 224::CF,16255:CD,16169:CD,16173:CD,16174
16169 :: CALL :: call :: J :: v14 = v12.getMillis()::JM,16182:JM,16173:CL,16459
16173 :: EXPR :: assign :: Z :: v15 = v14 == p1 $null ::DD,16174
16174 :: PRED :: IF :: Z :: if (v15 != #(0)) goto 102::CF,16175:CD,16182:CD,16183:CD,16255
16175 :: NORM :: declaration :: Lorg/joda/time/tz/DateTimeZoneBuilder$Transition :: v43 = new org.joda.time.tz.DateTimeZoneBuilder$Transition::DD,16255
16182 :: EXPR :: assign :: Z :: v16 = v14 == p1 $null ::DD,16183
16183 :: PRED :: IF :: Z :: if (v16 <= #(0)) goto 200::CF,16236:CD,16162:CD,16168:CD,16184:CD,16216:CD,16253:CD,16254:CD,16255
16184 :: PRED :: IF :: Z :: if (v23 != #(null)) goto 171::CF,16254:CD,16185:CD,16189:CD,16193
16185 :: CALL :: call :: Ljava/util/Iterator :: v25 = v6.iterator()::JM,16193
16189 :: CALL :: call :: Z :: v27 = v25.hasNext()::JM,16193
16193 :: PRED :: IF :: Z :: if (v27 == #(0)) goto 171::CF,16254:CD,16194:CD,16199:CD,16203:JM,16193
16194 :: CALL :: call :: Ljava/lang/Object :: v29 = v25.next()::JM,16193
16199 :: CALL :: call :: I :: v32 = v30.getSaveMillis()::JM,16203:CL,24633
16203 :: PRED :: IF :: Z :: if (v32 != #(0)) goto 166::CF,16204:CD,16189:CD,16193:CD,16254
16204 :: NORM :: declaration :: Lorg/joda/time/tz/DateTimeZoneBuilder$Transition :: v33 = new org.joda.time.tz.DateTimeZoneBuilder$Transition::DD,16254
16216 :: PRED :: IF :: Z :: if (v36 != #(null)) goto 224::CF,16255:CF,16217
16217 :: NORM :: declaration :: Lorg/joda/time/tz/DateTimeZoneBuilder$Transition :: v37 = new org.joda.time.tz.DateTimeZoneBuilder$Transition::DD,16255
16236 :: NORM :: declaration :: Lorg/joda/time/tz/DateTimeZoneBuilder$Transition :: v17 = new org.joda.time.tz.DateTimeZoneBuilder$Transition::DD,16253
16250 :: NORM :: compound :: Lorg/joda/time/tz/DateTimeZoneBuilder$Transition :: return v46::DD,16124
16253 :: EXPR :: assign :: null :: PHI v23 = v17, #(null)::DD,16184:DD,16254:DD,16255
16254 :: EXPR :: assign :: null :: PHI v36 = v23, v23, v33::DD,16216:DD,16255
16255 :: EXPR :: assign :: null :: PHI v46 = v23, v43, v36, v37::DD,16250
16320 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder.Transition)::CE,16321:CD,16326:CD,16330:JM,16352:JM,16337:JM,16387:JM,16351
16321 :: EXIT :: exit :: Z :: org.joda.time.tz.DateTimeZoneBuilder.addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder.Transition)::JM,9673:JM,16409
16326 :: CALL :: call :: I :: v6 = p1 $null .size()::JM,16352:JM,16337:JM,16387:JM,16330:JM,16351
16330 :: PRED :: IF :: Z :: if (v6 != #(0)) goto 20::CD,16331:CD,16336:CD,16337:CD,16338:CD,16344:CD,16349:JM,16352:JM,16387:JM,16330:JM,16351
16331 :: CALL :: call :: Z :: v47 = p1 $null .add(p2 $null )::JM,16352:JM,16337:JM,16387:JM,16330:JM,16351
16336 :: NORM :: compound :: Z :: return #(1)::DD,16321
16337 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v6 - #(1)::JM,16352:JM,16337:JM,16387:JM,16330:JM,16351
16338 :: CALL :: call :: Ljava/lang/Object :: v11 = p1 $null .get(v9)::JM,16352:JM,16337:JM,16387:JM,16330:JM,16351
16344 :: CALL :: call :: Z :: v14 = p2 $null .isTransitionFrom(v12)::JM,16349:CL,24688
16349 :: PRED :: IF :: Z :: if (v14 != #(0)) goto 45::CD,16350:CD,16351:CD,16363:CD,16367:CD,16371:CD,16372:CD,16373:CD,16377:CD,16378:CD,16379:CD,16380:CD,16410
16350 :: NORM :: compound :: Z :: return #(0)::DD,16321
16351 :: PRED :: IF :: Z :: if (v6 < #(2)) goto 65::CF,16410:CD,16352:CD,16353:CD,16359
16352 :: EXPR :: assign :: Ljava/lang/Object :: v16 = v6 - #(2)::JM,16352:JM,16337:JM,16387:JM,16330:JM,16351
16353 :: CALL :: call :: Ljava/lang/Object :: v18 = p1 $null .get(v16)::JM,16352:JM,16337:JM,16387:JM,16330:JM,16351
16359 :: CALL :: call :: I :: v21 = v19.getWallOffset()::JM,16410:CL,16862
16363 :: CALL :: call :: I :: v24 = v12.getWallOffset()::JM,16377:CL,16862
16367 :: CALL :: call :: J :: v26 = v12.getMillis()::JM,16372:CL,16459
16371 :: EXPR :: assign :: J :: v27 = CONVERT I to J v22::CF,16372
16372 :: EXPR :: assign :: Ljava/lang/Object :: v28 = v26 + v27::DD,16379
16373 :: CALL :: call :: J :: v30 = p2 $null .getMillis()::JM,16378:CL,16459
16377 :: EXPR :: assign :: J :: v31 = CONVERT I to J v24::CF,16378
16378 :: EXPR :: assign :: Ljava/lang/Object :: v32 = v30 + v31::DD,16379
16379 :: EXPR :: assign :: Z :: v33 = v32 == v28::DD,16380
16380 :: PRED :: IF :: Z :: if (v33 == #(0)) goto 110::CD,16381:CD,16386:CD,16387:CD,16388:CD,16398:CD,16403:CD,16409:JM,16352:JM,16337:JM,16330:JM,16351
16381 :: CALL :: call :: Z :: v45 = p1 $null .add(p2 $null )::JM,16352:JM,16337:JM,16387:JM,16330:JM,16351
16386 :: NORM :: compound :: Z :: return #(1)::DD,16321
16387 :: EXPR :: assign :: Ljava/lang/Object :: v34 = v6 - #(1)::JM,16352:JM,16337:JM,16387:JM,16330:JM,16351
16388 :: CALL :: call :: Ljava/lang/Object :: v36 = p1 $null .remove(v34)::JM,16352:JM,16337:JM,16387:JM,16330:JM,16351
16398 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder$Transition :: v41 = p2 $null .withMillis(v39)::CL,24747
16403 :: CALL :: call :: Z :: v43 = p0 $null .addTransition(p1 $null , v41)::JM,16409:CL,16320
16409 :: NORM :: compound :: Z :: return v43::DD,16321
16410 :: EXPR :: assign :: null :: PHI v22 = #(0), v21::DD,16371
16459 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.Transition.getMillis()::CE,16460:CD,16466
16460 :: EXIT :: exit :: J :: org.joda.time.tz.DateTimeZoneBuilder.Transition.getMillis()::JM,16182:JM,16173:JM,16372:JM,16378:JM,16924
16463 :: EXPR :: reference :: J :: v3 = p0 $null .iMillis::DD,16466
16466 :: NORM :: compound :: J :: return v3::CF,16460
16496 :: NORM :: declaration :: Ljava/util/ArrayList :: v6 = new java.util.ArrayList::
16497 :: EXPR :: reference :: Ljava/util/ArrayList :: v7 = p1 $null .iRules::
16546 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.RuleSet.nextTransition(long,int)::CE,16547:CD,16558:CD,16562:CD,16566:CD,16591:CD,16640:CD,16641:JM,16582
16547 :: EXIT :: exit :: Lorg/joda/time/tz/DateTimeZoneBuilder$Transition :: org.joda.time.tz.DateTimeZoneBuilder.RuleSet.nextTransition(long,int)::JM,9666:JM,16168
16555 :: EXPR :: reference :: Ljava/util/ArrayList :: v9 = p0 $null .iRules::JM,16566:JM,16571
16558 :: CALL :: call :: Ljava/util/Iterator :: v11 = v9.iterator()::JM,16566:JM,16571
16562 :: CALL :: call :: Z :: v13 = v11.hasNext()::JM,16566:JM,16571
16566 :: PRED :: IF :: Z :: if (v13 == #(0)) goto 95::CD,16562:CD,16567:CD,16571:CD,16575:CD,16582:CD,16583:CD,16640:CD,16641:JM,16566:CF,16591
16567 :: CALL :: call :: Ljava/lang/Object :: v16 = v11.next()::JM,16566:JM,16571
16571 :: EXPR :: assign :: Ljava/lang/Object :: v17 = CHECKCAST v16::DD,16642
16575 :: CALL :: call :: J :: v20 = v17.next(p1 $null , v18, p2 $null )::JM,16643:JM,16582:JM,16588:CL,24775
16582 :: EXPR :: assign :: Z :: v21 = v20 == p1 $null ::DD,16583
16583 :: PRED :: IF :: Z :: if (v21 > #(0)) goto 78::CD,16584:CD,16588:CD,16589:CD,16642:CD,16643:CD,16640:CD,16641:JM,16566:JM,16571
16584 :: CALL :: call :: V :: v11.remove()::JM,16566:JM,16571
16588 :: EXPR :: assign :: Z :: v23 = v20 == v27::DD,16589
16589 :: PRED :: IF :: Z :: if (v23 > #(0)) goto 90::CF,16642:CD,16643
16591 :: PRED :: IF :: Z :: if (v26 != #(null)) goto 102::CD,16592:CD,16597:CD,16602:CD,16604
16592 :: NORM :: compound :: Lorg/joda/time/tz/DateTimeZoneBuilder$Transition :: return #(null)::DD,16547
16597 :: CALL :: call :: I :: v31 = v29.get(v27)::JM,16604:CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,11332
16602 :: EXPR :: reference :: I :: v32 = org.joda.time.tz.DateTimeZoneBuilder$RuleSet.YEAR_LIMIT::CF,16604
16604 :: PRED :: IF :: Z :: if (v31 < v32) goto 119::CD,16605:CD,16609
16605 :: NORM :: compound :: Lorg/joda/time/tz/DateTimeZoneBuilder$Transition :: return #(null)::DD,16547
16606 :: EXPR :: reference :: I :: v33 = p0 $null .iUpperYear::DD,16609
16609 :: PRED :: IF :: Z :: if (v33 >= #(2147483647)) goto 155::CF,16629:CD,16619:CD,16626:CD,16627:CD,16639
16619 :: CALL :: call :: J :: v39 = v35.setInstant(v36, v37, p2 $null )::JM,16626:CL,24890
16626 :: EXPR :: assign :: Z :: v40 = v27 == v39::DD,16627
16627 :: PRED :: IF :: Z :: if (v40 < #(0)) goto 155::CF,16629:CD,16628:CD,16639
16628 :: NORM :: compound :: Lorg/joda/time/tz/DateTimeZoneBuilder$Transition :: return #(null)::DD,16547
16629 :: NORM :: declaration :: Lorg/joda/time/tz/DateTimeZoneBuilder$Transition :: v42 = new org.joda.time.tz.DateTimeZoneBuilder$Transition::DD,16639
16639 :: NORM :: compound :: Lorg/joda/time/tz/DateTimeZoneBuilder$Transition :: return v42::DD,16547
16640 :: EXPR :: assign :: null :: PHI v26 = v26, v24, #(null)::CF,16641:DD,16591:DD,16640:DD,16642
16641 :: EXPR :: assign :: null :: PHI v27 = v27, v25, #(9223372036854775807 l)::JM,16566:JM,16571:DD,16588:DD,16626:DD,16641:DD,16643
16642 :: EXPR :: assign :: null :: PHI v24 = v26, v17::CF,16643:DD,16640
16643 :: EXPR :: assign :: null :: PHI v25 = v27, v20::DD,16641
16692 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.RuleSet.buildTailZone(java.lang.String)::CE,16693:CD,16700:CD,16704
16693 :: EXIT :: exit :: Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone :: org.joda.time.tz.DateTimeZoneBuilder.RuleSet.buildTailZone(java.lang.String)::JM,9768
16697 :: EXPR :: reference :: Ljava/util/ArrayList :: v4 = p0 $null .iRules::JM,16704
16700 :: CALL :: call :: I :: v6 = v4.size()::JM,16704
16704 :: PRED :: IF :: Z :: if (v6 != #(2)) goto 75::CD,16708:CD,16717:CD,16723:CD,16727:CD,16751
16705 :: EXPR :: reference :: Ljava/util/ArrayList :: v8 = p0 $null .iRules::
16708 :: CALL :: call :: Ljava/lang/Object :: v11 = v8.get(#(0))::
16714 :: EXPR :: reference :: Ljava/util/ArrayList :: v13 = p0 $null .iRules::
16717 :: CALL :: call :: Ljava/lang/Object :: v16 = v13.get(#(1))::
16723 :: CALL :: call :: I :: v19 = v12.getToYear()::JM,16727:CL,25003
16727 :: PRED :: IF :: Z :: if (v19 != #(2147483647)) goto 75::CD,16728:CD,16732:CD,16751
16728 :: CALL :: call :: I :: v22 = v17.getToYear()::JM,16732:CL,25003
16732 :: PRED :: IF :: Z :: if (v22 != #(2147483647)) goto 75::CF,16733:JM,25024:JM,20785:JM,25027:JM,25030:JM,20779:CD,16750:CD,16751
16733 :: NORM :: declaration :: Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone :: v24 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone::DD,16750
16750 :: NORM :: compound :: Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone :: return v24::DD,16693
16751 :: NORM :: compound :: Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone :: return #(null)::DD,16693
16770 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.RuleSet.getUpperLimit(int)::CD,16778
16775 :: EXPR :: reference :: I :: v4 = p0 $null .iUpperYear::DD,16778
16778 :: PRED :: IF :: Z :: if (v4 != #(2147483647)) goto 14::CD,16789
16789 :: CALL :: call :: J :: v10 = v6.setInstant(v7, v8, p1 $null )::CL,24890
16804 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone(java.lang.String,java.lang.String,int,int)::CE,16805:CD,16811:CD,16816:JM,16822:JM,16823:JM,16824
16805 :: EXIT :: exit :: Lorg/joda/time/DateTimeZone :: org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone(java.lang.String,java.lang.String,int,int)::JM,9714:JM,9746
16811 :: CALL :: call :: Z :: v8 = #(UTC).equals(p1 $null )::JM,16816:JM,16822:JM,16823:JM,16824
16816 :: PRED :: IF :: Z :: if (v8 == #(0)) goto 29::CF,16828:CD,16817:CD,16822:JM,25057:JM,20785:JM,25060:JM,20779:JM,25054:CD,16836:JM,16816:JM,16823:JM,16824
16817 :: CALL :: call :: Z :: v11 = p1 $null .equals(p2 $null )::JM,16816:JM,16822:JM,16823:JM,16824
16822 :: PRED :: IF :: Z :: if (v11 == #(0)) goto 29::CF,16828:CD,16823:JM,25057:JM,20785:JM,25060:JM,20779:JM,25054:CD,16836
16823 :: PRED :: IF :: Z :: if (p3 $null  != #(0)) goto 29::CF,16828:CD,16824:JM,25057:JM,20785:JM,25060:JM,20779:JM,25054:CD,16836
16824 :: PRED :: IF :: Z :: if (p4 $null  != #(0)) goto 29::CF,16828:CD,16825:CD,16827:JM,25057:JM,20785:JM,25060:JM,20779:JM,25054:CD,16836
16825 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v14 = org.joda.time.DateTimeZone.UTC::CF,16827
16827 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v14::DD,16805
16828 :: NORM :: declaration :: Lorg/joda/time/tz/FixedDateTimeZone :: v12 = new org.joda.time.tz.FixedDateTimeZone::DD,16836
16836 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v12::DD,16805
16853 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.Transition.getNameKey()::CE,16854:CD,16860
16854 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.tz.DateTimeZoneBuilder.Transition.getNameKey()::JM,16948
16857 :: EXPR :: reference :: Ljava/lang/String :: v3 = p0 $null .iNameKey::DD,16860
16860 :: NORM :: compound :: Ljava/lang/String :: return v3::CF,16854
16862 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.Transition.getWallOffset()::CE,16863:CD,16869
16863 :: EXIT :: exit :: I :: org.joda.time.tz.DateTimeZoneBuilder.Transition.getWallOffset()::JM,16410:JM,16377:JM,16932
16866 :: EXPR :: reference :: I :: v3 = p0 $null .iWallOffset::DD,16869
16869 :: NORM :: compound :: I :: return v3::CF,16863
16871 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.Transition.getStandardOffset()::CE,16872:CD,16878
16872 :: EXIT :: exit :: I :: org.joda.time.tz.DateTimeZoneBuilder.Transition.getStandardOffset()::JM,16940
16875 :: EXPR :: reference :: I :: v3 = p0 $null .iStandardOffset::DD,16878
16878 :: NORM :: compound :: I :: return v3::CF,16872
16880 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder.DSTZone)::CE,16881:CD,16887:CD,16897:CD,16898:CD,16899:CD,16900:CD,16901:CD,16954:CD,16955:CD,16962:CD,16966:CD,16967:CD,16990:CD,16991:CD,16992:CD,17233:CD,17350:JM,20785:JM,25330:JM,25318:JM,25321:JM,20779:JM,25324:JM,25327:CD,17362:CD,17364:CD,17365:CD,17366:CD,17368:JM,16984
16881 :: EXIT :: exit :: Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder.DSTZone)::JM,9764
16887 :: CALL :: call :: I :: v7 = p3 $null .size()::JM,17233:JM,16897:JM,16898:JM,16899:JM,16900:JM,16901
16897 :: NORM :: declaration :: [J :: v9 = new []::CF,16898
16898 :: NORM :: declaration :: [I :: v10 = new []::CF,16899
16899 :: NORM :: declaration :: [I :: v11 = new []::CF,16900
16900 :: NORM :: declaration :: [Ljava/lang/String :: v12 = new java.lang.String[]::DD,16990
16901 :: PRED :: IF :: Z :: if (v30 >= v7) goto 138::CD,16902:CD,16920:CD,16928:CD,16936:CD,16944:CD,16952:CD,17364:JM,17233:JM,16897:JM,16898:JM,16899:JM,16900:JM,16901:CF,16954
16902 :: CALL :: call :: Ljava/lang/Object :: v15 = p3 $null .get(v30)::JM,17233:JM,16897:JM,16898:JM,16899:JM,16900:JM,16901
16920 :: CALL :: call :: J :: v20 = v16.getMillis()::JM,16924:CL,16459
16924 :: EXPR :: modify :: J :: v9[v30] = v20::
16928 :: CALL :: call :: I :: v22 = v16.getWallOffset()::JM,16932:CL,16862
16932 :: EXPR :: modify :: I :: v10[v30] = v22::
16936 :: CALL :: call :: I :: v24 = v16.getStandardOffset()::JM,16940:CL,16871
16940 :: EXPR :: modify :: I :: v11[v30] = v24::
16944 :: CALL :: call :: Ljava/lang/String :: v26 = v16.getNameKey()::JM,16948:CL,16853
16948 :: EXPR :: modify :: Ljava/lang/Object :: v12[v30] = v26::
16952 :: EXPR :: assign :: Ljava/lang/Object :: v28 = v30 + #(1)::DD,17364
16954 :: NORM :: declaration :: [Ljava/lang/String :: v32 = new java.lang.String[]::DD,17365:CF,16955
16955 :: NORM :: declaration :: Ljava/text/DateFormatSymbols :: v33 = new java.text.DateFormatSymbols::JM,16962:JM,16966
16962 :: CALL :: call :: [[Ljava/lang/String :: v37 = v33.getZoneStrings()::JM,16962:JM,16966
16966 :: EXPR :: assign :: I :: v38 = v37.length::CF,16967
16967 :: PRED :: IF :: Z :: if (v47 >= v38) goto 209::CD,16966:CD,16972:CD,16985:CD,17365:CD,17366:CD,17367
16968 :: EXPR :: reference :: Ljava/lang/Object :: v39 = v37[v47]::DD,16972:DD,16973:DD,17367
16972 :: PRED :: IF :: Z :: if (v39 == #(null)) goto 203::CF,17367:CD,16973:CD,16974
16973 :: EXPR :: assign :: I :: v40 = v39.length::DD,16974
16974 :: PRED :: IF :: Z :: if (v40 != #(5)) goto 203::CF,17367:CD,16979:CD,16984
16975 :: EXPR :: reference :: Ljava/lang/Object :: v41 = v39[#(0)]::JM,16984
16979 :: CALL :: call :: Z :: v43 = p1 $null .equals(v41)::JM,16984
16984 :: PRED :: IF :: Z :: if (v43 == #(0)) goto 203::CF,17367
16985 :: EXPR :: assign :: Ljava/lang/Object :: v45 = v47 + #(1)::DD,17366
16990 :: EXPR :: assign :: I :: v50 = v12.length::DD,16991
16991 :: EXPR :: assign :: Ljava/lang/Object :: v51 = v50 - #(1)::CF,16992
16992 :: PRED :: IF :: Z :: if (v154 >= v51) goto 563::CD,16990:CD,16991:CD,16997:CD,17006:CD,17007:CD,17012:CD,17017:CD,17018:CD,17023:CD,17034:JM,32643:JM,32631:JM,32636:CD,17044:CD,17045:CD,17231:CD,17368:CD,17369:CF,17233
16993 :: EXPR :: reference :: Ljava/lang/Object :: v52 = v12[v154]::JM,17053:JM,17078:JM,17088:JM,17192:JM,17196
16997 :: EXPR :: assign :: Ljava/lang/Object :: v53 = v154 + #(1)::
16998 :: EXPR :: reference :: Ljava/lang/Object :: v54 = v12[v53]::JM,17053:JM,17222:JM,17226
17002 :: EXPR :: reference :: I :: v55 = v10[v154]::DD,17006
17006 :: EXPR :: assign :: J :: v56 = CONVERT I to J v55::DD,17044:DD,17172:DD,17201:CF,17007
17007 :: EXPR :: assign :: Ljava/lang/Object :: v57 = v154 + #(1)::
17008 :: EXPR :: reference :: I :: v58 = v10[v57]::DD,17012
17012 :: EXPR :: assign :: J :: v59 = CONVERT I to J v58::DD,17044:DD,17172:DD,17201
17013 :: EXPR :: reference :: I :: v60 = v11[v154]::DD,17017
17017 :: EXPR :: assign :: J :: v61 = CONVERT I to J v60::DD,17046:CF,17018
17018 :: EXPR :: assign :: Ljava/lang/Object :: v62 = v154 + #(1)::
17019 :: EXPR :: reference :: I :: v63 = v11[v62]::DD,17023
17023 :: EXPR :: assign :: J :: v64 = CONVERT I to J v63::DD,17046
17034 :: CALL :: call :: Lorg/joda/time/PeriodType :: v70 = yearMonthDay()::CL,25072
17044 :: EXPR :: assign :: Z :: v72 = v56 == v59::DD,17045
17045 :: PRED :: IF :: Z :: if (v72 == #(0)) goto 556::CF,17369:CD,17046:CD,17047
17046 :: EXPR :: assign :: Z :: v73 = v61 == v64::DD,17047
17047 :: PRED :: IF :: Z :: if (v73 != #(0)) goto 556::CF,17369:CD,17048:CD,17053
17048 :: CALL :: call :: Z :: v75 = v52.equals(v54)::JM,17053
17053 :: PRED :: IF :: Z :: if (v75 == #(0)) goto 556::CF,17369:CD,17054:CD,17058
17054 :: CALL :: call :: I :: v77 = v65.getYears()::JM,17058:CL,25206
17058 :: PRED :: IF :: Z :: if (v77 != #(0)) goto 556::CF,17369:CD,17059:CD,17063
17059 :: CALL :: call :: I :: v79 = v65.getMonths()::JM,17063:CL,25226
17063 :: PRED :: IF :: Z :: if (v79 <= #(4)) goto 556::CF,17369:CD,17064:CD,17068
17064 :: CALL :: call :: I :: v82 = v65.getMonths()::JM,17068:CL,25226
17068 :: PRED :: IF :: Z :: if (v82 >= #(8)) goto 556::CF,17369:CD,17073:CD,17078
17069 :: EXPR :: reference :: Ljava/lang/Object :: v85 = v46[#(2)]::JM,17078
17073 :: CALL :: call :: Z :: v87 = v52.equals(v85)::JM,17078
17078 :: PRED :: IF :: Z :: if (v87 == #(0)) goto 556::CF,17369:CD,17083:CD,17088
17079 :: EXPR :: reference :: Ljava/lang/Object :: v88 = v46[#(4)]::JM,17088
17083 :: CALL :: call :: Z :: v90 = v52.equals(v88)::JM,17088
17088 :: PRED :: IF :: Z :: if (v90 == #(0)) goto 556::CF,17369:CD,17089:CD,17092:CD,17172:CD,17173
17089 :: CALL :: call :: Z :: v92 = verbose()::JM,17092:CL,10527
17092 :: PRED :: IF :: Z :: if (v92 == #(0)) goto 480::CD,17095:CD,17099:CD,17104:CD,17109:CD,17113:CD,17119:CD,17123:JM,27297:JM,27277:CD,17138:CD,17143:CD,17159:CD,17164:CD,17168:CF,17172
17095 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v94 = new java.lang.StringBuilder::
17099 :: CALL :: call :: Ljava/lang/StringBuilder :: v98 = v94.append(#(Fixing duplicate name...))::
17104 :: CALL :: call :: Ljava/lang/StringBuilder :: v100 = v98.append(v54)::
17109 :: CALL :: call :: Ljava/lang/String :: v102 = v100.toString()::
17113 :: CALL :: call :: V :: v93.println(v102)::
17119 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v105 = new java.lang.StringBuilder::
17123 :: CALL :: call :: Ljava/lang/StringBuilder :: v109 = v105.append(#(     - ))::
17138 :: CALL :: call :: Ljava/lang/StringBuilder :: v114 = v109.append(v110)::
17143 :: CALL :: call :: Ljava/lang/StringBuilder :: v117 = v114.append(#( - ))::
17159 :: CALL :: call :: Ljava/lang/StringBuilder :: v123 = v117.append(v118)::
17164 :: CALL :: call :: Ljava/lang/String :: v125 = v123.toString()::
17168 :: CALL :: call :: V :: v104.println(v125)::
17172 :: EXPR :: assign :: Z :: v127 = v56 == v59::DD,17173
17173 :: PRED :: IF :: Z :: if (v127 <= #(0)) goto 519::CD,17174:CD,17178:CD,17183:CD,17188:CD,17192:CD,17201:CD,17202:CD,17369
17174 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v129 = new java.lang.StringBuilder::JM,17192:JM,17196
17178 :: CALL :: call :: Ljava/lang/StringBuilder :: v132 = v129.append(v52)::JM,17192:JM,17196
17183 :: CALL :: call :: Ljava/lang/StringBuilder :: v135 = v132.append(#(-Summer))::JM,17192:JM,17196
17188 :: CALL :: call :: Ljava/lang/String :: v137 = v135.toString()::JM,17192:JM,17196
17192 :: CALL :: call :: Ljava/lang/String :: v139 = v137.intern()::JM,17192:JM,17196
17196 :: EXPR :: modify :: Ljava/lang/Object :: v12[v154] = v139::
17201 :: EXPR :: assign :: Z :: v128 = v56 == v59::DD,17202
17202 :: PRED :: IF :: Z :: if (v128 >= #(0)) goto 556::CF,17369:CD,17203:CD,17204:CD,17208:CD,17213:CD,17218:CD,17222:CD,17230
17203 :: EXPR :: assign :: Ljava/lang/Object :: v140 = v154 + #(1)::CF,17204
17204 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v141 = new java.lang.StringBuilder::JM,17222:JM,17226
17208 :: CALL :: call :: Ljava/lang/StringBuilder :: v144 = v141.append(v54)::JM,17222:JM,17226
17213 :: CALL :: call :: Ljava/lang/StringBuilder :: v146 = v144.append(#(-Summer))::JM,17222:JM,17226
17218 :: CALL :: call :: Ljava/lang/String :: v148 = v146.toString()::JM,17222:JM,17226
17222 :: CALL :: call :: Ljava/lang/String :: v150 = v148.intern()::JM,17222:JM,17226
17226 :: EXPR :: modify :: Ljava/lang/Object :: v12[v140] = v150::
17230 :: EXPR :: assign :: Ljava/lang/Object :: v151 = v154 + #(1)::DD,17369
17231 :: EXPR :: assign :: Ljava/lang/Object :: v153 = v152 + #(1)::DD,17368
17233 :: PRED :: IF :: Z :: if (p4 $null  == #(null)) goto 694::CD,17237:CD,17244:CD,17248:CD,17253
17237 :: CALL :: call :: Ljava/lang/String :: v157 = v155.getNameKey()::JM,17253:CL,25246
17244 :: CALL :: call :: Ljava/lang/String :: v160 = v158.getNameKey()::JM,17253:CL,25246
17248 :: CALL :: call :: Z :: v162 = v157.equals(v160)::JM,17253
17253 :: PRED :: IF :: Z :: if (v162 == #(0)) goto 694::CD,17254:CD,17257:CD,17292:CD,17296
17254 :: CALL :: call :: Z :: v164 = verbose()::JM,17257:CL,10527
17257 :: PRED :: IF :: Z :: if (v164 == #(0)) goto 624::CD,17260:CD,17264:CD,17272:CD,17276:CD,17281:CD,17285
17260 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v166 = new java.lang.StringBuilder::
17264 :: CALL :: call :: Ljava/lang/StringBuilder :: v170 = v166.append(#(Fixing duplicate recu...))::
17272 :: CALL :: call :: Ljava/lang/String :: v173 = v171.getNameKey()::CL,25246
17276 :: CALL :: call :: Ljava/lang/StringBuilder :: v175 = v170.append(v173)::
17281 :: CALL :: call :: Ljava/lang/String :: v177 = v175.toString()::
17285 :: CALL :: call :: V :: v165.println(v177)::
17292 :: CALL :: call :: I :: v181 = v179.getSaveMillis()::JM,17296:CL,25255
17296 :: PRED :: IF :: Z :: if (v181 <= #(0)) goto 665::CD,17308:JM,25024:JM,20785:JM,25027:JM,25030:JM,20779:CD,17338
17308 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence :: v197 = v195.renameAppend(#(-Summer))::CL,25264
17338 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence :: v189 = v187.renameAppend(#(-Summer))::CL,25264
17350 :: NORM :: declaration :: Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone :: v201 = new org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone::DD,17362
17362 :: NORM :: compound :: Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone :: return v201::DD,16881
17364 :: EXPR :: assign :: null :: PHI v30 = v28, #(0)::DD,16901:JM,16897:JM,16898:JM,16899:JM,16900:DD,16952
17365 :: EXPR :: assign :: null :: PHI v46 = v44, v32::CF,17366:DD,17367
17366 :: EXPR :: assign :: null :: PHI v47 = v45, #(0)::DD,16967:DD,16985:CF,16966
17367 :: EXPR :: assign :: null :: PHI v44 = v46, v46, v46, v39::DD,17365:CF,16985
17368 :: EXPR :: assign :: null :: PHI v154 = v153, #(0)::DD,16992:DD,16997:DD,17007:DD,17018:DD,17203:DD,17230:DD,17369:CF,16990
17369 :: EXPR :: assign :: null :: PHI v152 = v154, v154, v154, v154, v154, v154, v154, v154, v154, v154, v151::DD,17231
17565 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.isCachable()::CE,17566:CD,17572
17566 :: EXIT :: exit :: Z :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.isCachable()::JM,9758
17569 :: EXPR :: reference :: Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone :: v3 = p0 $null .iTailZone::DD,17572
17572 :: PRED :: IF :: Z :: if (v3 == #(null)) goto 10::CD,17573:CD,17577:CD,17578
17573 :: NORM :: compound :: Z :: return #(1)::CF,17566
17574 :: EXPR :: reference :: [J :: v5 = p0 $null .iTransitions::DD,17577:DD,17580
17577 :: EXPR :: assign :: I :: v6 = v5.length::DD,17578
17578 :: PRED :: IF :: Z :: if (v6 > #(1)) goto 33::CD,17579:CD,17580:CD,17581:CD,17599:CD,17607:CD,17608:CD,17609
17579 :: NORM :: compound :: Z :: return #(0)::CF,17566
17580 :: EXPR :: assign :: I :: v10 = v5.length::CF,17581
17581 :: PRED :: IF :: Z :: if (v25 >= v10) goto 76::CD,17580:CD,17586:CD,17591:CD,17592:CD,17593:CD,17597:CD,17607:CD,17608:CD,17609:CD,17610:CD,17611:CF,17599
17582 :: EXPR :: reference :: J :: v11 = v5[v25]::DD,17591
17586 :: EXPR :: assign :: Ljava/lang/Object :: v12 = v25 - #(1)::
17587 :: EXPR :: reference :: J :: v13 = v5[v12]::DD,17591
17591 :: EXPR :: assign :: Ljava/lang/Object :: v14 = v11 - v13::DD,17592:DD,17594
17592 :: EXPR :: assign :: Z :: v16 = v14 == #(63158400000 l)::DD,17593
17593 :: PRED :: IF :: Z :: if (v16 >= #(0)) goto 68::CF,17610:CD,17594:CD,17595:CD,17596:CD,17611
17594 :: EXPR :: assign :: D :: v17 = CONVERT J to D v14::CF,17595
17595 :: EXPR :: assign :: Ljava/lang/Object :: v18 = v23 + v17::DD,17610:CF,17596
17596 :: EXPR :: assign :: Ljava/lang/Object :: v19 = v24 + #(1)::DD,17611:CF,17610
17597 :: EXPR :: assign :: Ljava/lang/Object :: v22 = v25 + #(1)::DD,17609
17599 :: PRED :: IF :: Z :: if (v24 <= #(0)) goto 106::CD,17600:CD,17601:CD,17602:CD,17603:CD,17604:CD,17606
17600 :: EXPR :: assign :: D :: v26 = CONVERT I to D v24::CF,17601
17601 :: EXPR :: assign :: Ljava/lang/Object :: v27 = v23 / v26::DD,17602
17602 :: EXPR :: assign :: Ljava/lang/Object :: v29 = v27 / #(8.64E7 d)::DD,17603
17603 :: EXPR :: assign :: Z :: v31 = v29 < #(25.0 d)::DD,17604
17604 :: PRED :: IF :: Z :: if (v31 < #(0)) goto 106::CD,17605:CD,17606
17605 :: NORM :: compound :: Z :: return #(1)::CF,17566
17606 :: NORM :: compound :: Z :: return #(0)::CF,17566
17607 :: EXPR :: assign :: null :: PHI v23 = v20, #(0.0 d)::CF,17608:DD,17595:DD,17601:DD,17610
17608 :: EXPR :: assign :: null :: PHI v24 = v21, #(0)::CF,17609:DD,17596:DD,17599:DD,17600:DD,17611
17609 :: EXPR :: assign :: null :: PHI v25 = v22, #(1)::DD,17581:DD,17586:DD,17597:CF,17580
17610 :: EXPR :: assign :: null :: PHI v20 = v23, v18::CF,17611:DD,17607
17611 :: EXPR :: assign :: null :: PHI v21 = v24, v19::DD,17608:CF,17597
17657 :: ENTR :: entry :: null :: org.joda.time.tz.CachedDateTimeZone.forZone(org.joda.time.DateTimeZone)::CE,17658:CD,17661:CD,17662:JM,17663
17658 :: EXIT :: exit :: Lorg/joda/time/tz/CachedDateTimeZone :: org.joda.time.tz.CachedDateTimeZone.forZone(org.joda.time.DateTimeZone)::JM,9763:JM,27481
17661 :: EXPR :: assign :: Z :: v3=p1 $null  INSTANCEOF org.joda.time.tz.CachedDateTimeZone::DD,17662
17662 :: PRED :: IF :: Z :: if (v3 == #(0)) goto 12::CF,17665:CD,17663:CD,17664:JM,25361:JM,20785:JM,25362:JM,25366:JM,20779:JM,25359:CD,17670
17663 :: EXPR :: assign :: Ljava/lang/Object :: v7 = CHECKCAST p1 $null ::CF,17664
17664 :: NORM :: compound :: Lorg/joda/time/tz/CachedDateTimeZone :: return v7::DD,17658
17665 :: NORM :: declaration :: Lorg/joda/time/tz/CachedDateTimeZone :: v5 = new org.joda.time.tz.CachedDateTimeZone::DD,17670
17670 :: NORM :: compound :: Lorg/joda/time/tz/CachedDateTimeZone :: return v5::DD,17658
17676 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicYearDateTimeField.set(long,int)::CE,17677:CD,17696:CD,17705:CD,17711
17677 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicYearDateTimeField.set(long,int)::JM,10222:JM,9943:JM,10225:JM,10136:JM,17766:JM,18044:JM,18175:JM,18497:JM,25624:JM,32509:JM,34036:JM,40026:JM,59053
17696 :: CALL :: call :: V :: verifyValueBounds(p0 $null , p2 $null , v7, v10)::CL,25389
17705 :: CALL :: call :: J :: v14 = v12.setYear(p1 $null , p2 $null )::JM,17711:CL,25428
17711 :: NORM :: compound :: J :: return v14::DD,17677
17719 :: ENTR :: entry :: null :: org.joda.time.field.DividedDateTimeField.set(long,int)::CE,17720:CD,17731:CD,17741:CD,17746:CD,17760:CD,17766
17720 :: EXIT :: exit :: J :: org.joda.time.field.DividedDateTimeField.set(long,int)::JM,10222:JM,9943:JM,10225:JM,10136:JM,17766:JM,18044:JM,18175:JM,18497:JM,25624:JM,32509:JM,40026:JM,59053:JM,62685
17731 :: CALL :: call :: V :: verifyValueBounds(p0 $null , p2 $null , v5, v6)::CL,25389
17741 :: CALL :: call :: I :: v11 = v9.get(p1 $null )::CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,20253:CL,11332
17746 :: CALL :: call :: I :: v13 = p0 $null .getRemainder(v11)::CL,25518
17760 :: CALL :: call :: J :: v20 = v15.set(p1 $null , v18)::JM,17766:CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,25549:CL,17826
17766 :: NORM :: compound :: J :: return v20::DD,17720
17780 :: ENTR :: entry :: null :: org.joda.time.chrono.GJYearOfEraDateTimeField.set(long,int)::CE,17781:CD,17786:CD,17790:CD,17799:CD,17806:CD,17812
17781 :: EXIT :: exit :: J :: org.joda.time.chrono.GJYearOfEraDateTimeField.set(long,int)::JM,10222:JM,9943:JM,10225:JM,10136:JM,17766:JM,18044:JM,18175:JM,18497:JM,25624:JM,32509:JM,40026:JM,59053
17786 :: CALL :: call :: I :: v7 = p0 $null .getMaximumValue()::CL,25595
17790 :: CALL :: call :: V :: verifyValueBounds(p0 $null , p2 $null , #(1), v7)::CL,25389
17799 :: CALL :: call :: I :: v11 = v9.getYear(p1 $null )::CL,20337
17806 :: CALL :: call :: J :: v16 = p0 $null .set(p1 $null , v14)::JM,17812:CL,25609
17812 :: NORM :: compound :: J :: return v16::DD,17781
17826 :: ENTR :: entry :: null :: org.joda.time.field.PreciseDateTimeField.set(long,int)::CE,17827:CD,17840:CD,17846:CD,17851:CD,17852:CD,17856:CD,17857:CD,17858
17827 :: EXIT :: exit :: J :: org.joda.time.field.PreciseDateTimeField.set(long,int)::JM,10222:JM,9943:JM,10225:JM,10136:JM,17766:JM,18044:JM,18175:JM,18497:JM,25624:JM,32509:JM,40002:JM,40026:JM,59053
17840 :: CALL :: call :: V :: verifyValueBounds(p0 $null , p2 $null , v6, v8)::CL,25389
17846 :: CALL :: call :: I :: v11 = p0 $null .get(p1 $null )::JM,17851:CL,11257
17851 :: EXPR :: assign :: Ljava/lang/Object :: v12 = p2 $null  - v11::CF,17852
17852 :: EXPR :: assign :: J :: v13 = CONVERT I to J v12::DD,17856
17853 :: EXPR :: reference :: J :: v14 = p0 $null .iUnitMillis::DD,17856
17856 :: EXPR :: assign :: Ljava/lang/Object :: v15 = v13 * v14::CF,17857
17857 :: EXPR :: assign :: Ljava/lang/Object :: v16 = p1 $null  + v15::CF,17858
17858 :: NORM :: compound :: J :: return v16::DD,17827
17868 :: ENTR :: entry :: null :: org.joda.time.field.OffsetDateTimeField.set(long,int)::CE,17869:CD,17880:CD,17890:CD,17896
17869 :: EXIT :: exit :: J :: org.joda.time.field.OffsetDateTimeField.set(long,int)::JM,10222:JM,9943:JM,10225:JM,10136:JM,17766:JM,18044:JM,18175:JM,18497:JM,25624:JM,32509:JM,40026:JM,59053
17880 :: CALL :: call :: V :: verifyValueBounds(p0 $null , p2 $null , v5, v6)::CL,25389
17890 :: CALL :: call :: J :: v11 = p0 $null .set(p1 $null , v9)::JM,17896:CL,25609
17896 :: NORM :: compound :: J :: return v11::DD,17869
17905 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.set(long,int)::CE,17906:CD,17911
17906 :: EXIT :: exit :: J :: org.joda.time.field.UnsupportedDateTimeField.set(long,int)::JM,10222:JM,9943:JM,10225:JM,10136:JM,17766:JM,18044:JM,18175:JM,18497:JM,25624:JM,32509:JM,59053
17911 :: CALL :: call :: Ljava/lang/UnsupportedOperationException :: v6 = p0 $null .unsupported()::CL,20439
17916 :: ENTR :: entry :: null :: org.joda.time.field.LenientDateTimeField.set(long,int)::CE,17917:CD,17929:CD,17935:CD,17957:CD,17962:CD,17975:CD,17982
17917 :: EXIT :: exit :: J :: org.joda.time.field.LenientDateTimeField.set(long,int)::JM,10222:JM,9943:JM,10225:JM,10136:JM,17766:JM,18044:JM,18175:JM,18497:JM,25624:JM,32509:JM,59053
17929 :: CALL :: call :: J :: v9 = v7.convertUTCToLocal(p1 $null )::CL,20087
17935 :: CALL :: call :: I :: v12 = p0 $null .get(p1 $null )::CL,11064
17957 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v22 = v17.getField(v20)::CL,25774
17962 :: CALL :: call :: J :: v24 = v22.add(v9, v15)::CL,26252:CL,25933:CL,26457:CL,26212:CL,26332:CL,26391:CL,26437:CL,26372:CL,26352:CL,26192:CL,26411
17975 :: CALL :: call :: J :: v30 = v27.convertLocalToUTC(v24, #(0), p1 $null )::JM,17982:CL,26477
17982 :: NORM :: compound :: J :: return v30::DD,17917
17999 :: ENTR :: entry :: null :: org.joda.time.field.RemainderDateTimeField.set(long,int)::CE,18000:CD,18009:CD,18019:CD,18038:CD,18044
18000 :: EXIT :: exit :: J :: org.joda.time.field.RemainderDateTimeField.set(long,int)::JM,10222:JM,9943:JM,10225:JM,10136:JM,17766:JM,18044:JM,18175:JM,18497:JM,25624:JM,32509:JM,40026:JM,59053
18009 :: CALL :: call :: V :: verifyValueBounds(p0 $null , p2 $null , #(0), v8)::CL,25389
18019 :: CALL :: call :: I :: v13 = v11.get(p1 $null )::CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,20253:CL,11332
18038 :: CALL :: call :: J :: v22 = v17.set(p1 $null , v20)::JM,18044:CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,25549:CL,17826
18044 :: NORM :: compound :: J :: return v22::DD,18000
18059 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicWeekyearDateTimeField.set(long,int)::CE,18060:CD,18083:CD,18089:CD,18094:JM,18095
18060 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicWeekyearDateTimeField.set(long,int)::JM,10222:JM,9943:JM,10225:JM,10136:JM,17766:JM,18044:JM,18175:JM,18497:JM,25624:JM,32509:JM,34003:JM,40026:JM,59053
18083 :: CALL :: call :: V :: verifyValueBounds(p0 $null , v6, v9, v12)::CL,25389
18089 :: CALL :: call :: I :: v15 = p0 $null .get(p1 $null )::JM,18094:CL,11080
18094 :: PRED :: IF :: Z :: if (v15 != p2 $null ) goto 38::CD,18095:CD,18107:CD,18115:CD,18125:CD,18134:CD,18140:CD,18153:CD,18169:CD,18175
18095 :: NORM :: compound :: J :: return p1 $null ::DD,18060
18107 :: CALL :: call :: I :: v21 = v19.getWeeksInYear(v15)::CL,26546
18115 :: CALL :: call :: I :: v24 = v22.getWeeksInYear(p2 $null )::CL,26546
18125 :: CALL :: call :: I :: v28 = v26.getWeekOfWeekyear(p1 $null )::CL,20316
18134 :: CALL :: call :: J :: v32 = v30.setYear(p1 $null , p2 $null )::CL,25428
18140 :: CALL :: call :: I :: v34 = p0 $null .get(v32)::CL,11080
18153 :: CALL :: call :: I :: v41 = v39.getWeekOfWeekyear(v38)::CL,20316
18169 :: CALL :: call :: J :: v50 = v48.set(v45, v18)::JM,18175:CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
18175 :: NORM :: compound :: J :: return v50::DD,18060
18239 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicMonthOfYearDateTimeField.set(long,int)::CE,18240:CD,18248:CD,18257:CD,18265:CD,18284:CD,18294:CD,18299:CD,18300:CD,18301
18240 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicMonthOfYearDateTimeField.set(long,int)::JM,10222:JM,9943:JM,10225:JM,10136:JM,17766:JM,18044:JM,18175:JM,18497:JM,25624:JM,32509:JM,40026:JM,59053
18248 :: CALL :: call :: V :: verifyValueBounds(p0 $null , p2 $null , #(1), v6)::CL,25389
18257 :: CALL :: call :: I :: v10 = v8.getYear(p1 $null )::CL,20337
18265 :: CALL :: call :: I :: v13 = v11.getDayOfMonth(p1 $null , v10)::CL,26585
18284 :: CALL :: call :: J :: v20 = v18.getYearMonthDayMillis(v10, p2 $null , v17)::JM,18300:CL,26650
18294 :: CALL :: call :: I :: v23 = v21.getMillisOfDay(p1 $null )::JM,18299:CL,26686
18299 :: EXPR :: assign :: J :: v24 = CONVERT I to J v23::CF,18300
18300 :: EXPR :: assign :: Ljava/lang/Object :: v25 = v20 + v24::CF,18301
18301 :: NORM :: compound :: J :: return v25::DD,18240
18327 :: ENTR :: entry :: null :: org.joda.time.field.PreciseDurationDateTimeField.set(long,int)::CE,18328:CD,18337:CD,18343:CD,18349:CD,18354:CD,18355:CD,18359:CD,18360:CD,18361
18328 :: EXIT :: exit :: J :: org.joda.time.field.PreciseDurationDateTimeField.set(long,int)::JM,10222:JM,9943:JM,10225:JM,10136:JM,17766:JM,18044:JM,18175:JM,18497:JM,25624:JM,32509:JM,40026:JM,59053
18337 :: CALL :: call :: I :: v8 = p0 $null .getMaximumValueForSet(p1 $null , p2 $null )::CL,26768:CL,26734:CL,26788:CL,26802
18343 :: CALL :: call :: V :: verifyValueBounds(p0 $null , p2 $null , v6, v8)::CL,25389
18349 :: CALL :: call :: I :: v11 = p0 $null .get(p1 $null )::JM,18354:CL,11257:CL,11188:CL,11316:CL,11032:CL,11204
18354 :: EXPR :: assign :: Ljava/lang/Object :: v12 = p2 $null  - v11::CF,18355
18355 :: EXPR :: assign :: J :: v13 = CONVERT I to J v12::DD,18359
18356 :: EXPR :: reference :: J :: v14 = p0 $null .iUnitMillis::DD,18359
18359 :: EXPR :: assign :: Ljava/lang/Object :: v15 = v13 * v14::CF,18360
18360 :: EXPR :: assign :: Ljava/lang/Object :: v16 = p1 $null  + v15::CF,18361
18361 :: NORM :: compound :: J :: return v16::DD,18328
18373 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.set(long,int)::CE,18374:CD,18382:CD,18390:CD,18399:CD,18406:JM,26827:CD,18429:JM,26869:CD,18453
18374 :: EXIT :: exit :: J :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.set(long,int)::JM,10222:JM,9943:JM,10225:JM,10136:JM,17766:JM,18044:JM,18175:JM,18497:JM,25624:JM,32509:JM,40026:JM,59053
18382 :: CALL :: call :: J :: v7 = v5.convertUTCToLocal(p1 $null )::CL,20087
18390 :: CALL :: call :: J :: v10 = v8.set(v7, p2 $null )::CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
18399 :: CALL :: call :: J :: v14 = v11.convertLocalToUTC(v10, #(0), p1 $null )::JM,18453:CL,26477
18406 :: CALL :: call :: I :: v16 = p0 $null .get(v14)::CL,11005
18429 :: CALL :: call :: Lorg/joda/time/DateTimeFieldType :: v25 = v23.getType()::CL,25739:CL,26840:CL,26849
18453 :: NORM :: compound :: J :: return v14::DD,18374
18470 :: ENTR :: entry :: null :: org.joda.time.field.ZeroIsMaxDateTimeField.set(long,int)::CE,18471:CD,18476:CD,18480:CD,18491:CD,18497
18471 :: EXIT :: exit :: J :: org.joda.time.field.ZeroIsMaxDateTimeField.set(long,int)::JM,10222:JM,9943:JM,10225:JM,10136:JM,17766:JM,18044:JM,18175:JM,18497:JM,25624:JM,32509:JM,40026:JM,59053
18476 :: CALL :: call :: I :: v6 = p0 $null .getMaximumValue()::CL,20279
18480 :: CALL :: call :: V :: verifyValueBounds(p0 $null , p2 $null , #(1), v6)::CL,25389
18491 :: CALL :: call :: J :: v14 = v12.set(p1 $null , v10)::JM,18497:CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,25549:CL,17826
18497 :: NORM :: compound :: J :: return v14::DD,18471
18511 :: ENTR :: entry :: null :: org.joda.time.chrono.GJEraDateTimeField.set(long,int)::CE,18512:CD,18517:CD,18523:CD,18528:JM,18548
18512 :: EXIT :: exit :: J :: org.joda.time.chrono.GJEraDateTimeField.set(long,int)::JM,10222:JM,9943:JM,10225:JM,10136:JM,17766:JM,18044:JM,18175:JM,18497:JM,25624:JM,32509:JM,40026:JM,40090:JM,59053
18517 :: CALL :: call :: V :: verifyValueBounds(p0 $null , p2 $null , #(0), #(1))::CL,25389
18523 :: CALL :: call :: I :: v9 = p0 $null .get(p1 $null )::JM,18528:CL,11220
18528 :: PRED :: IF :: Z :: if (v9 == p2 $null ) goto 43::CD,18532:CD,18541:CD,18547:CD,18548
18532 :: CALL :: call :: I :: v12 = v10.getYear(p1 $null )::CL,20337
18541 :: CALL :: call :: J :: v16 = v13.setYear(p1 $null , v14)::JM,18547:CL,25428
18547 :: NORM :: compound :: J :: return v16::DD,18512
18548 :: NORM :: compound :: J :: return p1 $null ::DD,18512
18565 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.getOffset(long)::CE,18566:CD,18573:CD,18578:JM,18587
18566 :: EXIT :: exit :: I :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.getOffset(long)::JM,10223:JM,9961:JM,26496:JM,26489:JM,27095:JM,33917:JM,34144:JM,34097:JM,34087:JM,34089:JM,34108:JM,44856:JM,50645:JM,50677:JM,50630:JM,50662:JM,50664:JM,50637:JM,50638:JM,50656:JM,50683:JM,50682
18570 :: EXPR :: reference :: [J :: v4 = p0 $null .iTransitions::JM,18578:JM,18587:DD,18588
18573 :: CALL :: call :: I :: v6 = binarySearch(v4, p1 $null )::JM,18578:JM,18587
18578 :: PRED :: IF :: Z :: if (v6 < #(0)) goto 28::CD,18586:CD,18587:CD,18588:CD,18589
18579 :: EXPR :: reference :: [I :: v23 = p0 $null .iWallOffsets::
18582 :: EXPR :: reference :: I :: v24 = v23[v6]::DD,18586
18586 :: NORM :: compound :: I :: return v24::DD,18566
18587 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v6 ^ #(-1)::DD,18589:DD,18590:DD,18594:DD,18608:CF,18588
18588 :: EXPR :: assign :: I :: v10 = v4.length::CF,18589
18589 :: PRED :: IF :: Z :: if (v9 >= v10) goto 56::CD,18590:CD,18604
18590 :: PRED :: IF :: Z :: if (v9 <= #(0)) goto 54::CD,18594:CD,18599:CD,18600
18591 :: EXPR :: reference :: [I :: v20 = p0 $null .iWallOffsets::
18594 :: EXPR :: assign :: Ljava/lang/Object :: v21 = v9 - #(1)::
18595 :: EXPR :: reference :: I :: v22 = v20[v21]::DD,18599
18599 :: NORM :: compound :: I :: return v22::DD,18566
18600 :: NORM :: compound :: I :: return #(0)::DD,18566
18601 :: EXPR :: reference :: Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone :: v11 = p0 $null .iTailZone::DD,18604
18604 :: PRED :: IF :: Z :: if (v11 != #(null)) goto 73::CD,18608:CD,18613:CD,18617:CD,18622
18605 :: EXPR :: reference :: [I :: v16 = p0 $null .iWallOffsets::
18608 :: EXPR :: assign :: Ljava/lang/Object :: v18 = v9 - #(1)::
18609 :: EXPR :: reference :: I :: v19 = v16[v18]::DD,18613
18613 :: NORM :: compound :: I :: return v19::DD,18566
18617 :: CALL :: call :: I :: v15 = v13.getOffset(p1 $null )::JM,18622:CL,18650
18622 :: NORM :: compound :: I :: return v15::DD,18566
18650 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.DSTZone.getOffset(long)::CE,18651:CD,18658:CD,18663:CD,18667:CD,18668
18651 :: EXIT :: exit :: I :: org.joda.time.tz.DateTimeZoneBuilder.DSTZone.getOffset(long)::JM,10223:JM,9961:JM,18622
18655 :: EXPR :: reference :: I :: v4 = p0 $null .iStandardOffset::DD,18667
18658 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence :: v6 = p0 $null .findMatchingRecurrence(p1 $null )::CL,26936
18663 :: CALL :: call :: I :: v8 = v6.getSaveMillis()::JM,18667:CL,25255
18667 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v4 + v8::CF,18668
18668 :: NORM :: compound :: I :: return v9::DD,18651
18672 :: ENTR :: entry :: null :: org.joda.time.tz.FixedDateTimeZone.getOffset(long)::CE,18673:CD,18680
18673 :: EXIT :: exit :: I :: org.joda.time.tz.FixedDateTimeZone.getOffset(long)::JM,10223:JM,9961:JM,26496:JM,26489:JM,33917:JM,34144:JM,34097:JM,34087:JM,34089:JM,34108:JM,44856:JM,50645:JM,50677:JM,50630:JM,50662:JM,50664:JM,50637:JM,50638:JM,50656:JM,50683:JM,50682
18677 :: EXPR :: reference :: I :: v4 = p0 $null .iWallOffset::DD,18680
18680 :: NORM :: compound :: I :: return v4::CF,18673
18682 :: ENTR :: entry :: null :: org.joda.time.UTCDateTimeZone.getOffset(long)::CF,18683:CD,18687
18683 :: EXIT :: exit :: I :: org.joda.time.UTCDateTimeZone.getOffset(long)::JM,10223:JM,9961:JM,26496:JM,26489:JM,33917:JM,34144:JM,34097:JM,34087:JM,34089:JM,34108:JM,44856:JM,50645:JM,50677:JM,50630:JM,50662:JM,50664:JM,50637:JM,50638:JM,50656:JM,50683:JM,50682
18687 :: NORM :: compound :: I :: return #(0)::CF,18683
18689 :: ENTR :: entry :: null :: org.joda.time.tz.CachedDateTimeZone.getOffset(long)::CE,18690:CD,18694:CD,18699:CD,18704
18690 :: EXIT :: exit :: I :: org.joda.time.tz.CachedDateTimeZone.getOffset(long)::JM,10223:JM,9961:JM,26496:JM,26489:JM,33917:JM,34144:JM,34097:JM,34087:JM,34089:JM,34108:JM,44856:JM,50645:JM,50677:JM,50630:JM,50662:JM,50664:JM,50637:JM,50638:JM,50656:JM,50683:JM,50682
18694 :: CALL :: call :: Lorg/joda/time/tz/CachedDateTimeZone$Info :: v5 = p0 $null .getInfo(p1 $null )::CL,27006
18699 :: CALL :: call :: I :: v7 = v5.getOffset(p1 $null )::JM,18704:CL,27063
18704 :: NORM :: compound :: I :: return v7::DD,18690
18708 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.getStandardOffset(long)::CE,18709:CD,18716:CD,18721:JM,18730
18709 :: EXIT :: exit :: I :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.getStandardOffset(long)::JM,9962:JM,27156
18713 :: EXPR :: reference :: [J :: v4 = p0 $null .iTransitions::JM,18721:JM,18730:DD,18731
18716 :: CALL :: call :: I :: v6 = binarySearch(v4, p1 $null )::JM,18721:JM,18730
18721 :: PRED :: IF :: Z :: if (v6 < #(0)) goto 28::CD,18729:CD,18730:CD,18731:CD,18732
18722 :: EXPR :: reference :: [I :: v23 = p0 $null .iStandardOffsets::
18725 :: EXPR :: reference :: I :: v24 = v23[v6]::DD,18729
18729 :: NORM :: compound :: I :: return v24::CF,18709
18730 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v6 ^ #(-1)::DD,18732:DD,18733:DD,18737:DD,18751:CF,18731
18731 :: EXPR :: assign :: I :: v10 = v4.length::CF,18732
18732 :: PRED :: IF :: Z :: if (v9 >= v10) goto 56::CD,18733:CD,18747
18733 :: PRED :: IF :: Z :: if (v9 <= #(0)) goto 54::CD,18737:CD,18742:CD,18743
18734 :: EXPR :: reference :: [I :: v20 = p0 $null .iStandardOffsets::
18737 :: EXPR :: assign :: Ljava/lang/Object :: v21 = v9 - #(1)::
18738 :: EXPR :: reference :: I :: v22 = v20[v21]::DD,18742
18742 :: NORM :: compound :: I :: return v22::CF,18709
18743 :: NORM :: compound :: I :: return #(0)::CF,18709
18744 :: EXPR :: reference :: Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone :: v11 = p0 $null .iTailZone::DD,18747
18747 :: PRED :: IF :: Z :: if (v11 != #(null)) goto 73::CD,18751:CD,18756:CD,18760:CD,18765
18748 :: EXPR :: reference :: [I :: v16 = p0 $null .iStandardOffsets::
18751 :: EXPR :: assign :: Ljava/lang/Object :: v18 = v9 - #(1)::
18752 :: EXPR :: reference :: I :: v19 = v16[v18]::DD,18756
18756 :: NORM :: compound :: I :: return v19::CF,18709
18760 :: CALL :: call :: I :: v15 = v13.getStandardOffset(p1 $null )::JM,18765:CL,18822
18765 :: NORM :: compound :: I :: return v15::CF,18709
18793 :: ENTR :: entry :: null :: org.joda.time.tz.FixedDateTimeZone.getStandardOffset(long)::CE,18794:CD,18801
18794 :: EXIT :: exit :: I :: org.joda.time.tz.FixedDateTimeZone.getStandardOffset(long)::JM,9962
18798 :: EXPR :: reference :: I :: v4 = p0 $null .iStandardOffset::DD,18801
18801 :: NORM :: compound :: I :: return v4::CF,18794
18803 :: ENTR :: entry :: null :: org.joda.time.tz.CachedDateTimeZone.getStandardOffset(long)::CE,18804:CD,18808:CD,18813:CD,18818
18804 :: EXIT :: exit :: I :: org.joda.time.tz.CachedDateTimeZone.getStandardOffset(long)::JM,9962
18808 :: CALL :: call :: Lorg/joda/time/tz/CachedDateTimeZone$Info :: v5 = p0 $null .getInfo(p1 $null )::CL,27006
18813 :: CALL :: call :: I :: v7 = v5.getStandardOffset(p1 $null )::JM,18818:CL,27124
18818 :: NORM :: compound :: I :: return v7::DD,18804
18822 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.DSTZone.getStandardOffset(long)::CE,18823:CD,18830
18823 :: EXIT :: exit :: I :: org.joda.time.tz.DateTimeZoneBuilder.DSTZone.getStandardOffset(long)::JM,9962:JM,18765
18827 :: EXPR :: reference :: I :: v4 = p0 $null .iStandardOffset::DD,18830
18830 :: NORM :: compound :: I :: return v4::CF,18823
18832 :: ENTR :: entry :: null :: org.joda.time.UTCDateTimeZone.getStandardOffset(long)::CF,18833:CD,18837
18833 :: EXIT :: exit :: I :: org.joda.time.UTCDateTimeZone.getStandardOffset(long)::JM,9962
18837 :: NORM :: compound :: I :: return #(0)::CF,18833
18839 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.getNameKey(long)::CE,18840:CD,18847:CD,18852:JM,18861
18840 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.getNameKey(long)::JM,10224:JM,9968:JM,10017:JM,10022:JM,10028:JM,27217:JM,62991:JM,63085
18844 :: EXPR :: reference :: [J :: v4 = p0 $null .iTransitions::JM,18852:JM,18861:DD,18862
18847 :: CALL :: call :: I :: v6 = binarySearch(v4, p1 $null )::JM,18852:JM,18861
18852 :: PRED :: IF :: Z :: if (v6 < #(0)) goto 28::CD,18860:CD,18861:CD,18862:CD,18863
18853 :: EXPR :: reference :: [Ljava/lang/String :: v24 = p0 $null .iNameKeys::
18856 :: EXPR :: reference :: Ljava/lang/Object :: v25 = v24[v6]::DD,18860
18860 :: NORM :: compound :: Ljava/lang/String :: return v25::DD,18840
18861 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v6 ^ #(-1)::DD,18863:DD,18864:DD,18868:DD,18882:CF,18862
18862 :: EXPR :: assign :: I :: v10 = v4.length::CF,18863
18863 :: PRED :: IF :: Z :: if (v9 >= v10) goto 57::CD,18864:CD,18878
18864 :: PRED :: IF :: Z :: if (v9 <= #(0)) goto 55::CD,18868:CD,18873:CD,18874
18865 :: EXPR :: reference :: [Ljava/lang/String :: v21 = p0 $null .iNameKeys::
18868 :: EXPR :: assign :: Ljava/lang/Object :: v22 = v9 - #(1)::
18869 :: EXPR :: reference :: Ljava/lang/Object :: v23 = v21[v22]::DD,18873
18873 :: NORM :: compound :: Ljava/lang/String :: return v23::DD,18840
18874 :: NORM :: compound :: Ljava/lang/String :: return #(UTC)::DD,18840
18875 :: EXPR :: reference :: Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone :: v11 = p0 $null .iTailZone::DD,18878
18878 :: PRED :: IF :: Z :: if (v11 != #(null)) goto 74::CD,18882:CD,18887:CD,18891:CD,18896
18879 :: EXPR :: reference :: [Ljava/lang/String :: v16 = p0 $null .iNameKeys::
18882 :: EXPR :: assign :: Ljava/lang/Object :: v18 = v9 - #(1)::
18883 :: EXPR :: reference :: Ljava/lang/Object :: v19 = v16[v18]::DD,18887
18887 :: NORM :: compound :: Ljava/lang/String :: return v19::DD,18840
18891 :: CALL :: call :: Ljava/lang/String :: v15 = v13.getNameKey(p1 $null )::JM,18896:CL,18960
18896 :: NORM :: compound :: Ljava/lang/String :: return v15::DD,18840
18924 :: ENTR :: entry :: null :: org.joda.time.tz.CachedDateTimeZone.getNameKey(long)::CE,18925:CD,18929:CD,18934:CD,18939
18925 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.tz.CachedDateTimeZone.getNameKey(long)::JM,10224:JM,9968:JM,10017:JM,10022:JM,10028:JM,62991:JM,63085
18929 :: CALL :: call :: Lorg/joda/time/tz/CachedDateTimeZone$Info :: v5 = p0 $null .getInfo(p1 $null )::CL,27006
18934 :: CALL :: call :: Ljava/lang/String :: v7 = v5.getNameKey(p1 $null )::JM,18939:CL,27185
18939 :: NORM :: compound :: Ljava/lang/String :: return v7::DD,18925
18943 :: ENTR :: entry :: null :: org.joda.time.UTCDateTimeZone.getNameKey(long)::CF,18944:CD,18948
18944 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.UTCDateTimeZone.getNameKey(long)::JM,10224:JM,9968:JM,10017:JM,10022:JM,10028:JM,62991:JM,63085
18948 :: NORM :: compound :: Ljava/lang/String :: return #(UTC)::CF,18944
18950 :: ENTR :: entry :: null :: org.joda.time.tz.FixedDateTimeZone.getNameKey(long)::CE,18951:CD,18958
18951 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.tz.FixedDateTimeZone.getNameKey(long)::JM,10224:JM,9968:JM,10017:JM,10022:JM,10028:JM,62991:JM,63085
18955 :: EXPR :: reference :: Ljava/lang/String :: v4 = p0 $null .iNameKey::DD,18958
18958 :: NORM :: compound :: Ljava/lang/String :: return v4::CF,18951
18960 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.DSTZone.getNameKey(long)::CE,18961:CD,18965:CD,18970:CD,18974
18961 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.tz.DateTimeZoneBuilder.DSTZone.getNameKey(long)::JM,10224:JM,9968:JM,10017:JM,10022:JM,10028:JM,18896
18965 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence :: v5 = p0 $null .findMatchingRecurrence(p1 $null )::CL,26936
18970 :: CALL :: call :: Ljava/lang/String :: v7 = v5.getNameKey()::JM,18974:CL,25246
18974 :: NORM :: compound :: Ljava/lang/String :: return v7::DD,18961
18977 :: ENTR :: entry :: null :: org.joda.time.tz.CachedDateTimeZone.nextTransition(long)::CE,18978:CD,18985:CD,18990
18978 :: EXIT :: exit :: J :: org.joda.time.tz.CachedDateTimeZone.nextTransition(long)::JM,9941:JM,9943:JM,10222:JM,34099:JM,34142:JM,34110:JM,34143:JM,50647:JM,50684:JM,50658:JM,50685
18985 :: CALL :: call :: J :: v6 = v4.nextTransition(p1 $null )::JM,18990:CL,19007
18990 :: NORM :: compound :: J :: return v6::DD,18978
18993 :: ENTR :: entry :: null :: org.joda.time.tz.FixedDateTimeZone.nextTransition(long)::CF,18994:CD,18998
18994 :: EXIT :: exit :: J :: org.joda.time.tz.FixedDateTimeZone.nextTransition(long)::JM,9941:JM,9943:JM,10222:JM,34099:JM,34142:JM,34110:JM,34143:JM,50647:JM,50684:JM,50658:JM,50685
18998 :: NORM :: compound :: J :: return p1 $null ::CF,18994
19000 :: ENTR :: entry :: null :: org.joda.time.UTCDateTimeZone.nextTransition(long)::CF,19001:CD,19005
19001 :: EXIT :: exit :: J :: org.joda.time.UTCDateTimeZone.nextTransition(long)::JM,9941:JM,9943:JM,10222:JM,34099:JM,34142:JM,34110:JM,34143:JM,50647:JM,50684:JM,50658:JM,50685
19005 :: NORM :: compound :: J :: return p1 $null ::CF,19001
19007 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.nextTransition(long)::CE,19008:CD,19015:CD,19020:CD,19024:CD,19025:CD,19053:JM,19035:JM,19021:JM,19023
19008 :: EXIT :: exit :: J :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.nextTransition(long)::JM,9941:JM,9943:JM,10222:JM,18990:JM,34099:JM,34142:JM,34110:JM,34143:JM,34652:JM,34654:JM,34671:JM,50647:JM,50684:JM,50658:JM,50685
19012 :: EXPR :: reference :: [J :: v4 = p0 $null .iTransitions::JM,19020:JM,19021:JM,19023:DD,19024
19015 :: CALL :: call :: I :: v6 = binarySearch(v4, p1 $null )::JM,19020:JM,19021:JM,19023:JM,19035
19020 :: PRED :: IF :: Z :: if (v6 < #(0)) goto 27::CD,19021:CD,19023:CD,19053
19021 :: EXPR :: assign :: Ljava/lang/Object :: v11 = v6 + #(1)::DD,19053
19023 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v6 ^ #(-1)::CF,19053
19024 :: EXPR :: assign :: I :: v13 = v4.length::CF,19025
19025 :: PRED :: IF :: Z :: if (v12 >= v13) goto 43::CD,19030:CD,19034
19026 :: EXPR :: reference :: J :: v24 = v4[v12]::DD,19030
19030 :: NORM :: compound :: J :: return v24::DD,19008
19031 :: EXPR :: reference :: Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone :: v14 = p0 $null .iTailZone::DD,19034
19034 :: PRED :: IF :: Z :: if (v14 != #(null)) goto 53::CD,19035:CD,19047:CD,19052
19035 :: NORM :: compound :: J :: return p1 $null ::DD,19008
19047 :: CALL :: call :: J :: v23 = v21.nextTransition(v20)::JM,19052:CL,19083
19052 :: NORM :: compound :: J :: return v23::DD,19008
19053 :: EXPR :: assign :: null :: PHI v12 = v11, v9::DD,19025:CF,19024
19083 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.DSTZone.nextTransition(long)::CE,19084:CD,19101:CD,19108:CD,19109:CD,19118:CD,19125:CD,19126:CD,19131:CD,19132:CD,19134:CD,19139:CD,19140:CD,19141:CD,19142:CD,19143
19084 :: EXIT :: exit :: J :: org.joda.time.tz.DateTimeZoneBuilder.DSTZone.nextTransition(long)::JM,9941:JM,9943:JM,10222:JM,19052
19101 :: CALL :: call :: J :: v10 = v5.next(p1 $null , v4, v8)::JM,19139:JM,19110:CL,27246
19108 :: EXPR :: assign :: Z :: v14 = p1 $null  == #(0 l)::DD,19109
19109 :: PRED :: IF :: Z :: if (v14 <= #(0)) goto 47::CF,19139:CD,19110:CD,19111
19110 :: EXPR :: assign :: Z :: v16 = v10 == #(0 l)::DD,19111
19111 :: PRED :: IF :: Z :: if (v16 >= #(0)) goto 47::CF,19139
19118 :: CALL :: call :: J :: v23 = v6.next(p1 $null , v4, v21)::JM,19141:JM,19127:CL,27246
19125 :: EXPR :: assign :: Z :: v26 = p1 $null  == #(0 l)::DD,19126
19126 :: PRED :: IF :: Z :: if (v26 <= #(0)) goto 93::CF,19141:CD,19127:CD,19128
19127 :: EXPR :: assign :: Z :: v27 = v23 == #(0 l)::DD,19128
19128 :: PRED :: IF :: Z :: if (v27 >= #(0)) goto 93::CF,19141
19131 :: EXPR :: assign :: Z :: v31 = v19 == v30::DD,19132
19132 :: PRED :: IF :: Z :: if (v31 <= #(0)) goto 124::CD,19143
19134 :: NORM :: compound :: J :: return v32::DD,19084
19139 :: EXPR :: assign :: null :: PHI v17 = v10, v10, p1 $null ::DD,19140
19140 :: EXPR :: assign :: null :: PHI v19 = v17, p1 $null , p1 $null ::DD,19131:DD,19143
19141 :: EXPR :: assign :: null :: PHI v28 = v23, v23, p1 $null ::DD,19142
19142 :: EXPR :: assign :: null :: PHI v30 = v28, p1 $null , p1 $null ::DD,19131:DD,19143
19143 :: EXPR :: assign :: null :: PHI v32 = v30, v19::CF,19134
19194 :: ENTR :: entry :: null :: org.joda.time.tz.CachedDateTimeZone.previousTransition(long)::CE,19195:CD,19202:CD,19207
19195 :: EXIT :: exit :: J :: org.joda.time.tz.CachedDateTimeZone.previousTransition(long)::JM,10225:JM,10134:JM,10150:JM,10136:JM,50678:JM,50670
19202 :: CALL :: call :: J :: v6 = v4.previousTransition(p1 $null )::JM,19207:CL,19210
19207 :: NORM :: compound :: J :: return v6::DD,19195
19210 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.previousTransition(long)::CE,19211:CD,19218:CD,19223:JM,19267:JM,19255:JM,19224:JM,19226:JM,19242:JM,19228:JM,19229
19211 :: EXIT :: exit :: J :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.previousTransition(long)::JM,10225:JM,10134:JM,10150:JM,10136:JM,19207:JM,50678:JM,50670
19215 :: EXPR :: reference :: [J :: v4 = p0 $null .iTransitions::JM,19223:JM,19229:DD,19230
19218 :: CALL :: call :: I :: v6 = binarySearch(v4, p1 $null )::JM,19223:JM,19229:JM,19267:JM,19255:JM,19224:JM,19226:JM,19242:JM,19228
19223 :: PRED :: IF :: Z :: if (v6 < #(0)) goto 34::CD,19224:CD,19225:CD,19229:CD,19230:CD,19231
19224 :: EXPR :: assign :: Z :: v28 = p1 $null  == #(-9223372036854775808 l)::DD,19225
19225 :: PRED :: IF :: Z :: if (v28 <= #(0)) goto 30::CD,19226:CD,19227:CD,19228
19226 :: EXPR :: assign :: Ljava/lang/Object :: v29 = p1 $null  - #(1 l)::CF,19227
19227 :: NORM :: compound :: J :: return v29::DD,19211
19228 :: NORM :: compound :: J :: return p1 $null ::DD,19211
19229 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v6 ^ #(-1)::DD,19231:DD,19232:DD,19233:DD,19258:CF,19230
19230 :: EXPR :: assign :: I :: v10 = v4.length::CF,19231
19231 :: PRED :: IF :: Z :: if (v9 >= v10) goto 74::CD,19232:CD,19246
19232 :: PRED :: IF :: Z :: if (v9 <= #(0)) goto 72::CD,19233:CD,19238:CD,19239:CD,19242
19233 :: EXPR :: assign :: Ljava/lang/Object :: v24 = v9 - #(1)::
19234 :: EXPR :: reference :: J :: v25 = v4[v24]::DD,19238:DD,19240
19238 :: EXPR :: assign :: Z :: v26 = v25 == #(-9223372036854775808 l)::DD,19239
19239 :: PRED :: IF :: Z :: if (v26 <= #(0)) goto 72::CD,19240:CD,19241:CD,19242
19240 :: EXPR :: assign :: Ljava/lang/Object :: v27 = v25 - #(1 l)::CF,19241
19241 :: NORM :: compound :: J :: return v27::DD,19211
19242 :: NORM :: compound :: J :: return p1 $null ::DD,19211
19243 :: EXPR :: reference :: Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone :: v11 = p0 $null .iTailZone::DD,19246
19246 :: PRED :: IF :: Z :: if (v11 == #(null)) goto 104::CD,19250:CD,19255:CD,19256:CD,19258:CD,19263:CD,19264
19250 :: CALL :: call :: J :: v15 = v13.previousTransition(p1 $null )::JM,19255:JM,19257:CL,19324
19255 :: EXPR :: assign :: Z :: v16 = v15 == p1 $null ::DD,19256
19256 :: PRED :: IF :: Z :: if (v16 >= #(0)) goto 104::CD,19257:CD,19258:CD,19263:CD,19264
19257 :: NORM :: compound :: J :: return v15::DD,19211
19258 :: EXPR :: assign :: Ljava/lang/Object :: v18 = v9 - #(1)::
19259 :: EXPR :: reference :: J :: v19 = v4[v18]::DD,19263:DD,19265
19263 :: EXPR :: assign :: Z :: v21 = v19 == #(-9223372036854775808 l)::DD,19264
19264 :: PRED :: IF :: Z :: if (v21 <= #(0)) goto 123::CD,19265:CD,19266:CD,19267
19265 :: EXPR :: assign :: Ljava/lang/Object :: v23 = v19 - #(1 l)::CF,19266
19266 :: NORM :: compound :: J :: return v23::DD,19211
19267 :: NORM :: compound :: J :: return p1 $null ::DD,19211
19317 :: ENTR :: entry :: null :: org.joda.time.UTCDateTimeZone.previousTransition(long)::CF,19318:CD,19322
19318 :: EXIT :: exit :: J :: org.joda.time.UTCDateTimeZone.previousTransition(long)::JM,10225:JM,10134:JM,10150:JM,10136:JM,50678:JM,50670
19322 :: NORM :: compound :: J :: return p1 $null ::CF,19318
19324 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.DSTZone.previousTransition(long)::CE,19325:CD,19329:CD,19343:CD,19350:CD,19351:CD,19360:CD,19367:CD,19368:CD,19373:CD,19374:CD,19376:CD,19377:CD,19382:CD,19383:CD,19384:CD,19385:CD,19386
19325 :: EXIT :: exit :: J :: org.joda.time.tz.DateTimeZoneBuilder.DSTZone.previousTransition(long)::JM,10225:JM,10134:JM,10150:JM,10136:JM,19255:JM,19257
19329 :: EXPR :: assign :: Ljava/lang/Object :: v5 = p1 $null  + #(1 l)::DD,19350:DD,19367:DD,19382:DD,19383:DD,19384:DD,19385
19343 :: CALL :: call :: J :: v12 = v7.previous(v5, v6, v10)::JM,19382:JM,19352:CL,27310
19350 :: EXPR :: assign :: Z :: v16 = v5 == #(0 l)::DD,19351
19351 :: PRED :: IF :: Z :: if (v16 >= #(0)) goto 51::CF,19382:CD,19352:CD,19353
19352 :: EXPR :: assign :: Z :: v18 = v12 == #(0 l)::DD,19353
19353 :: PRED :: IF :: Z :: if (v18 <= #(0)) goto 51::CF,19382
19360 :: CALL :: call :: J :: v25 = v8.previous(v5, v6, v23)::JM,19384:JM,19369:CL,27310
19367 :: EXPR :: assign :: Z :: v28 = v5 == #(0 l)::DD,19368
19368 :: PRED :: IF :: Z :: if (v28 >= #(0)) goto 97::CF,19384:CD,19369:CD,19370
19369 :: EXPR :: assign :: Z :: v29 = v25 == #(0 l)::DD,19370
19370 :: PRED :: IF :: Z :: if (v29 <= #(0)) goto 97::CF,19384
19373 :: EXPR :: assign :: Z :: v33 = v21 == v32::DD,19374
19374 :: PRED :: IF :: Z :: if (v33 <= #(0)) goto 129::CD,19386
19376 :: EXPR :: assign :: Ljava/lang/Object :: v35 = v34 - #(1 l)::CF,19377
19377 :: NORM :: compound :: J :: return v35::DD,19325
19382 :: EXPR :: assign :: null :: PHI v19 = v12, v12, v5::DD,19383
19383 :: EXPR :: assign :: null :: PHI v21 = v19, v5, v5::DD,19373:DD,19386
19384 :: EXPR :: assign :: null :: PHI v30 = v25, v25, v5::DD,19385
19385 :: EXPR :: assign :: null :: PHI v32 = v30, v5, v5::DD,19373:DD,19386
19386 :: EXPR :: assign :: null :: PHI v34 = v21, v32::CF,19376
19425 :: ENTR :: entry :: null :: org.joda.time.tz.FixedDateTimeZone.previousTransition(long)::CF,19426:CD,19430
19426 :: EXIT :: exit :: J :: org.joda.time.tz.FixedDateTimeZone.previousTransition(long)::JM,10225:JM,10134:JM,10150:JM,10136:JM,50678:JM,50670
19430 :: NORM :: compound :: J :: return p1 $null ::CF,19426
19432 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.writeTo(java.lang.String,java.io.OutputStream)::CD,19438:CD,19439
19438 :: EXPR :: assign :: Z :: v5=p2 $null  INSTANCEOF java.io.DataOutput::DD,19439
19439 :: PRED :: IF :: Z :: if (v5 == #(0)) goto 19::CF,19447:CD,19441:CD,19452
19441 :: CALL :: call :: V :: p0 $null .writeTo(p1 $null , v11)::CL,27332
19447 :: NORM :: declaration :: Ljava/io/DataOutputStream :: v7 = new java.io.DataOutputStream::
19452 :: CALL :: call :: V :: p0 $null .writeTo(p1 $null , v7)::CL,27332
19535 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.readFrom(java.io.InputStream,java.lang.String)::CE,19536:CD,19540:CD,19541
19536 :: EXIT :: exit :: Lorg/joda/time/DateTimeZone :: org.joda.time.tz.DateTimeZoneBuilder.readFrom(java.io.InputStream,java.lang.String)::JM,52691
19540 :: EXPR :: assign :: Z :: v4=p1 $null  INSTANCEOF java.io.DataInput::DD,19541
19541 :: PRED :: IF :: Z :: if (v4 == #(0)) goto 16::CF,19549:CD,19543:CD,19548:CD,19554:CD,19559
19543 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v12 = readFrom(v10, p2 $null )::JM,19548:CL,27429
19548 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v12::DD,19536
19549 :: NORM :: declaration :: Ljava/io/DataInputStream :: v6 = new java.io.DataInputStream::
19554 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v9 = readFrom(v6, p2 $null )::JM,19559:CL,27429
19559 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v9::DD,19536
19567 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.DSTZone.equals(java.lang.Object)::CE,19568:CD,19572:JM,19574:JM,19576
19568 :: EXIT :: exit :: Z :: org.joda.time.tz.DateTimeZoneBuilder.DSTZone.equals(java.lang.Object)::JM,10457:JM,19837
19572 :: PRED :: IF :: Z :: if (p0 $null  != p1 $null ) goto 8::CD,19573:CD,19574:CD,19575
19573 :: NORM :: compound :: Z :: return #(1)::DD,19568
19574 :: EXPR :: assign :: Z :: v4=p1 $null  INSTANCEOF org.joda.time.tz.DateTimeZoneBuilder$DSTZone::DD,19575
19575 :: PRED :: IF :: Z :: if (v4 == #(0)) goto 79::CD,19576:CD,19577:CD,19581:CD,19585:CD,19590:CD,19623:CD,19624:CD,19625
19576 :: EXPR :: assign :: Ljava/lang/Object :: v6 = CHECKCAST p1 $null ::
19577 :: CALL :: call :: Ljava/lang/String :: v8 = p0 $null .getID()::JM,19590:CL,9866
19581 :: CALL :: call :: Ljava/lang/String :: v10 = v6.getID()::JM,19590:CL,9866
19585 :: CALL :: call :: Z :: v12 = v8.equals(v10)::JM,19590
19590 :: PRED :: IF :: Z :: if (v12 == #(0)) goto 77::CD,19597:CD,19625
19591 :: EXPR :: reference :: I :: v13 = p0 $null .iStandardOffset::DD,19597
19594 :: EXPR :: reference :: I :: v14 = v6.iStandardOffset::DD,19597
19597 :: PRED :: IF :: Z :: if (v13 != v14) goto 77::CD,19604:CD,19609:CD,19625
19604 :: CALL :: call :: Z :: v18 = v15.equals(v16)::JM,19609:CL,27510
19609 :: PRED :: IF :: Z :: if (v18 == #(0)) goto 77::CD,19616:CD,19621:CD,19625
19616 :: CALL :: call :: Z :: v22 = v19.equals(v20)::JM,19621:CL,27510
19621 :: PRED :: IF :: Z :: if (v22 == #(0)) goto 77::CD,19625
19623 :: NORM :: compound :: Z :: return v24::DD,19568
19624 :: NORM :: compound :: Z :: return #(0)::DD,19568
19625 :: EXPR :: assign :: null :: PHI v24 = #(1), #(0)::CF,19623
19647 :: ENTR :: entry :: null :: org.joda.time.UTCDateTimeZone.equals(java.lang.Object)::CF,19648:CD,19652:CD,19653
19648 :: EXIT :: exit :: Z :: org.joda.time.UTCDateTimeZone.equals(java.lang.Object)::JM,10457:JM,23341:JM,23510
19652 :: EXPR :: assign :: Z :: v4=p1 $null  INSTANCEOF org.joda.time.UTCDateTimeZone::CF,19653
19653 :: NORM :: compound :: Z :: return v4::CF,19648
19655 :: ENTR :: entry :: null :: org.joda.time.tz.CachedDateTimeZone.equals(java.lang.Object)::CE,19656:CD,19660:JM,19662
19656 :: EXIT :: exit :: Z :: org.joda.time.tz.CachedDateTimeZone.equals(java.lang.Object)::JM,10457:JM,23341:JM,23510
19660 :: PRED :: IF :: Z :: if (p0 $null  != p1 $null ) goto 8::CD,19661:CD,19662:CD,19663
19661 :: NORM :: compound :: Z :: return #(1)::DD,19656
19662 :: EXPR :: assign :: Z :: v4=p1 $null  INSTANCEOF org.joda.time.tz.CachedDateTimeZone::DD,19663
19663 :: PRED :: IF :: Z :: if (v4 == #(0)) goto 30::CD,19671:CD,19676:CD,19677
19671 :: CALL :: call :: Z :: v10 = v6.equals(v8)::JM,19676:CL,19745
19676 :: NORM :: compound :: Z :: return v10::DD,19656
19677 :: NORM :: compound :: Z :: return #(0)::DD,19656
19686 :: ENTR :: entry :: null :: org.joda.time.tz.FixedDateTimeZone.equals(java.lang.Object)::CE,19687:CD,19691:JM,19693:JM,19695
19687 :: EXIT :: exit :: Z :: org.joda.time.tz.FixedDateTimeZone.equals(java.lang.Object)::JM,10457:JM,23341:JM,23510:JM,27468
19691 :: PRED :: IF :: Z :: if (p0 $null  != p1 $null ) goto 8::CD,19692:CD,19693:CD,19694
19692 :: NORM :: compound :: Z :: return #(1)::CF,19687
19693 :: EXPR :: assign :: Z :: v4=p1 $null  INSTANCEOF org.joda.time.tz.FixedDateTimeZone::DD,19694
19694 :: PRED :: IF :: Z :: if (v4 == #(0)) goto 62::CD,19695:CD,19696:CD,19700:CD,19704:CD,19709:CD,19725:CD,19726:CD,19727
19695 :: EXPR :: assign :: Ljava/lang/Object :: v6 = CHECKCAST p1 $null ::
19696 :: CALL :: call :: Ljava/lang/String :: v8 = p0 $null .getID()::JM,19709:CL,9866
19700 :: CALL :: call :: Ljava/lang/String :: v10 = v6.getID()::JM,19709:CL,9866
19704 :: CALL :: call :: Z :: v12 = v8.equals(v10)::JM,19709
19709 :: PRED :: IF :: Z :: if (v12 == #(0)) goto 60::CD,19716:CD,19727
19710 :: EXPR :: reference :: I :: v13 = p0 $null .iStandardOffset::DD,19716
19713 :: EXPR :: reference :: I :: v14 = v6.iStandardOffset::DD,19716
19716 :: PRED :: IF :: Z :: if (v13 != v14) goto 60::CD,19723:CD,19727
19717 :: EXPR :: reference :: I :: v15 = p0 $null .iWallOffset::DD,19723
19720 :: EXPR :: reference :: I :: v16 = v6.iWallOffset::DD,19723
19723 :: PRED :: IF :: Z :: if (v15 != v16) goto 60::CD,19727
19725 :: NORM :: compound :: Z :: return v18::CF,19687
19726 :: NORM :: compound :: Z :: return #(0)::CF,19687
19727 :: EXPR :: assign :: null :: PHI v18 = #(1), #(0)::CF,19725
19745 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.equals(java.lang.Object)::CE,19746:CD,19750:JM,19752:JM,19754
19746 :: EXIT :: exit :: Z :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.equals(java.lang.Object)::JM,10457:JM,19676:JM,23341:JM,23510
19750 :: PRED :: IF :: Z :: if (p0 $null  != p1 $null ) goto 8::CD,19751:CD,19752:CD,19753
19751 :: NORM :: compound :: Z :: return #(1)::DD,19746
19752 :: EXPR :: assign :: Z :: v4=p1 $null  INSTANCEOF org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone::DD,19753
19753 :: PRED :: IF :: Z :: if (v4 == #(0)) goto 128::CD,19754:CD,19755:CD,19759:CD,19763:CD,19768:CD,19839:CD,19840:CD,19841
19754 :: EXPR :: assign :: Ljava/lang/Object :: v6 = CHECKCAST p1 $null ::
19755 :: CALL :: call :: Ljava/lang/String :: v8 = p0 $null .getID()::JM,19768:CL,9866
19759 :: CALL :: call :: Ljava/lang/String :: v10 = v6.getID()::JM,19768:CL,9866
19763 :: CALL :: call :: Z :: v12 = v8.equals(v10)::JM,19768
19768 :: PRED :: IF :: Z :: if (v12 == #(0)) goto 126::CD,19775:CD,19780:CD,19841
19769 :: EXPR :: reference :: [J :: v13 = p0 $null .iTransitions::JM,19780
19772 :: EXPR :: reference :: [J :: v14 = v6.iTransitions::JM,19780
19775 :: CALL :: call :: Z :: v16 = equals(v13, v14)::JM,19780
19780 :: PRED :: IF :: Z :: if (v16 == #(0)) goto 126::CD,19787:CD,19792:CD,19841
19781 :: EXPR :: reference :: [Ljava/lang/String :: v17 = p0 $null .iNameKeys::JM,19792
19784 :: EXPR :: reference :: [Ljava/lang/String :: v18 = v6.iNameKeys::JM,19792
19787 :: CALL :: call :: Z :: v20 = equals(v17, v18)::JM,19792
19792 :: PRED :: IF :: Z :: if (v20 == #(0)) goto 126::CD,19799:CD,19804:CD,19841
19793 :: EXPR :: reference :: [I :: v21 = p0 $null .iWallOffsets::JM,19804
19796 :: EXPR :: reference :: [I :: v22 = v6.iWallOffsets::JM,19804
19799 :: CALL :: call :: Z :: v24 = equals(v21, v22)::JM,19804
19804 :: PRED :: IF :: Z :: if (v24 == #(0)) goto 126::CD,19811:CD,19816:CD,19841
19805 :: EXPR :: reference :: [I :: v25 = p0 $null .iStandardOffsets::JM,19816
19808 :: EXPR :: reference :: [I :: v26 = v6.iStandardOffsets::JM,19816
19811 :: CALL :: call :: Z :: v28 = equals(v25, v26)::JM,19816
19816 :: PRED :: IF :: Z :: if (v28 == #(0)) goto 126::CD,19820:CD,19841
19817 :: EXPR :: reference :: Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone :: v29 = p0 $null .iTailZone::DD,19820
19820 :: PRED :: IF :: Z :: if (v29 != #(null)) goto 108::CD,19824:CD,19832:CD,19837
19821 :: EXPR :: reference :: Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone :: v35 = v6.iTailZone::DD,19824
19824 :: PRED :: IF :: Z :: if (#(null) != v35) goto 126::CD,19841
19832 :: CALL :: call :: Z :: v34 = v31.equals(v32)::JM,19837:CL,19567
19837 :: PRED :: IF :: Z :: if (v34 == #(0)) goto 126::CD,19841
19839 :: NORM :: compound :: Z :: return v37::DD,19746
19840 :: NORM :: compound :: Z :: return #(0)::DD,19746
19841 :: EXPR :: assign :: null :: PHI v37 = #(1), #(0)::CF,19839
20071 :: ENTR :: entry :: null :: org.joda.time.field.DecoratedDateTimeField.get(long)::CE,20072:CD,20079:CD,20084
20072 :: EXIT :: exit :: I :: org.joda.time.field.DecoratedDateTimeField.get(long)::JM,11000
20079 :: CALL :: call :: I :: v6 = v4.get(p1 $null )::JM,20084:CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,20253:CL,11332
20084 :: NORM :: compound :: I :: return v6::DD,20072
20087 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.convertUTCToLocal(long)::CD,20092
20092 :: CALL :: call :: I :: v5 = p0 $null .getOffset(p1 $null )::CL,18682:CL,18565:CL,18672:CL,18689
20128 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getDayOfWeek(long)::CF,20129:CD,20133:CD,20134:JM,20135:JM,20137
20129 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicChronology.getDayOfWeek(long)::JM,11045:JM,34213:JM,34214:JM,34219
20133 :: EXPR :: assign :: Z :: v5 = p1 $null  == #(0 l)::DD,20134
20134 :: PRED :: IF :: Z :: if (v5 < #(0)) goto 19::CD,20135:CD,20137:CD,20138:CD,20139:CD,20140:CD,20146:CD,20147:CD,20148:CD,20149:CD,20150:CD,20151
20135 :: EXPR :: assign :: Ljava/lang/Object :: v20 = p1 $null  / #(86400000 l)::DD,20151
20137 :: EXPR :: assign :: Ljava/lang/Object :: v8 = p1 $null  - #(86399999 l)::DD,20138
20138 :: EXPR :: assign :: Ljava/lang/Object :: v10 = v8 / #(86400000 l)::DD,20139:DD,20141:DD,20151
20139 :: EXPR :: assign :: Z :: v12 = v10 == #(-3 l)::DD,20140
20140 :: PRED :: IF :: Z :: if (v12 >= #(0)) goto 52::CF,20151:CD,20141:CD,20142:CD,20143:CD,20144:CD,20145:CD,20146:CD,20147:CD,20148:CD,20149:CD,20150
20141 :: EXPR :: assign :: Ljava/lang/Object :: v15 = v10 + #(4 l)::DD,20142
20142 :: EXPR :: assign :: Ljava/lang/Object :: v17 = v15 % #(7 l)::CF,20143
20143 :: EXPR :: assign :: I :: v18 = CONVERT J to I v17::CF,20144
20144 :: EXPR :: assign :: Ljava/lang/Object :: v19 = #(7) + v18::CF,20145
20145 :: NORM :: compound :: I :: return v19::CF,20129
20146 :: EXPR :: assign :: Ljava/lang/Object :: v24 = v21 + #(3 l)::DD,20147
20147 :: EXPR :: assign :: Ljava/lang/Object :: v25 = v24 % #(7 l)::CF,20148
20148 :: EXPR :: assign :: I :: v26 = CONVERT J to I v25::CF,20149
20149 :: EXPR :: assign :: Ljava/lang/Object :: v27 = #(1) + v26::CF,20150
20150 :: NORM :: compound :: I :: return v27::CF,20129
20151 :: EXPR :: assign :: null :: PHI v21 = v20, v10::DD,20146
20172 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getMonthOfYear(long)::CE,20173:CD,20177:CD,20182:CD,20188
20173 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicChronology.getMonthOfYear(long)::JM,11061
20177 :: CALL :: call :: I :: v5 = p0 $null .getYear(p1 $null )::CL,20337
20182 :: CALL :: call :: I :: v7 = p0 $null .getMonthOfYear(p1 $null , v5)::JM,20188:CL,27623
20188 :: NORM :: compound :: I :: return v7::DD,20173
20193 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getWeekyear(long)::CE,20194:CD,20198:CD,20203:CD,20209
20194 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicChronology.getWeekyear(long)::JM,11093
20198 :: CALL :: call :: I :: v5 = p0 $null .getYear(p1 $null )::JM,20225:CL,20337
20203 :: CALL :: call :: I :: v7 = p0 $null .getWeekOfWeekyear(p1 $null , v5)::JM,20209:JM,20217:CL,27766
20209 :: PRED :: IF :: Z :: if (v7 != #(1)) goto 34::CD,20211:CD,20216:CD,20217
20211 :: CALL :: call :: I :: v17 = p0 $null .getYear(v15)::JM,20216:CL,20337
20216 :: NORM :: compound :: I :: return v17::DD,20194
20217 :: PRED :: IF :: Z :: if (v7 <= #(51)) goto 48::CD,20219:CD,20224:CD,20225
20219 :: CALL :: call :: I :: v13 = p0 $null .getYear(v11)::JM,20224:CL,20337
20224 :: NORM :: compound :: I :: return v13::DD,20194
20225 :: NORM :: compound :: I :: return v5::DD,20194
20253 :: ENTR :: entry :: null :: org.joda.time.chrono.ISOYearOfEraDateTimeField.get(long)::CE,20254:CD,20262:CD,20267:CD,20270:CD,20271
20254 :: EXIT :: exit :: I :: org.joda.time.chrono.ISOYearOfEraDateTimeField.get(long)::JM,11110:JM,11116:JM,11138:JM,11139:JM,11141:JM,11168:JM,11170:JM,11164:JM,11346:JM,11350:JM,11356:JM,20084:JM,20267:JM,20268:JM,20271
20262 :: CALL :: call :: I :: v7 = v5.get(p1 $null )::JM,20267:JM,20268:JM,20271:CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,20253:CL,11332
20267 :: PRED :: IF :: Z :: if (v7 >= #(0)) goto 19::CD,20268:CD,20271
20268 :: EXPR :: assign :: Ljava/lang/Object :: v9 = -(v7)::DD,20271
20270 :: NORM :: compound :: I :: return v10::DD,20254
20271 :: EXPR :: assign :: null :: PHI v10 = v9, v7::CF,20270
20279 :: ENTR :: entry :: null :: org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue()::CE,20280:CD,20287:CD,20291:CD,20292
20280 :: EXIT :: exit :: I :: org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue()::JM,11116:JM,20291:JM,25607:JM,27873:JM,27912:JM,27958:JM,49919:JM,55025:JM,55010:JM,55011:JM,55013:JM,55015:JM,56847:JM,56853
20287 :: CALL :: call :: I :: v6 = v4.getMaximumValue()::JM,20291:CL,27834:CL,25595:CL,25628:CL,27881:CL,27840:CL,27894:CL,27875:CL,27947:CL,27821:CL,27969:CL,27923:CL,27900:CL,27849:CL,27914:CL,20279:CL,27936:CL,27862:CL,27960
20291 :: EXPR :: assign :: Ljava/lang/Object :: v8 = v6 + #(1)::CF,20292
20292 :: NORM :: compound :: I :: return v8::DD,20280
20295 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getDayOfYear(long)::CE,20296:CD,20300:CD,20305:CD,20311
20296 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicChronology.getDayOfYear(long)::JM,11201
20300 :: CALL :: call :: I :: v5 = p0 $null .getYear(p1 $null )::CL,20337
20305 :: CALL :: call :: I :: v7 = p0 $null .getDayOfYear(p1 $null , v5)::JM,20311:CL,27978
20311 :: NORM :: compound :: I :: return v7::DD,20296
20316 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getWeekOfWeekyear(long)::CE,20317:CD,20321:CD,20326:CD,20332
20317 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicChronology.getWeekOfWeekyear(long)::JM,11217:JM,48928:JM,48927
20321 :: CALL :: call :: I :: v5 = p0 $null .getYear(p1 $null )::CL,20337
20326 :: CALL :: call :: I :: v7 = p0 $null .getWeekOfWeekyear(p1 $null , v5)::JM,20332:CL,27766
20332 :: NORM :: compound :: I :: return v7::DD,20317
20337 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getYear(long)::CE,20338:CD,20342:CD,20346:CD,20347:CD,20351:CD,20352:CD,20353:CD,20356:CD,20357:CD,20358:CD,20363:CD,20364:CD,20365:CD,20381:CD,20382:CD,20384:JM,20378
20338 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicChronology.getYear(long)::JM,11233:JM,11254:JM,20225:JM,20216:JM,20224
20342 :: CALL :: call :: J :: v5 = p0 $null .getAverageMillisPerYearDividedByTwo()::JM,20354:JM,20356:CL,28001
20346 :: EXPR :: assign :: Ljava/lang/Object :: v7 = p1 $null  ? #(1)::DD,20351
20347 :: CALL :: call :: J :: v9 = p0 $null .getApproxMillisAtEpochDividedByTwo()::JM,20351:CL,28007
20351 :: EXPR :: assign :: Ljava/lang/Object :: v10 = v7 + v9::DD,20352:DD,20354:DD,20382
20352 :: EXPR :: assign :: Z :: v12 = v10 == #(0 l)::DD,20353
20353 :: PRED :: IF :: Z :: if (v12 >= #(0)) goto 33::CF,20382:CD,20354:CD,20355
20354 :: EXPR :: assign :: Ljava/lang/Object :: v14 = v10 - v5::DD,20355
20355 :: EXPR :: assign :: Ljava/lang/Object :: v16 = v14 + #(1 l)::DD,20382
20356 :: EXPR :: assign :: Ljava/lang/Object :: v18 = v17 / v5::CF,20357
20357 :: EXPR :: assign :: I :: v19 = CONVERT J to I v18::DD,20366:DD,20380:DD,20384
20358 :: CALL :: call :: J :: v21 = p0 $null .getYearMillis(v19)::JM,20377:JM,20363:CL,28013
20363 :: EXPR :: assign :: Ljava/lang/Object :: v22 = p1 $null  - v21::DD,20364:DD,20368
20364 :: EXPR :: assign :: Z :: v23 = v22 == #(0 l)::DD,20365
20365 :: PRED :: IF :: Z :: if (v23 >= #(0)) goto 69::CD,20366:CD,20368:CD,20369:CD,20384
20366 :: EXPR :: assign :: Ljava/lang/Object :: v34 = v19 + #(-1)::DD,20384
20368 :: EXPR :: assign :: Z :: v25 = v22 == #(31536000000 l)::DD,20369
20369 :: PRED :: IF :: Z :: if (v25 < #(0)) goto 114::CF,20384:CD,20370:CD,20375:CD,20377:CD,20378:CD,20379:CD,20383
20370 :: CALL :: call :: Z :: v27 = p0 $null .isLeapYear(v19)::JM,20375:CL,28029
20375 :: PRED :: IF :: Z :: if (v27 == #(0)) goto 99::CD,20383
20377 :: EXPR :: assign :: Ljava/lang/Object :: v30 = v21 + v29::DD,20378
20378 :: EXPR :: assign :: Z :: v31 = v30 == p1 $null ::DD,20379
20379 :: PRED :: IF :: Z :: if (v31 > #(0)) goto 114::CF,20384:CD,20380
20380 :: EXPR :: assign :: Ljava/lang/Object :: v32 = v19 + #(1)::DD,20384
20381 :: NORM :: compound :: I :: return v35::DD,20338
20382 :: EXPR :: assign :: null :: PHI v17 = v10, v16::DD,20356
20383 :: EXPR :: assign :: null :: PHI v29 = #(31622400000 l), #(31536000000 l)::DD,20377
20384 :: EXPR :: assign :: null :: PHI v35 = v34, v19, v19, v32::CF,20381
20430 :: ENTR :: entry :: null :: org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis()::CE,20431:CD,20437
20431 :: EXIT :: exit :: J :: org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis()::JM,11268:JM,11285:JM,11590
20434 :: EXPR :: reference :: J :: v3 = p0 $null .iUnitMillis::DD,20437
20437 :: NORM :: compound :: J :: return v3::CF,20431
20439 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.unsupported()::CD,20444:CD,20451:CD,20456:CD,20461
20444 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v4 = new java.lang.StringBuilder::
20451 :: CALL :: call :: Ljava/lang/StringBuilder :: v8 = v4.append(v6)::
20456 :: CALL :: call :: Ljava/lang/StringBuilder :: v11 = v8.append(#( field is unsupported))::
20461 :: CALL :: call :: Ljava/lang/String :: v13 = v11.toString()::
20474 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getDayOfMonth(long)::CE,20475:CD,20479:CD,20484:CD,20490:CD,20497
20475 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicChronology.getDayOfMonth(long)::JM,11329
20479 :: CALL :: call :: I :: v5 = p0 $null .getYear(p1 $null )::CL,20337
20484 :: CALL :: call :: I :: v7 = p0 $null .getMonthOfYear(p1 $null , v5)::CL,27623
20490 :: CALL :: call :: I :: v9 = p0 $null .getDayOfMonth(p1 $null , v5, v7)::JM,20497:CL,28054
20497 :: NORM :: compound :: I :: return v9::DD,20475
20518 :: EXPR :: modify :: Lorg/joda/time/Chronology :: p0 $null .iBase = p1 $null ::
20521 :: EXPR :: modify :: Ljava/lang/Object :: p0 $null .iParam = p2 $null ::
20524 :: CALL :: call :: V :: p0 $null .setFields()::CL,28099
20727 :: CALL :: call :: Lorg/joda/time/PeriodType :: v8 = p0 $null .checkPeriodType(p2 $null )::JM,20736:CL,29046
20732 :: CALL :: call :: Lorg/joda/time/Chronology :: v10 = getChronology(p3 $null )::CL,29057
20736 :: EXPR :: modify :: Lorg/joda/time/PeriodType :: p0 $null .iType = v8::
20739 :: CALL :: call :: [I :: v12 = v10.get(p0 $null , p1 $null )::JM,20745:CL,29070
20745 :: EXPR :: modify :: [I :: p0 $null .iValues = v12::
20779 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v6 = new java.lang.IllegalArgumentException::JM,20785:JM,20779
20785 :: EXPR :: modify :: Ljava/lang/String :: p0 $null .iID = p1 $null ::
20794 :: ENTR :: entry :: null :: org.joda.time.chrono.GregorianChronology.getInstance(org.joda.time.DateTimeZone,int)::CD,20799:CD,20805:CD,20810:CD,20811:CD,20823:CD,20830:CD,20834:CD,20839:CD,20844:CD,20853:CD,20903:CD,20904:JM,20855:JM,20891
20799 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 8::CF,20903:CD,20800
20800 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v6 = getDefault()::JM,20903:CL,29153
20805 :: CALL :: call :: Ljava/lang/Object :: v10 = v8.get(v7)::JM,20810
20810 :: EXPR :: assign :: Ljava/lang/Object :: v11 = CHECKCAST v10::DD,20811:DD,20904
20811 :: PRED :: IF :: Z :: if (v11 != #(null)) goto 53::CF,20904:CD,20812:CD,20815:CD,20821:CD,20822
20812 :: NORM :: declaration :: [Lorg/joda/time/chrono/GregorianChronology :: v13 = new org.joda.time.chrono.GregorianChronology[]::DD,20904
20815 :: CALL :: call :: Ljava/lang/Object :: v16 = v14.putIfAbsent(v7, v13)::JM,20821
20821 :: EXPR :: assign :: Ljava/lang/Object :: v17 = CHECKCAST v16::DD,20822:DD,20904
20822 :: PRED :: IF :: Z :: if (v17 == #(null)) goto 53::CF,20904
20823 :: EXPR :: assign :: Ljava/lang/Object :: v20 = p2 $null  - #(1)::
20824 :: EXPR :: reference :: Ljava/lang/Object :: v21 = v18[v20]::DD,20853
20830 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v24 = new java.lang.StringBuilder::
20834 :: CALL :: call :: Ljava/lang/StringBuilder :: v28 = v24.append(#(Invalid min days in f...))::
20839 :: CALL :: call :: Ljava/lang/StringBuilder :: v30 = v28.append(p2 $null )::JM,20855:JM,20891
20844 :: CALL :: call :: Ljava/lang/String :: v32 = v30.toString()::
20853 :: PRED :: IF :: Z :: if (v21 != #(null)) goto 172::CD,20855:CD,20860
20855 :: EXPR :: assign :: Ljava/lang/Object :: v34 = p2 $null  - #(1)::
20856 :: EXPR :: reference :: Ljava/lang/Object :: v35 = v18[v34]::DD,20860
20860 :: PRED :: IF :: Z :: if (v35 != #(null)) goto 159::CD,20861:CD,20863:CD,20891:CD,20905
20861 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v36 = org.joda.time.DateTimeZone.UTC::CF,20863
20863 :: PRED :: IF :: Z :: if (v7 != v36) goto 128::CF,20864:JM,47152:JM,47138:JM,47142:JM,20518:JM,47161:JM,20521:JM,47131:JM,47147:JM,20524:CD,20874:CD,20879:CD,20880:CD,20905
20864 :: NORM :: declaration :: Lorg/joda/time/chrono/GregorianChronology :: v44 = new org.joda.time.chrono.GregorianChronology::DD,20905
20874 :: CALL :: call :: Lorg/joda/time/chrono/GregorianChronology :: v39 = getInstance(v37, p2 $null )::CL,20794
20879 :: NORM :: declaration :: Lorg/joda/time/chrono/GregorianChronology :: v40 = new org.joda.time.chrono.GregorianChronology::DD,20905
20880 :: CALL :: call :: Lorg/joda/time/chrono/ZonedChronology :: v42 = getInstance(v39, v7)::CL,29315
20891 :: EXPR :: assign :: Ljava/lang/Object :: v47 = p2 $null  - #(1)::
20892 :: EXPR :: modify :: Ljava/lang/Object :: v18[v47] = v46::
20903 :: EXPR :: assign :: null :: PHI v7 = p1 $null , v6::DD,20863
20904 :: EXPR :: assign :: null :: PHI v18 = v11, v13, v17::CF,20823
20905 :: EXPR :: assign :: null :: PHI v46 = v44, v40::DD,20892:CF,20891
20966 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v6 = new java.lang.IllegalArgumentException::JM,20966:JM,20972
20972 :: EXPR :: modify :: Lorg/joda/time/DurationFieldType :: p0 $null .iType = p1 $null ::
20996 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v17 = new java.lang.IllegalArgumentException::JM,29378:JM,21020:JM,29372
21002 :: CALL :: call :: J :: v10 = p2 $null .getUnitMillis()::JM,21006:CL,21151:CL,21164:CL,21125:CL,21116:CL,21131:CL,21170
21006 :: EXPR :: modify :: J :: p0 $null .iUnitMillis = v10::
21014 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v14 = new java.lang.IllegalArgumentException::JM,29378:JM,21020:JM,29372
21020 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iUnitField = p2 $null ::
21035 :: ENTR :: entry :: null :: org.joda.time.field.DecoratedDurationField.isPrecise()::CE,21036:CD,21042:CD,21046
21036 :: EXIT :: exit :: Z :: org.joda.time.field.DecoratedDurationField.isPrecise()::JM,21046:JM,21082:JM,21071:JM,29098
21042 :: CALL :: call :: Z :: v5 = v3.isPrecise()::JM,21046:CL,21035:CL,21048:CL,21092:CL,21098:CL,21110:CL,21104
21046 :: NORM :: compound :: Z :: return v5::DD,21036
21048 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDurationField.isPrecise()::CE,21049:CD,21055:CD,21081:CD,21082
21049 :: EXIT :: exit :: Z :: org.joda.time.chrono.ZonedChronology.ZonedDurationField.isPrecise()::JM,21046:JM,21082:JM,21071:JM,29098
21052 :: EXPR :: reference :: Z :: v3 = p0 $null .iTimeField::DD,21055
21055 :: PRED :: IF :: Z :: if (v3 == #(0)) goto 18::CD,21059:CD,21067:CD,21071:CD,21082
21059 :: CALL :: call :: Z :: v14 = v12.isPrecise()::JM,21082:CL,21035:CL,21048:CL,21092:CL,21098:CL,21110:CL,21104
21067 :: CALL :: call :: Z :: v7 = v5.isPrecise()::JM,21071:CL,21035:CL,21048:CL,21092:CL,21098:CL,21110:CL,21104
21071 :: PRED :: IF :: Z :: if (v7 == #(0)) goto 42::CD,21075:CD,21079:CD,21082
21075 :: CALL :: call :: Z :: v10 = v8.isFixed()::JM,21079:CL,29406:CL,29387:CL,29412:CL,29400
21079 :: PRED :: IF :: Z :: if (v10 == #(0)) goto 42::CD,21082
21081 :: NORM :: compound :: Z :: return v15::DD,21049
21082 :: EXPR :: assign :: null :: PHI v15 = v14, #(1), #(0)::CF,21081
21092 :: ENTR :: entry :: null :: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField.isPrecise()::CF,21093:CD,21096
21093 :: EXIT :: exit :: Z :: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField.isPrecise()::JM,21046:JM,21082:JM,21071:JM,29098
21096 :: NORM :: compound :: Z :: return #(0)::CF,21093
21098 :: ENTR :: entry :: null :: org.joda.time.field.PreciseDurationField.isPrecise()::CF,21099:CD,21102
21099 :: EXIT :: exit :: Z :: org.joda.time.field.PreciseDurationField.isPrecise()::JM,21046:JM,21082:JM,21071:JM,29098
21102 :: NORM :: compound :: Z :: return #(1)::CF,21099
21104 :: ENTR :: entry :: null :: org.joda.time.field.MillisDurationField.isPrecise()::CF,21105:CD,21108
21105 :: EXIT :: exit :: Z :: org.joda.time.field.MillisDurationField.isPrecise()::JM,21046:JM,21082:JM,21071:JM,29098
21108 :: NORM :: compound :: Z :: return #(1)::CF,21105
21110 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDurationField.isPrecise()::CF,21111:CD,21114
21111 :: EXIT :: exit :: Z :: org.joda.time.field.UnsupportedDurationField.isPrecise()::JM,21046:JM,21082:JM,21071:JM,29098
21114 :: NORM :: compound :: Z :: return #(1)::CF,21111
21116 :: ENTR :: entry :: null :: org.joda.time.field.PreciseDurationField.getUnitMillis()::CE,21117:CD,21123
21117 :: EXIT :: exit :: J :: org.joda.time.field.PreciseDurationField.getUnitMillis()::JM,11590:JM,21006:JM,21147:JM,21162:JM,40993:JM,48308:JM,48311:JM,48341:JM,48344:JM,57002:JM,62896:JM,62898:JM,62905
21120 :: EXPR :: reference :: J :: v3 = p0 $null .iUnitMillis::DD,21123
21123 :: NORM :: compound :: J :: return v3::CF,21117
21125 :: ENTR :: entry :: null :: org.joda.time.field.MillisDurationField.getUnitMillis()::CF,21126:CD,21129
21126 :: EXIT :: exit :: J :: org.joda.time.field.MillisDurationField.getUnitMillis()::JM,11590:JM,21006:JM,21147:JM,21162:JM,22984:JM,23547:JM,40993:JM,48308:JM,48311:JM,48341:JM,48344:JM,57002:JM,62896:JM,62898:JM,62905
21129 :: NORM :: compound :: J :: return #(1 l)::CF,21126
21131 :: ENTR :: entry :: null :: org.joda.time.field.ScaledDurationField.getUnitMillis()::CE,21132:CD,21139:CD,21146:CD,21147:CD,21148
21132 :: EXIT :: exit :: J :: org.joda.time.field.ScaledDurationField.getUnitMillis()::JM,11590:JM,21006:JM,21147:JM,21162:JM,40993:JM,48308:JM,48311:JM,48341:JM,48344:JM,57002:JM,62896:JM,62898:JM,62905
21139 :: CALL :: call :: J :: v6 = v4.getUnitMillis()::JM,21147:CL,21151:CL,21164:CL,21125:CL,21116:CL,21131:CL,21170
21143 :: EXPR :: reference :: I :: v7 = p0 $null .iScalar::DD,21146
21146 :: EXPR :: assign :: J :: v8 = CONVERT I to J v7::CF,21147
21147 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v6 * v8::CF,21148
21148 :: NORM :: compound :: J :: return v9::CF,21132
21151 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDurationField.getUnitMillis()::CE,21152:CD,21158:CD,21162
21152 :: EXIT :: exit :: J :: org.joda.time.chrono.ZonedChronology.ZonedDurationField.getUnitMillis()::JM,11590:JM,21006:JM,21147:JM,21162:JM,40993:JM,48308:JM,48311:JM,48341:JM,48344:JM,57002:JM,62896:JM,62898:JM,62905
21158 :: CALL :: call :: J :: v5 = v3.getUnitMillis()::JM,21162:CL,21151:CL,21164:CL,21125:CL,21116:CL,21131:CL,21170
21162 :: NORM :: compound :: J :: return v5::CF,21152
21164 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDurationField.getUnitMillis()::CF,21165:CD,21168
21165 :: EXIT :: exit :: J :: org.joda.time.field.UnsupportedDurationField.getUnitMillis()::JM,11590:JM,21006:JM,21147:JM,21162:JM,40993:JM,48308:JM,48311:JM,48341:JM,48344:JM,57002:JM,62896:JM,62898:JM,62905
21168 :: NORM :: compound :: J :: return #(0 l)::CF,21165
21170 :: ENTR :: entry :: null :: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField.getUnitMillis()::CE,21171:CD,21180
21171 :: EXIT :: exit :: J :: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField.getUnitMillis()::JM,11590:JM,21006:JM,21147:JM,21162:JM,40993:JM,48308:JM,48311:JM,48341:JM,48344:JM,57002:JM,62896:JM,62898:JM,62905
21174 :: EXPR :: reference :: Lorg/joda/time/field/ImpreciseDateTimeField :: v3 = p0 $null .this$0::
21177 :: EXPR :: reference :: J :: v4 = v3.iUnitMillis::DD,21180
21180 :: NORM :: compound :: J :: return v4::CF,21171
21193 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v13 = new java.lang.IllegalArgumentException::JM,29378:JM,21210:JM,29372
21204 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v10 = new java.lang.IllegalArgumentException::JM,29378:JM,21210:JM,29372
21210 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iField = p1 $null ::
21222 :: ENTR :: entry :: null :: org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue()::CF,21223:CD,21226
21223 :: EXIT :: exit :: I :: org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue()::JM,49905:JM,54945:JM,54971:JM,56829:JM,56835
21226 :: NORM :: compound :: I :: return #(0)::CF,21223
21257 :: EXPR :: modify :: Ljava/lang/String :: p0 $null .iName = p1 $null ::
21281 :: EXPR :: modify :: Ljava/lang/String :: p0 $null .iName = p1 $null ::
21295 :: NORM :: declaration :: Ljava/util/ArrayList :: v4 = new java.util.ArrayList::
21306 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendYear(int,int)::CD,21315
21315 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v8 = p0 $null .appendSignedDecimal(v6, p1 $null , p2 $null )::CL,29459
21326 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.toFormatter()::CD,21330:JM,29668:JM,29671:CD,21357
21330 :: CALL :: call :: Ljava/lang/Object :: v4 = p0 $null .getFormatter()::CL,29532
21357 :: NORM :: declaration :: Ljava/lang/UnsupportedOperationException :: v15 = new java.lang.UnsupportedOperationException::
21386 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendLiteral(char)::JM,29718:CD,21396
21396 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v7 = p0 $null .append0(v4)::CL,29725
21405 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendMonthOfYear(int)::CD,21413
21413 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v8 = p0 $null .appendDecimal(v5, p1 $null , #(2))::CL,29759
21424 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendDayOfMonth(int)::CD,21432
21432 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v8 = p0 $null .appendDecimal(v5, p1 $null , #(2))::CL,29759
21443 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendWeekyear(int,int)::CD,21452
21452 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v8 = p0 $null .appendSignedDecimal(v6, p1 $null , p2 $null )::CL,29459
21463 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendLiteral(java.lang.String)::CD,21469:CD,21475:CD,21479
21469 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v18 = new java.lang.IllegalArgumentException::
21475 :: CALL :: call :: I :: v6 = p1 $null .length()::JM,21479
21479 :: PRED :: IF :: null :: switch v6::CD,21482:JM,29718:CD,21491:JM,29847:CD,21502
21482 :: CALL :: call :: C :: v14 = p1 $null .charAt(#(0))::JM,21479
21491 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v17 = p0 $null .append0(v11)::CL,29725
21502 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = p0 $null .append0(v7)::CL,29725
21519 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendWeekOfWeekyear(int)::CD,21527
21527 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v8 = p0 $null .appendDecimal(v5, p1 $null , #(2))::CL,29759
21538 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendDayOfWeek(int)::CD,21546
21546 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v8 = p0 $null .appendDecimal(v5, p1 $null , #(1))::CL,29759
21557 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendDayOfYear(int)::CD,21565
21565 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v8 = p0 $null .appendDecimal(v5, p1 $null , #(3))::CL,29759
21576 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendHourOfDay(int)::CD,21584
21584 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v8 = p0 $null .appendDecimal(v5, p1 $null , #(2))::CL,29759
21595 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendMinuteOfHour(int)::CD,21603
21603 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v8 = p0 $null .appendDecimal(v5, p1 $null , #(2))::CL,29759
21614 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendSecondOfMinute(int)::CD,21622
21622 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v8 = p0 $null .appendDecimal(v5, p1 $null , #(2))::CL,29759
21633 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfSecond(int,int)::CD,21642
21642 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v8 = p0 $null .appendFraction(v6, p1 $null , p2 $null )::CL,29854
21653 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset(java.lang.String,boolean,int,int)::JM,29922:JM,29940:JM,29941:JM,29927:JM,29932:JM,29916:JM,29919:CD,21670
21670 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = p0 $null .append0(v7)::CL,29725
21683 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.append(org.joda.time.format.DateTimeFormatter)::CD,21689:CD,21703
21689 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v11 = new java.lang.IllegalArgumentException::
21703 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = p0 $null .append0(v6, v8)::CL,29980
21743 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendFixedDecimal(org.joda.time.DateTimeFieldType,int)::CD,21750:CD,21757:CD,21758:CD,21762:CD,21767:CD,21772:JM,47186:JM,47189:JM,47192:JM,38844:CD,21788
21750 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v22 = new java.lang.IllegalArgumentException::
21757 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v11 = new java.lang.IllegalArgumentException::
21758 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v12 = new java.lang.StringBuilder::
21762 :: CALL :: call :: Ljava/lang/StringBuilder :: v16 = v12.append(#(Illegal number of dig...))::
21767 :: CALL :: call :: Ljava/lang/StringBuilder :: v18 = v16.append(p2 $null )::
21772 :: CALL :: call :: Ljava/lang/String :: v20 = v18.toString()::
21788 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = p0 $null .append0(v7)::CL,29725
21831 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatter.getParser()::CD,21838
21838 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v5 = of(v3)::CL,30056
21844 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendOptional(org.joda.time.format.DateTimeParser)::CD,21849:CD,21853:CD,21854:JM,30160:JM,30138:JM,30141:JM,30142:JM,30143:JM,30159:CD,21871
21849 :: CALL :: call :: V :: p0 $null .checkParser(p1 $null )::CL,30091
21853 :: NORM :: declaration :: [Lorg/joda/time/format/InternalParser :: v6 = new org.joda.time.format.InternalParser[]::
21854 :: CALL :: call :: Lorg/joda/time/format/InternalParser :: v9 = of(p1 $null )::JM,21858:CL,30106
21858 :: EXPR :: modify :: Ljava/lang/Object :: v6[#(0)] = v9::
21862 :: EXPR :: modify :: Ljava/lang/Object :: v6[#(1)] = #(null)::
21871 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v15 = p0 $null .append0(#(null), v12)::CL,29980
21892 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.toParser()::CD,21896:CD,21907:CD,21912
21896 :: CALL :: call :: Ljava/lang/Object :: v4 = p0 $null .getFormatter()::CL,29532
21907 :: CALL :: call :: Lorg/joda/time/format/DateTimeParser :: v13 = of(v11)::CL,30056
21912 :: NORM :: declaration :: Ljava/lang/UnsupportedOperationException :: v8 = new java.lang.UnsupportedOperationException::
21926 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])::CD,21932:CD,21938:CD,21944:CD,21945:CD,21951:CD,21992
21932 :: PRED :: IF :: Z :: if (p1 $null  == #(null)) goto 10::CD,21933
21933 :: CALL :: call :: V :: p0 $null .checkPrinter(p1 $null )::CL,30186
21938 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v40 = new java.lang.IllegalArgumentException::
21944 :: EXPR :: assign :: I :: v7 = p2 $null .length::DD,21945:DD,21976:DD,21977
21945 :: PRED :: IF :: Z :: if (v7 != #(1)) goto 63::CD,21957:CD,21965:CD,21969:CD,21976:CD,21977:CD,21978:CD,22004:CD,22012:JM,30160:JM,30138:JM,30141:JM,30142:JM,30143:JM,30159:CD,22021:CD,22028
21951 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v37 = new java.lang.IllegalArgumentException::
21957 :: CALL :: call :: Lorg/joda/time/format/InternalPrinter :: v31 = of(p1 $null )::CL,30201
21965 :: CALL :: call :: Lorg/joda/time/format/InternalParser :: v34 = of(v32)::CL,30106
21969 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v36 = p0 $null .append0(v31, v34)::CL,29980
21976 :: NORM :: declaration :: [Lorg/joda/time/format/InternalParser :: v9 = new org.joda.time.format.InternalParser[]::CF,22028
21977 :: EXPR :: assign :: Ljava/lang/Object :: v11 = v7 - #(1)::CF,21978
21978 :: PRED :: IF :: Z :: if (v16 >= v11) goto 118::CD,21977:CD,21983:CD,21998:CD,22028
21983 :: CALL :: call :: Lorg/joda/time/format/InternalParser :: v14 = of(v12)::JM,21987:CL,30106
21987 :: EXPR :: modify :: Ljava/lang/Object :: v9[v16] = v14::
21992 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v26 = new java.lang.IllegalArgumentException::
21998 :: EXPR :: assign :: Ljava/lang/Object :: v15 = v16 + #(1)::DD,22028
22004 :: CALL :: call :: Lorg/joda/time/format/InternalParser :: v19 = of(v17)::JM,22008:CL,30106
22008 :: EXPR :: modify :: Ljava/lang/Object :: v9[v16] = v19::
22012 :: CALL :: call :: Lorg/joda/time/format/InternalPrinter :: v21 = of(p1 $null )::CL,30201
22021 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v25 = p0 $null .append0(v21, v22)::CL,29980
22028 :: EXPR :: assign :: null :: PHI v16 = v15, #(0)::DD,21978:DD,21998:CF,21977
22069 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.append(org.joda.time.format.DateTimeParser)::CD,22074:CD,22078:CD,22082
22074 :: CALL :: call :: V :: p0 $null .checkParser(p1 $null )::CL,30091
22078 :: CALL :: call :: Lorg/joda/time/format/InternalParser :: v7 = of(p1 $null )::CL,30106
22082 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v9 = p0 $null .append0(#(null), v7)::CL,29980
22094 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfMinute(int,int)::CD,22103
22103 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v8 = p0 $null .appendFraction(v6, p1 $null , p2 $null )::CL,29854
22114 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfHour(int,int)::CD,22123
22123 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v8 = p0 $null .appendFraction(v6, p1 $null , p2 $null )::CL,29854
22134 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatter.withZoneUTC()::CD,22140
22140 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v5 = p0 $null .withZone(v3)::CL,30225
22404 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatter.withChronology(org.joda.time.Chronology)::CD,22412
22409 :: EXPR :: reference :: Lorg/joda/time/Chronology :: v4 = p0 $null .iChrono::DD,22412
22412 :: PRED :: IF :: Z :: if (v4 != p1 $null ) goto 10::JM,30546:JM,30549:JM,30552:JM,30537:JM,30555:JM,30540:JM,30558:JM,30543
22693 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoProvider.1.run()::CE,22694:CD,22697:CD,22701
22694 :: EXIT :: exit :: Ljava/lang/Object :: org.joda.time.tz.ZoneInfoProvider.1.run()::
22697 :: CALL :: call :: Ljava/io/InputStream :: v4 = p0 $null .run()::JM,22701:CL,30870
22701 :: NORM :: compound :: Ljava/lang/Object :: return v4::DD,22694
22835 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.getProvider()::CD,22838:CD,22840:CD,22844:CD,22845
22838 :: EXPR :: reference :: Ljava/util/concurrent/atomic/AtomicReference :: v2 = org.joda.time.DateTimeZone.cProvider::JM,22840:JM,22844
22840 :: CALL :: call :: Ljava/lang/Object :: v4 = v2.get()::JM,22840:JM,22844
22844 :: EXPR :: assign :: Ljava/lang/Object :: v5 = CHECKCAST v4::DD,22845
22845 :: PRED :: IF :: Z :: if (v5 != #(null)) goto 40::CD,22846
22846 :: CALL :: call :: Lorg/joda/time/tz/Provider :: v8 = getDefaultProvider()::CL,30923
22876 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoProvider.getAvailableIDs()::CE,22877:CD,22883
22877 :: EXIT :: exit :: Ljava/util/Set :: org.joda.time.tz.ZoneInfoProvider.getAvailableIDs()::JM,15252
22880 :: EXPR :: reference :: Ljava/util/Set :: v3 = p0 $null .iZoneInfoKeys::DD,22883
22883 :: NORM :: compound :: Ljava/util/Set :: return v3::CF,22877
22885 :: ENTR :: entry :: null :: org.joda.time.tz.UTCProvider.getAvailableIDs()::CF,22886:CD,22889:CD,22891
22886 :: EXIT :: exit :: Ljava/util/Set :: org.joda.time.tz.UTCProvider.getAvailableIDs()::JM,15252
22889 :: EXPR :: reference :: Ljava/util/Set :: v3 = org.joda.time.tz.UTCProvider.AVAILABLE_IDS::CF,22891
22891 :: NORM :: compound :: Ljava/util/Set :: return v3::CF,22886
22918 :: ENTR :: entry :: null :: org.joda.time.DurationFieldType.StandardDurationFieldType.hashCode()::CE,22919:CD,22925:CD,22926
22919 :: EXIT :: exit :: I :: org.joda.time.DurationFieldType.StandardDurationFieldType.hashCode()::JM,23006:JM,23048
22922 :: EXPR :: reference :: B :: v4 = p0 $null .iOrdinal::DD,22925
22925 :: EXPR :: assign :: Ljava/lang/Object :: v5 = #(1) ? v4::CF,22926
22926 :: NORM :: compound :: I :: return v5::CF,22919
22929 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDurationField.hashCode()::CE,22930:CD,22933:CD,22937:CD,22941
22930 :: EXIT :: exit :: I :: org.joda.time.field.UnsupportedDurationField.hashCode()::JM,22972:JM,23015
22933 :: CALL :: call :: Ljava/lang/String :: v4 = p0 $null .getName()::JM,22941:CL,31247
22937 :: CALL :: call :: I :: v6 = v4.hashCode()::JM,22941
22941 :: NORM :: compound :: I :: return v6::CF,22930
22943 :: ENTR :: entry :: null :: org.joda.time.DateTimeFieldType.StandardDateTimeFieldType.hashCode()::CE,22944:CD,22950:CD,22951
22944 :: EXIT :: exit :: I :: org.joda.time.DateTimeFieldType.StandardDateTimeFieldType.hashCode()::
22947 :: EXPR :: reference :: B :: v4 = p0 $null .iOrdinal::DD,22950
22950 :: EXPR :: assign :: Ljava/lang/Object :: v5 = #(1) ? v4::CF,22951
22951 :: NORM :: compound :: I :: return v5::CF,22944
22954 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDurationField.hashCode()::CE,22955:CD,22961:CD,22968:CD,22972:CD,22973
22955 :: EXIT :: exit :: I :: org.joda.time.chrono.ZonedChronology.ZonedDurationField.hashCode()::JM,22972:JM,23015
22961 :: CALL :: call :: I :: v5 = v3.hashCode()::JM,22972:CL,22929:CL,22987:CL,23030:CL,22976:CL,22954
22968 :: CALL :: call :: I :: v8 = v6.hashCode()::JM,22972:CL,28979:CL,28963:CL,28993:CL,29021
22972 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v5 ^ v8::CF,22973
22973 :: NORM :: compound :: I :: return v9::DD,22955
22976 :: ENTR :: entry :: null :: org.joda.time.field.MillisDurationField.hashCode()::CF,22977:CD,22980:CD,22984:CD,22985
22977 :: EXIT :: exit :: I :: org.joda.time.field.MillisDurationField.hashCode()::JM,22972:JM,23015
22980 :: CALL :: call :: J :: v4 = p0 $null .getUnitMillis()::JM,22984:CL,21125
22984 :: EXPR :: assign :: I :: v5 = CONVERT J to I v4::CF,22985
22985 :: NORM :: compound :: I :: return v5::CF,22977
22987 :: ENTR :: entry :: null :: org.joda.time.field.ScaledDurationField.hashCode()::CE,22988:CD,22994:CD,22995:CD,22996:CD,22997:CD,23002:CD,23006:CD,23011:CD,23015:CD,23016
22988 :: EXIT :: exit :: I :: org.joda.time.field.ScaledDurationField.hashCode()::JM,22972:JM,23015
22991 :: EXPR :: reference :: I :: v3 = p0 $null .iScalar::DD,22994
22994 :: EXPR :: assign :: J :: v4 = CONVERT I to J v3::DD,22995:DD,22996
22995 :: EXPR :: assign :: Ljava/lang/Object :: v6 = v4 ? #(32)::CF,22996
22996 :: EXPR :: assign :: Ljava/lang/Object :: v7 = v4 ^ v6::CF,22997
22997 :: EXPR :: assign :: I :: v8 = CONVERT J to I v7::DD,23006
23002 :: CALL :: call :: I :: v12 = v10.hashCode()::JM,23006:CL,22918
23006 :: EXPR :: assign :: Ljava/lang/Object :: v13 = v8 + v12::DD,23015
23011 :: CALL :: call :: I :: v17 = v15.hashCode()::JM,23015:CL,22929:CL,22987:CL,23030:CL,22976:CL,22954
23015 :: EXPR :: assign :: Ljava/lang/Object :: v18 = v13 + v17::DD,23016
23016 :: NORM :: compound :: I :: return v18::DD,22988
23030 :: ENTR :: entry :: null :: org.joda.time.field.PreciseDurationField.hashCode()::CE,23031:CD,23037:CD,23038:CD,23039:CD,23044:CD,23048:CD,23049
23031 :: EXIT :: exit :: I :: org.joda.time.field.PreciseDurationField.hashCode()::JM,22972:JM,23015
23034 :: EXPR :: reference :: J :: v3 = p0 $null .iUnitMillis::DD,23037:DD,23038
23037 :: EXPR :: assign :: Ljava/lang/Object :: v5 = v3 ? #(32)::CF,23038
23038 :: EXPR :: assign :: Ljava/lang/Object :: v6 = v3 ^ v5::CF,23039
23039 :: EXPR :: assign :: I :: v7 = CONVERT J to I v6::DD,23048
23044 :: CALL :: call :: I :: v11 = v9.hashCode()::JM,23048:CL,22918
23048 :: EXPR :: assign :: Ljava/lang/Object :: v12 = v7 + v11::DD,23049
23049 :: NORM :: compound :: I :: return v12::CF,23031
23060 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.hashCode()::CE,23061:CD,23067:CD,23074:CD,23078:CD,23079
23061 :: EXIT :: exit :: I :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.hashCode()::JM,23078
23067 :: CALL :: call :: I :: v5 = v3.hashCode()::JM,23078:CL,23060
23074 :: CALL :: call :: I :: v8 = v6.hashCode()::JM,23078:CL,28979:CL,28963:CL,28993:CL,29021
23078 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v5 ^ v8::CF,23079
23079 :: NORM :: compound :: I :: return v9::DD,23061
23201 :: ENTR :: entry :: null :: org.joda.time.field.ScaledDurationField.equals(java.lang.Object)::CE,23202:CD,23206:JM,23208:JM,23210
23202 :: EXIT :: exit :: Z :: org.joda.time.field.ScaledDurationField.equals(java.lang.Object)::JM,23224:JM,23353:JM,23365:JM,23498
23206 :: PRED :: IF :: Z :: if (p0 $null  != p1 $null ) goto 8::CD,23207:CD,23208:CD,23209
23207 :: NORM :: compound :: Z :: return #(1)::DD,23202
23208 :: EXPR :: assign :: Z :: v4=p1 $null  INSTANCEOF org.joda.time.field.ScaledDurationField::DD,23209
23209 :: PRED :: IF :: Z :: if (v4 == #(0)) goto 62::CD,23210:CD,23219:CD,23224:CD,23242:CD,23243:CD,23244
23210 :: EXPR :: assign :: Ljava/lang/Object :: v6 = CHECKCAST p1 $null ::
23219 :: CALL :: call :: Z :: v12 = v8.equals(v10)::JM,23224:CL,23392:CL,23262:CL,23531:CL,23477:CL,23201
23224 :: PRED :: IF :: Z :: if (v12 == #(0)) goto 60::CD,23225:CD,23229:CD,23233:CD,23244
23225 :: CALL :: call :: Lorg/joda/time/DurationFieldType :: v14 = p0 $null .getType()::JM,23233:CL,31260
23229 :: CALL :: call :: Lorg/joda/time/DurationFieldType :: v16 = v6.getType()::JM,23233:CL,31260
23233 :: PRED :: IF :: Z :: if (v14 != v16) goto 60::CD,23240:CD,23244
23234 :: EXPR :: reference :: I :: v17 = p0 $null .iScalar::DD,23240
23237 :: EXPR :: reference :: I :: v18 = v6.iScalar::DD,23240
23240 :: PRED :: IF :: Z :: if (v17 != v18) goto 60::CD,23244
23242 :: NORM :: compound :: Z :: return v20::DD,23202
23243 :: NORM :: compound :: Z :: return #(0)::DD,23202
23244 :: EXPR :: assign :: null :: PHI v20 = #(1), #(0)::CF,23242
23262 :: ENTR :: entry :: null :: org.joda.time.field.PreciseDurationField.equals(java.lang.Object)::CE,23263:CD,23267:JM,23269:JM,23271
23263 :: EXIT :: exit :: Z :: org.joda.time.field.PreciseDurationField.equals(java.lang.Object)::JM,23224:JM,23353:JM,23365:JM,23498
23267 :: PRED :: IF :: Z :: if (p0 $null  != p1 $null ) goto 8::CD,23268:CD,23269:CD,23270
23268 :: NORM :: compound :: Z :: return #(1)::CF,23263
23269 :: EXPR :: assign :: Z :: v4=p1 $null  INSTANCEOF org.joda.time.field.PreciseDurationField::DD,23270
23270 :: PRED :: IF :: Z :: if (v4 == #(0)) goto 49::CD,23271:CD,23272:CD,23276:CD,23280:CD,23290:CD,23291:CD,23292
23271 :: EXPR :: assign :: Ljava/lang/Object :: v6 = CHECKCAST p1 $null ::
23272 :: CALL :: call :: Lorg/joda/time/DurationFieldType :: v8 = p0 $null .getType()::JM,23280:CL,31260
23276 :: CALL :: call :: Lorg/joda/time/DurationFieldType :: v10 = v6.getType()::JM,23280:CL,31260
23280 :: PRED :: IF :: Z :: if (v8 != v10) goto 47::CD,23287:CD,23288:CD,23292
23281 :: EXPR :: reference :: J :: v11 = p0 $null .iUnitMillis::DD,23287
23284 :: EXPR :: reference :: J :: v12 = v6.iUnitMillis::DD,23287
23287 :: EXPR :: assign :: Z :: v13 = v11 == v12::DD,23288
23288 :: PRED :: IF :: Z :: if (v13 != #(0)) goto 47::CD,23292
23290 :: NORM :: compound :: Z :: return v15::CF,23263
23291 :: NORM :: compound :: Z :: return #(0)::CF,23263
23292 :: EXPR :: assign :: null :: PHI v15 = #(1), #(0)::CF,23290
23308 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.equals(java.lang.Object)::CE,23309:CD,23313:JM,23315
23309 :: EXIT :: exit :: Z :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.equals(java.lang.Object)::JM,23329
23313 :: PRED :: IF :: Z :: if (p0 $null  != p1 $null ) goto 8::CD,23314:CD,23315:CD,23316
23314 :: NORM :: compound :: Z :: return #(1)::DD,23309
23315 :: EXPR :: assign :: Z :: v4=p1 $null  INSTANCEOF org.joda.time.chrono.ZonedChronology$ZonedDateTimeField::DD,23316
23316 :: PRED :: IF :: Z :: if (v4 == #(0)) goto 82::CD,23324:CD,23329:CD,23367:CD,23368:CD,23369
23324 :: CALL :: call :: Z :: v10 = v7.equals(v8)::JM,23329:CL,23308
23329 :: PRED :: IF :: Z :: if (v10 == #(0)) goto 80::CD,23336:CD,23341:CD,23369
23336 :: CALL :: call :: Z :: v14 = v11.equals(v12)::JM,23341:CL,19655:CL,19686:CL,19745:CL,19647
23341 :: PRED :: IF :: Z :: if (v14 == #(0)) goto 80::CD,23348:CD,23353:CD,23369
23348 :: CALL :: call :: Z :: v18 = v15.equals(v16)::JM,23353:CL,23392:CL,23262:CL,23531:CL,23477:CL,23201
23353 :: PRED :: IF :: Z :: if (v18 == #(0)) goto 80::CD,23360:CD,23365:CD,23369
23360 :: CALL :: call :: Z :: v22 = v19.equals(v20)::JM,23365:CL,23392:CL,23262:CL,23531:CL,23477:CL,23201
23365 :: PRED :: IF :: Z :: if (v22 == #(0)) goto 80::CD,23369
23367 :: NORM :: compound :: Z :: return v24::DD,23309
23368 :: NORM :: compound :: Z :: return #(0)::DD,23309
23369 :: EXPR :: assign :: null :: PHI v24 = #(1), #(0)::CF,23367
23392 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDurationField.equals(java.lang.Object)::CE,23393:CD,23397:JM,23399
23393 :: EXIT :: exit :: Z :: org.joda.time.field.UnsupportedDurationField.equals(java.lang.Object)::JM,23224:JM,23353:JM,23365:JM,23498
23397 :: PRED :: IF :: Z :: if (p0 $null  != p1 $null ) goto 8::CD,23398:CD,23399:CD,23400
23398 :: NORM :: compound :: Z :: return #(1)::CF,23393
23399 :: EXPR :: assign :: Z :: v4=p1 $null  INSTANCEOF org.joda.time.field.UnsupportedDurationField::DD,23400
23400 :: PRED :: IF :: Z :: if (v4 == #(0)) goto 52::CD,23402:CD,23406:CD,23428
23402 :: CALL :: call :: Ljava/lang/String :: v8 = v6.getName()::JM,23406:CL,31247
23406 :: PRED :: IF :: Z :: if (v8 != #(null)) goto 40::CD,23407:CD,23411:CD,23413:CD,23414:CD,23418:CD,23422:CD,23427:CD,23429
23407 :: CALL :: call :: Ljava/lang/String :: v17 = p0 $null .getName()::JM,23411:CL,31247
23411 :: PRED :: IF :: Z :: if (v17 != #(null)) goto 38::CD,23429
23413 :: NORM :: compound :: Z :: return v19::CF,23393
23414 :: CALL :: call :: Ljava/lang/String :: v11 = v6.getName()::JM,23427:CL,31247
23418 :: CALL :: call :: Ljava/lang/String :: v13 = p0 $null .getName()::JM,23427:CL,31247
23422 :: CALL :: call :: Z :: v15 = v11.equals(v13)::JM,23427
23427 :: NORM :: compound :: Z :: return v15::CF,23393
23428 :: NORM :: compound :: Z :: return #(0)::CF,23393
23429 :: EXPR :: assign :: null :: PHI v19 = #(1), #(0)::CF,23413
23446 :: ENTR :: entry :: null :: org.joda.time.DateTimeFieldType.StandardDateTimeFieldType.equals(java.lang.Object)::CE,23447:CD,23451:JM,23458:JM,23453
23447 :: EXIT :: exit :: Z :: org.joda.time.DateTimeFieldType.StandardDateTimeFieldType.equals(java.lang.Object)::
23451 :: PRED :: IF :: Z :: if (p0 $null  != p1 $null ) goto 8::CD,23452:CD,23453:CD,23454
23452 :: NORM :: compound :: Z :: return #(1)::CF,23447
23453 :: EXPR :: assign :: Z :: v4=p1 $null  INSTANCEOF org.joda.time.DateTimeFieldType$StandardDateTimeFieldType::DD,23454
23454 :: PRED :: IF :: Z :: if (v4 == #(0)) goto 35::CD,23458:CD,23462:CD,23464:CD,23465:CD,23466
23455 :: EXPR :: reference :: B :: v6 = p0 $null .iOrdinal::DD,23462
23458 :: EXPR :: assign :: Ljava/lang/Object :: v7 = CHECKCAST p1 $null ::
23459 :: EXPR :: reference :: B :: v8 = v7.iOrdinal::DD,23462
23462 :: PRED :: IF :: Z :: if (v6 != v8) goto 33::CD,23466
23464 :: NORM :: compound :: Z :: return v10::CF,23447
23465 :: NORM :: compound :: Z :: return #(0)::CF,23447
23466 :: EXPR :: assign :: null :: PHI v10 = #(1), #(0)::CF,23464
23477 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDurationField.equals(java.lang.Object)::CE,23478:CD,23482:JM,23484
23478 :: EXIT :: exit :: Z :: org.joda.time.chrono.ZonedChronology.ZonedDurationField.equals(java.lang.Object)::JM,23224:JM,23353:JM,23365:JM,23498
23482 :: PRED :: IF :: Z :: if (p0 $null  != p1 $null ) goto 8::CD,23483:CD,23484:CD,23485
23483 :: NORM :: compound :: Z :: return #(1)::DD,23478
23484 :: EXPR :: assign :: Z :: v4=p1 $null  INSTANCEOF org.joda.time.chrono.ZonedChronology$ZonedDurationField::DD,23485
23485 :: PRED :: IF :: Z :: if (v4 == #(0)) goto 54::CD,23493:CD,23498:CD,23512:CD,23513:CD,23514
23493 :: CALL :: call :: Z :: v10 = v7.equals(v8)::JM,23498:CL,23392:CL,23262:CL,23531:CL,23477:CL,23201
23498 :: PRED :: IF :: Z :: if (v10 == #(0)) goto 52::CD,23505:CD,23510:CD,23514
23505 :: CALL :: call :: Z :: v14 = v11.equals(v12)::JM,23510:CL,19655:CL,19686:CL,19745:CL,19647
23510 :: PRED :: IF :: Z :: if (v14 == #(0)) goto 52::CD,23514
23512 :: NORM :: compound :: Z :: return v16::DD,23478
23513 :: NORM :: compound :: Z :: return #(0)::DD,23478
23514 :: EXPR :: assign :: null :: PHI v16 = #(1), #(0)::CF,23512
23531 :: ENTR :: entry :: null :: org.joda.time.field.MillisDurationField.equals(java.lang.Object)::CF,23532:CD,23536:CD,23537
23532 :: EXIT :: exit :: Z :: org.joda.time.field.MillisDurationField.equals(java.lang.Object)::JM,23224:JM,23353:JM,23365:JM,23498
23536 :: EXPR :: assign :: Z :: v4=p1 $null  INSTANCEOF org.joda.time.field.MillisDurationField::DD,23537
23537 :: PRED :: IF :: Z :: if (v4 == #(0)) goto 29::CD,23538:CD,23543:CD,23547:CD,23548:CD,23550:CD,23551:CD,23552
23538 :: CALL :: call :: J :: v7 = p0 $null .getUnitMillis()::JM,23547:CL,21125
23543 :: CALL :: call :: J :: v10 = v8.getUnitMillis()::JM,23547:CL,21125
23547 :: EXPR :: assign :: Z :: v11 = v7 == v10::DD,23548
23548 :: PRED :: IF :: Z :: if (v11 != #(0)) goto 27::CD,23552
23550 :: NORM :: compound :: Z :: return v13::CF,23532
23551 :: NORM :: compound :: Z :: return #(0)::CF,23532
23552 :: EXPR :: assign :: null :: PHI v13 = #(1), #(0)::CF,23550
23561 :: ENTR :: entry :: null :: org.joda.time.DurationFieldType.StandardDurationFieldType.equals(java.lang.Object)::CE,23562:CD,23566:JM,23568:JM,23573
23562 :: EXIT :: exit :: Z :: org.joda.time.DurationFieldType.StandardDurationFieldType.equals(java.lang.Object)::
23566 :: PRED :: IF :: Z :: if (p0 $null  != p1 $null ) goto 8::CD,23567:CD,23568:CD,23569
23567 :: NORM :: compound :: Z :: return #(1)::CF,23562
23568 :: EXPR :: assign :: Z :: v4=p1 $null  INSTANCEOF org.joda.time.DurationFieldType$StandardDurationFieldType::DD,23569
23569 :: PRED :: IF :: Z :: if (v4 == #(0)) goto 35::CD,23573:CD,23577:CD,23579:CD,23580:CD,23581
23570 :: EXPR :: reference :: B :: v6 = p0 $null .iOrdinal::DD,23577
23573 :: EXPR :: assign :: Ljava/lang/Object :: v7 = CHECKCAST p1 $null ::
23574 :: EXPR :: reference :: B :: v8 = v7.iOrdinal::DD,23577
23577 :: PRED :: IF :: Z :: if (v6 != v8) goto 33::CD,23581
23579 :: NORM :: compound :: Z :: return v10::CF,23562
23580 :: NORM :: compound :: Z :: return #(0)::CF,23562
23581 :: EXPR :: assign :: null :: PHI v10 = #(1), #(0)::CF,23579
23679 :: CALL :: call :: Ljava/lang/String :: v9 = p2 $null .nextToken()::JM,23732:JM,23719
23683 :: CALL :: call :: I :: v11 = parseTime(v9)::CL,24183
23690 :: CALL :: call :: Ljava/lang/String :: v13 = p2 $null .nextToken()::JM,23732:JM,23719
23701 :: CALL :: call :: Ljava/lang/String :: v17 = p2 $null .nextToken()::JM,23732:JM,23719
23712 :: CALL :: call :: Lorg/joda/time/tz/ZoneInfoCompiler$DateTimeOfYear :: v22 = getStartOfYear()::CL,31395
23715 :: CALL :: call :: Z :: v24 = p2 $null .hasMoreTokens()::JM,23732:JM,23719
23719 :: PRED :: IF :: Z :: if (v24 == #(0)) goto 87::CD,23720:CD,23724:CD,23728:CD,23732:JM,23719
23720 :: CALL :: call :: Ljava/lang/String :: v27 = p2 $null .nextToken()::JM,23732:JM,23719
23724 :: CALL :: call :: I :: v29 = parseInt(v27)::JM,23732
23728 :: CALL :: call :: Z :: v31 = p2 $null .hasMoreTokens()::JM,23732:JM,23719
23732 :: PRED :: IF :: Z :: if (v31 == #(0)) goto 87::JM,24000:JM,23873:JM,23939:JM,23945:JM,23946:JM,24075:JM,23886:JM,23951:JM,24081:JM,24082:JM,23955:JM,24083:JM,24084:JM,24085:JM,24086:JM,23896:JM,23961:JM,23912:JM,23976:JM,23918:JM,23919:JM,23985:JM,23924:JM,23928:JM,23869:JM,23934
23771 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoCompiler.parseYear(java.lang.String,int)::CD,23776:CD,23778:CD,23783:CD,23788:JM,23794:JM,23814:JM,23801:JM,23807
23776 :: EXPR :: reference :: Ljava/util/Locale :: v4 = java.util.Locale.ENGLISH::JM,23794:JM,23814:JM,23801:JM,23788:JM,23807
23778 :: CALL :: call :: Ljava/lang/String :: v6 = p1 $null .toLowerCase(v4)::JM,23794:JM,23814:JM,23801:JM,23788:JM,23807
23783 :: CALL :: call :: Z :: v9 = v6.equals(#(minimum))::JM,23794:JM,23814:JM,23801:JM,23788:JM,23807
23788 :: PRED :: IF :: Z :: if (v9 != #(0)) goto 28::CD,23789:CD,23794:JM,23814:JM,23801:JM,23788:JM,23807
23789 :: CALL :: call :: Z :: v13 = v6.equals(#(min))::JM,23794:JM,23814:JM,23801:JM,23788:JM,23807
23794 :: PRED :: IF :: Z :: if (v13 == #(0)) goto 32::CD,23796:CD,23801:JM,23794:JM,23814:JM,23788:JM,23807
23796 :: CALL :: call :: Z :: v16 = v6.equals(#(maximum))::JM,23794:JM,23814:JM,23801:JM,23788:JM,23807
23801 :: PRED :: IF :: Z :: if (v16 != #(0)) goto 49::CD,23802:CD,23807:JM,23794:JM,23814:JM,23801:JM,23788
23802 :: CALL :: call :: Z :: v19 = v6.equals(#(max))::JM,23794:JM,23814:JM,23801:JM,23788:JM,23807
23807 :: PRED :: IF :: Z :: if (v19 == #(0)) goto 53::CD,23809:CD,23814:JM,23794:JM,23801:JM,23788:JM,23807
23809 :: CALL :: call :: Z :: v22 = v6.equals(#(only))::JM,23794:JM,23814:JM,23801:JM,23788:JM,23807
23814 :: PRED :: IF :: Z :: if (v22 == #(0)) goto 62::CD,23816:JM,23794:JM,23814:JM,23801:JM,23788:JM,23807
23816 :: CALL :: call :: I :: v24 = parseInt(v6)::JM,23794:JM,23814:JM,23801:JM,23788:JM,23807
23869 :: CALL :: call :: Z :: v9 = p1 $null .hasMoreTokens()::JM,24000:JM,23873:JM,23985:JM,23976:JM,23896:JM,23945:JM,24075:JM,23886:JM,23918
23873 :: PRED :: IF :: Z :: if (v9 == #(0)) goto 360::CF,24081:CD,23874:CD,23878:CD,23882:CD,23886:CD,24082:CD,24083:CD,24084:CD,24085:CD,24086:JM,24000:JM,23873:JM,23985:JM,23976:JM,23896:JM,23945:JM,24075:JM,23918
23874 :: CALL :: call :: Ljava/lang/String :: v11 = p1 $null .nextToken()::JM,24000:JM,23873:JM,23985:JM,23976:JM,23896:JM,23945:JM,24075:JM,23886:JM,23918
23878 :: CALL :: call :: I :: v13 = parseMonth(v11)::JM,24001:JM,24081:CL,31414
23882 :: CALL :: call :: Z :: v15 = p1 $null .hasMoreTokens()::JM,24000:JM,23873:JM,23985:JM,23976:JM,23896:JM,23945:JM,24075:JM,23886:JM,23918
23886 :: PRED :: IF :: Z :: if (v15 == #(0)) goto 360::CF,24081:CD,23887:CD,23891:CD,23896:CD,23972:CD,23976:CD,24075:CD,24076:CD,24077:CD,24082:CD,24083:CD,24084:CD,24085:CD,24086:JM,24000:JM,23873:JM,23985:JM,23945:JM,23886:JM,23918
23887 :: CALL :: call :: Ljava/lang/String :: v17 = p1 $null .nextToken()::JM,24000:JM,23873:JM,23985:JM,23976:JM,23896:JM,23945:JM,24075:JM,23886:JM,23918
23891 :: CALL :: call :: Z :: v20 = v17.startsWith(#(last))::JM,24000:JM,23985:JM,23976:JM,23896:JM,23945:JM,24075:JM,23918
23896 :: PRED :: IF :: Z :: if (v20 == #(0)) goto 80::CD,23897:CD,23902:CD,23907:CD,24075:CD,24076:CD,24077:JM,24000:JM,23985:JM,23976:JM,23896:JM,23945:JM,23918
23897 :: CALL :: call :: Ljava/lang/String :: v54 = v17.substring(#(4))::JM,24000:JM,23985:JM,23976:JM,23896:JM,23945:JM,24075:JM,23918
23902 :: CALL :: call :: I :: v56 = parseDayOfWeek(v54)::JM,24076:CL,31446
23907 :: CALL :: call :: I :: v22 = parseInt(v17)::JM,24000:JM,23985:JM,23976:JM,23896:JM,23945:JM,24075:JM,23918
23912 :: CALL :: call :: I :: v26 = v17.indexOf(#(>=))::JM,24000:JM,23985:JM,23976:JM,23896:JM,23945:JM,24075:JM,23918
23918 :: EXPR :: assign :: Ljava/lang/Object :: v42 = v26 + #(2)::JM,24075
23919 :: CALL :: call :: Ljava/lang/String :: v44 = v17.substring(v42)::JM,24000:JM,23985:JM,23976:JM,23896:JM,23945:JM,24075:JM,23918
23924 :: CALL :: call :: I :: v46 = parseInt(v44)::JM,24000:JM,23985:JM,23945:JM,24075
23928 :: CALL :: call :: Ljava/lang/String :: v48 = v17.substring(#(0), v26)::JM,24000:JM,23985:JM,23976:JM,23896:JM,23945:JM,24075:JM,23918
23934 :: CALL :: call :: I :: v50 = parseDayOfWeek(v48)::JM,24076:CL,31446
23939 :: CALL :: call :: I :: v29 = v17.indexOf(#(<=))::JM,24000:JM,23985:JM,23976:JM,23896:JM,23945:JM,24075:JM,23918
23945 :: EXPR :: assign :: Ljava/lang/Object :: v33 = v29 + #(2)::JM,24075
23946 :: CALL :: call :: Ljava/lang/String :: v35 = v17.substring(v33)::JM,24000:JM,23985:JM,23976:JM,23896:JM,23945:JM,24075:JM,23918
23951 :: CALL :: call :: I :: v37 = parseInt(v35)::JM,24000:JM,23985:JM,24075
23955 :: CALL :: call :: Ljava/lang/String :: v39 = v17.substring(#(0), v29)::JM,24000:JM,23985:JM,23976:JM,23896:JM,23945:JM,24075:JM,23918
23961 :: CALL :: call :: I :: v41 = parseDayOfWeek(v39)::JM,24076:CL,31446
23972 :: CALL :: call :: Z :: v62 = p1 $null .hasMoreTokens()::JM,24000:JM,23873:JM,23985:JM,23976:JM,23896:JM,23945:JM,24075:JM,23886:JM,23918
23976 :: PRED :: IF :: Z :: if (v62 == #(0)) goto 360::CF,24081:CD,23977:CD,23981:CD,23985:CD,23986:CD,23991:CD,23995:CD,24000:JM,23873:JM,23976:JM,23896:JM,23945:JM,24075:JM,23886:JM,23918
23977 :: CALL :: call :: Ljava/lang/String :: v64 = p1 $null .nextToken()::JM,24000:JM,23873:JM,23985:JM,23976:JM,23896:JM,23945:JM,24075:JM,23886:JM,23918
23981 :: CALL :: call :: I :: v66 = v64.length()::JM,24000:JM,23985:JM,23896:JM,23945:JM,24075:JM,23918
23985 :: EXPR :: assign :: Ljava/lang/Object :: v67 = v66 - #(1)::JM,24000:JM,23985:JM,23896:JM,23945:JM,24075:JM,23918
23986 :: CALL :: call :: C :: v69 = v64.charAt(v67)::JM,24000:JM,23985:JM,23896:JM,23945:JM,24075:JM,23918
23991 :: CALL :: call :: C :: v71 = parseZoneChar(v69)::JM,24086:CL,31478
23995 :: CALL :: call :: Z :: v74 = v64.equals(#(24:00))::JM,24000:JM,23985:JM,23896:JM,23945:JM,24075:JM,23918
24000 :: PRED :: IF :: Z :: if (v74 == #(0)) goto 353::CD,24001:CD,24051:CD,24081:CD,24082:CD,24083:CD,24084:CD,24085:CD,24086
24001 :: PRED :: IF :: Z :: if (v13 != #(12)) goto 261::CD,24002:CD,24008:CD,24034:CD,24037:CD,24041:CD,24045:CD,24079:CD,24080:CD,24081:CD,24082:CD,24083:CD,24084:CD,24085:CD,24086
24002 :: PRED :: IF :: Z :: if (v58 != #(31)) goto 261::CD,24003:CD,24008:CD,24034:CD,24037:CD,24041:CD,24045:CD,24079:CD,24080:CD,24081:CD,24082:CD,24083:CD,24084:CD,24085:CD,24086
24003 :: CALL :: call :: I :: v102 = parseTime(#(23:59:59.999))::JM,24084:CL,24183
24008 :: PRED :: IF :: Z :: if (v58 != #(-1)) goto 283::JM,40162:JM,40154:JM,40158:CD,24016:CD,24029
24016 :: CALL :: call :: Lorg/joda/time/LocalDate :: v87 = v84.plusMonths(#(1))::CL,31512
24029 :: CALL :: call :: Lorg/joda/time/LocalDate :: v83 = v79.plusDays(#(1))::CL,31552
24034 :: PRED :: IF :: Z :: if (v58 == #(-1)) goto 320::CD,24035:CD,24079
24035 :: PRED :: IF :: Z :: if (v59 == #(0)) goto 320::CD,24079
24037 :: CALL :: call :: I :: v91 = v88.getMonthOfYear()::JM,24081:CL,31592
24041 :: CALL :: call :: I :: v93 = v88.getDayOfMonth()::JM,24082:CL,31616
24045 :: PRED :: IF :: Z :: if (v59 == #(0)) goto 348::CF,24080:CD,24046:CD,24047:CD,24048:CD,24049
24046 :: EXPR :: assign :: Ljava/lang/Object :: v94 = v59 - #(1)::DD,24047
24047 :: EXPR :: assign :: Ljava/lang/Object :: v95 = v94 + #(1)::DD,24048
24048 :: EXPR :: assign :: Ljava/lang/Object :: v97 = v95 % #(7)::DD,24049
24049 :: EXPR :: assign :: Ljava/lang/Object :: v98 = v97 + #(1)::DD,24080
24051 :: CALL :: call :: I :: v76 = parseTime(v64)::JM,24084:CL,24183
24055 :: EXPR :: modify :: I :: p0 $null .iMonthOfYear = v104::
24058 :: EXPR :: modify :: I :: p0 $null .iDayOfMonth = v105::
24061 :: EXPR :: modify :: I :: p0 $null .iDayOfWeek = v106::
24064 :: EXPR :: modify :: Z :: p0 $null .iAdvanceDayOfWeek = v108::
24067 :: EXPR :: modify :: I :: p0 $null .iMillisOfDay = v107::
24070 :: EXPR :: modify :: C :: p0 $null .iZoneChar = v109::
24075 :: EXPR :: assign :: null :: PHI v58 = #(-1), v22, v46, v37::CF,24076:DD,24002:DD,24008:DD,24034:DD,24082
24076 :: EXPR :: assign :: null :: PHI v59 = v56, #(0), v50, v41::CF,24077:DD,24035:DD,24045:DD,24046:DD,24080:DD,24083
24077 :: EXPR :: assign :: null :: PHI v60 = #(0), #(0), #(1), #(0)::JM,24000:JM,23873:JM,23985:JM,23976:JM,23896:JM,23945:JM,24075:JM,23886:JM,23918:DD,24085
24079 :: EXPR :: assign :: null :: PHI v89 = #(1), #(0)::DD,24085
24080 :: EXPR :: assign :: null :: PHI v99 = v59, v98::DD,24083
24081 :: EXPR :: assign :: null :: PHI v104 = #(1), v13, v13, v13, v91, v13::CF,24082:DD,24055
24082 :: EXPR :: assign :: null :: PHI v105 = #(1), #(1), v58, v58, v93, v58::CF,24083:DD,24058
24083 :: EXPR :: assign :: null :: PHI v106 = #(0), #(0), v59, v59, v99, v59::CF,24084:DD,24061
24084 :: EXPR :: assign :: null :: PHI v107 = #(0), #(0), #(0), v102, #(0), v76::CF,24085:DD,24067
24085 :: EXPR :: assign :: null :: PHI v108 = #(0), #(0), v60, v60, v89, v60::CF,24086:DD,24064
24086 :: EXPR :: assign :: null :: PHI v109 = #(119), #(119), #(119), v71, v71, v71::DD,24070
24183 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoCompiler.parseTime(java.lang.String)::CE,24184:CD,24191:JM,27297:JM,27277:CD,24199:CD,24204:CD,24205:CD,24220:CD,24224:CD,24225:CD,24227:CD,24228:CD,24229
24184 :: EXIT :: exit :: I :: org.joda.time.tz.ZoneInfoCompiler.parseTime(java.lang.String)::JM,24084
24191 :: CALL :: call :: Lorg/joda/time/Chronology :: v8 = getLenientISOChronology()::CL,31647
24199 :: CALL :: call :: Z :: v13 = p1 $null .startsWith(#(-))::JM,24204
24204 :: PRED :: IF :: Z :: if (v13 == #(0)) goto 33::CF,24228
24205 :: CALL :: call :: I :: v17 = v4.parseInto(v5, p1 $null , v15)::CL,31683
24220 :: CALL :: call :: J :: v21 = v5.getMillis()::JM,24224:CL,31884
24224 :: EXPR :: assign :: I :: v22 = CONVERT J to I v21::DD,24226:DD,24229:CF,24225
24225 :: PRED :: IF :: Z :: if (v15 != #(1)) goto 74::CF,24229:CD,24226
24226 :: EXPR :: assign :: Ljava/lang/Object :: v23 = -(v22)::DD,24229
24227 :: NORM :: compound :: I :: return v24::DD,24184
24228 :: EXPR :: assign :: null :: PHI v15 = #(0), #(1)::DD,24225
24229 :: EXPR :: assign :: null :: PHI v24 = v22, v23::CF,24227
24434 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset(int)::CD,24439
24439 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet :: v5 = p0 $null .getLastRuleSet()::CL,32211
24451 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings(java.lang.String,int)::CD,24457
24457 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet :: v6 = p0 $null .getLastRuleSet()::CL,32211
24471 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoCompiler.RuleSet.addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)::CD,24480:CD,24484:CD,24502
24477 :: EXPR :: reference :: Ljava/util/List :: v6 = p0 $null .iRules::JM,24484
24480 :: CALL :: call :: I :: v8 = v6.size()::JM,24484
24484 :: PRED :: IF :: Z :: if (v16 >= v8) goto 43::CD,24480:CD,24488:CD,24494:CD,24499:CD,24502
24485 :: EXPR :: reference :: Ljava/util/List :: v9 = p0 $null .iRules::
24488 :: CALL :: call :: Ljava/lang/Object :: v11 = v9.get(v16)::
24494 :: CALL :: call :: V :: v12.addRecurring(p1 $null , p2 $null )::CL,32294
24499 :: EXPR :: assign :: Ljava/lang/Object :: v15 = v16 + #(1)::DD,24502
24502 :: EXPR :: assign :: null :: PHI v16 = v15, #(0)::DD,24484:DD,24499
24515 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear.addCutover(org.joda.time.tz.DateTimeZoneBuilder,int)::CD,24539
24539 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder :: v12 = p1 $null .addCutover(p2 $null , v5, v6, v7, v8, v9, v10)::CL,32335
24633 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.Rule.getSaveMillis()::CE,24634:CD,24640:CD,24644
24634 :: EXIT :: exit :: I :: org.joda.time.tz.DateTimeZoneBuilder.Rule.getSaveMillis()::JM,16203
24640 :: CALL :: call :: I :: v5 = v3.getSaveMillis()::JM,24644:CL,25255
24644 :: NORM :: compound :: I :: return v5::CF,24634
24688 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.Transition.isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder.Transition)::CE,24689:CD,24693
24689 :: EXIT :: exit :: Z :: org.joda.time.tz.DateTimeZoneBuilder.Transition.isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder.Transition)::JM,16349
24693 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 7::CD,24694:CD,24701:CD,24702:CD,24730:CD,24731
24694 :: NORM :: compound :: Z :: return #(1)::CF,24689
24695 :: EXPR :: reference :: J :: v5 = p0 $null .iMillis::DD,24701
24698 :: EXPR :: reference :: J :: v6 = p1 $null .iMillis::DD,24701
24701 :: EXPR :: assign :: Z :: v7 = v5 == v6::DD,24702
24702 :: PRED :: IF :: Z :: if (v7 <= #(0)) goto 59::CD,24709:CD,24731
24703 :: EXPR :: reference :: I :: v9 = p0 $null .iWallOffset::DD,24709
24706 :: EXPR :: reference :: I :: v10 = p1 $null .iWallOffset::DD,24709
24709 :: PRED :: IF :: Z :: if (v9 != v10) goto 55::CD,24716:CD,24731
24710 :: EXPR :: reference :: I :: v11 = p0 $null .iStandardOffset::DD,24716
24713 :: EXPR :: reference :: I :: v12 = p1 $null .iStandardOffset::DD,24716
24716 :: PRED :: IF :: Z :: if (v11 != v12) goto 55::CD,24723:CD,24728:CD,24731
24717 :: EXPR :: reference :: Ljava/lang/String :: v13 = p0 $null .iNameKey::JM,24728
24720 :: EXPR :: reference :: Ljava/lang/String :: v14 = p1 $null .iNameKey::JM,24728
24723 :: CALL :: call :: Z :: v16 = v13.equals(v14)::JM,24728
24728 :: PRED :: IF :: Z :: if (v16 != #(0)) goto 59::CD,24731
24730 :: NORM :: compound :: Z :: return v18::CF,24689
24731 :: EXPR :: assign :: null :: PHI v18 = #(1), #(0)::CF,24730
24747 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.Transition.withMillis(long)::
24775 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.Rule.next(long,int,int)::CE,24776:CD,24786:CD,24787:CD,24803:CD,24823:CD,24830:CD,24831:CD,24847:CD,24848:CD,24850
24776 :: EXIT :: exit :: J :: org.joda.time.tz.DateTimeZoneBuilder.Rule.next(long,int,int)::JM,16643:JM,16582:JM,16588
24786 :: EXPR :: assign :: Z :: v10 = p1 $null  == #(-9223372036854775808 l)::DD,24787
24787 :: PRED :: IF :: Z :: if (v10 != #(0)) goto 31::CD,24795:CD,24848
24795 :: CALL :: call :: I :: v17 = v13.get(v15)::JM,24848:CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,11332
24800 :: EXPR :: reference :: I :: v20 = p0 $null .iFromYear::DD,24803
24803 :: PRED :: IF :: Z :: if (v19 >= v20) goto 79::CD,24811
24811 :: CALL :: call :: J :: v26 = v22.set(#(0 l), v24)::CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
24823 :: CALL :: call :: J :: v34 = v32.next(v31, p2 $null , p3 $null )::JM,24850:JM,24830:CL,27246
24830 :: EXPR :: assign :: Z :: v35 = v34 == p1 $null ::DD,24831
24831 :: PRED :: IF :: Z :: if (v35 <= #(0)) goto 129::CF,24850:CD,24838:CD,24846
24838 :: CALL :: call :: I :: v41 = v37.get(v39)::JM,24846:CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,11332
24843 :: EXPR :: reference :: I :: v42 = p0 $null .iToYear::DD,24846
24846 :: PRED :: IF :: Z :: if (v41 <= v42) goto 129::CF,24850
24847 :: NORM :: compound :: J :: return v44::DD,24776
24848 :: EXPR :: assign :: null :: PHI v19 = #(-2147483648), v17::DD,24803
24850 :: EXPR :: assign :: null :: PHI v44 = v34, v34, p1 $null ::CF,24847
24890 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.OfYear.setInstant(int,int,int)::CE,24891:CD,24900:CD,24915:CD,24928:CD,24941:CD,24947:CD,24956:CD,24963:CD,24964:CD,24965:CD,24966:CD,24967:JM,24901
24891 :: EXIT :: exit :: J :: org.joda.time.tz.DateTimeZoneBuilder.OfYear.setInstant(int,int,int)::JM,16626
24897 :: EXPR :: reference :: C :: v6 = p0 $null .iMode::DD,24900
24900 :: PRED :: IF :: Z :: if (v6 != #(119)) goto 18::CD,24901:CD,24906:CD,24966
24901 :: EXPR :: assign :: Ljava/lang/Object :: v11 = p2 $null  + p3 $null ::DD,24966
24903 :: EXPR :: reference :: C :: v8 = p0 $null .iMode::DD,24906
24906 :: PRED :: IF :: Z :: if (v8 != #(115)) goto 35::CD,24966
24915 :: CALL :: call :: J :: v19 = v16.set(#(0 l), p1 $null )::CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
24928 :: CALL :: call :: J :: v24 = v21.set(v19, v22)::CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
24941 :: CALL :: call :: J :: v29 = v26.set(v24, v27)::CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
24947 :: CALL :: call :: J :: v31 = p0 $null .setDayOfMonth(v14, v29)::JM,24967:CL,32451
24953 :: EXPR :: reference :: I :: v32 = p0 $null .iDayOfWeek::DD,24956
24956 :: PRED :: IF :: Z :: if (v32 == #(0)) goto 115::CF,24967:CD,24957
24957 :: CALL :: call :: J :: v34 = p0 $null .setDayOfWeek(v14, v31)::JM,24967:CL,32528
24963 :: EXPR :: assign :: J :: v36 = CONVERT I to J v12::CF,24964
24964 :: EXPR :: assign :: Ljava/lang/Object :: v37 = v35 - v36::CF,24965
24965 :: NORM :: compound :: J :: return v37::DD,24891
24966 :: EXPR :: assign :: null :: PHI v12 = v11, p2 $null , #(0)::DD,24963
24967 :: EXPR :: assign :: null :: PHI v35 = v31, v34::DD,24964:CF,24963
25003 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.Rule.getToYear()::CE,25004:CD,25010
25004 :: EXIT :: exit :: I :: org.joda.time.tz.DateTimeZoneBuilder.Rule.getToYear()::JM,16727:JM,16732
25007 :: EXPR :: reference :: I :: v3 = p0 $null .iToYear::DD,25010
25010 :: NORM :: compound :: I :: return v3::CF,25004
25024 :: EXPR :: modify :: I :: p0 $null .iStandardOffset = p2 $null ::
25027 :: EXPR :: modify :: Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence :: p0 $null .iStartRecurrence = p3 $null ::
25030 :: EXPR :: modify :: Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence :: p0 $null .iEndRecurrence = p4 $null ::
25054 :: EXPR :: modify :: Ljava/lang/String :: p0 $null .iNameKey = p2 $null ::
25057 :: EXPR :: modify :: I :: p0 $null .iWallOffset = p3 $null ::
25060 :: EXPR :: modify :: I :: p0 $null .iStandardOffset = p4 $null ::
25072 :: ENTR :: entry :: null :: org.joda.time.PeriodType.yearMonthDay()::CD,25075:CD,25077
25075 :: EXPR :: reference :: Lorg/joda/time/PeriodType :: v2 = org.joda.time.PeriodType.cYMD::DD,25077
25077 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 83::CD,25079:CD,25080:CD,25087:CD,25094:CD,25101:JM,32609:JM,32603:JM,32606
25079 :: NORM :: declaration :: [Lorg/joda/time/DurationFieldType :: v7 = new org.joda.time.DurationFieldType[]::
25080 :: CALL :: call :: Lorg/joda/time/DurationFieldType :: v10 = years()::JM,25083:CL,11774
25083 :: EXPR :: modify :: Ljava/lang/Object :: v7[#(0)] = v10::
25087 :: CALL :: call :: Lorg/joda/time/DurationFieldType :: v13 = months()::JM,25090:CL,11760
25090 :: EXPR :: modify :: Ljava/lang/Object :: v7[#(1)] = v13::
25094 :: CALL :: call :: Lorg/joda/time/DurationFieldType :: v16 = days()::JM,25097:CL,11538
25097 :: EXPR :: modify :: Ljava/lang/Object :: v7[#(2)] = v16::
25101 :: NORM :: declaration :: [I :: v18 = new []::
25102 :: EXPR :: modify :: I :: v18[#(0)] = #(0)::
25106 :: EXPR :: modify :: I :: v18[#(1)] = #(1)::
25110 :: EXPR :: modify :: I :: v18[#(2)] = #(-1)::
25114 :: EXPR :: modify :: I :: v18[#(3)] = #(2)::
25118 :: EXPR :: modify :: I :: v18[#(4)] = #(-1)::
25122 :: EXPR :: modify :: I :: v18[#(5)] = #(-1)::
25126 :: EXPR :: modify :: I :: v18[#(6)] = #(-1)::
25130 :: EXPR :: modify :: I :: v18[#(7)] = #(-1)::
25206 :: ENTR :: entry :: null :: org.joda.time.Period.getYears()::CE,25207:CD,25216:CD,25222
25207 :: EXIT :: exit :: I :: org.joda.time.Period.getYears()::JM,17058
25216 :: CALL :: call :: I :: v7 = v4.getIndexedField(p0 $null , v5)::JM,25222:CL,32676
25222 :: NORM :: compound :: I :: return v7::CF,25207
25226 :: ENTR :: entry :: null :: org.joda.time.Period.getMonths()::CE,25227:CD,25236:CD,25242
25227 :: EXIT :: exit :: I :: org.joda.time.Period.getMonths()::JM,17063:JM,17068
25236 :: CALL :: call :: I :: v7 = v4.getIndexedField(p0 $null , v5)::JM,25242:CL,32676
25242 :: NORM :: compound :: I :: return v7::CF,25227
25246 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.Recurrence.getNameKey()::CE,25247:CD,25253
25247 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.tz.DateTimeZoneBuilder.Recurrence.getNameKey()::JM,17253:JM,18974
25250 :: EXPR :: reference :: Ljava/lang/String :: v3 = p0 $null .iNameKey::DD,25253
25253 :: NORM :: compound :: Ljava/lang/String :: return v3::CF,25247
25255 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.Recurrence.getSaveMillis()::CE,25256:CD,25262
25256 :: EXIT :: exit :: I :: org.joda.time.tz.DateTimeZoneBuilder.Recurrence.getSaveMillis()::JM,17296:JM,18667:JM,24644
25259 :: EXPR :: reference :: I :: v3 = p0 $null .iSaveMillis::DD,25262
25262 :: NORM :: compound :: I :: return v3::CF,25256
25264 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.Recurrence.renameAppend(java.lang.String)::CD,25269:CD,25276:CD,25281:CD,25286:CD,25294
25269 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v4 = new java.lang.StringBuilder::
25273 :: EXPR :: reference :: Ljava/lang/String :: v6 = p0 $null .iNameKey::
25276 :: CALL :: call :: Ljava/lang/StringBuilder :: v8 = v4.append(v6)::
25281 :: CALL :: call :: Ljava/lang/StringBuilder :: v10 = v8.append(p1 $null )::JM,25269
25286 :: CALL :: call :: Ljava/lang/String :: v12 = v10.toString()::
25294 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence :: v16 = p0 $null .rename(v14)::CL,32706
25318 :: EXPR :: modify :: [J :: p0 $null .iTransitions = p2 $null ::
25321 :: EXPR :: modify :: [I :: p0 $null .iWallOffsets = p3 $null ::
25324 :: EXPR :: modify :: [I :: p0 $null .iStandardOffsets = p4 $null ::
25327 :: EXPR :: modify :: [Ljava/lang/String :: p0 $null .iNameKeys = p5 $null ::
25330 :: EXPR :: modify :: Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone :: p0 $null .iTailZone = p6 $null ::
25359 :: EXPR :: reference :: I :: v7 = org.joda.time.tz.CachedDateTimeZone.cInfoCacheMask::DD,25361
25361 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v7 + #(1)::CF,25362
25362 :: NORM :: declaration :: [Lorg/joda/time/tz/CachedDateTimeZone$Info :: v10 = new org.joda.time.tz.CachedDateTimeZone$Info[]::DD,25363
25363 :: EXPR :: modify :: [Lorg/joda/time/tz/CachedDateTimeZone$Info :: p0 $null .iInfoCache = v10::
25366 :: EXPR :: modify :: Lorg/joda/time/DateTimeZone :: p0 $null .iZone = p1 $null ::
25377 :: ENTR :: entry :: null :: org.joda.time.chrono.GregorianChronology.getMinYear()::CF,25378:CD,25381
25378 :: EXIT :: exit :: I :: org.joda.time.chrono.GregorianChronology.getMinYear()::JM,54958:JM,54999:JM,61376
25381 :: NORM :: compound :: I :: return #(-292275054)::CF,25378
25383 :: ENTR :: entry :: null :: org.joda.time.chrono.GregorianChronology.getMaxYear()::CF,25384:CD,25387
25384 :: EXIT :: exit :: I :: org.joda.time.chrono.GregorianChronology.getMaxYear()::JM,27832:JM,27860:JM,61367
25387 :: NORM :: compound :: I :: return #(292278993)::CF,25384
25389 :: ENTR :: entry :: null :: org.joda.time.field.FieldUtils.verifyValueBounds(org.joda.time.DateTimeField,int,int,int)::JM,32741
25428 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicGJChronology.setYear(long,int)::CE,25429:CD,25434:CD,25439:CD,25445:CD,25472:CD,25479:CD,25480:CD,25481
25429 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicGJChronology.setYear(long,int)::JM,17711:JM,18547:JM,48984:JM,59094
25434 :: CALL :: call :: I :: v6 = p0 $null .getYear(p1 $null )::CL,20337
25439 :: CALL :: call :: I :: v8 = p0 $null .getDayOfYear(p1 $null , v6)::CL,27978
25445 :: CALL :: call :: I :: v10 = p0 $null .getMillisOfDay(p1 $null )::JM,25479:CL,26686
25472 :: CALL :: call :: J :: v25 = p0 $null .getYearMonthDayMillis(p2 $null , #(1), v23)::JM,25480:CL,26650
25479 :: EXPR :: assign :: J :: v26 = CONVERT I to J v10::CF,25480
25480 :: EXPR :: assign :: Ljava/lang/Object :: v27 = v25 + v26::DD,25481
25481 :: NORM :: compound :: J :: return v27::DD,25429
25518 :: ENTR :: entry :: null :: org.joda.time.field.DividedDateTimeField.getRemainder(int)::
25549 :: ENTR :: entry :: null :: org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)::CE,25550:CD,25555:CD,25559:CD,25569:CD,25576:CD,25582
25550 :: EXIT :: exit :: J :: org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)::JM,17766:JM,18044:JM,18497:JM,25624
25555 :: CALL :: call :: I :: v7 = p0 $null .getMaximumValue()::CL,27900
25559 :: CALL :: call :: V :: verifyValueBounds(p0 $null , p2 $null , #(0), v7)::CL,25389
25569 :: CALL :: call :: I :: v12 = v10.get(p1 $null )::CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,20253:CL,11332
25576 :: CALL :: call :: J :: v16 = p0 $null .set(p1 $null , v14)::JM,25582:CL,25609
25582 :: NORM :: compound :: J :: return v16::DD,25550
25595 :: ENTR :: entry :: null :: org.joda.time.chrono.GJYearOfEraDateTimeField.getMaximumValue()::CE,25596:CD,25603:CD,25607
25596 :: EXIT :: exit :: I :: org.joda.time.chrono.GJYearOfEraDateTimeField.getMaximumValue()::JM,20291:JM,25607:JM,27873:JM,27912:JM,27958:JM,49919:JM,55025:JM,55010:JM,55011:JM,55013:JM,55015:JM,56847:JM,56853
25603 :: CALL :: call :: I :: v6 = v4.getMaximumValue()::JM,25607:CL,27834:CL,25595:CL,25628:CL,27881:CL,27840:CL,27894:CL,27875:CL,27947:CL,27821:CL,27969:CL,27923:CL,27900:CL,27849:CL,27914:CL,20279:CL,27936:CL,27862:CL,27960
25607 :: NORM :: compound :: I :: return v6::DD,25596
25609 :: ENTR :: entry :: null :: org.joda.time.field.DecoratedDateTimeField.set(long,int)::CE,25610:CD,25618:CD,25624
25610 :: EXIT :: exit :: J :: org.joda.time.field.DecoratedDateTimeField.set(long,int)::JM,17812:JM,17896:JM,25582
25618 :: CALL :: call :: J :: v7 = v5.set(p1 $null , p2 $null )::JM,25624:CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,25549:CL,17826
25624 :: NORM :: compound :: J :: return v7::DD,25610
25628 :: ENTR :: entry :: null :: org.joda.time.field.PreciseDateTimeField.getMaximumValue()::CE,25629:CD,25635:CD,25636
25629 :: EXIT :: exit :: I :: org.joda.time.field.PreciseDateTimeField.getMaximumValue()::JM,20291:JM,25607:JM,27873:JM,27912:JM,27958:JM,49919:JM,55025:JM,55010:JM,55011:JM,55013:JM,55015:JM,56847:JM,56853
25632 :: EXPR :: reference :: I :: v3 = p0 $null .iRange::DD,25635
25635 :: EXPR :: assign :: Ljava/lang/Object :: v5 = v3 - #(1)::CF,25636
25636 :: NORM :: compound :: I :: return v5::CF,25629
25639 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.getZone()::CE,25640:CD,25646
25640 :: EXIT :: exit :: Lorg/joda/time/DateTimeZone :: org.joda.time.chrono.AssembledChronology.getZone()::JM,25651:JM,32830:JM,37119:JM,43135:JM,43175:JM,43307:JM,45197
25643 :: EXPR :: reference :: Lorg/joda/time/Chronology :: v3 = p0 $null .iBase::DD,25646
25646 :: PRED :: IF :: Z :: if (v3 == #(null)) goto 15::CD,25647:CD,25651:CD,25652
25647 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v6 = v3.getZone()::JM,25651:CL,25659:CL,25670:CL,25639
25651 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v6::CF,25640
25652 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return #(null)::CF,25640
25659 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.getZone()::CE,25660:CD,25663:CD,25667:CD,25668
25660 :: EXIT :: exit :: Lorg/joda/time/DateTimeZone :: org.joda.time.chrono.ZonedChronology.getZone()::JM,25651:JM,32830:JM,37119:JM,43307
25663 :: CALL :: call :: Ljava/lang/Object :: v4 = p0 $null .getParam()::JM,25667:CL,32808
25667 :: EXPR :: assign :: Ljava/lang/Object :: v5 = CHECKCAST v4::CF,25668
25668 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v5::CF,25660
25670 :: ENTR :: entry :: null :: org.joda.time.chrono.GregorianChronology.getZone()::CE,25671:CD,25674:CD,25678
25671 :: EXIT :: exit :: Lorg/joda/time/DateTimeZone :: org.joda.time.chrono.GregorianChronology.getZone()::JM,25651:JM,32830:JM,37119:JM,43248:JM,43307
25674 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v4 = p0 $null .getZone()::JM,25678:CL,32817
25678 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v4::CF,25671
25739 :: ENTR :: entry :: null :: org.joda.time.field.DelegatedDateTimeField.getType()::CE,25740:CD,25746
25740 :: EXIT :: exit :: Lorg/joda/time/DateTimeFieldType :: org.joda.time.field.DelegatedDateTimeField.getType()::JM,63197
25743 :: EXPR :: reference :: Lorg/joda/time/DateTimeFieldType :: v3 = p0 $null .iType::DD,25746
25746 :: NORM :: compound :: Lorg/joda/time/DateTimeFieldType :: return v3::CF,25740
25774 :: ENTR :: entry :: null :: org.joda.time.DateTimeFieldType.StandardDateTimeFieldType.getField(org.joda.time.Chronology)::CD,25779:CD,25786
25779 :: CALL :: call :: Lorg/joda/time/Chronology :: v5 = getChronology(p1 $null )::CL,29057
25783 :: EXPR :: reference :: B :: v6 = p0 $null .iOrdinal::DD,25786
25786 :: PRED :: IF :: null :: switch v6::CD,25787:CD,25792:CD,25797:CD,25802:CD,25807:CD,25812:CD,25817:CD,25822:CD,25827:CD,25832:CD,25837:CD,25842:CD,25847:CD,25852:CD,25857:CD,25862:CD,25867:CD,25872:CD,25877:CD,25882:CD,25887:CD,25892:CD,25897
25787 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v54 = v5.era()::CL,32858:CL,32849
25792 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v52 = v5.yearOfEra()::CL,32876:CL,32885
25797 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v50 = v5.centuryOfEra()::CL,32912:CL,32903
25802 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v48 = v5.yearOfCentury()::CL,32939:CL,32930
25807 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v46 = v5.year()::CL,10978:CL,32957
25812 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v44 = v5.dayOfYear()::CL,32975:CL,32984
25817 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v42 = v5.monthOfYear()::CL,32433:CL,33002
25822 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v40 = v5.dayOfMonth()::CL,33038:CL,33020
25827 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v38 = v5.weekyearOfCentury()::CL,33056:CL,33047
25832 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v36 = v5.weekyear()::CL,33092:CL,33074
25837 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v34 = v5.weekOfWeekyear()::CL,33110:CL,33101
25842 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v32 = v5.dayOfWeek()::CL,26576:CL,33128
25847 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v30 = v5.halfdayOfDay()::CL,33146:CL,33164
25852 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v28 = v5.hourOfHalfday()::CL,33173:CL,33182
25857 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v26 = v5.clockhourOfHalfday()::CL,33218:CL,33200
25862 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v24 = v5.clockhourOfDay()::CL,33227:CL,33236
25867 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v22 = v5.hourOfDay()::CL,33263:CL,33254
25872 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v20 = v5.minuteOfDay()::CL,33290:CL,33281
25877 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v18 = v5.minuteOfHour()::CL,33317:CL,33308
25882 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v16 = v5.secondOfDay()::CL,33335:CL,33344
25887 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v14 = v5.secondOfMinute()::CL,33371:CL,33362
25892 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v12 = v5.millisOfDay()::CL,33389:CL,32442
25897 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v10 = v5.millisOfSecond()::CL,33407:CL,33416
25933 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(long,long)::CE,25934:CD,25939:CD,25940:CD,25941:CD,25942:CD,26046:CD,26047:CD,26051:CD,26056:CD,26061
25934 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(long,long)::JM,33779
25939 :: EXPR :: assign :: I :: v5 = CONVERT J to I p2 $null ::DD,25940
25940 :: EXPR :: assign :: J :: v6 = CONVERT I to J v5::DD,25941
25941 :: EXPR :: assign :: Z :: v7 = v6 == p2 $null ::DD,25942
25942 :: PRED :: IF :: Z :: if (v7 != #(0)) goto 21::CD,25943:CD,25949:CD,25953:CD,25958:CD,25962:CD,25970:CD,26075:CD,26095:CD,26102:CD,26103
25943 :: CALL :: call :: J :: v92 = p0 $null .add(p1 $null , v5)::JM,25949:CL,33434
25949 :: NORM :: compound :: J :: return v92::DD,25934
25953 :: CALL :: call :: I :: v11 = v9.getMillisOfDay(p1 $null )::JM,25958:CL,26686
25958 :: EXPR :: assign :: J :: v12 = CONVERT I to J v11::DD,26102
25962 :: CALL :: call :: I :: v15 = v13.getYear(p1 $null )::CL,20337
25970 :: CALL :: call :: I :: v18 = v16.getMonthOfYear(p1 $null , v15)::CL,27623
26046 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v80 = new java.lang.IllegalArgumentException::
26047 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v81 = new java.lang.StringBuilder::
26051 :: CALL :: call :: Ljava/lang/StringBuilder :: v85 = v81.append(#(Magnitude of add amou...))::
26056 :: CALL :: call :: Ljava/lang/StringBuilder :: v87 = v85.append(p2 $null )::JM,25939
26061 :: CALL :: call :: Ljava/lang/String :: v89 = v87.toString()::
26075 :: CALL :: call :: I :: v71 = v69.getDayOfMonth(p1 $null , v15, v18)::CL,28054
26095 :: CALL :: call :: J :: v78 = v76.getYearMonthDayMillis(v67, v68, v75)::JM,26102:CL,26650
26102 :: EXPR :: assign :: Ljava/lang/Object :: v79 = v78 + v12::CF,26103
26103 :: NORM :: compound :: J :: return v79::DD,25934
26192 :: ENTR :: entry :: null :: org.joda.time.field.BaseDateTimeField.add(long,long)::CD,26198:CD,26202
26198 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .getDurationField()::CL,33678:CL,33687:CL,33709:CL,33730:CL,33718:CL,33669:CL,33700
26202 :: CALL :: call :: J :: v8 = v6.add(p1 $null , p2 $null )::CL,33814:CL,33839:CL,33783:CL,33739:CL,33828:CL,33764
26212 :: ENTR :: entry :: null :: org.joda.time.field.OffsetDateTimeField.add(long,long)::CD,26218:CD,26224:CD,26235
26218 :: CALL :: call :: J :: v6 = p0 $null .add(p1 $null , p2 $null )::CL,26192
26224 :: CALL :: call :: I :: v8 = p0 $null .get(v6)::CL,10987
26235 :: CALL :: call :: V :: verifyValueBounds(p0 $null , v8, v9, v10)::CL,25389
26252 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.add(long,long)::CD,26261
26258 :: EXPR :: reference :: Z :: v5 = p0 $null .iTimeField::DD,26261
26261 :: PRED :: IF :: Z :: if (v5 == #(0)) goto 37::CD,26262:CD,26272:CD,26284:CD,26292:CD,26301
26262 :: CALL :: call :: I :: v17 = p0 $null .getOffsetToAdd(p1 $null )::CL,33889
26272 :: CALL :: call :: J :: v22 = v18.add(v20, p2 $null )::CL,26252:CL,25933:CL,26457:CL,26212:CL,26332:CL,26391:CL,26437:CL,26372:CL,26352:CL,26192:CL,26411
26284 :: CALL :: call :: J :: v9 = v7.convertUTCToLocal(p1 $null )::CL,20087
26292 :: CALL :: call :: J :: v12 = v10.add(v9, p2 $null )::CL,26252:CL,25933:CL,26457:CL,26212:CL,26332:CL,26391:CL,26437:CL,26372:CL,26352:CL,26192:CL,26411
26301 :: CALL :: call :: J :: v15 = v13.convertLocalToUTC(v12, #(0), p1 $null )::CL,26477
26332 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.add(long,long)::CD,26342
26342 :: CALL :: call :: J :: v8 = v6.add(p1 $null , p2 $null )::CL,33814:CL,33839:CL,33783:CL,33739:CL,33828:CL,33764
26352 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicWeekyearDateTimeField.add(long,long)::CE,26353:CD,26362:CD,26368
26353 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicWeekyearDateTimeField.add(long,long)::JM,33779
26362 :: CALL :: call :: J :: v8 = p0 $null .add(p1 $null , v6)::JM,26368:CL,33983
26368 :: NORM :: compound :: J :: return v8::DD,26353
26372 :: ENTR :: entry :: null :: org.joda.time.field.DelegatedDateTimeField.add(long,long)::CD,26381
26381 :: CALL :: call :: J :: v7 = v5.add(p1 $null , p2 $null )::CL,26252:CL,25933:CL,26457:CL,26212:CL,26332:CL,26391:CL,26437:CL,26372:CL,26352:CL,26192:CL,26411
26391 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicYearDateTimeField.add(long,long)::CE,26392:CD,26401:CD,26407
26392 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicYearDateTimeField.add(long,long)::JM,33779
26401 :: CALL :: call :: J :: v8 = p0 $null .add(p1 $null , v6)::JM,26407:CL,34012
26407 :: NORM :: compound :: J :: return v8::DD,26392
26411 :: ENTR :: entry :: null :: org.joda.time.field.DividedDateTimeField.add(long,long)::CD,26426
26426 :: CALL :: call :: J :: v11 = v6.add(p1 $null , v9)::CL,26252:CL,25933:CL,26457:CL,26212:CL,26332:CL,26391:CL,26437:CL,26372:CL,26352:CL,34049:CL,26192:CL,26411
26437 :: ENTR :: entry :: null :: org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long)::CD,26447
26447 :: CALL :: call :: J :: v8 = v6.add(p1 $null , p2 $null )::CL,26252:CL,25933:CL,26457:CL,26212:CL,26332:CL,26391:CL,26437:CL,26372:CL,26352:CL,34049:CL,26192:CL,26411
26457 :: ENTR :: entry :: null :: org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long)::CD,26467
26467 :: CALL :: call :: J :: v8 = v6.add(p1 $null , p2 $null )::CL,26252:CL,25933:CL,26457:CL,26212:CL,26332:CL,26391:CL,26437:CL,26372:CL,26352:CL,34049:CL,26192:CL,26411
26477 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.convertLocalToUTC(long,boolean,long)::CE,26478:CD,26484:CD,26489:CD,26490:CD,26491:CD,26496
26478 :: EXIT :: exit :: J :: org.joda.time.DateTimeZone.convertLocalToUTC(long,boolean,long)::JM,17982:JM,18453:JM,40130:JM,44112:JM,48812
26484 :: CALL :: call :: I :: v7 = p0 $null .getOffset(p3 $null )::JM,26496:JM,26489:CL,18682:CL,18565:CL,18672:CL,18689
26489 :: EXPR :: assign :: J :: v8 = CONVERT I to J v7::CF,26490
26490 :: EXPR :: assign :: Ljava/lang/Object :: v9 = p1 $null  - v8::DD,26497
26491 :: CALL :: call :: I :: v11 = p0 $null .getOffset(v9)::JM,26496:CL,18682:CL,18565:CL,18672:CL,18689
26496 :: PRED :: IF :: Z :: if (v11 != v7) goto 36::CD,26497:CD,26498:CD,26504
26497 :: NORM :: compound :: J :: return v9::DD,26478
26498 :: CALL :: call :: J :: v13 = p0 $null .convertLocalToUTC(p1 $null , p2 $null )::JM,26504:CL,34069
26504 :: NORM :: compound :: J :: return v13::DD,26478
26546 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getWeeksInYear(int)::CE,26547:CD,26551:CD,26557:CD,26562:CD,26563:CD,26564:CD,26565
26547 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicChronology.getWeeksInYear(int)::JM,27785
26551 :: CALL :: call :: J :: v5 = p0 $null .getFirstWeekOfYearMillis(p1 $null )::JM,26562:CL,34194
26557 :: CALL :: call :: J :: v9 = p0 $null .getFirstWeekOfYearMillis(v7)::JM,26562:CL,34194
26562 :: EXPR :: assign :: Ljava/lang/Object :: v10 = v9 - v5::DD,26563
26563 :: EXPR :: assign :: Ljava/lang/Object :: v12 = v10 / #(604800000 l)::CF,26564
26564 :: EXPR :: assign :: I :: v13 = CONVERT J to I v12::CF,26565
26565 :: NORM :: compound :: I :: return v13::DD,26547
26576 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.dayOfWeek()::CE,26577:CD,26583
26577 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.dayOfWeek()::JM,36411
26580 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iDayOfWeek::DD,26583
26583 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,26577
26585 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getDayOfMonth(long,int)::CD,26591:CD,26597
26591 :: CALL :: call :: I :: v6 = p0 $null .getMonthOfYear(p1 $null , p2 $null )::CL,27623
26597 :: CALL :: call :: I :: v8 = p0 $null .getDayOfMonth(p1 $null , p2 $null , v6)::CL,28054
26613 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth(int,int)::CE,26614:CD,26619:CD,26624:JM,26627:JM,26635
26614 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth(int,int)::JM,52545
26619 :: CALL :: call :: Z :: v6 = p0 $null .isLeapYear(p1 $null )::JM,26624:CL,28029
26624 :: PRED :: IF :: Z :: if (v6 == #(0)) goto 16::CD,26625:CD,26627:CD,26632:CD,26633:CD,26635:CD,26640
26625 :: EXPR :: reference :: [I :: v12 = org.joda.time.chrono.BasicGJChronology.MAX_DAYS_PER_MONTH_ARRAY::CF,26627
26627 :: EXPR :: assign :: Ljava/lang/Object :: v13 = p2 $null  - #(1)::
26628 :: EXPR :: reference :: I :: v14 = v12[v13]::DD,26632
26632 :: NORM :: compound :: I :: return v14::CF,26614
26633 :: EXPR :: reference :: [I :: v8 = org.joda.time.chrono.BasicGJChronology.MIN_DAYS_PER_MONTH_ARRAY::CF,26635
26635 :: EXPR :: assign :: Ljava/lang/Object :: v10 = p2 $null  - #(1)::
26636 :: EXPR :: reference :: I :: v11 = v8[v10]::DD,26640
26640 :: NORM :: compound :: I :: return v11::CF,26614
26650 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getYearMonthDayMillis(int,int,int)::CE,26651:CD,26657:CD,26662:CD,26668:CD,26669:CD,26670:CD,26671:CD,26672:CD,26673
26651 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicChronology.getYearMonthDayMillis(int,int,int)::JM,18300:JM,25480:JM,26102:JM,33568:JM,61361:JM,61379:JM,61370
26657 :: CALL :: call :: J :: v7 = p0 $null .getYearMillis(p1 $null )::JM,26668:CL,28013
26662 :: CALL :: call :: J :: v9 = p0 $null .getTotalMillisByYearMonth(p1 $null , p2 $null )::JM,26668:CL,34241
26668 :: EXPR :: assign :: Ljava/lang/Object :: v10 = v7 + v9::DD,26672:CF,26669
26669 :: EXPR :: assign :: Ljava/lang/Object :: v12 = p3 $null  - #(1)::CF,26670
26670 :: EXPR :: assign :: J :: v13 = CONVERT I to J v12::DD,26671
26671 :: EXPR :: assign :: Ljava/lang/Object :: v15 = v13 * #(86400000 l)::CF,26672
26672 :: EXPR :: assign :: Ljava/lang/Object :: v16 = v10 + v15::CF,26673
26673 :: NORM :: compound :: J :: return v16::DD,26651
26686 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getMillisOfDay(long)::CF,26687:CD,26691:CD,26692:JM,26693:JM,26696
26687 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicChronology.getMillisOfDay(long)::JM,18299:JM,25479:JM,25958:JM,33450
26691 :: EXPR :: assign :: Z :: v5 = p1 $null  == #(0 l)::DD,26692
26692 :: PRED :: IF :: Z :: if (v5 < #(0)) goto 17::CD,26693:CD,26694:CD,26695:CD,26696:CD,26697:CD,26698:CD,26699:CD,26700
26693 :: EXPR :: assign :: Ljava/lang/Object :: v14 = p1 $null  % #(86400000 l)::CF,26694
26694 :: EXPR :: assign :: I :: v15 = CONVERT J to I v14::CF,26695
26695 :: NORM :: compound :: I :: return v15::CF,26687
26696 :: EXPR :: assign :: Ljava/lang/Object :: v9 = p1 $null  + #(1 l)::DD,26697
26697 :: EXPR :: assign :: Ljava/lang/Object :: v11 = v9 % #(86400000 l)::CF,26698
26698 :: EXPR :: assign :: I :: v12 = CONVERT J to I v11::CF,26699
26699 :: EXPR :: assign :: Ljava/lang/Object :: v13 = #(86399999) + v12::CF,26700
26700 :: NORM :: compound :: I :: return v13::CF,26687
26710 :: ENTR :: entry :: null :: org.joda.time.chrono.GJDayOfWeekDateTimeField.getMinimumValue()::CF,26711:CD,26714
26711 :: EXIT :: exit :: I :: org.joda.time.chrono.GJDayOfWeekDateTimeField.getMinimumValue()::JM,49905:JM,54945:JM,54971:JM,56829:JM,56835
26714 :: NORM :: compound :: I :: return #(1)::CF,26711
26716 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMinimumValue()::CF,26717:CD,26720
26717 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMinimumValue()::JM,49905:JM,54945:JM,54971:JM,56829:JM,56835
26720 :: NORM :: compound :: I :: return #(1)::CF,26717
26722 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicDayOfYearDateTimeField.getMinimumValue()::CF,26723:CD,26726
26723 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicDayOfYearDateTimeField.getMinimumValue()::JM,49905:JM,54945:JM,54971:JM,56829:JM,56835
26726 :: NORM :: compound :: I :: return #(1)::CF,26723
26728 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMinimumValue()::CF,26729:CD,26732
26729 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMinimumValue()::JM,49905:JM,54945:JM,54971:JM,56829:JM,56835
26732 :: NORM :: compound :: I :: return #(1)::CF,26729
26734 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValueForSet(long,int)::CD,26743:CD,26747:CD,26748:JM,26749
26743 :: CALL :: call :: I :: v7 = v5.getDaysInYearMax()::JM,26747:CL,34278
26747 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v7 - #(1)::DD,26748
26748 :: PRED :: IF :: Z :: if (p2 $null  > v9) goto 24::CD,26749:CD,26750
26749 :: PRED :: IF :: Z :: if (p2 $null  >= #(1)) goto 32::CD,26750
26750 :: CALL :: call :: I :: v11 = p0 $null .getMaximumValue(p1 $null )::CL,34284
26768 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValueForSet(long,int)::CD,26774
26774 :: PRED :: IF :: Z :: if (p2 $null  <= #(52)) goto 16::CD,26775
26775 :: CALL :: call :: I :: v7 = p0 $null .getMaximumValue(p1 $null )::CL,34311
26788 :: ENTR :: entry :: null :: org.joda.time.field.PreciseDurationDateTimeField.getMaximumValueForSet(long,int)::CD,26794
26794 :: CALL :: call :: I :: v6 = p0 $null .getMaximumValue(p1 $null )::CL,34311:CL,34349:CL,34284
26802 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet(long,int)::CD,26811
26811 :: CALL :: call :: I :: v7 = v5.getDaysInMonthMaxForSet(p1 $null , p2 $null )::CL,34365
26827 :: CALL :: call :: Ljava/lang/String :: v6 = createMessage(p1 $null , p2 $null )::CL,34388
26840 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.getType()::CE,26841:CD,26847
26841 :: EXIT :: exit :: Lorg/joda/time/DateTimeFieldType :: org.joda.time.field.UnsupportedDateTimeField.getType()::JM,63197
26844 :: EXPR :: reference :: Lorg/joda/time/DateTimeFieldType :: v3 = p0 $null .iType::DD,26847
26847 :: NORM :: compound :: Lorg/joda/time/DateTimeFieldType :: return v3::DD,26841
26849 :: ENTR :: entry :: null :: org.joda.time.field.BaseDateTimeField.getType()::CE,26850:CD,26856
26850 :: EXIT :: exit :: Lorg/joda/time/DateTimeFieldType :: org.joda.time.field.BaseDateTimeField.getType()::JM,63197
26853 :: EXPR :: reference :: Lorg/joda/time/DateTimeFieldType :: v3 = p0 $null .iType::DD,26856
26856 :: NORM :: compound :: Lorg/joda/time/DateTimeFieldType :: return v3::CF,26850
26869 :: CALL :: call :: Ljava/lang/String :: v10 = createMessage(v7, p2 $null , #(null), #(null), p3 $null )::CL,34481
26936 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.DSTZone.findMatchingRecurrence(long)::CD,26954:CD,26967
26954 :: CALL :: call :: J :: v10 = v5.next(p1 $null , v4, v8)::CL,27246
26967 :: CALL :: call :: J :: v18 = v6.next(p1 $null , v4, v16)::CL,27246
27006 :: ENTR :: entry :: null :: org.joda.time.tz.CachedDateTimeZone.getInfo(long)::CD,27011:CD,27012:CD,27016:CD,27018:CD,27023
27011 :: EXPR :: assign :: Ljava/lang/Object :: v5 = p1 $null  ? #(32)::CF,27012
27012 :: EXPR :: assign :: I :: v6 = CONVERT J to I v5::DD,27018:DD,27029
27013 :: EXPR :: reference :: [Lorg/joda/time/tz/CachedDateTimeZone$Info :: v7 = p0 $null .iInfoCache::
27016 :: EXPR :: reference :: I :: v8 = org.joda.time.tz.CachedDateTimeZone.cInfoCacheMask::CF,27018
27018 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v6 && v8::
27019 :: EXPR :: reference :: Ljava/lang/Object :: v10 = v7[v9]::DD,27023
27023 :: PRED :: IF :: Z :: if (v10 == #(null)) goto 46::CD,27027:CD,27028:CD,27029:CD,27030
27024 :: EXPR :: reference :: J :: v12 = v10.iPeriodStart::DD,27027
27027 :: EXPR :: assign :: Ljava/lang/Object :: v13 = v12 ? #(32)::CF,27028
27028 :: EXPR :: assign :: I :: v14 = CONVERT J to I v13::DD,27029
27029 :: PRED :: IF :: Z :: if (v14 == v6) goto 60::CD,27030
27030 :: CALL :: call :: Lorg/joda/time/tz/CachedDateTimeZone$Info :: v16 = p0 $null .createInfo(p1 $null )::JM,27035:CL,34628
27035 :: EXPR :: modify :: Ljava/lang/Object :: v7[v9] = v16::
27063 :: ENTR :: entry :: null :: org.joda.time.tz.CachedDateTimeZone.Info.getOffset(long)::CE,27064:CD,27071:JM,27078
27064 :: EXIT :: exit :: I :: org.joda.time.tz.CachedDateTimeZone.Info.getOffset(long)::JM,18704:JM,27110
27068 :: EXPR :: reference :: Lorg/joda/time/tz/CachedDateTimeZone$Info :: v4 = p0 $null .iNextInfo::DD,27071
27071 :: PRED :: IF :: Z :: if (v4 == #(null)) goto 20::CD,27078:CD,27079:CD,27083:CD,27101
27072 :: EXPR :: reference :: Lorg/joda/time/tz/CachedDateTimeZone$Info :: v6 = p0 $null .iNextInfo::
27075 :: EXPR :: reference :: J :: v7 = v6.iPeriodStart::DD,27078
27078 :: EXPR :: assign :: Z :: v8 = p1 $null  == v7::DD,27079
27079 :: PRED :: IF :: Z :: if (v8 >= #(0)) goto 49::CD,27083:CD,27101:CD,27105:CD,27110
27080 :: EXPR :: reference :: I :: v13 = p0 $null .iOffset::DD,27083
27083 :: PRED :: IF :: Z :: if (v13 != #(-2147483648)) goto 44::CD,27090
27090 :: CALL :: call :: I :: v18 = v15.getOffset(v16)::JM,27095:CL,18565
27095 :: EXPR :: modify :: I :: p0 $null .iOffset = v18::
27098 :: EXPR :: reference :: I :: v19 = p0 $null .iOffset::DD,27101
27101 :: NORM :: compound :: I :: return v19::DD,27064
27105 :: CALL :: call :: I :: v12 = v10.getOffset(p1 $null )::JM,27110:CL,27063
27110 :: NORM :: compound :: I :: return v12::DD,27064
27124 :: ENTR :: entry :: null :: org.joda.time.tz.CachedDateTimeZone.Info.getStandardOffset(long)::CE,27125:CD,27132:JM,27139
27125 :: EXIT :: exit :: I :: org.joda.time.tz.CachedDateTimeZone.Info.getStandardOffset(long)::JM,18818:JM,27171
27129 :: EXPR :: reference :: Lorg/joda/time/tz/CachedDateTimeZone$Info :: v4 = p0 $null .iNextInfo::DD,27132
27132 :: PRED :: IF :: Z :: if (v4 == #(null)) goto 20::CD,27139:CD,27140:CD,27144:CD,27162
27133 :: EXPR :: reference :: Lorg/joda/time/tz/CachedDateTimeZone$Info :: v6 = p0 $null .iNextInfo::
27136 :: EXPR :: reference :: J :: v7 = v6.iPeriodStart::DD,27139
27139 :: EXPR :: assign :: Z :: v8 = p1 $null  == v7::DD,27140
27140 :: PRED :: IF :: Z :: if (v8 >= #(0)) goto 49::CD,27144:CD,27162:CD,27166:CD,27171
27141 :: EXPR :: reference :: I :: v13 = p0 $null .iStandardOffset::DD,27144
27144 :: PRED :: IF :: Z :: if (v13 != #(-2147483648)) goto 44::CD,27151
27151 :: CALL :: call :: I :: v18 = v15.getStandardOffset(v16)::JM,27156:CL,18708
27156 :: EXPR :: modify :: I :: p0 $null .iStandardOffset = v18::
27159 :: EXPR :: reference :: I :: v19 = p0 $null .iStandardOffset::DD,27162
27162 :: NORM :: compound :: I :: return v19::DD,27125
27166 :: CALL :: call :: I :: v12 = v10.getStandardOffset(p1 $null )::JM,27171:CL,27124
27171 :: NORM :: compound :: I :: return v12::DD,27125
27185 :: ENTR :: entry :: null :: org.joda.time.tz.CachedDateTimeZone.Info.getNameKey(long)::CE,27186:CD,27193:JM,27200
27186 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.tz.CachedDateTimeZone.Info.getNameKey(long)::JM,18939:JM,27232
27190 :: EXPR :: reference :: Lorg/joda/time/tz/CachedDateTimeZone$Info :: v4 = p0 $null .iNextInfo::DD,27193
27193 :: PRED :: IF :: Z :: if (v4 == #(null)) goto 20::CD,27200:CD,27201:CD,27205:CD,27223
27194 :: EXPR :: reference :: Lorg/joda/time/tz/CachedDateTimeZone$Info :: v6 = p0 $null .iNextInfo::
27197 :: EXPR :: reference :: J :: v7 = v6.iPeriodStart::DD,27200
27200 :: EXPR :: assign :: Z :: v8 = p1 $null  == v7::DD,27201
27201 :: PRED :: IF :: Z :: if (v8 >= #(0)) goto 47::CD,27205:CD,27223:CD,27227:CD,27232
27202 :: EXPR :: reference :: Ljava/lang/String :: v13 = p0 $null .iNameKey::DD,27205
27205 :: PRED :: IF :: Z :: if (v13 != #(null)) goto 42::CD,27212
27212 :: CALL :: call :: Ljava/lang/String :: v17 = v14.getNameKey(v15)::JM,27217:CL,18839
27217 :: EXPR :: modify :: Ljava/lang/String :: p0 $null .iNameKey = v17::
27220 :: EXPR :: reference :: Ljava/lang/String :: v18 = p0 $null .iNameKey::DD,27223
27223 :: NORM :: compound :: Ljava/lang/String :: return v18::DD,27186
27227 :: CALL :: call :: Ljava/lang/String :: v12 = v10.getNameKey(p1 $null )::JM,27232:CL,27185
27232 :: NORM :: compound :: Ljava/lang/String :: return v12::DD,27186
27246 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.Recurrence.next(long,int,int)::CE,27247:CD,27256:CD,27263
27247 :: EXIT :: exit :: J :: org.joda.time.tz.DateTimeZoneBuilder.Recurrence.next(long,int,int)::JM,19139:JM,19110:JM,19141:JM,19127:JM,24850:JM,24830
27256 :: CALL :: call :: J :: v8 = v6.next(p1 $null , p2 $null , p3 $null )::JM,27263:CL,34702
27263 :: NORM :: compound :: J :: return v8::DD,27247
27277 :: CALL :: call :: Lorg/joda/time/Chronology :: v7 = p0 $null .checkChronology(p2 $null )::CL,34914
27297 :: CALL :: call :: V :: p0 $null .adjustForMinMax()::CL,34933
27310 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.Recurrence.previous(long,int,int)::CE,27311:CD,27320:CD,27327
27311 :: EXIT :: exit :: J :: org.joda.time.tz.DateTimeZoneBuilder.Recurrence.previous(long,int,int)::JM,19382:JM,19352:JM,19384:JM,19369
27320 :: CALL :: call :: J :: v8 = v6.previous(p1 $null , p2 $null , p3 $null )::JM,27327:CL,34966
27327 :: NORM :: compound :: J :: return v8::DD,27311
27332 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.writeTo(java.lang.String,java.io.DataOutput)::CD,27338:CD,27344:CD,27345
27338 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v7 = p0 $null .toDateTimeZone(p1 $null , #(0))::JM,27344:CL,9601
27344 :: EXPR :: assign :: Z :: v8=v7 INSTANCEOF org.joda.time.tz.FixedDateTimeZone::DD,27345
27345 :: PRED :: IF :: Z :: if (v8 == #(0)) goto 57::CD,27346:CD,27350:CD,27355:CD,27359:CD,27369:CD,27397
27346 :: CALL :: call :: V :: p2 $null .writeByte(#(70))::
27350 :: CALL :: call :: Ljava/lang/String :: v24 = v7.getNameKey(#(0 l))::CL,18924:CL,18943:CL,18839:CL,18950:CL,18960
27355 :: CALL :: call :: V :: p2 $null .writeUTF(v24)::
27359 :: CALL :: call :: I :: v27 = v7.getOffset(#(0 l))::CL,18682:CL,18565:CL,18650:CL,18672:CL,18689
27369 :: CALL :: call :: I :: v31 = v7.getStandardOffset(#(0 l))::CL,18822:CL,18793:CL,18803:CL,18832:CL,18708
27397 :: CALL :: call :: V :: v18.writeTo(p2 $null )::CL,35309
27429 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.readFrom(java.io.DataInput,java.lang.String)::CE,27430:CD,27434:CD,27438:CD,27488
27430 :: EXIT :: exit :: Lorg/joda/time/DateTimeZone :: org.joda.time.tz.DateTimeZoneBuilder.readFrom(java.io.DataInput,java.lang.String)::JM,19548:JM,19559
27434 :: CALL :: call :: I :: v5 = p1 $null .readUnsignedByte()::JM,27438
27438 :: PRED :: IF :: null :: switch v5::CF,27439:CD,27440:CD,27444:CD,27449:JM,25057:JM,20785:JM,25060:JM,20779:JM,25054:CD,27463:CD,27468:CD,27471:CD,27472:CD,27477:CD,27481:CD,27482:CD,27487:CD,27494
27439 :: NORM :: declaration :: Lorg/joda/time/tz/FixedDateTimeZone :: v15 = new org.joda.time.tz.FixedDateTimeZone::DD,27494:JM,27438
27440 :: CALL :: call :: Ljava/lang/String :: v17 = p1 $null .readUTF()::JM,27438
27444 :: CALL :: call :: J :: v19 = readMillis(p1 $null )::CL,35572
27449 :: CALL :: call :: J :: v22 = readMillis(p1 $null )::CL,35572
27463 :: CALL :: call :: Z :: v27 = v15.equals(v25)::JM,27468:CL,19686
27468 :: PRED :: IF :: Z :: if (v27 == #(0)) goto 80::CF,27494:CD,27469
27469 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v29 = org.joda.time.DateTimeZone.UTC::DD,27494
27471 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v30::DD,27430
27472 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone :: v12 = readFrom(p1 $null , p2 $null )::CL,35695
27477 :: CALL :: call :: Lorg/joda/time/tz/CachedDateTimeZone :: v14 = forZone(v12)::JM,27481:CL,17657
27481 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v14::DD,27430
27482 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone :: v10 = readFrom(p1 $null , p2 $null )::JM,27487:CL,35695
27487 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v10::DD,27430
27488 :: NORM :: declaration :: Ljava/io/IOException :: v6 = new java.io.IOException::
27494 :: EXPR :: assign :: null :: PHI v30 = v15, v29::CF,27471
27510 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.Recurrence.equals(java.lang.Object)::CE,27511:CD,27515:JM,27517:JM,27519
27511 :: EXIT :: exit :: Z :: org.joda.time.tz.DateTimeZoneBuilder.Recurrence.equals(java.lang.Object)::JM,19609:JM,19621
27515 :: PRED :: IF :: Z :: if (p0 $null  != p1 $null ) goto 8::CD,27516:CD,27517:CD,27518
27516 :: NORM :: compound :: Z :: return #(1)::CF,27511
27517 :: EXPR :: assign :: Z :: v4=p1 $null  INSTANCEOF org.joda.time.tz.DateTimeZoneBuilder$Recurrence::DD,27518
27518 :: PRED :: IF :: Z :: if (v4 == #(0)) goto 65::CD,27519:CD,27526:CD,27552:CD,27553:CD,27554
27519 :: EXPR :: assign :: Ljava/lang/Object :: v6 = CHECKCAST p1 $null ::
27520 :: EXPR :: reference :: I :: v7 = p0 $null .iSaveMillis::DD,27526
27523 :: EXPR :: reference :: I :: v8 = v6.iSaveMillis::DD,27526
27526 :: PRED :: IF :: Z :: if (v7 != v8) goto 63::CD,27533:CD,27538:CD,27554
27527 :: EXPR :: reference :: Ljava/lang/String :: v9 = p0 $null .iNameKey::JM,27538
27530 :: EXPR :: reference :: Ljava/lang/String :: v10 = v6.iNameKey::JM,27538
27533 :: CALL :: call :: Z :: v12 = v9.equals(v10)::JM,27538
27538 :: PRED :: IF :: Z :: if (v12 == #(0)) goto 63::CD,27545:CD,27550:CD,27554
27545 :: CALL :: call :: Z :: v16 = v13.equals(v14)::JM,27550:CL,35865
27550 :: PRED :: IF :: Z :: if (v16 == #(0)) goto 63::CD,27554
27552 :: NORM :: compound :: Z :: return v18::CF,27511
27553 :: NORM :: compound :: Z :: return #(0)::CF,27511
27554 :: EXPR :: assign :: null :: PHI v18 = #(1), #(0)::CF,27552
27586 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoLogger.1.initialValue()::CF,27587:CD,27590:CD,27594
27587 :: EXIT :: exit :: Ljava/lang/Object :: org.joda.time.tz.ZoneInfoLogger.1.initialValue()::
27590 :: CALL :: call :: Ljava/lang/Boolean :: v4 = p0 $null .initialValue()::JM,27594:CL,36000
27594 :: NORM :: compound :: Ljava/lang/Object :: return v4::CF,27587
27623 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicGJChronology.getMonthOfYear(long,int)::CE,27624:CD,27629:CD,27634:CD,27635:CD,27636:CD,27637:CD,27642:CD,27688:CD,27689
27624 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicGJChronology.getMonthOfYear(long,int)::JM,20188
27629 :: CALL :: call :: J :: v6 = p0 $null .getYearMillis(p2 $null )::JM,27634:CL,28013
27634 :: EXPR :: assign :: Ljava/lang/Object :: v7 = p1 $null  - v6::DD,27635
27635 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v7 ? #(10)::CF,27636
27636 :: EXPR :: assign :: I :: v10 = CONVERT J to I v9::DD,27643:DD,27644:DD,27645:DD,27647:DD,27650:DD,27652:DD,27655:DD,27656:DD,27658:DD,27661:DD,27663:DD,27666:DD,27667:DD,27668:DD,27670:DD,27673:DD,27675:DD,27678:DD,27679:DD,27681:DD,27684:DD,27686
27637 :: CALL :: call :: Z :: v12 = p0 $null .isLeapYear(p2 $null )::JM,27642:CL,28029
27642 :: PRED :: IF :: Z :: if (v12 == #(0)) goto 157::CD,27643:CD,27666
27643 :: PRED :: IF :: Z :: if (v10 >= #(15356250)) goto 92::CD,27644:CD,27655
27644 :: PRED :: IF :: Z :: if (v10 >= #(7678125)) goto 65::CD,27645:CD,27650
27645 :: PRED :: IF :: Z :: if (v10 >= #(2615625)) goto 50::CD,27647:CD,27689
27647 :: PRED :: IF :: Z :: if (v10 >= #(5062500)) goto 58::CD,27689
27650 :: PRED :: IF :: Z :: if (v10 >= #(10209375)) goto 76::CD,27652:CD,27689
27652 :: PRED :: IF :: Z :: if (v10 >= #(12825000)) goto 85::CD,27689
27655 :: PRED :: IF :: Z :: if (v10 >= #(23118750)) goto 128::CD,27656:CD,27661
27656 :: PRED :: IF :: Z :: if (v10 >= #(17971875)) goto 111::CD,27658:CD,27689
27658 :: PRED :: IF :: Z :: if (v10 >= #(20587500)) goto 121::CD,27689
27661 :: PRED :: IF :: Z :: if (v10 >= #(25734375)) goto 140::CD,27663:CD,27689
27663 :: PRED :: IF :: Z :: if (v10 >= #(28265625)) goto 150::CD,27689
27666 :: PRED :: IF :: Z :: if (v10 >= #(15271875)) goto 224::CD,27667:CD,27678
27667 :: PRED :: IF :: Z :: if (v10 >= #(7593750)) goto 197::CD,27668:CD,27673
27668 :: PRED :: IF :: Z :: if (v10 >= #(2615625)) goto 182::CD,27670:CD,27689
27670 :: PRED :: IF :: Z :: if (v10 >= #(4978125)) goto 190::CD,27689
27673 :: PRED :: IF :: Z :: if (v10 >= #(10125000)) goto 208::CD,27675:CD,27689
27675 :: PRED :: IF :: Z :: if (v10 >= #(12740625)) goto 217::CD,27689
27678 :: PRED :: IF :: Z :: if (v10 >= #(23034375)) goto 260::CD,27679:CD,27684
27679 :: PRED :: IF :: Z :: if (v10 >= #(17887500)) goto 243::CD,27681:CD,27689
27681 :: PRED :: IF :: Z :: if (v10 >= #(20503125)) goto 253::CD,27689
27684 :: PRED :: IF :: Z :: if (v10 >= #(25650000)) goto 272::CD,27686:CD,27689
27686 :: PRED :: IF :: Z :: if (v10 >= #(28181250)) goto 282::CD,27689
27688 :: NORM :: compound :: I :: return v46::DD,27624
27689 :: EXPR :: assign :: null :: PHI v46 = #(1), #(2), #(3), #(4), #(5), #(6), #(7), #(8), #(9), #(10), #(11), #(12), #(1), #(2), #(3), #(4), #(5), #(6), #(7), #(8), #(9), #(10), #(11), #(12)::CF,27688
27766 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getWeekOfWeekyear(long,int)::CE,27767:CD,27772:CD,27777:CD,27778:JM,27792:JM,27795
27767 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicChronology.getWeekOfWeekyear(long,int)::JM,20209:JM,20217:JM,20332
27772 :: CALL :: call :: J :: v6 = p0 $null .getFirstWeekOfYearMillis(p2 $null )::JM,27777:JM,27795:CL,34194
27777 :: EXPR :: assign :: Z :: v7 = p1 $null  == v6::DD,27778
27778 :: PRED :: IF :: Z :: if (v7 >= #(0)) goto 25::CD,27780:CD,27785:CD,27787:CD,27792:CD,27793
27780 :: CALL :: call :: I :: v21 = p0 $null .getWeeksInYear(v19)::JM,27785:CL,26546
27785 :: NORM :: compound :: I :: return v21::DD,27767
27787 :: CALL :: call :: J :: v12 = p0 $null .getFirstWeekOfYearMillis(v10)::JM,27792:CL,34194
27792 :: EXPR :: assign :: Z :: v13 = p1 $null  == v12::DD,27793
27793 :: PRED :: IF :: Z :: if (v13 < #(0)) goto 43::CD,27794:CD,27795:CD,27796:CD,27797:CD,27798:CD,27799
27794 :: NORM :: compound :: I :: return #(1)::DD,27767
27795 :: EXPR :: assign :: Ljava/lang/Object :: v14 = p1 $null  - v6::DD,27796
27796 :: EXPR :: assign :: Ljava/lang/Object :: v16 = v14 / #(604800000 l)::CF,27797
27797 :: EXPR :: assign :: I :: v17 = CONVERT J to I v16::DD,27798
27798 :: EXPR :: assign :: Ljava/lang/Object :: v18 = v17 + #(1)::CF,27799
27799 :: NORM :: compound :: I :: return v18::DD,27767
27821 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicWeekyearDateTimeField.getMaximumValue()::CE,27822:CD,27828:CD,27832
27822 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicWeekyearDateTimeField.getMaximumValue()::JM,20291:JM,25607:JM,27873:JM,27912:JM,27958:JM,49919:JM,55025:JM,55010:JM,55011:JM,55013:JM,55015:JM,56847:JM,56853
27828 :: CALL :: call :: I :: v5 = v3.getMaxYear()::JM,27832:CL,25383
27832 :: NORM :: compound :: I :: return v5::CF,27822
27834 :: ENTR :: entry :: null :: org.joda.time.chrono.GJDayOfWeekDateTimeField.getMaximumValue()::CF,27835:CD,27838
27835 :: EXIT :: exit :: I :: org.joda.time.chrono.GJDayOfWeekDateTimeField.getMaximumValue()::JM,20291:JM,25607:JM,27873:JM,27912:JM,27958:JM,49919:JM,55025:JM,55010:JM,55011:JM,55013:JM,55015:JM,56847:JM,56853
27838 :: NORM :: compound :: I :: return #(7)::CF,27835
27840 :: ENTR :: entry :: null :: org.joda.time.field.DividedDateTimeField.getMaximumValue()::CE,27841:CD,27847
27841 :: EXIT :: exit :: I :: org.joda.time.field.DividedDateTimeField.getMaximumValue()::JM,20291:JM,25607:JM,27873:JM,27912:JM,27958:JM,49919:JM,55025:JM,55010:JM,55011:JM,55013:JM,55015:JM,56847:JM,56853
27844 :: EXPR :: reference :: I :: v3 = p0 $null .iMax::DD,27847
27847 :: NORM :: compound :: I :: return v3::CF,27841
27849 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue()::CE,27850:CD,27856:CD,27860
27850 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue()::JM,20291:JM,25607:JM,27873:JM,27912:JM,27958:JM,49919:JM,55025:JM,55010:JM,55011:JM,55013:JM,55015:JM,56847:JM,56853
27856 :: CALL :: call :: I :: v5 = v3.getMaxYear()::JM,27860:CL,25383
27860 :: NORM :: compound :: I :: return v5::CF,27850
27862 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.getMaximumValue()::CE,27863:CD,27869:CD,27873
27863 :: EXIT :: exit :: I :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.getMaximumValue()::JM,20291:JM,25607:JM,27873:JM,27912:JM,27958:JM,49919:JM,55025:JM,55010:JM,55011:JM,55013:JM,55015:JM,56847:JM,56853
27869 :: CALL :: call :: I :: v5 = v3.getMaximumValue()::JM,27873:CL,27834:CL,25595:CL,25628:CL,27881:CL,27840:CL,27894:CL,27875:CL,27947:CL,27821:CL,27969:CL,27923:CL,27849:CL,27914:CL,20279:CL,27936:CL,27862:CL,27960
27873 :: NORM :: compound :: I :: return v5::DD,27863
27875 :: ENTR :: entry :: null :: org.joda.time.chrono.GJEraDateTimeField.getMaximumValue()::CF,27876:CD,27879
27876 :: EXIT :: exit :: I :: org.joda.time.chrono.GJEraDateTimeField.getMaximumValue()::JM,20291:JM,25607:JM,27873:JM,27912:JM,27958:JM,49919:JM,55025:JM,55010:JM,55011:JM,55013:JM,55015:JM,56847:JM,56853
27879 :: NORM :: compound :: I :: return #(1)::CF,27876
27881 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue()::CE,27882:CD,27888:CD,27892
27882 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue()::JM,20291:JM,25607:JM,27873:JM,27912:JM,27958:JM,49919:JM,55025:JM,55010:JM,55011:JM,55013:JM,55015:JM,56847:JM,56853
27888 :: CALL :: call :: I :: v5 = v3.getDaysInYearMax()::JM,27892:CL,34278
27892 :: NORM :: compound :: I :: return v5::CF,27882
27894 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue()::CF,27895:CD,27898
27895 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue()::JM,20291:JM,25607:JM,27873:JM,27912:JM,27958:JM,49919:JM,55025:JM,55010:JM,55011:JM,55013:JM,55015:JM,56847:JM,56853
27898 :: NORM :: compound :: I :: return #(53)::CF,27895
27900 :: ENTR :: entry :: null :: org.joda.time.chrono.ISOYearOfEraDateTimeField.getMaximumValue()::CE,27901:CD,27908:CD,27912
27901 :: EXIT :: exit :: I :: org.joda.time.chrono.ISOYearOfEraDateTimeField.getMaximumValue()::JM,20291:JM,25607:JM,27912:JM,51851:JM,51852:JM,51854
27908 :: CALL :: call :: I :: v6 = v4.getMaximumValue()::JM,27912:CL,27834:CL,25595:CL,25628:CL,27881:CL,27840:CL,27894:CL,27875:CL,27947:CL,27821:CL,27969:CL,27923:CL,27900:CL,27849:CL,27914:CL,20279:CL,27936:CL,27862:CL,27960
27912 :: NORM :: compound :: I :: return v6::DD,27901
27914 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue()::CE,27915:CD,27921
27915 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue()::JM,20291:JM,25607:JM,27873:JM,27912:JM,27958:JM,49919:JM,55025:JM,55010:JM,55011:JM,55013:JM,55015:JM,56847:JM,56853
27918 :: EXPR :: reference :: I :: v3 = p0 $null .iMax::DD,27921
27921 :: NORM :: compound :: I :: return v3::CF,27915
27923 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue()::CE,27924:CD,27930:CD,27934
27924 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue()::JM,20291:JM,25607:JM,27873:JM,27912:JM,27958:JM,49919:JM,55025:JM,55010:JM,55011:JM,55013:JM,55015:JM,56847:JM,56853
27930 :: CALL :: call :: I :: v5 = v3.getDaysInMonthMax()::JM,27934:CL,36041
27934 :: NORM :: compound :: I :: return v5::CF,27924
27936 :: ENTR :: entry :: null :: org.joda.time.field.RemainderDateTimeField.getMaximumValue()::CE,27937:CD,27943:CD,27944
27937 :: EXIT :: exit :: I :: org.joda.time.field.RemainderDateTimeField.getMaximumValue()::JM,20291:JM,25607:JM,27873:JM,27912:JM,27958:JM,49919:JM,55025:JM,55010:JM,55011:JM,55013:JM,55015:JM,56847:JM,56853
27940 :: EXPR :: reference :: I :: v3 = p0 $null .iDivisor::DD,27943
27943 :: EXPR :: assign :: Ljava/lang/Object :: v5 = v3 - #(1)::CF,27944
27944 :: NORM :: compound :: I :: return v5::CF,27937
27947 :: ENTR :: entry :: null :: org.joda.time.field.DelegatedDateTimeField.getMaximumValue()::CE,27948:CD,27954:CD,27958
27948 :: EXIT :: exit :: I :: org.joda.time.field.DelegatedDateTimeField.getMaximumValue()::JM,20291:JM,25607:JM,27873:JM,27912:JM,27958:JM,49919:JM,56847:JM,56853
27954 :: CALL :: call :: I :: v5 = v3.getMaximumValue()::JM,27958:CL,27834:CL,25595:CL,25628:CL,27881:CL,27840:CL,27894:CL,27875:CL,27947:CL,27821:CL,27969:CL,27923:CL,27849:CL,27914:CL,20279:CL,27936:CL,27862:CL,27960
27958 :: NORM :: compound :: I :: return v5::DD,27948
27960 :: ENTR :: entry :: null :: org.joda.time.field.OffsetDateTimeField.getMaximumValue()::CE,27961:CD,27967
27961 :: EXIT :: exit :: I :: org.joda.time.field.OffsetDateTimeField.getMaximumValue()::JM,20291:JM,25607:JM,27873:JM,27912:JM,27958:JM,49919:JM,51851:JM,51852:JM,51854:JM,55025:JM,55010:JM,55011:JM,55013:JM,55015:JM,56847:JM,56853
27964 :: EXPR :: reference :: I :: v3 = p0 $null .iMax::DD,27967
27967 :: NORM :: compound :: I :: return v3::CF,27961
27969 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.getMaximumValue()::CE,27970:CD,27973
27970 :: EXIT :: exit :: I :: org.joda.time.field.UnsupportedDateTimeField.getMaximumValue()::JM,20291:JM,25607:JM,27873:JM,27912:JM,27958:JM,49919:JM,56847:JM,56853
27973 :: CALL :: call :: Ljava/lang/UnsupportedOperationException :: v4 = p0 $null .unsupported()::CL,20439
27978 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getDayOfYear(long,int)::CE,27979:CD,27984:CD,27989:CD,27990:CD,27991:CD,27992:CD,27993
27979 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicChronology.getDayOfYear(long,int)::JM,20311
27984 :: CALL :: call :: J :: v6 = p0 $null .getYearMillis(p2 $null )::JM,27989:CL,28013
27989 :: EXPR :: assign :: Ljava/lang/Object :: v7 = p1 $null  - v6::DD,27990
27990 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v7 / #(86400000 l)::CF,27991
27991 :: EXPR :: assign :: I :: v10 = CONVERT J to I v9::DD,27992
27992 :: EXPR :: assign :: Ljava/lang/Object :: v12 = v10 + #(1)::CF,27993
27993 :: NORM :: compound :: I :: return v12::DD,27979
28001 :: ENTR :: entry :: null :: org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo()::CF,28002:CD,28005
28002 :: EXIT :: exit :: J :: org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo()::JM,20354:JM,20356
28005 :: NORM :: compound :: J :: return #(15778476000 l)::CF,28002
28007 :: ENTR :: entry :: null :: org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo()::CF,28008:CD,28011
28008 :: EXIT :: exit :: J :: org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo()::JM,20351
28011 :: NORM :: compound :: J :: return #(31083597720000 l)::CF,28008
28013 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getYearMillis(int)::CE,28014:CD,28018:CD,28026
28014 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicChronology.getYearMillis(int)::JM,20377:JM,20363:JM,26668:JM,27634:JM,27989:JM,28072:JM,34217:JM,34222:JM,49083:JM,54398
28018 :: CALL :: call :: Lorg/joda/time/chrono/BasicChronology$YearInfo :: v5 = p0 $null .getYearInfo(p1 $null )::CL,36047
28023 :: EXPR :: reference :: J :: v6 = v5.iFirstDayMillis::DD,28026
28026 :: NORM :: compound :: J :: return v6::DD,28014
28029 :: ENTR :: entry :: null :: org.joda.time.chrono.GregorianChronology.isLeapYear(int)::CF,28030:CD,28034:CD,28035:CD,28041:CD,28042:JM,28036:JM,28038
28030 :: EXIT :: exit :: Z :: org.joda.time.chrono.GregorianChronology.isLeapYear(int)::JM,20375:JM,26624:JM,27642:JM,34252:JM,50967
28034 :: EXPR :: assign :: Ljava/lang/Object :: v5 = p1 $null  && #(3)::DD,28035
28035 :: PRED :: IF :: Z :: if (v5 != #(0)) goto 26::CD,28036:CD,28037:CD,28042
28036 :: EXPR :: assign :: Ljava/lang/Object :: v8 = p1 $null  % #(100)::DD,28037
28037 :: PRED :: IF :: Z :: if (v8 != #(0)) goto 22::CD,28038:CD,28039:CD,28042
28038 :: EXPR :: assign :: Ljava/lang/Object :: v10 = p1 $null  % #(400)::DD,28039
28039 :: PRED :: IF :: Z :: if (v10 != #(0)) goto 26::CD,28042
28041 :: NORM :: compound :: Z :: return v12::CF,28030
28042 :: EXPR :: assign :: null :: PHI v12 = #(1), #(0)::CF,28041
28054 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getDayOfMonth(long,int,int)::CE,28055:CD,28061:CD,28066:CD,28072:CD,28073:CD,28074:CD,28075:CD,28076:CD,28077
28055 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicChronology.getDayOfMonth(long,int,int)::JM,20497:JM,52545:JM,52556
28061 :: CALL :: call :: J :: v7 = p0 $null .getYearMillis(p2 $null )::JM,28072:CL,28013
28066 :: CALL :: call :: J :: v9 = p0 $null .getTotalMillisByYearMonth(p2 $null , p3 $null )::JM,28072:CL,34241
28072 :: EXPR :: assign :: Ljava/lang/Object :: v10 = v7 + v9::DD,28073
28073 :: EXPR :: assign :: Ljava/lang/Object :: v11 = p1 $null  - v10::DD,28074
28074 :: EXPR :: assign :: Ljava/lang/Object :: v13 = v11 / #(86400000 l)::CF,28075
28075 :: EXPR :: assign :: I :: v14 = CONVERT J to I v13::DD,28076
28076 :: EXPR :: assign :: Ljava/lang/Object :: v16 = v14 + #(1)::CF,28077
28077 :: NORM :: compound :: I :: return v16::DD,28055
28099 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.setFields()::CD,28103:CD,28110:CD,28118:CD,28125:CD,28137:CD,28149:CD,28161:CD,28173:CD,28185:CD,28197:CD,28209:CD,28221:CD,28233:CD,28245:CD,28257:CD,28269:CD,28281:CD,28293:CD,28305:CD,28317:CD,28329:CD,28341:CD,28353:CD,28365:CD,28377:CD,28389:CD,28401:CD,28413:CD,28425:CD,28437:CD,28449:CD,28461:CD,28473:CD,28485:CD,28497:CD,28509:CD,28521:CD,28533:CD,28545:CD,28644:CD,28645:CD,28646:CD,28647:CD,28648:CD,28649:CD,28650:CD,28651:CD,28652:CD,28653:CD,28654:CD,28655:CD,28656:CD,28657:CD,28658:CD,28659:CD,28660:CD,28661:CD,28662:CD,28663:CD,28664:CD,28665:CD,28666:CD,28667:CD,28668:CD,28669:CD,28670:CD,28671:CD,28672:CD,28673:CD,28674:CD,28675:CD,28676:CD,28677:CD,28678:CD,28682
28103 :: NORM :: declaration :: Lorg/joda/time/chrono/AssembledChronology$Fields :: v3 = new org.joda.time.chrono.AssembledChronology$Fields::
28107 :: EXPR :: reference :: Lorg/joda/time/Chronology :: v5 = p0 $null .iBase::DD,28110
28110 :: PRED :: IF :: Z :: if (v5 == #(null)) goto 25::CD,28114
28114 :: CALL :: call :: V :: v3.copyFieldsFrom(v7)::CL,36121
28118 :: CALL :: call :: V :: p0 $null .assemble(v3)::CL,37085:CL,36757:CL,37197:CL,37104
28122 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v10 = v3.millis::DD,28125:DD,28644
28125 :: PRED :: IF :: Z :: if (v10 == #(null)) goto 43::CD,28127:CD,28644
28127 :: CALL :: call :: Lorg/joda/time/DurationField :: v12 = p0 $null .millis()::JM,28644:CL,37769
28131 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iMillis = v13::
28134 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v14 = v3.seconds::DD,28137:DD,28645
28137 :: PRED :: IF :: Z :: if (v14 == #(null)) goto 64::CD,28139:CD,28645
28139 :: CALL :: call :: Lorg/joda/time/DurationField :: v16 = p0 $null .seconds()::JM,28645:CL,37781
28143 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iSeconds = v17::
28146 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v18 = v3.minutes::DD,28149:DD,28646
28149 :: PRED :: IF :: Z :: if (v18 == #(null)) goto 85::CD,28151:CD,28646
28151 :: CALL :: call :: Lorg/joda/time/DurationField :: v20 = p0 $null .minutes()::JM,28646:CL,37793
28155 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iMinutes = v21::
28158 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v22 = v3.hours::DD,28161:DD,28647
28161 :: PRED :: IF :: Z :: if (v22 == #(null)) goto 106::CD,28163:CD,28647
28163 :: CALL :: call :: Lorg/joda/time/DurationField :: v24 = p0 $null .hours()::JM,28647:CL,37805
28167 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iHours = v25::
28170 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v26 = v3.halfdays::DD,28173:DD,28648
28173 :: PRED :: IF :: Z :: if (v26 == #(null)) goto 127::CD,28175:CD,28648
28175 :: CALL :: call :: Lorg/joda/time/DurationField :: v28 = p0 $null .halfdays()::JM,28648:CL,37817
28179 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iHalfdays = v29::
28182 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v30 = v3.days::DD,28185:DD,28649
28185 :: PRED :: IF :: Z :: if (v30 == #(null)) goto 148::CD,28187:CD,28649
28187 :: CALL :: call :: Lorg/joda/time/DurationField :: v32 = p0 $null .days()::JM,28649:CL,37829
28191 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iDays = v33::
28194 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v34 = v3.weeks::DD,28197:DD,28650
28197 :: PRED :: IF :: Z :: if (v34 == #(null)) goto 169::CD,28199:CD,28650
28199 :: CALL :: call :: Lorg/joda/time/DurationField :: v36 = p0 $null .weeks()::JM,28650:CL,37841
28203 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iWeeks = v37::
28206 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v38 = v3.weekyears::DD,28209:DD,28651
28209 :: PRED :: IF :: Z :: if (v38 == #(null)) goto 190::CD,28211:CD,28651
28211 :: CALL :: call :: Lorg/joda/time/DurationField :: v40 = p0 $null .weekyears()::JM,28651:CL,37853
28215 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iWeekyears = v41::
28218 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v42 = v3.months::DD,28221:DD,28652
28221 :: PRED :: IF :: Z :: if (v42 == #(null)) goto 211::CD,28223:CD,28652
28223 :: CALL :: call :: Lorg/joda/time/DurationField :: v44 = p0 $null .months()::JM,28652:CL,37865
28227 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iMonths = v45::
28230 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v46 = v3.years::DD,28233:DD,28653
28233 :: PRED :: IF :: Z :: if (v46 == #(null)) goto 232::CD,28235:CD,28653
28235 :: CALL :: call :: Lorg/joda/time/DurationField :: v48 = p0 $null .years()::JM,28653:CL,37877
28239 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iYears = v49::
28242 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v50 = v3.centuries::DD,28245:DD,28654
28245 :: PRED :: IF :: Z :: if (v50 == #(null)) goto 253::CD,28247:CD,28654
28247 :: CALL :: call :: Lorg/joda/time/DurationField :: v52 = p0 $null .centuries()::JM,28654:CL,37889
28251 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iCenturies = v53::
28254 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v54 = v3.eras::DD,28257:DD,28655
28257 :: PRED :: IF :: Z :: if (v54 == #(null)) goto 274::CD,28259:CD,28655
28259 :: CALL :: call :: Lorg/joda/time/DurationField :: v56 = p0 $null .eras()::JM,28655:CL,37901
28263 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iEras = v57::
28266 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v58 = v3.millisOfSecond::DD,28269:DD,28656
28269 :: PRED :: IF :: Z :: if (v58 == #(null)) goto 295::CD,28271:CD,28656
28271 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v60 = p0 $null .millisOfSecond()::JM,28656:CL,33416
28275 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iMillisOfSecond = v61::
28278 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v62 = v3.millisOfDay::DD,28281:DD,28657
28281 :: PRED :: IF :: Z :: if (v62 == #(null)) goto 316::CD,28283:CD,28657
28283 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v64 = p0 $null .millisOfDay()::JM,28657:CL,33389
28287 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iMillisOfDay = v65::
28290 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v66 = v3.secondOfMinute::DD,28293:DD,28658
28293 :: PRED :: IF :: Z :: if (v66 == #(null)) goto 337::CD,28295:CD,28658
28295 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v68 = p0 $null .secondOfMinute()::JM,28658:CL,33371
28299 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iSecondOfMinute = v69::
28302 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v70 = v3.secondOfDay::DD,28305:DD,28659
28305 :: PRED :: IF :: Z :: if (v70 == #(null)) goto 358::CD,28307:CD,28659
28307 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v72 = p0 $null .secondOfDay()::JM,28659:CL,33344
28311 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iSecondOfDay = v73::
28314 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v74 = v3.minuteOfHour::DD,28317:DD,28660
28317 :: PRED :: IF :: Z :: if (v74 == #(null)) goto 379::CD,28319:CD,28660
28319 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v76 = p0 $null .minuteOfHour()::JM,28660:CL,33317
28323 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iMinuteOfHour = v77::
28326 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v78 = v3.minuteOfDay::DD,28329:DD,28661
28329 :: PRED :: IF :: Z :: if (v78 == #(null)) goto 400::CD,28331:CD,28661
28331 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v80 = p0 $null .minuteOfDay()::JM,28661:CL,33290
28335 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iMinuteOfDay = v81::
28338 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v82 = v3.hourOfDay::DD,28341:DD,28662
28341 :: PRED :: IF :: Z :: if (v82 == #(null)) goto 421::CD,28343:CD,28662
28343 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v84 = p0 $null .hourOfDay()::JM,28662:CL,33263
28347 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iHourOfDay = v85::
28350 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v86 = v3.clockhourOfDay::DD,28353:DD,28663
28353 :: PRED :: IF :: Z :: if (v86 == #(null)) goto 442::CD,28355:CD,28663
28355 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v88 = p0 $null .clockhourOfDay()::JM,28663:CL,33236
28359 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iClockhourOfDay = v89::
28362 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v90 = v3.hourOfHalfday::DD,28365:DD,28664
28365 :: PRED :: IF :: Z :: if (v90 == #(null)) goto 463::CD,28367:CD,28664
28367 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v92 = p0 $null .hourOfHalfday()::JM,28664:CL,33182
28371 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iHourOfHalfday = v93::
28374 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v94 = v3.clockhourOfHalfday::DD,28377:DD,28665
28377 :: PRED :: IF :: Z :: if (v94 == #(null)) goto 484::CD,28379:CD,28665
28379 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v96 = p0 $null .clockhourOfHalfday()::JM,28665:CL,33200
28383 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iClockhourOfHalfday = v97::
28386 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v98 = v3.halfdayOfDay::DD,28389:DD,28666
28389 :: PRED :: IF :: Z :: if (v98 == #(null)) goto 505::CD,28391:CD,28666
28391 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v100 = p0 $null .halfdayOfDay()::JM,28666:CL,33146
28395 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iHalfdayOfDay = v101::
28398 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v102 = v3.dayOfWeek::DD,28401:DD,28667
28401 :: PRED :: IF :: Z :: if (v102 == #(null)) goto 526::CD,28403:CD,28667
28403 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v104 = p0 $null .dayOfWeek()::JM,28667:CL,33128
28407 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iDayOfWeek = v105::
28410 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v106 = v3.dayOfMonth::DD,28413:DD,28668
28413 :: PRED :: IF :: Z :: if (v106 == #(null)) goto 547::CD,28415:CD,28668
28415 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v108 = p0 $null .dayOfMonth()::JM,28668:CL,33020
28419 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iDayOfMonth = v109::
28422 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v110 = v3.dayOfYear::DD,28425:DD,28669
28425 :: PRED :: IF :: Z :: if (v110 == #(null)) goto 568::CD,28427:CD,28669
28427 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v112 = p0 $null .dayOfYear()::JM,28669:CL,32984
28431 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iDayOfYear = v113::
28434 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v114 = v3.weekOfWeekyear::DD,28437:DD,28670
28437 :: PRED :: IF :: Z :: if (v114 == #(null)) goto 589::CD,28439:CD,28670
28439 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v116 = p0 $null .weekOfWeekyear()::JM,28670:CL,33110
28443 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iWeekOfWeekyear = v117::
28446 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v118 = v3.weekyear::DD,28449:DD,28671
28449 :: PRED :: IF :: Z :: if (v118 == #(null)) goto 610::CD,28451:CD,28671
28451 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v120 = p0 $null .weekyear()::JM,28671:CL,33074
28455 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iWeekyear = v121::
28458 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v122 = v3.weekyearOfCentury::DD,28461:DD,28672
28461 :: PRED :: IF :: Z :: if (v122 == #(null)) goto 631::CD,28463:CD,28672
28463 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v124 = p0 $null .weekyearOfCentury()::JM,28672:CL,33056
28467 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iWeekyearOfCentury = v125::
28470 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v126 = v3.monthOfYear::DD,28473:DD,28673
28473 :: PRED :: IF :: Z :: if (v126 == #(null)) goto 652::CD,28475:CD,28673
28475 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v128 = p0 $null .monthOfYear()::JM,28673:CL,33002
28479 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iMonthOfYear = v129::
28482 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v130 = v3.year::DD,28485:DD,28674
28485 :: PRED :: IF :: Z :: if (v130 == #(null)) goto 673::CD,28487:CD,28674
28487 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v132 = p0 $null .year()::JM,28674:CL,32957
28491 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iYear = v133::
28494 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v134 = v3.yearOfEra::DD,28497:DD,28675
28497 :: PRED :: IF :: Z :: if (v134 == #(null)) goto 694::CD,28499:CD,28675
28499 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v136 = p0 $null .yearOfEra()::JM,28675:CL,32885
28503 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iYearOfEra = v137::
28506 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v138 = v3.yearOfCentury::DD,28509:DD,28676
28509 :: PRED :: IF :: Z :: if (v138 == #(null)) goto 715::CD,28511:CD,28676
28511 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v140 = p0 $null .yearOfCentury()::JM,28676:CL,32939
28515 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iYearOfCentury = v141::
28518 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v142 = v3.centuryOfEra::DD,28521:DD,28677
28521 :: PRED :: IF :: Z :: if (v142 == #(null)) goto 736::CD,28523:CD,28677
28523 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v144 = p0 $null .centuryOfEra()::JM,28677:CL,32912
28527 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iCenturyOfEra = v145::
28530 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v146 = v3.era::DD,28533:DD,28678
28533 :: PRED :: IF :: Z :: if (v146 == #(null)) goto 757::CD,28535:CD,28678
28535 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v148 = p0 $null .era()::JM,28678:CL,32858
28539 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iEra = v149::
28542 :: EXPR :: reference :: Lorg/joda/time/Chronology :: v150 = p0 $null .iBase::DD,28545
28545 :: PRED :: IF :: Z :: if (v150 != #(null)) goto 776::CD,28553:CD,28557:CD,28598:CD,28602:CD,28604:CD,28611:CD,28615:CD,28639:CD,28679:CD,28680:CD,28681:CD,28682
28547 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v151 = p0 $null .iHourOfDay::DD,28557
28553 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v154 = v152.hourOfDay()::JM,28557:CL,33254
28557 :: PRED :: IF :: Z :: if (v151 != v154) goto 837::CD,28564:CD,28568:CD,28679
28558 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v155 = p0 $null .iMinuteOfHour::DD,28568
28564 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v158 = v156.minuteOfHour()::JM,28568:CL,33308
28568 :: PRED :: IF :: Z :: if (v155 != v158) goto 837::CD,28575:CD,28579:CD,28679
28569 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v159 = p0 $null .iSecondOfMinute::DD,28579
28575 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v162 = v160.secondOfMinute()::JM,28579:CL,33362
28579 :: PRED :: IF :: Z :: if (v159 != v162) goto 837::CD,28586:CD,28590:CD,28679
28580 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v163 = p0 $null .iMillisOfSecond::DD,28590
28586 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v166 = v164.millisOfSecond()::JM,28590:CL,33407
28590 :: PRED :: IF :: Z :: if (v163 != v166) goto 837::CD,28679
28592 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v170 = p0 $null .iMillisOfDay::DD,28602
28598 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v173 = v171.millisOfDay()::JM,28602:CL,32442
28602 :: PRED :: IF :: Z :: if (v170 != v173) goto 855::CD,28680
28604 :: EXPR :: assign :: Ljava/lang/Object :: v176 = v169 || v175::DD,28639
28605 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v177 = p0 $null .iYear::DD,28615
28611 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v180 = v178.year()::JM,28615:CL,10978
28615 :: PRED :: IF :: Z :: if (v177 != v180) goto 903::CD,28622:CD,28626:CD,28681
28616 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v181 = p0 $null .iMonthOfYear::DD,28626
28622 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v184 = v182.monthOfYear()::JM,28626:CL,32433
28626 :: PRED :: IF :: Z :: if (v181 != v184) goto 903::CD,28633:CD,28637:CD,28681
28627 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v185 = p0 $null .iDayOfMonth::DD,28637
28633 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v188 = v186.dayOfMonth()::JM,28637:CL,33038
28637 :: PRED :: IF :: Z :: if (v185 != v188) goto 903::CD,28681
28639 :: EXPR :: assign :: Ljava/lang/Object :: v191 = v176 || v190::DD,28682
28640 :: EXPR :: modify :: I :: p0 $null .iBaseFlags = v192::
28644 :: EXPR :: assign :: null :: PHI v13 = v10, v12::DD,28131
28645 :: EXPR :: assign :: null :: PHI v17 = v14, v16::DD,28143
28646 :: EXPR :: assign :: null :: PHI v21 = v18, v20::DD,28155
28647 :: EXPR :: assign :: null :: PHI v25 = v22, v24::DD,28167
28648 :: EXPR :: assign :: null :: PHI v29 = v26, v28::DD,28179
28649 :: EXPR :: assign :: null :: PHI v33 = v30, v32::DD,28191
28650 :: EXPR :: assign :: null :: PHI v37 = v34, v36::DD,28203
28651 :: EXPR :: assign :: null :: PHI v41 = v38, v40::DD,28215
28652 :: EXPR :: assign :: null :: PHI v45 = v42, v44::DD,28227
28653 :: EXPR :: assign :: null :: PHI v49 = v46, v48::DD,28239
28654 :: EXPR :: assign :: null :: PHI v53 = v50, v52::DD,28251
28655 :: EXPR :: assign :: null :: PHI v57 = v54, v56::DD,28263
28656 :: EXPR :: assign :: null :: PHI v61 = v58, v60::DD,28275
28657 :: EXPR :: assign :: null :: PHI v65 = v62, v64::DD,28287
28658 :: EXPR :: assign :: null :: PHI v69 = v66, v68::DD,28299
28659 :: EXPR :: assign :: null :: PHI v73 = v70, v72::DD,28311
28660 :: EXPR :: assign :: null :: PHI v77 = v74, v76::DD,28323
28661 :: EXPR :: assign :: null :: PHI v81 = v78, v80::DD,28335
28662 :: EXPR :: assign :: null :: PHI v85 = v82, v84::DD,28347
28663 :: EXPR :: assign :: null :: PHI v89 = v86, v88::DD,28359
28664 :: EXPR :: assign :: null :: PHI v93 = v90, v92::DD,28371
28665 :: EXPR :: assign :: null :: PHI v97 = v94, v96::DD,28383
28666 :: EXPR :: assign :: null :: PHI v101 = v98, v100::DD,28395
28667 :: EXPR :: assign :: null :: PHI v105 = v102, v104::DD,28407
28668 :: EXPR :: assign :: null :: PHI v109 = v106, v108::DD,28419
28669 :: EXPR :: assign :: null :: PHI v113 = v110, v112::DD,28431
28670 :: EXPR :: assign :: null :: PHI v117 = v114, v116::DD,28443
28671 :: EXPR :: assign :: null :: PHI v121 = v118, v120::DD,28455
28672 :: EXPR :: assign :: null :: PHI v125 = v122, v124::DD,28467
28673 :: EXPR :: assign :: null :: PHI v129 = v126, v128::DD,28479
28674 :: EXPR :: assign :: null :: PHI v133 = v130, v132::DD,28491
28675 :: EXPR :: assign :: null :: PHI v137 = v134, v136::DD,28503
28676 :: EXPR :: assign :: null :: PHI v141 = v138, v140::DD,28515
28677 :: EXPR :: assign :: null :: PHI v145 = v142, v144::DD,28527
28678 :: EXPR :: assign :: null :: PHI v149 = v146, v148::DD,28539
28679 :: EXPR :: assign :: null :: PHI v169 = #(1), #(0)::DD,28604
28680 :: EXPR :: assign :: null :: PHI v175 = #(2), #(0)::CF,28604
28681 :: EXPR :: assign :: null :: PHI v190 = #(4), #(0)::CF,28639
28682 :: EXPR :: assign :: null :: PHI v192 = #(0), v191::DD,28640
28963 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.hashCode()::CE,28964:CD,28967:CD,28971:CD,28975:CD,28976
28964 :: EXIT :: exit :: I :: org.joda.time.DateTimeZone.hashCode()::JM,22972:JM,23078:JM,29032
28967 :: CALL :: call :: Ljava/lang/String :: v5 = p0 $null .getID()::JM,28975:CL,9866
28971 :: CALL :: call :: I :: v7 = v5.hashCode()::JM,28975
28975 :: EXPR :: assign :: Ljava/lang/Object :: v8 = #(57) + v7::CF,28976
28976 :: NORM :: compound :: I :: return v8::CF,28964
28979 :: ENTR :: entry :: null :: org.joda.time.UTCDateTimeZone.hashCode()::CE,28980:CD,28983:CD,28987:CD,28991
28980 :: EXIT :: exit :: I :: org.joda.time.UTCDateTimeZone.hashCode()::JM,22972:JM,23078
28983 :: CALL :: call :: Ljava/lang/String :: v4 = p0 $null .getID()::JM,28991:CL,9866
28987 :: CALL :: call :: I :: v6 = v4.hashCode()::JM,28991
28991 :: NORM :: compound :: I :: return v6::CF,28980
28993 :: ENTR :: entry :: null :: org.joda.time.tz.FixedDateTimeZone.hashCode()::CE,28994:CD,28997:CD,29001:CD,29008:CD,29009:CD,29013:CD,29014:CD,29015
28994 :: EXIT :: exit :: I :: org.joda.time.tz.FixedDateTimeZone.hashCode()::JM,22972:JM,23078
28997 :: CALL :: call :: Ljava/lang/String :: v4 = p0 $null .getID()::JM,29009:CL,9866
29001 :: CALL :: call :: I :: v6 = v4.hashCode()::JM,29009
29005 :: EXPR :: reference :: I :: v8 = p0 $null .iStandardOffset::DD,29008
29008 :: EXPR :: assign :: Ljava/lang/Object :: v9 = #(37) * v8::CF,29009
29009 :: EXPR :: assign :: Ljava/lang/Object :: v10 = v6 + v9::DD,29014
29010 :: EXPR :: reference :: I :: v12 = p0 $null .iWallOffset::DD,29013
29013 :: EXPR :: assign :: Ljava/lang/Object :: v13 = #(31) * v12::CF,29014
29014 :: EXPR :: assign :: Ljava/lang/Object :: v14 = v10 + v13::CF,29015
29015 :: NORM :: compound :: I :: return v14::CF,28994
29021 :: ENTR :: entry :: null :: org.joda.time.tz.CachedDateTimeZone.hashCode()::CE,29022:CD,29028:CD,29032
29022 :: EXIT :: exit :: I :: org.joda.time.tz.CachedDateTimeZone.hashCode()::JM,22972:JM,23078
29028 :: CALL :: call :: I :: v5 = v3.hashCode()::JM,29032:CL,28963
29032 :: NORM :: compound :: I :: return v5::DD,29022
29046 :: ENTR :: entry :: null :: org.joda.time.base.BasePeriod.checkPeriodType(org.joda.time.PeriodType)::CE,29047:CD,29051:CD,29055
29047 :: EXIT :: exit :: Lorg/joda/time/PeriodType :: org.joda.time.base.BasePeriod.checkPeriodType(org.joda.time.PeriodType)::JM,20736
29051 :: CALL :: call :: Lorg/joda/time/PeriodType :: v5 = getPeriodType(p1 $null )::JM,29055:CL,37943
29055 :: NORM :: compound :: Lorg/joda/time/PeriodType :: return v5::DD,29047
29057 :: ENTR :: entry :: null :: org.joda.time.DateTimeUtils.getChronology(org.joda.time.Chronology)::CD,29061
29061 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 9::CD,29062
29062 :: CALL :: call :: Lorg/joda/time/chrono/ISOChronology :: v5 = getInstance()::CL,37956
29070 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.get(org.joda.time.ReadablePeriod,long)::CE,29071:CD,29076:CD,29080:CD,29081:CD,29082:CD,29117
29071 :: EXIT :: exit :: [I :: org.joda.time.chrono.BaseChronology.get(org.joda.time.ReadablePeriod,long)::JM,20745
29076 :: CALL :: call :: I :: v6 = p1 $null .size()::JM,29080:JM,29083:CL,37967
29080 :: NORM :: declaration :: [I :: v7 = new []::DD,29117:CF,29081
29081 :: EXPR :: assign :: Z :: v9 = p2 $null  == #(0 l)::DD,29082
29082 :: PRED :: IF :: Z :: if (v9 == #(0)) goto 91::CD,29083:CD,29119:CF,29117
29083 :: PRED :: IF :: Z :: if (v25 >= v6) goto 91::CD,29089:CD,29094:CD,29098:CD,29115:CD,29119:CF,29117
29089 :: CALL :: call :: Lorg/joda/time/DurationField :: v14 = v12.getField(p0 $null )::CL,37998
29094 :: CALL :: call :: Z :: v16 = v14.isPrecise()::JM,29098:CL,21035:CL,21048:CL,21092:CL,21098:CL,21110:CL,21104
29098 :: PRED :: IF :: Z :: if (v16 == #(0)) goto 83::CD,29099:CD,29105
29099 :: CALL :: call :: I :: v18 = v14.getDifference(p2 $null , v24)::JM,29111:CL,38178:CL,38207:CL,38159:CL,38189:CL,38111:CL,38091
29105 :: CALL :: call :: J :: v20 = v14.add(v24, v18)::CL,38306:CL,38328:CL,38277:CL,38243:CL,38232:CL,38262
29111 :: EXPR :: modify :: I :: v7[v25] = v18::
29115 :: EXPR :: assign :: Ljava/lang/Object :: v23 = v25 + #(1)::DD,29119
29117 :: NORM :: compound :: [I :: return v7::DD,29071
29119 :: EXPR :: assign :: null :: PHI v25 = v23, #(0)::DD,29083:DD,29115
29153 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.getDefault()::CE,29154:CD,29156:CD,29158:CD,29162:CD,29163:CD,29202:CD,29210
29154 :: EXIT :: exit :: Lorg/joda/time/DateTimeZone :: org.joda.time.DateTimeZone.getDefault()::JM,20903:JM,38386:JM,38513:JM,43151:JM,43182:JM,43223:JM,43255:JM,50477:JM,54434
29156 :: EXPR :: reference :: Ljava/util/concurrent/atomic/AtomicReference :: v2 = org.joda.time.DateTimeZone.cDefault::JM,29158:JM,29162
29158 :: CALL :: call :: Ljava/lang/Object :: v4 = v2.get()::JM,29158:JM,29162
29162 :: EXPR :: assign :: Ljava/lang/Object :: v5 = CHECKCAST v4::DD,29163:DD,29205:DD,29206:DD,29210
29163 :: PRED :: IF :: Z :: if (v5 != #(null)) goto 78::CF,29210:CD,29164:CD,29168:CD,29174:CD,29183:CD,29186:CD,29188:CD,29194:CD,29205:CD,29206:CD,29207:CD,29208:CD,29209
29164 :: CALL :: call :: Ljava/lang/String :: v9 = getProperty(#(user.timezone))::JM,29168:JM,29164
29168 :: PRED :: IF :: Z :: if (v9 == #(null)) goto 29::CF,29205:CD,29169
29169 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v11 = forID(v9)::JM,29205:CL,38378
29174 :: PRED :: IF :: Z :: if (v15 != #(null)) goto 44::CF,29207:CD,29175:CD,29178
29175 :: CALL :: call :: Ljava/util/TimeZone :: v18 = getDefault()::
29178 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v20 = forTimeZone(v18)::JM,29207:CL,38505
29183 :: PRED :: IF :: Z :: if (v24 != #(null)) goto 56::CF,29209:CD,29184
29184 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v26 = org.joda.time.DateTimeZone.UTC::DD,29209
29186 :: EXPR :: reference :: Ljava/util/concurrent/atomic/AtomicReference :: v28 = org.joda.time.DateTimeZone.cDefault::JM,29188:JM,29194
29188 :: CALL :: call :: Z :: v30 = v28.compareAndSet(#(null), v27)::JM,29188:JM,29194
29194 :: PRED :: IF :: Z :: if (v30 != #(0)) goto 78::CF,29210:CD,29195:CD,29197:CD,29201
29195 :: EXPR :: reference :: Ljava/util/concurrent/atomic/AtomicReference :: v32 = org.joda.time.DateTimeZone.cDefault::JM,29201:JM,29197
29197 :: CALL :: call :: Ljava/lang/Object :: v34 = v32.get()::JM,29201:JM,29197
29201 :: EXPR :: assign :: Ljava/lang/Object :: v35 = CHECKCAST v34::DD,29210
29202 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v37::DD,29154
29205 :: EXPR :: assign :: null :: PHI v13 = v5, v11::DD,29206
29206 :: EXPR :: assign :: null :: PHI v15 = v13, v5::DD,29174:DD,29207:DD,29208
29207 :: EXPR :: assign :: null :: PHI v22 = v15, v20::DD,29208
29208 :: EXPR :: assign :: null :: PHI v24 = v22, v15::DD,29183:DD,29209
29209 :: EXPR :: assign :: null :: PHI v27 = v24, v26::JM,29188:JM,29194:DD,29210
29210 :: EXPR :: assign :: null :: PHI v37 = v5, v27, v35::CF,29202
29315 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)::JM,20518:JM,20521:JM,20524
29372 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v6 = new java.lang.IllegalArgumentException::JM,60433:JM,29378:JM,20966:JM,29372:JM,20972
29378 :: EXPR :: modify :: Lorg/joda/time/DateTimeFieldType :: p0 $null .iType = p1 $null ::
29387 :: ENTR :: entry :: null :: org.joda.time.tz.CachedDateTimeZone.isFixed()::CE,29388:CD,29394:CD,29398
29388 :: EXIT :: exit :: Z :: org.joda.time.tz.CachedDateTimeZone.isFixed()::JM,21079
29394 :: CALL :: call :: Z :: v5 = v3.isFixed()::JM,29398:CL,29412
29398 :: NORM :: compound :: Z :: return v5::DD,29388
29400 :: ENTR :: entry :: null :: org.joda.time.UTCDateTimeZone.isFixed()::CF,29401:CD,29404
29401 :: EXIT :: exit :: Z :: org.joda.time.UTCDateTimeZone.isFixed()::JM,21079
29404 :: NORM :: compound :: Z :: return #(1)::CF,29401
29406 :: ENTR :: entry :: null :: org.joda.time.tz.FixedDateTimeZone.isFixed()::CF,29407:CD,29410
29407 :: EXIT :: exit :: Z :: org.joda.time.tz.FixedDateTimeZone.isFixed()::JM,21079
29410 :: NORM :: compound :: Z :: return #(1)::CF,29407
29412 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.isFixed()::CF,29413:CD,29416
29413 :: EXIT :: exit :: Z :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.isFixed()::JM,21079:JM,29398
29416 :: NORM :: compound :: Z :: return #(0)::CF,29413
29427 :: ENTR :: entry :: null :: org.joda.time.field.BaseDateTimeField.isSupported()::CF,29428:CD,29431
29428 :: EXIT :: exit :: Z :: org.joda.time.field.BaseDateTimeField.isSupported()::JM,29444:JM,45598:JM,46185
29431 :: NORM :: compound :: Z :: return #(1)::CF,29428
29433 :: ENTR :: entry :: null :: org.joda.time.field.DelegatedDateTimeField.isSupported()::CE,29434:CD,29440:CD,29444
29434 :: EXIT :: exit :: Z :: org.joda.time.field.DelegatedDateTimeField.isSupported()::JM,29444:JM,45598:JM,46185
29440 :: CALL :: call :: Z :: v5 = v3.isSupported()::JM,29444:CL,29433:CL,29427:CL,29446
29444 :: NORM :: compound :: Z :: return v5::CF,29434
29446 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.isSupported()::CF,29447:CD,29450
29447 :: EXIT :: exit :: Z :: org.joda.time.field.UnsupportedDateTimeField.isSupported()::JM,29444:JM,45598:JM,46185
29450 :: NORM :: compound :: Z :: return #(0)::CF,29447
29459 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)::CD,29467:CD,29476:CD,29481
29467 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v20 = new java.lang.IllegalArgumentException::
29476 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v18 = new java.lang.IllegalArgumentException::
29481 :: PRED :: IF :: Z :: if (p2 $null  > #(1)) goto 58::JM,47186:JM,47189:JM,47192:CD,29489:JM,38844:CD,29503
29489 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v17 = p0 $null .append0(v14)::CL,29725
29503 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v13 = p0 $null .append0(v10)::CL,29725
29532 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.getFormatter()::CD,29539
29536 :: EXPR :: reference :: Ljava/lang/Object :: v3 = p0 $null .iFormatter::DD,29539:DD,29581
29539 :: PRED :: IF :: Z :: if (v3 != #(null)) goto 80::CD,29543:CD,29547:CD,29568:CD,29581
29540 :: EXPR :: reference :: Ljava/util/ArrayList :: v5 = p0 $null .iElementPairs::JM,29547
29543 :: CALL :: call :: I :: v7 = v5.size()::JM,29547
29547 :: PRED :: IF :: Z :: if (v7 != #(2)) goto 59::CF,29581:CD,29551:CD,29559:CD,29564
29548 :: EXPR :: reference :: Ljava/util/ArrayList :: v9 = p0 $null .iElementPairs::JM,29564:JM,29565:JM,29581
29551 :: CALL :: call :: Ljava/lang/Object :: v12 = v9.get(#(0))::JM,29564:JM,29565:JM,29581
29556 :: EXPR :: reference :: Ljava/util/ArrayList :: v13 = p0 $null .iElementPairs::JM,29565:JM,29581:JM,29566
29559 :: CALL :: call :: Ljava/lang/Object :: v16 = v13.get(#(1))::JM,29565:JM,29581:JM,29566
29564 :: PRED :: IF :: Z :: if (v12 == #(null)) goto 59::CD,29565:CD,29581
29565 :: PRED :: IF :: Z :: if (v12 == v16) goto 53::CD,29566:CD,29581
29566 :: PRED :: IF :: Z :: if (v16 != #(null)) goto 59::CF,29581
29568 :: PRED :: IF :: Z :: if (v17 != #(null)) goto 76::JM,38881:JM,38866:JM,38931:JM,38870:JM,38876:JM,38862:JM,38926
29581 :: EXPR :: assign :: null :: PHI v17 = v3, v3, v12, v16::DD,29568
29668 :: EXPR :: modify :: Lorg/joda/time/format/InternalPrinter :: p0 $null .iPrinter = p1 $null ::
29671 :: EXPR :: modify :: Lorg/joda/time/format/InternalParser :: p0 $null .iParser = p2 $null ::
29674 :: EXPR :: modify :: Ljava/util/Locale :: p0 $null .iLocale = #(null)::
29677 :: EXPR :: modify :: Z :: p0 $null .iOffsetParsed = #(0)::
29680 :: EXPR :: modify :: Lorg/joda/time/Chronology :: p0 $null .iChrono = #(null)::
29683 :: EXPR :: modify :: Lorg/joda/time/DateTimeZone :: p0 $null .iZone = #(null)::
29686 :: EXPR :: modify :: Ljava/lang/Integer :: p0 $null .iPivotYear = #(null)::
29689 :: EXPR :: modify :: I :: p0 $null .iDefaultYear = #(2000)::
29718 :: EXPR :: modify :: C :: p0 $null .iValue = p1 $null ::
29725 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.append0(java.lang.Object)::CD,29736:CD,29744
29733 :: EXPR :: reference :: Ljava/util/ArrayList :: v5 = p0 $null .iElementPairs::
29736 :: CALL :: call :: Z :: v7 = v5.add(p1 $null )::
29741 :: EXPR :: reference :: Ljava/util/ArrayList :: v8 = p0 $null .iElementPairs::
29744 :: CALL :: call :: Z :: v10 = v8.add(p1 $null )::
29759 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendDecimal(org.joda.time.DateTimeFieldType,int,int)::CD,29767:CD,29776:CD,29781
29767 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v20 = new java.lang.IllegalArgumentException::
29776 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v18 = new java.lang.IllegalArgumentException::
29781 :: PRED :: IF :: Z :: if (p2 $null  > #(1)) goto 58::JM,47186:JM,47189:JM,47192:CD,29789:JM,38844:CD,29803
29789 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v17 = p0 $null .append0(v14)::CL,29725
29803 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v13 = p0 $null .append0(v10)::CL,29725
29847 :: EXPR :: modify :: Ljava/lang/String :: p0 $null .iValue = p1 $null ::
29854 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendFraction(org.joda.time.DateTimeFieldType,int,int)::CD,29862:CD,29871:JM,39105:JM,39094:JM,39097:JM,39098:CD,29883
29862 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v15 = new java.lang.IllegalArgumentException::
29871 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v13 = new java.lang.IllegalArgumentException::
29883 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v12 = p0 $null .append0(v9)::CL,29725
29916 :: EXPR :: modify :: Ljava/lang/String :: p0 $null .iZeroOffsetPrintText = p1 $null ::
29919 :: EXPR :: modify :: Ljava/lang/String :: p0 $null .iZeroOffsetParseText = p2 $null ::
29922 :: EXPR :: modify :: Z :: p0 $null .iShowSeparators = p3 $null ::
29927 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v13 = new java.lang.IllegalArgumentException::JM,29922:JM,29940:JM,29941:JM,29927:JM,29932:JM,29916:JM,29919
29932 :: PRED :: IF :: Z :: if (p4 $null  <= #(4)) goto 54::CF,29940:CD,29941
29933 :: EXPR :: modify :: I :: p0 $null .iMinFields = v11::
29936 :: EXPR :: modify :: I :: p0 $null .iMaxFields = v12::
29940 :: EXPR :: assign :: null :: PHI v11 = p4 $null , #(4)::CF,29941:DD,29933
29941 :: EXPR :: assign :: null :: PHI v12 = p5 $null , #(4)::DD,29936
29980 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)::CD,29992:CD,30000
29989 :: EXPR :: reference :: Ljava/util/ArrayList :: v6 = p0 $null .iElementPairs::
29992 :: CALL :: call :: Z :: v8 = v6.add(p1 $null )::
29997 :: EXPR :: reference :: Ljava/util/ArrayList :: v9 = p0 $null .iElementPairs::
30000 :: CALL :: call :: Z :: v11 = v9.add(p2 $null )::
30056 :: ENTR :: entry :: null :: org.joda.time.format.InternalParserDateTimeParser.of(org.joda.time.format.InternalParser)::CD,30060:CD,30061:JM,30068:JM,30072
30060 :: EXPR :: assign :: Z :: v3=p1 $null  INSTANCEOF org.joda.time.format.DateTimeParserInternalParser::DD,30061
30061 :: PRED :: IF :: Z :: if (v3 == #(0)) goto 16::CD,30068:CD,30069
30068 :: EXPR :: assign :: Z :: v5=p1 $null  INSTANCEOF org.joda.time.format.DateTimeParser::DD,30069
30069 :: PRED :: IF :: Z :: if (v5 == #(0)) goto 28::CD,30072
30072 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 33::JM,39140
30091 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.checkParser(org.joda.time.format.DateTimeParser)::CF,30097
30097 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v5 = new java.lang.IllegalArgumentException::
30106 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserInternalParser.of(org.joda.time.format.DateTimeParser)::JM,30112:JM,30114:CE,30107:CD,30110:CD,30111
30107 :: EXIT :: exit :: Lorg/joda/time/format/InternalParser :: org.joda.time.format.DateTimeParserInternalParser.of(org.joda.time.format.DateTimeParser)::JM,21858:JM,21987:JM,22008
30110 :: EXPR :: assign :: Z :: v3=p1 $null  INSTANCEOF org.joda.time.format.InternalParserDateTimeParser::DD,30111
30111 :: PRED :: IF :: Z :: if (v3 == #(0)) goto 13::CD,30112:CD,30113:CD,30114
30112 :: EXPR :: assign :: Ljava/lang/Object :: v8 = CHECKCAST p1 $null ::CF,30113
30113 :: NORM :: compound :: Lorg/joda/time/format/InternalParser :: return v8::DD,30107
30114 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 18::CF,30116:CD,30115:JM,39155:CD,30121
30115 :: NORM :: compound :: Lorg/joda/time/format/InternalParser :: return #(null)::DD,30107
30116 :: NORM :: declaration :: Lorg/joda/time/format/DateTimeParserInternalParser :: v6 = new org.joda.time.format.DateTimeParserInternalParser::DD,30121
30121 :: NORM :: compound :: Lorg/joda/time/format/InternalParser :: return v6::DD,30107
30138 :: EXPR :: modify :: [Lorg/joda/time/format/InternalParser :: p0 $null .iParsers = p1 $null ::
30141 :: EXPR :: assign :: I :: v6 = p1 $null .length::DD,30160:CF,30159
30142 :: EXPR :: assign :: Ljava/lang/Object :: v8 = v15 + #(-1)::DD,30143:DD,30160
30143 :: PRED :: IF :: Z :: if (v8 < #(0)) goto 54::CD,30142:CD,30148:CD,30159:CD,30160:CD,30161
30144 :: EXPR :: reference :: Ljava/lang/Object :: v9 = p1 $null [v8]::DD,30148
30148 :: PRED :: IF :: Z :: if (v9 == #(null)) goto 49::CF,30161:CD,30149:CD,30153
30149 :: CALL :: call :: I :: v12 = v9.estimateParsedLength()::JM,30161:JM,30153:CL,39162:CL,39175
30153 :: PRED :: IF :: Z :: if (v12 <= v14) goto 49::CF,30161
30155 :: EXPR :: modify :: I :: p0 $null .iParsedLengthEstimate = v14::
30159 :: EXPR :: assign :: null :: PHI v14 = v13, #(0)::CF,30160:DD,30153:DD,30155:DD,30161
30160 :: EXPR :: assign :: null :: PHI v15 = v8, v6::DD,30142
30161 :: EXPR :: assign :: null :: PHI v13 = v14, v14, v12::DD,30159
30186 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.checkPrinter(org.joda.time.format.DateTimePrinter)::CF,30192
30192 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v5 = new java.lang.IllegalArgumentException::
30201 :: ENTR :: entry :: null :: org.joda.time.format.DateTimePrinterInternalPrinter.of(org.joda.time.format.DateTimePrinter)::JM,30209:CD,30205:CD,30206
30205 :: EXPR :: assign :: Z :: v3=p1 $null  INSTANCEOF org.joda.time.format.InternalPrinterDateTimePrinter::DD,30206
30206 :: PRED :: IF :: Z :: if (v3 == #(0)) goto 13::CD,30209
30209 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 18::JM,39196
30225 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatter.withZone(org.joda.time.DateTimeZone)::CD,30233
30230 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v4 = p0 $null .iZone::DD,30233
30233 :: PRED :: IF :: Z :: if (v4 != p1 $null ) goto 10::JM,30546:JM,30549:JM,30552:JM,30537:JM,30555:JM,30540:JM,30558:JM,30543
30537 :: EXPR :: modify :: Lorg/joda/time/format/InternalPrinter :: p0 $null .iPrinter = p1 $null ::
30540 :: EXPR :: modify :: Lorg/joda/time/format/InternalParser :: p0 $null .iParser = p2 $null ::
30543 :: EXPR :: modify :: Ljava/util/Locale :: p0 $null .iLocale = p3 $null ::
30546 :: EXPR :: modify :: Z :: p0 $null .iOffsetParsed = p4 $null ::
30549 :: EXPR :: modify :: Lorg/joda/time/Chronology :: p0 $null .iChrono = p5 $null ::
30552 :: EXPR :: modify :: Lorg/joda/time/DateTimeZone :: p0 $null .iZone = p6 $null ::
30555 :: EXPR :: modify :: Ljava/lang/Integer :: p0 $null .iPivotYear = p7 $null ::
30558 :: EXPR :: modify :: I :: p0 $null .iDefaultYear = p8 $null ::
30870 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoProvider.1.run()::CE,30871:CD,30877:CD,30881
30871 :: EXIT :: exit :: Ljava/io/InputStream :: org.joda.time.tz.ZoneInfoProvider.1.run()::JM,22701
30877 :: CALL :: call :: Ljava/lang/ClassLoader :: v5 = access$000(v3)::JM,30881:CL,39610
30881 :: PRED :: IF :: Z :: if (v5 == #(null)) goto 26::CD,30885:CD,30892:CD,30897:CD,30901:CD,30905
30885 :: CALL :: call :: Ljava/lang/ClassLoader :: v12 = access$000(v10)::JM,30897:CL,39610
30889 :: EXPR :: reference :: Ljava/lang/String :: v13 = p0 $null .val$path::JM,30897
30892 :: CALL :: call :: Ljava/io/InputStream :: v15 = v12.getResourceAsStream(v13)::JM,30897
30897 :: NORM :: compound :: Ljava/io/InputStream :: return v15::DD,30871
30901 :: CALL :: call :: Ljava/io/InputStream :: v9 = getSystemResourceAsStream(v7)::JM,30905
30905 :: NORM :: compound :: Ljava/io/InputStream :: return v9::DD,30871
30923 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.getDefaultProvider()::CD,30926:CD,30930:CD,30989
30926 :: CALL :: call :: Ljava/lang/String :: v4 = getProperty(#(org.joda.time.DateTim...))::JM,30930:JM,30926
30930 :: PRED :: IF :: Z :: if (v4 == #(null)) goto 36::CD,30940:CD,30952:CD,30956
30940 :: CALL :: call :: Lorg/joda/time/tz/Provider :: v12 = validateProvider(v10)::CL,39648
30952 :: CALL :: call :: Ljava/lang/String :: v21 = getProperty(#(org.joda.time.DateTim...))::JM,30952:JM,30956
30956 :: PRED :: IF :: Z :: if (v21 == #(null)) goto 81::CD,30958:JM,39744:JM,39808:JM,39778:JM,39812:JM,39749:JM,39820:JM,39758:JM,39729:JM,39764:JM,39796:JM,39735:JM,39768:JM,39801:JM,39739:JM,39773:CD,30967:JM,48144:JM,48194:JM,48182:JM,48198:JM,48169:JM,48170:JM,48139:JM,48187:JM,48206:CD,30984
30958 :: NORM :: declaration :: Ljava/io/File :: v23 = new java.io.File::
30967 :: CALL :: call :: Lorg/joda/time/tz/Provider :: v27 = validateProvider(v22)::CL,39648
30984 :: CALL :: call :: Lorg/joda/time/tz/Provider :: v39 = validateProvider(v35)::CL,39648
30989 :: CALL :: call :: V :: v40.printStackTrace()::
31247 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDurationField.getName()::CE,31248:CD,31254:CD,31258
31248 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.field.UnsupportedDurationField.getName()::JM,22941:JM,23406:JM,23411:JM,23427
31254 :: CALL :: call :: Ljava/lang/String :: v5 = v3.getName()::JM,31258:CL,39932
31258 :: NORM :: compound :: Ljava/lang/String :: return v5::CF,31248
31260 :: ENTR :: entry :: null :: org.joda.time.field.BaseDurationField.getType()::CE,31261:CD,31267
31261 :: EXIT :: exit :: Lorg/joda/time/DurationFieldType :: org.joda.time.field.BaseDurationField.getType()::JM,23233:JM,23280
31264 :: EXPR :: reference :: Lorg/joda/time/DurationFieldType :: v3 = p0 $null .iType::DD,31267
31267 :: NORM :: compound :: Lorg/joda/time/DurationFieldType :: return v3::CF,31261
31395 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoCompiler.getStartOfYear()::CD,31398:CD,31400
31398 :: EXPR :: reference :: Lorg/joda/time/tz/ZoneInfoCompiler$DateTimeOfYear :: v2 = org.joda.time.tz.ZoneInfoCompiler.cStartOfYear::DD,31400
31400 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 16::
31414 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoCompiler.parseMonth(java.lang.String)::CE,31415:CD,31427:CD,31434:CD,31439
31415 :: EXIT :: exit :: I :: org.joda.time.tz.ZoneInfoCompiler.parseMonth(java.lang.String)::JM,24001:JM,24081
31427 :: CALL :: call :: J :: v10 = v6.set(#(0 l), p1 $null , v8)::CL,39980:CL,40056:CL,40068:CL,40007:CL,40095:CL,40034
31434 :: CALL :: call :: I :: v12 = v6.get(v10)::JM,31439:CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,11332
31439 :: NORM :: compound :: I :: return v12::DD,31415
31446 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek(java.lang.String)::CE,31447:CD,31459:CD,31466:CD,31471
31447 :: EXIT :: exit :: I :: org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek(java.lang.String)::JM,24076
31459 :: CALL :: call :: J :: v10 = v6.set(#(0 l), p1 $null , v8)::CL,39980:CL,40056:CL,40068:CL,40007:CL,40095:CL,40034
31466 :: CALL :: call :: I :: v12 = v6.get(v10)::JM,31471:CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,11332
31471 :: NORM :: compound :: I :: return v12::DD,31447
31478 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoCompiler.parseZoneChar(char)::CF,31479:CD,31482
31479 :: EXIT :: exit :: C :: org.joda.time.tz.ZoneInfoCompiler.parseZoneChar(char)::JM,24086
31482 :: PRED :: IF :: null :: switch p1 $null ::CD,31483:CD,31484:CD,31485
31483 :: NORM :: compound :: C :: return #(115)::CF,31479
31484 :: NORM :: compound :: C :: return #(117)::CF,31479
31485 :: NORM :: compound :: C :: return #(119)::CF,31479
31512 :: ENTR :: entry :: null :: org.joda.time.LocalDate.plusMonths(int)::CD,31517
31517 :: PRED :: IF :: Z :: if (p1 $null  != #(0)) goto 7::CD,31523:CD,31531:CD,31537
31523 :: CALL :: call :: Lorg/joda/time/DurationField :: v8 = v6.months()::CL,40199:CL,37865
31531 :: CALL :: call :: J :: v12 = v8.add(v10, p1 $null )::CL,38306:CL,38328:CL,38277:CL,38243:CL,38232:CL,38262
31537 :: CALL :: call :: Lorg/joda/time/LocalDate :: v14 = p0 $null .withLocalMillis(v12)::CL,40217
31552 :: ENTR :: entry :: null :: org.joda.time.LocalDate.plusDays(int)::CD,31557
31557 :: PRED :: IF :: Z :: if (p1 $null  != #(0)) goto 7::CD,31563:CD,31571:CD,31577
31563 :: CALL :: call :: Lorg/joda/time/DurationField :: v8 = v6.days()::CL,40263:CL,37829
31571 :: CALL :: call :: J :: v12 = v8.add(v10, p1 $null )::CL,38306:CL,38328:CL,38277:CL,38243:CL,38232:CL,38262
31577 :: CALL :: call :: Lorg/joda/time/LocalDate :: v14 = p0 $null .withLocalMillis(v12)::CL,40217
31592 :: ENTR :: entry :: null :: org.joda.time.LocalDate.getMonthOfYear()::CE,31593:CD,31600:CD,31608:CD,31613
31593 :: EXIT :: exit :: I :: org.joda.time.LocalDate.getMonthOfYear()::JM,24081
31600 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v6 = v4.monthOfYear()::CL,32433:CL,33002
31608 :: CALL :: call :: I :: v10 = v6.get(v8)::JM,31613:CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,11332
31613 :: NORM :: compound :: I :: return v10::DD,31593
31616 :: ENTR :: entry :: null :: org.joda.time.LocalDate.getDayOfMonth()::CE,31617:CD,31624:CD,31632:CD,31637
31617 :: EXIT :: exit :: I :: org.joda.time.LocalDate.getDayOfMonth()::JM,24082
31624 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v6 = v4.dayOfMonth()::CL,33038:CL,33020
31632 :: CALL :: call :: I :: v10 = v6.get(v8)::JM,31637:CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,11332
31637 :: NORM :: compound :: I :: return v10::DD,31617
31647 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoCompiler.getLenientISOChronology()::CD,31650:CD,31652
31650 :: EXPR :: reference :: Lorg/joda/time/Chronology :: v2 = org.joda.time.tz.ZoneInfoCompiler.cLenientISO::DD,31652
31652 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 15::CD,31656
31656 :: CALL :: call :: Lorg/joda/time/chrono/LenientChronology :: v7 = getInstance(v5)::CL,40279
31683 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatter.parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)::CD,31709:CD,31713:CD,31717:CD,31726:CD,31733:JM,40402:JM,40388:JM,40409:CD,31753:CD,31760:CD,31773:CD,31811:CD,31818
31709 :: CALL :: call :: Lorg/joda/time/Chronology :: v14 = getChronology(v12)::CL,29057
31713 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v16 = v14.year()::CL,10978:CL,32957
31717 :: CALL :: call :: I :: v18 = v16.get(v10)::CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,11332
31726 :: CALL :: call :: I :: v22 = v20.getOffset(v10)::CL,18682:CL,18565:CL,18672:CL,18689
31733 :: CALL :: call :: Lorg/joda/time/Chronology :: v26 = p0 $null .selectChronology(v12)::CL,40335
31753 :: CALL :: call :: I :: v32 = v7.parseInto(v27, p2 $null , p3 $null )::CL,40953:CL,41103:CL,41377:CL,41413:CL,42459:CL,41179:CL,41201:CL,41273:CL,40464:CL,41495:CL,42002:CL,42734:CL,41654:CL,41469
31760 :: CALL :: call :: J :: v35 = v27.computeMillis(#(0), p2 $null )::CL,42964
31770 :: EXPR :: reference :: Z :: v37 = p0 $null .iOffsetParsed::DD,31773
31773 :: PRED :: IF :: Z :: if (v37 == #(0)) goto 170::CD,31774:CD,31778:CD,31797:CD,31801
31774 :: CALL :: call :: Ljava/lang/Integer :: v39 = v27.getOffsetInteger()::JM,31778:CL,43057
31778 :: PRED :: IF :: Z :: if (v39 == #(null)) goto 170::CD,31787:CD,31791:CD,31797:CD,31801
31787 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v51 = forOffsetMillis(v49)::CL,43066
31791 :: CALL :: call :: Lorg/joda/time/Chronology :: v53 = v26.withZone(v51)::CL,43189:CL,43235:CL,43162:CL,43114
31797 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v41 = v27.getZone()::JM,31801:CL,43269
31801 :: PRED :: IF :: Z :: if (v41 == #(null)) goto 191::CD,31806
31806 :: CALL :: call :: Lorg/joda/time/Chronology :: v45 = v26.withZone(v43)::CL,43189:CL,43235:CL,43162:CL,43114
31811 :: CALL :: call :: V :: p1 $null .setChronology(v54)::CL,43278
31815 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v56 = p0 $null .iZone::DD,31818
31818 :: PRED :: IF :: Z :: if (v56 == #(null)) goto 215::CD,31822
31822 :: CALL :: call :: V :: p1 $null .setZone(v57)::CL,43290
31884 :: ENTR :: entry :: null :: org.joda.time.base.BaseDateTime.getMillis()::CE,31885:CD,31891
31885 :: EXIT :: exit :: J :: org.joda.time.base.BaseDateTime.getMillis()::JM,24224
31888 :: EXPR :: reference :: J :: v3 = p0 $null .iMillis::DD,31891
31891 :: NORM :: compound :: J :: return v3::CF,31885
32211 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet()::CD,32218:CD,32222:CD,32240:CD,32244:CD,32245
32215 :: EXPR :: reference :: Ljava/util/ArrayList :: v3 = p0 $null .iRuleSets::JM,32222
32218 :: CALL :: call :: I :: v5 = v3.size()::JM,32222
32222 :: PRED :: IF :: Z :: if (v5 != #(0)) goto 25::CD,32223
32223 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder :: v11 = p0 $null .addCutover(#(-2147483648), #(119), #(1), #(1), #(0), #(0), #(0))::CL,32335
32234 :: EXPR :: reference :: Ljava/util/ArrayList :: v12 = p0 $null .iRuleSets::
32237 :: EXPR :: reference :: Ljava/util/ArrayList :: v13 = p0 $null .iRuleSets::JM,32244
32240 :: CALL :: call :: I :: v15 = v13.size()::JM,32244
32244 :: EXPR :: assign :: Ljava/lang/Object :: v16 = v15 - #(1)::
32245 :: CALL :: call :: Ljava/lang/Object :: v18 = v12.get(v16)::
32294 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoCompiler.Rule.addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)::CD,32300:CD,32317
32300 :: CALL :: call :: Ljava/lang/String :: v6 = p0 $null .formatName(p2 $null )::CL,43603
32317 :: CALL :: call :: V :: v7.addRecurring(p1 $null , v6, v8, v9, v10)::CL,43738
32335 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.addCutover(int,char,int,int,int,boolean,int)::CD,32349:CD,32353:CD,32389:JM,43894:CD,32393
32346 :: EXPR :: reference :: Ljava/util/ArrayList :: v10 = p0 $null .iRuleSets::JM,32353
32349 :: CALL :: call :: I :: v12 = v10.size()::JM,32353
32353 :: PRED :: IF :: Z :: if (v12 <= #(0)) goto 59::JM,43808:JM,43809:JM,43841:JM,43844:JM,43813:JM,43847:JM,43832:JM,43818:JM,43835:JM,43838:JM,43823:CD,32370:CD,32374:CD,32375
32364 :: EXPR :: reference :: Ljava/util/ArrayList :: v16 = p0 $null .iRuleSets::
32367 :: EXPR :: reference :: Ljava/util/ArrayList :: v17 = p0 $null .iRuleSets::JM,32374
32370 :: CALL :: call :: I :: v19 = v17.size()::JM,32374
32374 :: EXPR :: assign :: Ljava/lang/Object :: v21 = v19 - #(1)::
32375 :: CALL :: call :: Ljava/lang/Object :: v23 = v16.get(v21)::
32386 :: EXPR :: reference :: Ljava/util/ArrayList :: v26 = p0 $null .iRuleSets::
32389 :: NORM :: declaration :: Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet :: v27 = new org.joda.time.tz.DateTimeZoneBuilder$RuleSet::
32393 :: CALL :: call :: Z :: v30 = v26.add(v27)::
32433 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.monthOfYear()::CE,32434:CD,32440
32434 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.monthOfYear()::JM,28626:JM,36483
32437 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iMonthOfYear::DD,32440
32440 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,32434
32442 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.millisOfDay()::CE,32443:CD,32449
32443 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.millisOfDay()::JM,28602:JM,36291
32446 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iMillisOfDay::DD,32449
32449 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,32443
32451 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.OfYear.setDayOfMonth(org.joda.time.Chronology,long)::CE,32452:CD,32460:CD,32508:CD,32509
32452 :: EXIT :: exit :: J :: org.joda.time.tz.DateTimeZoneBuilder.OfYear.setDayOfMonth(org.joda.time.Chronology,long)::JM,24967:JM,45169:JM,45289
32457 :: EXPR :: reference :: I :: v5 = p0 $null .iDayOfMonth::DD,32460
32460 :: PRED :: IF :: Z :: if (v5 < #(0)) goto 24::CD,32468:CD,32479:CD,32489:CD,32502:CD,32509
32468 :: CALL :: call :: J :: v25 = v22.set(p2 $null , v23)::JM,32509:CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
32479 :: CALL :: call :: J :: v11 = v8.set(p2 $null , #(1))::CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
32489 :: CALL :: call :: J :: v15 = v13.add(v11, #(1))::CL,43931:CL,44136:CL,44016:CL,43956:CL,43976:CL,43996:CL,43912:CL,34012:CL,33983:CL,33434:CL,44056
32502 :: CALL :: call :: J :: v20 = v17.add(v15, v18)::JM,32509:CL,43931:CL,44136:CL,44016:CL,43956:CL,43976:CL,43996:CL,43912:CL,34012:CL,33983:CL,33434:CL,44056
32508 :: NORM :: compound :: J :: return v26::DD,32452
32509 :: EXPR :: assign :: null :: PHI v26 = v25, v20::CF,32508
32528 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.OfYear.setDayOfWeek(org.joda.time.Chronology,long)::CE,32529:CD,32538:CD,32546:CD,32547:CD,32567:CD,32569
32529 :: EXIT :: exit :: J :: org.joda.time.tz.DateTimeZoneBuilder.OfYear.setDayOfWeek(org.joda.time.Chronology,long)::JM,24967:JM,34837:JM,34796:JM,35060:JM,35101
32538 :: CALL :: call :: I :: v8 = v6.get(p2 $null )::JM,32546:CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,11332
32543 :: EXPR :: reference :: I :: v9 = p0 $null .iDayOfWeek::DD,32546
32546 :: EXPR :: assign :: Ljava/lang/Object :: v10 = v9 - v8::DD,32547
32547 :: PRED :: IF :: Z :: if (v10 == #(0)) goto 62::CF,32569:CD,32561
32561 :: CALL :: call :: J :: v21 = v19.add(p2 $null , v17)::JM,32569:CL,43931:CL,44136:CL,44016:CL,43956:CL,43976:CL,43996:CL,43912:CL,34012:CL,33983:CL,33434:CL,44056
32567 :: NORM :: compound :: J :: return v22::DD,32529
32569 :: EXPR :: assign :: null :: PHI v22 = p2 $null , v21::CF,32567
32603 :: EXPR :: modify :: Ljava/lang/String :: p0 $null .iName = p1 $null ::
32606 :: EXPR :: modify :: [Lorg/joda/time/DurationFieldType :: p0 $null .iTypes = p2 $null ::
32609 :: EXPR :: modify :: [I :: p0 $null .iIndices = p3 $null ::
32631 :: CALL :: call :: Lorg/joda/time/PeriodType :: v9 = p0 $null .checkPeriodType(p3 $null )::CL,29046
32636 :: CALL :: call :: Lorg/joda/time/Chronology :: v11 = getChronology(p4 $null )::CL,29057
32643 :: CALL :: call :: [I :: v13 = v11.get(p0 $null , p1 $null , p2 $null )::CL,44156
32676 :: ENTR :: entry :: null :: org.joda.time.PeriodType.getIndexedField(org.joda.time.ReadablePeriod,int)::CE,32677:CD,32689:CD,32696:CD,32697
32677 :: EXIT :: exit :: I :: org.joda.time.PeriodType.getIndexedField(org.joda.time.ReadablePeriod,int)::JM,25222:JM,25242
32682 :: EXPR :: reference :: [I :: v5 = p0 $null .iIndices::
32685 :: EXPR :: reference :: I :: v6 = v5[p2 $null ]::DD,32689
32689 :: PRED :: IF :: Z :: if (v6 != #(-1)) goto 18::CD,32691:CD,32697
32691 :: CALL :: call :: I :: v9 = p1 $null .getValue(v6)::JM,32697:CL,44234
32696 :: NORM :: compound :: I :: return v11::CF,32677
32697 :: EXPR :: assign :: null :: PHI v11 = #(0), v9::CF,32696
32706 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.Recurrence.rename(java.lang.String)::JM,44259:JM,44262:JM,44265
32741 :: CALL :: call :: Ljava/lang/String :: v11 = createMessage(v8, p2 $null , p3 $null , p4 $null , #(null))::CL,34481
32808 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.getParam()::CE,32809:CD,32815
32809 :: EXIT :: exit :: Ljava/lang/Object :: org.joda.time.chrono.AssembledChronology.getParam()::JM,25667:JM,43202
32812 :: EXPR :: reference :: Ljava/lang/Object :: v3 = p0 $null .iParam::DD,32815
32815 :: NORM :: compound :: Ljava/lang/Object :: return v3::CF,32809
32817 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getZone()::CE,32818:CD,32821:CD,32825
32818 :: EXIT :: exit :: Lorg/joda/time/DateTimeZone :: org.joda.time.chrono.BasicChronology.getZone()::JM,25678
32821 :: CALL :: call :: Lorg/joda/time/Chronology :: v4 = p0 $null .getBase()::JM,32825:CL,32840
32825 :: PRED :: IF :: Z :: if (v4 == #(null)) goto 14::CD,32826:CD,32830:CD,32831:CD,32833
32826 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v8 = v4.getZone()::JM,32830:CL,25659:CL,25670:CL,25639
32830 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v8::CF,32818
32831 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v6 = org.joda.time.DateTimeZone.UTC::CF,32833
32833 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v6::CF,32818
32840 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.getBase()::CE,32841:CD,32847
32841 :: EXIT :: exit :: Lorg/joda/time/Chronology :: org.joda.time.chrono.AssembledChronology.getBase()::JM,32825:JM,37094:JM,54319
32844 :: EXPR :: reference :: Lorg/joda/time/Chronology :: v3 = p0 $null .iBase::DD,32847
32847 :: NORM :: compound :: Lorg/joda/time/Chronology :: return v3::CF,32841
32849 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.era()::CE,32850:CD,32856
32850 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.era()::JM,36543
32853 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iEra::DD,32856
32856 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,32850
32858 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.era()::CE,32859:CD,32865:CD,32869:CD,32874
32859 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.era()::JM,28678
32865 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .eras()::CL,44283:CL,37901
32869 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,32874:CL,44292
32874 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,32859
32876 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.yearOfEra()::CE,32877:CD,32883
32877 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.yearOfEra()::JM,36507
32880 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iYearOfEra::DD,32883
32883 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,32877
32885 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.yearOfEra()::CE,32886:CD,32892:CD,32896:CD,32901
32886 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.yearOfEra()::JM,28675
32892 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .years()::CL,44363:CL,37877
32896 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,32901:CL,44292
32901 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,32886
32903 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.centuryOfEra()::CE,32904:CD,32910
32904 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.centuryOfEra()::JM,36531
32907 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iCenturyOfEra::DD,32910
32910 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,32904
32912 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.centuryOfEra()::CE,32913:CD,32919:CD,32923:CD,32928
32913 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.centuryOfEra()::JM,28677
32919 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .centuries()::CL,37889:CL,44379
32923 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,32928:CL,44292
32928 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,32913
32930 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.yearOfCentury()::CE,32931:CD,32937
32931 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.yearOfCentury()::JM,36519
32934 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iYearOfCentury::DD,32937
32937 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,32931
32939 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.yearOfCentury()::CE,32940:CD,32946:CD,32950:CD,32955
32940 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.yearOfCentury()::JM,28676
32946 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .years()::CL,44363:CL,37877
32950 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,32955:CL,44292
32955 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,32940
32957 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.year()::CE,32958:CD,32964:CD,32968:CD,32973
32958 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.year()::JM,28674
32964 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .years()::CL,44363:CL,37877
32968 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,32973:CL,44292
32973 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,32958
32975 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.dayOfYear()::CE,32976:CD,32982
32976 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.dayOfYear()::JM,36435
32979 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iDayOfYear::DD,32982
32982 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,32976
32984 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.dayOfYear()::CE,32985:CD,32991:CD,32995:CD,33000
32985 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.dayOfYear()::JM,28669
32991 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .days()::CL,40263:CL,37829
32995 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,33000:CL,44292
33000 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,32985
33002 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.monthOfYear()::CE,33003:CD,33009:CD,33013:CD,33018
33003 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.monthOfYear()::JM,28673
33009 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .months()::CL,40199:CL,37865
33013 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,33018:CL,44292
33018 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,33003
33020 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.dayOfMonth()::CE,33021:CD,33027:CD,33031:CD,33036
33021 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.dayOfMonth()::JM,28668
33027 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .days()::CL,40263:CL,37829
33031 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,33036:CL,44292
33036 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,33021
33038 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.dayOfMonth()::CE,33039:CD,33045
33039 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.dayOfMonth()::JM,28637:JM,36423
33042 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iDayOfMonth::DD,33045
33045 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,33039
33047 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.weekyearOfCentury()::CE,33048:CD,33054
33048 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.weekyearOfCentury()::JM,36471
33051 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iWeekyearOfCentury::DD,33054
33054 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,33048
33056 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.weekyearOfCentury()::CE,33057:CD,33063:CD,33067:CD,33072
33057 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.weekyearOfCentury()::JM,28672
33063 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .weekyears()::CL,44402:CL,37853
33067 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,33072:CL,44292
33072 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,33057
33074 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.weekyear()::CE,33075:CD,33081:CD,33085:CD,33090
33075 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.weekyear()::JM,28671
33081 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .weekyears()::CL,44402:CL,37853
33085 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,33090:CL,44292
33090 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,33075
33092 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.weekyear()::CE,33093:CD,33099
33093 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.weekyear()::JM,36459
33096 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iWeekyear::DD,33099
33099 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,33093
33101 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.weekOfWeekyear()::CE,33102:CD,33108
33102 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.weekOfWeekyear()::JM,36447
33105 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iWeekOfWeekyear::DD,33108
33108 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,33102
33110 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.weekOfWeekyear()::CE,33111:CD,33117:CD,33121:CD,33126
33111 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.weekOfWeekyear()::JM,28670
33117 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .weeks()::CL,44411:CL,37841
33121 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,33126:CL,44292
33126 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,33111
33128 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.dayOfWeek()::CE,33129:CD,33135:CD,33139:CD,33144
33129 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.dayOfWeek()::JM,28667
33135 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .days()::CL,40263:CL,37829
33139 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,33144:CL,44292
33144 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,33129
33146 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.halfdayOfDay()::CE,33147:CD,33153:CD,33157:CD,33162
33147 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.halfdayOfDay()::JM,28666
33153 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .halfdays()::CL,44420:CL,37817
33157 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,33162:CL,44292
33162 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,33147
33164 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.halfdayOfDay()::CE,33165:CD,33171
33165 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.halfdayOfDay()::JM,36399
33168 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iHalfdayOfDay::DD,33171
33171 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,33165
33173 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.hourOfHalfday()::CE,33174:CD,33180
33174 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.hourOfHalfday()::JM,36375
33177 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iHourOfHalfday::DD,33180
33180 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,33174
33182 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.hourOfHalfday()::CE,33183:CD,33189:CD,33193:CD,33198
33183 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.hourOfHalfday()::JM,28664
33189 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .hours()::CL,37805:CL,44429
33193 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,33198:CL,44292
33198 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,33183
33200 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.clockhourOfHalfday()::CE,33201:CD,33207:CD,33211:CD,33216
33201 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.clockhourOfHalfday()::JM,28665
33207 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .hours()::CL,37805:CL,44429
33211 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,33216:CL,44292
33216 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,33201
33218 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.clockhourOfHalfday()::CE,33219:CD,33225
33219 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.clockhourOfHalfday()::JM,36387
33222 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iClockhourOfHalfday::DD,33225
33225 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,33219
33227 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.clockhourOfDay()::CE,33228:CD,33234
33228 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.clockhourOfDay()::JM,36363
33231 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iClockhourOfDay::DD,33234
33234 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,33228
33236 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.clockhourOfDay()::CE,33237:CD,33243:CD,33247:CD,33252
33237 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.clockhourOfDay()::JM,28663
33243 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .hours()::CL,37805:CL,44429
33247 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,33252:CL,44292
33252 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,33237
33254 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.hourOfDay()::CE,33255:CD,33261
33255 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.hourOfDay()::JM,28557:JM,36351
33258 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iHourOfDay::DD,33261
33261 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,33255
33263 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.hourOfDay()::CE,33264:CD,33270:CD,33274:CD,33279
33264 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.hourOfDay()::JM,28662
33270 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .hours()::CL,37805:CL,44429
33274 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,33279:CL,44292
33279 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,33264
33281 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.minuteOfDay()::CE,33282:CD,33288
33282 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.minuteOfDay()::JM,36339
33285 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iMinuteOfDay::DD,33288
33288 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,33282
33290 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.minuteOfDay()::CE,33291:CD,33297:CD,33301:CD,33306
33291 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.minuteOfDay()::JM,28661
33297 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .minutes()::CL,44438:CL,37793
33301 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,33306:CL,44292
33306 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,33291
33308 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.minuteOfHour()::CE,33309:CD,33315
33309 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.minuteOfHour()::JM,28568:JM,36327
33312 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iMinuteOfHour::DD,33315
33315 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,33309
33317 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.minuteOfHour()::CE,33318:CD,33324:CD,33328:CD,33333
33318 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.minuteOfHour()::JM,28660
33324 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .minutes()::CL,44438:CL,37793
33328 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,33333:CL,44292
33333 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,33318
33335 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.secondOfDay()::CE,33336:CD,33342
33336 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.secondOfDay()::JM,36315
33339 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iSecondOfDay::DD,33342
33342 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,33336
33344 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.secondOfDay()::CE,33345:CD,33351:CD,33355:CD,33360
33345 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.secondOfDay()::JM,28659
33351 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .seconds()::CL,37781:CL,44447
33355 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,33360:CL,44292
33360 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,33345
33362 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.secondOfMinute()::CE,33363:CD,33369
33363 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.secondOfMinute()::JM,28579:JM,36303
33366 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iSecondOfMinute::DD,33369
33369 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,33363
33371 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.secondOfMinute()::CE,33372:CD,33378:CD,33382:CD,33387
33372 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.secondOfMinute()::JM,28658
33378 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .seconds()::CL,37781:CL,44447
33382 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,33387:CL,44292
33387 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,33372
33389 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.millisOfDay()::CE,33390:CD,33396:CD,33400:CD,33405
33390 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.millisOfDay()::JM,28657
33396 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .millis()::CL,37769:CL,44456
33400 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,33405:CL,44292
33405 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,33390
33407 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.millisOfSecond()::CE,33408:CD,33414
33408 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.AssembledChronology.millisOfSecond()::JM,28590:JM,36279
33411 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v3 = p0 $null .iMillisOfSecond::DD,33414
33414 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v3::CF,33408
33416 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.millisOfSecond()::CE,33417:CD,33423:CD,33427:CD,33432
33417 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.BaseChronology.millisOfSecond()::JM,28656
33423 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .millis()::CL,37769:CL,44456
33427 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDateTimeField :: v8 = getInstance(v4, v6)::JM,33432:CL,44292
33432 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v8::DD,33417
33434 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(long,int)::CE,33435:CD,33440:JM,33441
33435 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(long,int)::JM,25949:JM,32509:JM,32569:JM,38258:JM,43927:JM,43951:JM,44012:JM,44083:JM,44152:JM,50569
33440 :: PRED :: IF :: Z :: if (p2 $null  != #(0)) goto 7::CD,33441:CD,33445:CD,33450:CD,33454:CD,33462:CD,33541:CD,33561:CD,33568:CD,33569
33441 :: NORM :: compound :: J :: return p1 $null ::DD,33435
33445 :: CALL :: call :: I :: v8 = v6.getMillisOfDay(p1 $null )::JM,33450:CL,26686
33450 :: EXPR :: assign :: J :: v9 = CONVERT I to J v8::DD,33568
33454 :: CALL :: call :: I :: v12 = v10.getYear(p1 $null )::CL,20337
33462 :: CALL :: call :: I :: v15 = v13.getMonthOfYear(p1 $null , v12)::CL,27623
33541 :: CALL :: call :: I :: v66 = v64.getDayOfMonth(p1 $null , v12, v15)::CL,28054
33561 :: CALL :: call :: J :: v73 = v71.getYearMonthDayMillis(v62, v63, v70)::JM,33568:CL,26650
33568 :: EXPR :: assign :: Ljava/lang/Object :: v74 = v73 + v9::CF,33569
33569 :: NORM :: compound :: J :: return v74::DD,33435
33669 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.getDurationField()::CE,33670:CD,33676
33670 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.getDurationField()::JM,33698:JM,37142:JM,44476:JM,45764:JM,45898:JM,45908:JM,45918:JM,51745
33673 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v3 = p0 $null .iDurationField::DD,33676
33676 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v3::CF,33670
33678 :: ENTR :: entry :: null :: org.joda.time.field.ImpreciseDateTimeField.getDurationField()::CE,33679:CD,33685
33679 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.field.ImpreciseDateTimeField.getDurationField()::JM,33698:JM,37142:JM,44476:JM,45764:JM,45898:JM,45908:JM,45918:JM,51745
33682 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v3 = p0 $null .iDurationField::DD,33685
33685 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v3::CF,33679
33687 :: ENTR :: entry :: null :: org.joda.time.field.DecoratedDateTimeField.getDurationField()::CE,33688:CD,33694:CD,33698
33688 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.field.DecoratedDateTimeField.getDurationField()::JM,33698:JM,37142:JM,44476:JM,45764:JM,45898:JM,45908:JM,45918:JM,51745:JM,51812
33694 :: CALL :: call :: Lorg/joda/time/DurationField :: v5 = v3.getDurationField()::JM,33698:CL,33678:CL,33687:CL,44465:CL,33709:CL,33730:CL,33718:CL,33933:CL,33669:CL,33700
33698 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v5::DD,33688
33700 :: ENTR :: entry :: null :: org.joda.time.field.RemainderDateTimeField.getDurationField()::CE,33701:CD,33707
33701 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.field.RemainderDateTimeField.getDurationField()::JM,33698:JM,37142:JM,44476:JM,45764:JM,45898:JM,45908:JM,45918:JM,51745
33704 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v3 = p0 $null .iDurationField::DD,33707
33707 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v3::CF,33701
33709 :: ENTR :: entry :: null :: org.joda.time.field.DividedDateTimeField.getDurationField()::CE,33710:CD,33716
33710 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.field.DividedDateTimeField.getDurationField()::JM,33698:JM,37142:JM,44476:JM,45764:JM,45898:JM,45908:JM,45918:JM,51745
33713 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v3 = p0 $null .iDurationField::DD,33716
33716 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v3::CF,33710
33718 :: ENTR :: entry :: null :: org.joda.time.chrono.GJEraDateTimeField.getDurationField()::CE,33719:CD,33725:CD,33729
33719 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.GJEraDateTimeField.getDurationField()::JM,33698:JM,37142:JM,44476:JM,45764:JM,45898:JM,45908:JM,45918:JM,51745
33725 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDurationField :: v6 = getInstance(v4)::JM,33729:CL,44478
33729 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v6::DD,33719
33730 :: ENTR :: entry :: null :: org.joda.time.field.PreciseDurationDateTimeField.getDurationField()::CE,33731:CD,33737
33731 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.field.PreciseDurationDateTimeField.getDurationField()::JM,33698:JM,37142:JM,44476:JM,45764:JM,45898:JM,45908:JM,45918:JM,51745
33734 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v3 = p0 $null .iUnitField::DD,33737
33737 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v3::CF,33731
33739 :: ENTR :: entry :: null :: org.joda.time.field.PreciseDurationField.add(long,long)::CE,33740:CD,33753:CD,33758
33740 :: EXIT :: exit :: J :: org.joda.time.field.PreciseDurationField.add(long,long)::JM,33807:JM,33872:JM,38299
33753 :: CALL :: call :: J :: v9 = safeAdd(p1 $null , v7)::JM,33758:CL,44632
33758 :: NORM :: compound :: J :: return v9::DD,33740
33764 :: ENTR :: entry :: null :: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField.add(long,long)::CE,33765:CD,33773:CD,33779
33765 :: EXIT :: exit :: J :: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField.add(long,long)::JM,33807:JM,33872:JM,38299
33773 :: CALL :: call :: J :: v7 = v5.add(p1 $null , p2 $null )::JM,33779:CL,25933:CL,26391:CL,26352
33779 :: NORM :: compound :: J :: return v7::DD,33765
33783 :: ENTR :: entry :: null :: org.joda.time.field.ScaledDurationField.add(long,long)::CE,33784:CD,33801:CD,33807
33784 :: EXIT :: exit :: J :: org.joda.time.field.ScaledDurationField.add(long,long)::JM,33807:JM,33872:JM,38299
33801 :: CALL :: call :: J :: v11 = v9.add(p1 $null , v7)::JM,33807:CL,33814:CL,33839:CL,33783:CL,33739:CL,33828:CL,33764
33807 :: NORM :: compound :: J :: return v11::DD,33784
33814 :: ENTR :: entry :: null :: org.joda.time.field.MillisDurationField.add(long,long)::CE,33815:CD,33820:CD,33825
33815 :: EXIT :: exit :: J :: org.joda.time.field.MillisDurationField.add(long,long)::JM,33807:JM,33872:JM,38299
33820 :: CALL :: call :: J :: v6 = safeAdd(p1 $null , p2 $null )::JM,33825:CL,44632
33825 :: NORM :: compound :: J :: return v6::DD,33815
33828 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDurationField.add(long,long)::CE,33829:CD,33834
33829 :: EXIT :: exit :: J :: org.joda.time.field.UnsupportedDurationField.add(long,long)::JM,33807:JM,33872:JM,38299
33834 :: CALL :: call :: Ljava/lang/UnsupportedOperationException :: v6 = p0 $null .unsupported()::CL,44793
33839 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDurationField.add(long,long)::CE,33840:CD,33845:CD,33855:CD,33864:CD,33871:CD,33872:CD,33873:CD,33874
33840 :: EXIT :: exit :: J :: org.joda.time.chrono.ZonedChronology.ZonedDurationField.add(long,long)::JM,33807:JM,33872:JM,38299
33845 :: CALL :: call :: I :: v6 = p0 $null .getOffsetToAdd(p1 $null )::JM,33874:CL,44828
33855 :: CALL :: call :: J :: v11 = v7.add(v9, p2 $null )::JM,33872:CL,33814:CL,33839:CL,33783:CL,33739:CL,33828:CL,33764
33861 :: EXPR :: reference :: Z :: v12 = p0 $null .iTimeField::DD,33864
33864 :: PRED :: IF :: Z :: if (v12 == #(0)) goto 36::CD,33866:CD,33874
33866 :: CALL :: call :: I :: v15 = p0 $null .getOffsetFromLocalToSubtract(v11)::JM,33874:CL,44872
33871 :: EXPR :: assign :: J :: v17 = CONVERT I to J v16::CF,33872
33872 :: EXPR :: assign :: Ljava/lang/Object :: v18 = v11 - v17::CF,33873
33873 :: NORM :: compound :: J :: return v18::DD,33840
33874 :: EXPR :: assign :: null :: PHI v16 = v6, v15::CF,33871
33889 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.getOffsetToAdd(long)::CE,33890:CD,33897:CD,33917
33890 :: EXIT :: exit :: I :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.getOffsetToAdd(long)::JM,44082:JM,48783
33897 :: CALL :: call :: I :: v6 = v4.getOffset(p1 $null )::JM,33917:CL,18682:CL,18565:CL,18672:CL,18689
33917 :: NORM :: compound :: I :: return v6::DD,33890
33933 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.getDurationField()::CE,33934:CD,33940
33934 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.field.UnsupportedDateTimeField.getDurationField()::JM,33698:JM,37142:JM,44321:JM,44476:JM,45764:JM,45898:JM,45908:JM,45918:JM,51745
33937 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v3 = p0 $null .iDurationField::DD,33940
33940 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v3::CF,33934
33942 :: ENTR :: entry :: null :: org.joda.time.field.FieldUtils.safeToInt(long)::CF,33943:CD,33950:CD,33951
33943 :: EXIT :: exit :: I :: org.joda.time.field.FieldUtils.safeToInt(long)::JM,38107:JM,38204:JM,46688
33950 :: EXPR :: assign :: I :: v19 = CONVERT J to I p1 $null ::CF,33951
33951 :: NORM :: compound :: I :: return v19::CF,33943
33983 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicWeekyearDateTimeField.add(long,int)::CE,33984:CD,33989:JM,33990
33984 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicWeekyearDateTimeField.add(long,int)::JM,26368:JM,32509:JM,32569:JM,38258:JM,43927:JM,43951:JM,44012:JM,44083:JM,44152:JM,50569
33989 :: PRED :: IF :: Z :: if (p2 $null  != #(0)) goto 10::CD,33990:CD,33991:CD,33997:CD,34003
33990 :: NORM :: compound :: J :: return p1 $null ::DD,33984
33991 :: CALL :: call :: I :: v7 = p0 $null .get(p1 $null )::CL,11080
33997 :: CALL :: call :: J :: v10 = p0 $null .set(p1 $null , v8)::JM,34003:CL,18059
34003 :: NORM :: compound :: J :: return v10::DD,33984
34012 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicYearDateTimeField.add(long,int)::CE,34013:CD,34018:JM,34019
34013 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicYearDateTimeField.add(long,int)::JM,26407:JM,32509:JM,32569:JM,38258:JM,43927:JM,43951:JM,44012:JM,44083:JM,44152:JM,50569
34018 :: PRED :: IF :: Z :: if (p2 $null  != #(0)) goto 8::CD,34019:CD,34020:CD,34030:CD,34036
34019 :: NORM :: compound :: J :: return p1 $null ::DD,34013
34020 :: CALL :: call :: I :: v7 = p0 $null .get(p1 $null )::CL,11241
34030 :: CALL :: call :: J :: v11 = p0 $null .set(p1 $null , v9)::JM,34036:CL,17676
34036 :: NORM :: compound :: J :: return v11::DD,34013
34049 :: ENTR :: entry :: null :: org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long)::CD,34059
34059 :: CALL :: call :: J :: v8 = v6.add(p1 $null , p2 $null )::CL,26252:CL,25933:CL,26457:CL,26212:CL,26332:CL,26391:CL,26437:CL,26372:CL,26352:CL,34049:CL,26192:CL,26411
34069 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.convertLocalToUTC(long,boolean)::CE,34070:CD,34075:CD,34082:CD,34087:JM,26827:CD,34126:CD,34127:CD,34141:CD,34144:JM,34098:JM,34088:JM,34109
34070 :: EXIT :: exit :: J :: org.joda.time.DateTimeZone.convertLocalToUTC(long,boolean)::JM,26504
34075 :: CALL :: call :: I :: v6 = p0 $null .getOffset(p1 $null )::JM,34144:JM,34097:JM,34087:JM,34089:CL,18682:CL,18565:CL,18672:CL,18689
34082 :: CALL :: call :: I :: v10 = p0 $null .getOffset(v8)::JM,34144:JM,34087:JM,34108:CL,18682:CL,18565:CL,18672:CL,18689
34087 :: PRED :: IF :: Z :: if (v6 == v10) goto 120::CF,34144:CD,34088
34088 :: PRED :: IF :: Z :: if (p2 $null  != #(0)) goto 38::CD,34089:CD,34092:CD,34097:CD,34098:CD,34099:CD,34100:CD,34103:CD,34108:CD,34109:CD,34110:CD,34111:CD,34112:CD,34113:CD,34142:CD,34143:CD,34144
34089 :: PRED :: IF :: Z :: if (v6 >= #(0)) goto 120::CF,34144:CD,34092:CD,34097:CD,34098:CD,34099:CD,34100:CD,34103:CD,34108:CD,34109:CD,34110:CD,34111:CD,34112:CD,34113:CD,34142:CD,34143
34092 :: CALL :: call :: J :: v15 = p0 $null .nextTransition(v13)::JM,34099:JM,34142:CL,19000:CL,18977:CL,18993:CL,19007
34097 :: EXPR :: assign :: J :: v16 = CONVERT I to J v6::CF,34098
34098 :: EXPR :: assign :: Ljava/lang/Object :: v17 = p1 $null  - v16::CF,34099
34099 :: EXPR :: assign :: Z :: v18 = v15 == v17::DD,34100
34100 :: PRED :: IF :: Z :: if (v18 != #(0)) goto 65::CF,34142
34103 :: CALL :: call :: J :: v24 = p0 $null .nextTransition(v22)::JM,34110:JM,34143:CL,19000:CL,18977:CL,18993:CL,19007
34108 :: EXPR :: assign :: J :: v25 = CONVERT I to J v10::CF,34109
34109 :: EXPR :: assign :: Ljava/lang/Object :: v26 = p1 $null  - v25::CF,34110
34110 :: EXPR :: assign :: Z :: v27 = v24 == v26::DD,34111
34111 :: PRED :: IF :: Z :: if (v27 != #(0)) goto 92::CF,34143
34112 :: EXPR :: assign :: Z :: v29 = v20 == v28::DD,34113
34113 :: PRED :: IF :: Z :: if (v29 == #(0)) goto 120::CF,34144
34126 :: EXPR :: assign :: J :: v31 = CONVERT I to J v30::CF,34127
34127 :: EXPR :: assign :: Ljava/lang/Object :: v32 = p1 $null  - v31::DD,34141
34141 :: NORM :: compound :: J :: return v32::DD,34070
34142 :: EXPR :: assign :: null :: PHI v20 = v15, #(9223372036854775807 l)::DD,34112
34143 :: EXPR :: assign :: null :: PHI v28 = v24, #(9223372036854775807 l)::DD,34112
34144 :: EXPR :: assign :: null :: PHI v30 = v10, v10, v10, v6::DD,34126
34194 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis(int)::CE,34195:CD,34199:CD,34204:CD,34212:CD,34213
34195 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis(int)::JM,26562:JM,27777:JM,27795:JM,27792
34199 :: CALL :: call :: J :: v5 = p0 $null .getYearMillis(p1 $null )::JM,34217:JM,34222:CL,28013
34204 :: CALL :: call :: I :: v7 = p0 $null .getDayOfWeek(v5)::JM,34213:JM,34214:JM,34219:CL,20128
34209 :: EXPR :: reference :: I :: v9 = p0 $null .iMinDaysInFirstWeek::DD,34212
34212 :: EXPR :: assign :: Ljava/lang/Object :: v10 = #(8) - v9::CF,34213
34213 :: PRED :: IF :: Z :: if (v7 <= v10) goto 42::CD,34214:CD,34215:CD,34216:CD,34217:CD,34218:CD,34219:CD,34220:CD,34221:CD,34222:CD,34223
34214 :: EXPR :: assign :: Ljava/lang/Object :: v17 = #(8) - v7::CF,34215
34215 :: EXPR :: assign :: J :: v18 = CONVERT I to J v17::DD,34216
34216 :: EXPR :: assign :: Ljava/lang/Object :: v19 = v18 * #(86400000 l)::CF,34217
34217 :: EXPR :: assign :: Ljava/lang/Object :: v20 = v5 + v19::CF,34218
34218 :: NORM :: compound :: J :: return v20::DD,34195
34219 :: EXPR :: assign :: Ljava/lang/Object :: v12 = v7 - #(1)::CF,34220
34220 :: EXPR :: assign :: J :: v13 = CONVERT I to J v12::DD,34221
34221 :: EXPR :: assign :: Ljava/lang/Object :: v15 = v13 * #(86400000 l)::CF,34222
34222 :: EXPR :: assign :: Ljava/lang/Object :: v16 = v5 - v15::CF,34223
34223 :: NORM :: compound :: J :: return v16::DD,34195
34241 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth(int,int)::CE,34242:CD,34247:CD,34252:JM,34263:JM,34255
34242 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth(int,int)::JM,26668:JM,28072:JM,54398
34247 :: CALL :: call :: Z :: v6 = p0 $null .isLeapYear(p1 $null )::JM,34252:CL,28029
34252 :: PRED :: IF :: Z :: if (v6 == #(0)) goto 16::CD,34253:CD,34255:CD,34260:CD,34261:CD,34263:CD,34268
34253 :: EXPR :: reference :: [J :: v12 = org.joda.time.chrono.BasicGJChronology.MAX_TOTAL_MILLIS_BY_MONTH_ARRAY::CF,34255
34255 :: EXPR :: assign :: Ljava/lang/Object :: v13 = p2 $null  - #(1)::
34256 :: EXPR :: reference :: J :: v14 = v12[v13]::DD,34260
34260 :: NORM :: compound :: J :: return v14::CF,34242
34261 :: EXPR :: reference :: [J :: v8 = org.joda.time.chrono.BasicGJChronology.MIN_TOTAL_MILLIS_BY_MONTH_ARRAY::CF,34263
34263 :: EXPR :: assign :: Ljava/lang/Object :: v10 = p2 $null  - #(1)::
34264 :: EXPR :: reference :: J :: v11 = v8[v10]::DD,34268
34268 :: NORM :: compound :: J :: return v11::CF,34242
34278 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getDaysInYearMax()::CF,34279:CD,34282
34279 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicChronology.getDaysInYearMax()::JM,26747:JM,27892
34282 :: NORM :: compound :: I :: return #(366)::CF,34279
34284 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue(long)::CD,34292
34292 :: CALL :: call :: I :: v6 = v4.getYear(p1 $null )::CL,20337
34311 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue(long)::CD,34319:CD,34327
34319 :: CALL :: call :: I :: v6 = v4.getWeekyear(p1 $null )::CL,20193
34327 :: CALL :: call :: I :: v9 = v7.getWeeksInYear(v6)::CL,26546
34349 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue(long)::CD,34357
34357 :: CALL :: call :: I :: v6 = v4.getDaysInMonthMax(p1 $null )::CL,44990
34365 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet(long,int)::CD,34371:JM,34372
34371 :: PRED :: IF :: Z :: if (p2 $null  > #(28)) goto 13::CD,34372:CD,34373
34372 :: PRED :: IF :: Z :: if (p2 $null  >= #(1)) goto 21::CD,34373
34373 :: CALL :: call :: I :: v8 = p0 $null .getDaysInMonthMax(p1 $null )::CL,44990
34388 :: ENTR :: entry :: null :: org.joda.time.IllegalInstantException.createMessage(long,java.lang.String)::CD,34393:CD,34402:CD,34407:CD,34432:CD,34436:CD,34441:CD,34446:CD,34451:CD,34456
34393 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v6 = forPattern(#(yyyy-MM-dd'T'HH:mm:ss.SSS))::CL,45023
34402 :: CALL :: call :: Ljava/lang/String :: v10 = v6.print(v7)::CL,45048
34407 :: PRED :: IF :: Z :: if (p2 $null  == #(null)) goto 52::CF,34408:CD,34412:CD,34417:CD,34422:CD,34427:CD,34456
34408 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v13 = new java.lang.StringBuilder::JM,34456
34412 :: CALL :: call :: Ljava/lang/StringBuilder :: v17 = v13.append(#( ())::JM,34456
34417 :: CALL :: call :: Ljava/lang/StringBuilder :: v19 = v17.append(p2 $null )::JM,34456
34422 :: CALL :: call :: Ljava/lang/StringBuilder :: v22 = v19.append(#()))::JM,34456
34427 :: CALL :: call :: Ljava/lang/String :: v24 = v22.toString()::JM,34456
34432 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v26 = new java.lang.StringBuilder::
34436 :: CALL :: call :: Ljava/lang/StringBuilder :: v30 = v26.append(#(Illegal instant due t...))::
34441 :: CALL :: call :: Ljava/lang/StringBuilder :: v32 = v30.append(v10)::
34446 :: CALL :: call :: Ljava/lang/StringBuilder :: v34 = v32.append(v25)::
34451 :: CALL :: call :: Ljava/lang/String :: v36 = v34.toString()::
34456 :: EXPR :: assign :: null :: PHI v25 = v24, #()::CF,34432
34481 :: ENTR :: entry :: null :: org.joda.time.IllegalFieldValueException.createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)::CD,34489:CD,34493:CD,34498:CD,34503:CD,34508:CD,34513:CD,34518:CD,34574:CD,34585:JM,34519:JM,34537
34489 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v7 = new java.lang.StringBuilder::
34493 :: CALL :: call :: Ljava/lang/StringBuilder :: v11 = v7.append(#(Value ))::
34498 :: CALL :: call :: Ljava/lang/StringBuilder :: v13 = v11.append(p2 $null )::
34503 :: CALL :: call :: Ljava/lang/StringBuilder :: v16 = v13.append(#( for ))::
34508 :: CALL :: call :: Ljava/lang/StringBuilder :: v18 = v16.append(p1 $null )::
34513 :: CALL :: call :: Ljava/lang/StringBuilder :: v21 = v18.append(#(32))::
34518 :: PRED :: IF :: Z :: if (p3 $null  != #(null)) goto 67::CD,34519:CD,34537
34519 :: PRED :: IF :: Z :: if (p4 $null  != #(null)) goto 55::CD,34520:CD,34526:CD,34531
34520 :: CALL :: call :: Ljava/lang/StringBuilder :: v48 = v21.append(#(is not supported))::
34526 :: CALL :: call :: Ljava/lang/StringBuilder :: v43 = v21.append(#(must not be larger than ))::
34531 :: CALL :: call :: Ljava/lang/StringBuilder :: v45 = v43.append(p4 $null )::
34537 :: PRED :: IF :: Z :: if (p4 $null  != #(null)) goto 89::CD,34538:CD,34543:CD,34549:CD,34554:CD,34559:CD,34564:CD,34569
34538 :: CALL :: call :: Ljava/lang/StringBuilder :: v38 = v21.append(#(must not be smaller than ))::
34543 :: CALL :: call :: Ljava/lang/StringBuilder :: v40 = v38.append(p3 $null )::
34549 :: CALL :: call :: Ljava/lang/StringBuilder :: v25 = v21.append(#(must be in the range [))::
34554 :: CALL :: call :: Ljava/lang/StringBuilder :: v27 = v25.append(p3 $null )::
34559 :: CALL :: call :: Ljava/lang/StringBuilder :: v30 = v27.append(#(44))::
34564 :: CALL :: call :: Ljava/lang/StringBuilder :: v32 = v30.append(p4 $null )::
34569 :: CALL :: call :: Ljava/lang/StringBuilder :: v35 = v32.append(#(93))::
34574 :: PRED :: IF :: Z :: if (p5 $null  == #(null)) goto 131::CD,34575:CD,34580
34575 :: CALL :: call :: Ljava/lang/StringBuilder :: v51 = v21.append(#(: ))::
34580 :: CALL :: call :: Ljava/lang/StringBuilder :: v53 = v51.append(p5 $null )::
34585 :: CALL :: call :: Ljava/lang/String :: v55 = v21.toString()::
34628 :: ENTR :: entry :: null :: org.joda.time.tz.CachedDateTimeZone.createInfo(long)::CE,34629:CD,34633:CD,34634:JM,45100:JM,45103:CD,34643:CD,34647:CD,34652:CD,34653:CD,34670:CD,34671:CD,34672
34629 :: EXIT :: exit :: Lorg/joda/time/tz/CachedDateTimeZone$Info :: org.joda.time.tz.CachedDateTimeZone.createInfo(long)::JM,27035
34633 :: EXPR :: assign :: Ljava/lang/Object :: v5 = p1 $null  && #(-4294967296 l)::DD,34643:DD,34671:CF,34634
34634 :: NORM :: declaration :: Lorg/joda/time/tz/CachedDateTimeZone$Info :: v6 = new org.joda.time.tz.CachedDateTimeZone$Info::DD,34670:DD,34672
34643 :: EXPR :: assign :: Ljava/lang/Object :: v10 = v5 || #(4294967295 l)::DD,34654:CF,34671
34647 :: CALL :: call :: J :: v13 = v11.nextTransition(v20)::JM,34652:JM,34654:JM,34671:CL,19007
34652 :: EXPR :: assign :: Z :: v14 = v13 == v20::DD,34653
34653 :: PRED :: IF :: Z :: if (v14 == #(0)) goto 87::CD,34654:CD,34655:CF,34670
34654 :: EXPR :: assign :: Z :: v16 = v13 == v10::DD,34655
34655 :: PRED :: IF :: Z :: if (v16 <= #(0)) goto 64::CD,34647:CD,34652:CD,34653:CD,34657:JM,45100:JM,45103:CD,34671:CD,34672
34657 :: NORM :: declaration :: Lorg/joda/time/tz/CachedDateTimeZone$Info :: v17 = new org.joda.time.tz.CachedDateTimeZone$Info::DD,34666:DD,34672
34666 :: EXPR :: modify :: Lorg/joda/time/tz/CachedDateTimeZone$Info :: v21.iNextInfo = v17::
34670 :: NORM :: compound :: Lorg/joda/time/tz/CachedDateTimeZone$Info :: return v6::DD,34629
34671 :: EXPR :: assign :: null :: PHI v20 = v13, v5::CF,34672:DD,34652
34672 :: EXPR :: assign :: null :: PHI v21 = v17, v6::
34702 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.OfYear.next(long,int,int)::CE,34703:CD,34712:CD,34720:CD,34721:CD,34732:CD,34742:CD,34755:CD,34761:CD,34770:CD,34833:CD,34834:CD,34835:CD,34836:CD,34837:JM,34713
34703 :: EXIT :: exit :: J :: org.joda.time.tz.DateTimeZoneBuilder.OfYear.next(long,int,int)::JM,27263
34709 :: EXPR :: reference :: C :: v6 = p0 $null .iMode::DD,34712
34712 :: PRED :: IF :: Z :: if (v6 != #(119)) goto 19::CD,34713:CD,34718:CD,34836
34713 :: EXPR :: assign :: Ljava/lang/Object :: v11 = p2 $null  + p3 $null ::DD,34836
34715 :: EXPR :: reference :: C :: v8 = p0 $null .iMode::DD,34718
34718 :: PRED :: IF :: Z :: if (v8 != #(115)) goto 39::CD,34836
34720 :: EXPR :: assign :: J :: v13 = CONVERT I to J v12::CF,34721
34721 :: EXPR :: assign :: Ljava/lang/Object :: v14 = p1 $null  + v13::DD,34771:DD,34796
34732 :: CALL :: call :: J :: v21 = v18.set(v14, v19)::CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
34742 :: CALL :: call :: J :: v25 = v23.set(v21, #(0))::CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
34755 :: CALL :: call :: J :: v30 = v27.add(v25, v28)::CL,43931:CL,44136:CL,44016:CL,43956:CL,43976:CL,43996:CL,43912:CL,34012:CL,33983:CL,33434:CL,44056
34761 :: CALL :: call :: J :: v32 = p0 $null .setDayOfMonthNext(v16, v30)::JM,34771:JM,34837:CL,45116
34767 :: EXPR :: reference :: I :: v33 = p0 $null .iDayOfWeek::DD,34770
34770 :: PRED :: IF :: Z :: if (v33 != #(0)) goto 146::CD,34771:CD,34772:CD,34790:CD,34796:CD,34797:CD,34837
34771 :: EXPR :: assign :: Z :: v51 = v32 == v14::DD,34772
34772 :: PRED :: IF :: Z :: if (v51 > #(0)) goto 211::CF,34837:CD,34777:CD,34783
34777 :: CALL :: call :: J :: v55 = v53.add(v32, #(1))::CL,43931:CL,44136:CL,44016:CL,43956:CL,43976:CL,43996:CL,43912:CL,34012:CL,33983:CL,33434:CL,44056
34783 :: CALL :: call :: J :: v57 = p0 $null .setDayOfMonthNext(v16, v55)::JM,34837:CL,45116
34790 :: CALL :: call :: J :: v35 = p0 $null .setDayOfWeek(v16, v32)::JM,34837:JM,34796:CL,32528
34796 :: EXPR :: assign :: Z :: v36 = v35 == v14::DD,34797
34797 :: PRED :: IF :: Z :: if (v36 > #(0)) goto 211::CF,34837:CD,34802:CD,34815:CD,34821:CD,34827
34802 :: CALL :: call :: J :: v41 = v38.add(v35, #(1))::CL,43931:CL,44136:CL,44016:CL,43956:CL,43976:CL,43996:CL,43912:CL,34012:CL,33983:CL,33434:CL,44056
34815 :: CALL :: call :: J :: v46 = v43.set(v41, v44)::CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
34821 :: CALL :: call :: J :: v48 = p0 $null .setDayOfMonthNext(v16, v46)::CL,45116
34827 :: CALL :: call :: J :: v50 = p0 $null .setDayOfWeek(v16, v48)::JM,34837:CL,32528
34833 :: EXPR :: assign :: J :: v59 = CONVERT I to J v12::CF,34834
34834 :: EXPR :: assign :: Ljava/lang/Object :: v60 = v58 - v59::CF,34835
34835 :: NORM :: compound :: J :: return v60::DD,34703
34836 :: EXPR :: assign :: null :: PHI v12 = v11, p2 $null , #(0)::DD,34720:DD,34833
34837 :: EXPR :: assign :: null :: PHI v58 = v32, v57, v35, v50::DD,34834:CF,34833
34914 :: ENTR :: entry :: null :: org.joda.time.base.BaseDateTime.checkChronology(org.joda.time.Chronology)::CD,34919
34919 :: CALL :: call :: Lorg/joda/time/Chronology :: v5 = getChronology(p1 $null )::CL,29057
34933 :: ENTR :: entry :: null :: org.joda.time.base.BaseDateTime.adjustForMinMax()::CD,34940:CD,34941
34937 :: EXPR :: reference :: J :: v3 = p0 $null .iMillis::DD,34940
34940 :: EXPR :: assign :: Z :: v5 = v3 == #(-9223372036854775808 l)::DD,34941
34941 :: PRED :: IF :: Z :: if (v5 == #(0)) goto 24::CD,34945:CD,34946:CD,34950
34942 :: EXPR :: reference :: J :: v7 = p0 $null .iMillis::DD,34945
34945 :: EXPR :: assign :: Z :: v9 = v7 == #(9223372036854775807 l)::DD,34946
34946 :: PRED :: IF :: Z :: if (v9 != #(0)) goto 33::CD,34950
34950 :: CALL :: call :: Lorg/joda/time/Chronology :: v12 = v10.withUTC()::CL,45183
34966 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.OfYear.previous(long,int,int)::CE,34967:CD,34976:CD,34984:CD,34985:CD,34996:CD,35006:CD,35019:CD,35025:CD,35034:CD,35097:CD,35098:CD,35099:CD,35100:CD,35101:JM,34977
34967 :: EXIT :: exit :: J :: org.joda.time.tz.DateTimeZoneBuilder.OfYear.previous(long,int,int)::JM,27327
34973 :: EXPR :: reference :: C :: v6 = p0 $null .iMode::DD,34976
34976 :: PRED :: IF :: Z :: if (v6 != #(119)) goto 19::CD,34977:CD,34982:CD,35100
34977 :: EXPR :: assign :: Ljava/lang/Object :: v11 = p2 $null  + p3 $null ::DD,35100
34979 :: EXPR :: reference :: C :: v8 = p0 $null .iMode::DD,34982
34982 :: PRED :: IF :: Z :: if (v8 != #(115)) goto 39::CD,35100
34984 :: EXPR :: assign :: J :: v13 = CONVERT I to J v12::CF,34985
34985 :: EXPR :: assign :: Ljava/lang/Object :: v14 = p1 $null  + v13::DD,35035:DD,35060
34996 :: CALL :: call :: J :: v21 = v18.set(v14, v19)::CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
35006 :: CALL :: call :: J :: v25 = v23.set(v21, #(0))::CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
35019 :: CALL :: call :: J :: v30 = v27.add(v25, v28)::CL,43931:CL,44136:CL,44016:CL,43956:CL,43976:CL,43996:CL,43912:CL,34012:CL,33983:CL,33434:CL,44056
35025 :: CALL :: call :: J :: v32 = p0 $null .setDayOfMonthPrevious(v16, v30)::JM,35035:JM,35101:CL,45236
35031 :: EXPR :: reference :: I :: v33 = p0 $null .iDayOfWeek::DD,35034
35034 :: PRED :: IF :: Z :: if (v33 != #(0)) goto 146::CD,35035:CD,35036:CD,35054:CD,35060:CD,35061:CD,35101
35035 :: EXPR :: assign :: Z :: v51 = v32 == v14::DD,35036
35036 :: PRED :: IF :: Z :: if (v51 < #(0)) goto 211::CF,35101:CD,35041:CD,35047
35041 :: CALL :: call :: J :: v55 = v53.add(v32, #(-1))::CL,43931:CL,44136:CL,44016:CL,43956:CL,43976:CL,43996:CL,43912:CL,34012:CL,33983:CL,33434:CL,44056
35047 :: CALL :: call :: J :: v57 = p0 $null .setDayOfMonthPrevious(v16, v55)::JM,35101:CL,45236
35054 :: CALL :: call :: J :: v35 = p0 $null .setDayOfWeek(v16, v32)::JM,35060:JM,35101:CL,32528
35060 :: EXPR :: assign :: Z :: v36 = v35 == v14::DD,35061
35061 :: PRED :: IF :: Z :: if (v36 < #(0)) goto 211::CF,35101:CD,35066:CD,35079:CD,35085:CD,35091
35066 :: CALL :: call :: J :: v41 = v38.add(v35, #(-1))::CL,43931:CL,44136:CL,44016:CL,43956:CL,43976:CL,43996:CL,43912:CL,34012:CL,33983:CL,33434:CL,44056
35079 :: CALL :: call :: J :: v46 = v43.set(v41, v44)::CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
35085 :: CALL :: call :: J :: v48 = p0 $null .setDayOfMonthPrevious(v16, v46)::CL,45236
35091 :: CALL :: call :: J :: v50 = p0 $null .setDayOfWeek(v16, v48)::JM,35101:CL,32528
35097 :: EXPR :: assign :: J :: v59 = CONVERT I to J v12::CF,35098
35098 :: EXPR :: assign :: Ljava/lang/Object :: v60 = v58 - v59::CF,35099
35099 :: NORM :: compound :: J :: return v60::DD,34967
35100 :: EXPR :: assign :: null :: PHI v12 = v11, p2 $null , #(0)::DD,34984:DD,35097
35101 :: EXPR :: assign :: null :: PHI v58 = v32, v57, v35, v50::DD,35098:CF,35097
35169 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.writeMillis(java.io.DataOutput,long)::CD,35174:CD,35175:CD,35176:JM,35189:JM,35205:JM,35192:JM,35208:JM,35177:JM,35228
35174 :: EXPR :: assign :: Ljava/lang/Object :: v5 = p2 $null  % #(1800000 l)::DD,35175
35175 :: EXPR :: assign :: Z :: v7 = v5 == #(0 l)::DD,35176
35176 :: PRED :: IF :: Z :: if (v7 != #(0)) goto 45::CD,35177:CD,35178:CD,35179:CD,35180:CD,35181:CD,35189:CD,35190:CD,35191
35177 :: EXPR :: assign :: Ljava/lang/Object :: v9 = p2 $null  / #(1800000 l)::DD,35178:DD,35180:DD,35182
35178 :: EXPR :: assign :: Ljava/lang/Object :: v11 = v9 ? #(58)::DD,35179
35179 :: EXPR :: assign :: Ljava/lang/Object :: v12 = v11 ? #(58)::DD,35180
35180 :: EXPR :: assign :: Z :: v13 = v12 == v9::DD,35181
35181 :: PRED :: IF :: Z :: if (v13 != #(0)) goto 45::CD,35182:CD,35183:CD,35184:CD,35189:CD,35190:CD,35191
35182 :: EXPR :: assign :: Ljava/lang/Object :: v54 = v9 && #(63 l)::CF,35183
35183 :: EXPR :: assign :: I :: v55 = CONVERT J to I v54::JM,35189:JM,35205:JM,35174:JM,35192:JM,35208:JM,35177:JM,35228
35184 :: CALL :: call :: V :: p1 $null .writeByte(v55)::JM,35189:JM,35205:JM,35174:JM,35192:JM,35208:JM,35177:JM,35228
35189 :: EXPR :: assign :: Ljava/lang/Object :: v15 = p2 $null  % #(60000 l)::DD,35190
35190 :: EXPR :: assign :: Z :: v16 = v15 == #(0 l)::DD,35191
35191 :: PRED :: IF :: Z :: if (v16 != #(0)) goto 89::CD,35192:CD,35193:CD,35194:CD,35195:CD,35196:CD,35205:CD,35206:CD,35207
35192 :: EXPR :: assign :: Ljava/lang/Object :: v17 = p2 $null  / #(60000 l)::DD,35193:DD,35195:DD,35197
35193 :: EXPR :: assign :: Ljava/lang/Object :: v19 = v17 ? #(34)::DD,35194
35194 :: EXPR :: assign :: Ljava/lang/Object :: v20 = v19 ? #(34)::DD,35195
35195 :: EXPR :: assign :: Z :: v21 = v20 == v17::DD,35196
35196 :: PRED :: IF :: Z :: if (v21 != #(0)) goto 89::CD,35197:CD,35198:CD,35199:CD,35200:CD,35205:CD,35206:CD,35207
35197 :: EXPR :: assign :: Ljava/lang/Object :: v50 = v17 && #(1073741823 l)::CF,35198
35198 :: EXPR :: assign :: I :: v51 = CONVERT J to I v50::CF,35199
35199 :: EXPR :: assign :: Ljava/lang/Object :: v52 = #(1073741824) || v51::JM,35189:JM,35205:JM,35174:JM,35192:JM,35208:JM,35177:JM,35228
35200 :: CALL :: call :: V :: p1 $null .writeInt(v52)::JM,35189:JM,35205:JM,35174:JM,35192:JM,35208:JM,35177:JM,35228
35205 :: EXPR :: assign :: Ljava/lang/Object :: v23 = p2 $null  % #(1000 l)::DD,35206
35206 :: EXPR :: assign :: Z :: v24 = v23 == #(0 l)::DD,35207
35207 :: PRED :: IF :: Z :: if (v24 != #(0)) goto 148::CD,35208:CD,35209:CD,35210:CD,35211:CD,35212:CD,35228:CD,35229:CD,35231:CD,35235:CD,35240
35208 :: EXPR :: assign :: Ljava/lang/Object :: v25 = p2 $null  / #(1000 l)::DD,35209:DD,35211:DD,35213:DD,35221
35209 :: EXPR :: assign :: Ljava/lang/Object :: v27 = v25 ? #(26)::DD,35210
35210 :: EXPR :: assign :: Ljava/lang/Object :: v28 = v27 ? #(26)::DD,35211
35211 :: EXPR :: assign :: Z :: v29 = v28 == v25::DD,35212
35212 :: PRED :: IF :: Z :: if (v29 != #(0)) goto 148::CD,35213:CD,35214:CD,35215:CD,35216:CD,35217:CD,35221:CD,35222:CD,35223:CD,35228:CD,35229:CD,35231:CD,35235:CD,35240
35213 :: EXPR :: assign :: Ljava/lang/Object :: v38 = v25 ? #(32)::DD,35214
35214 :: EXPR :: assign :: Ljava/lang/Object :: v40 = v38 && #(63 l)::CF,35215
35215 :: EXPR :: assign :: I :: v41 = CONVERT J to I v40::CF,35216
35216 :: EXPR :: assign :: Ljava/lang/Object :: v42 = #(128) || v41::JM,35189:JM,35205:JM,35174:JM,35192:JM,35208:JM,35177:JM,35228
35217 :: CALL :: call :: V :: p1 $null .writeByte(v42)::JM,35189:JM,35205:JM,35174:JM,35192:JM,35208:JM,35177:JM,35228
35221 :: EXPR :: assign :: Ljava/lang/Object :: v45 = v25 && #(-1 l)::CF,35222
35222 :: EXPR :: assign :: I :: v46 = CONVERT J to I v45::JM,35189:JM,35205:JM,35174:JM,35192:JM,35208:JM,35177:JM,35228
35223 :: CALL :: call :: V :: p1 $null .writeInt(v46)::JM,35189:JM,35205:JM,35174:JM,35192:JM,35208:JM,35177:JM,35228
35228 :: EXPR :: assign :: Z :: v30 = p2 $null  == #(0 l)::DD,35229
35229 :: PRED :: IF :: Z :: if (v30 >= #(0)) goto 161::CD,35240
35231 :: CALL :: call :: V :: p1 $null .writeByte(v33)::JM,35189:JM,35205:JM,35174:JM,35192:JM,35208:JM,35177:JM,35228
35235 :: CALL :: call :: V :: p1 $null .writeLong(p2 $null )::JM,35189:JM,35205:JM,35174:JM,35192:JM,35208:JM,35177:JM,35228
35240 :: EXPR :: assign :: null :: PHI v33 = #(255), #(192)::JM,35189:JM,35205:JM,35174:JM,35192:JM,35208:JM,35177:JM,35228
35309 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.writeTo(java.io.DataOutput)::CD,35317:CD,35318:CD,35322:CD,35337:CD,35342:CD,35348:CD,35349:CD,35353:CD,35357:CD,35369:CD,35373:CD,35469:CD,35478:CD,35479:CD,35480
35314 :: EXPR :: reference :: [J :: v4 = p0 $null .iTransitions::DD,35317
35317 :: EXPR :: assign :: I :: v5 = v4.length::DD,35322:CF,35318
35318 :: NORM :: declaration :: Ljava/util/HashSet :: v6 = new java.util.HashSet::JM,35348:JM,35373:JM,35362:JM,35357
35322 :: PRED :: IF :: Z :: if (v15 >= v5) goto 44::CD,35330:CD,35335:CD,35478:JM,35348:JM,35373
35330 :: CALL :: call :: Z :: v12 = v6.add(v10)::
35335 :: EXPR :: assign :: Ljava/lang/Object :: v14 = v15 + #(1)::DD,35478
35337 :: CALL :: call :: I :: v17 = v6.size()::JM,35348:JM,35373
35342 :: NORM :: declaration :: Ljava/lang/UnsupportedOperationException :: v66 = new java.lang.UnsupportedOperationException::
35348 :: NORM :: declaration :: [Ljava/lang/String :: v19 = new java.lang.String[]::JM,35362:JM,35357
35349 :: CALL :: call :: Ljava/util/Iterator :: v21 = v6.iterator()::JM,35362:JM,35357
35353 :: CALL :: call :: Z :: v23 = v21.hasNext()::JM,35362:JM,35357
35357 :: PRED :: IF :: Z :: if (v23 == #(0)) goto 120::CD,35353:CD,35358:CD,35362:CD,35367:CD,35479:JM,35357
35358 :: CALL :: call :: Ljava/lang/Object :: v25 = v21.next()::JM,35362:JM,35357
35362 :: EXPR :: assign :: Ljava/lang/Object :: v26 = CHECKCAST v25::DD,35363
35363 :: EXPR :: modify :: Ljava/lang/Object :: v19[v28] = v26::
35367 :: EXPR :: assign :: Ljava/lang/Object :: v27 = v28 + #(1)::DD,35479
35369 :: CALL :: call :: V :: p1 $null .writeShort(v17)::JM,35373
35373 :: PRED :: IF :: Z :: if (v33 >= v17) goto 154::CD,35378:CD,35382:CD,35480
35374 :: EXPR :: reference :: Ljava/lang/Object :: v30 = v19[v33]::
35378 :: CALL :: call :: V :: p1 $null .writeUTF(v30)::
35382 :: EXPR :: assign :: Ljava/lang/Object :: v32 = v33 + #(1)::DD,35480
35466 :: EXPR :: reference :: Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone :: v63 = p0 $null .iTailZone::DD,35469
35469 :: PRED :: IF :: Z :: if (v63 == #(null)) goto 310::CD,35473
35473 :: CALL :: call :: V :: v64.writeTo(p1 $null )::CL,45294
35478 :: EXPR :: assign :: null :: PHI v15 = v14, #(0)::DD,35322:DD,35335
35479 :: EXPR :: assign :: null :: PHI v28 = v27, #(0)::JM,35362:JM,35357:DD,35367
35480 :: EXPR :: assign :: null :: PHI v33 = v32, #(0)::DD,35373:DD,35382
35572 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.readMillis(java.io.DataInput)::CE,35573:CD,35576:CD,35580:CD,35581:JM,35616:JM,35587:JM,35605:JM,35637:JM,35623:JM,35609:JM,35593:JM,35645:JM,35582:JM,35630:JM,35599
35573 :: EXIT :: exit :: J :: org.joda.time.tz.DateTimeZoneBuilder.readMillis(java.io.DataInput)::JM,35729:JM,35737:JM,35746
35576 :: CALL :: call :: I :: v4 = p1 $null .readUnsignedByte()::JM,35616:JM,35587:JM,35605:JM,35637:JM,35623:JM,35609:JM,35593:JM,35580:JM,35645:JM,35582:JM,35630:JM,35599
35580 :: EXPR :: assign :: Ljava/lang/Object :: v6 = v4 ? #(6)::CF,35581
35581 :: PRED :: IF :: null :: switch v6::CD,35582:CD,35583:CD,35584:CD,35585:CD,35586:CD,35587:CD,35588:CD,35589:CD,35593:CD,35594:CD,35595:CD,35599:CD,35600:CD,35601:CD,35605:CD,35606:CD,35607:CD,35608:CD,35609:CD,35610:CD,35611:CD,35612:CD,35616:CD,35617:CD,35618:CD,35619:CD,35623:CD,35624:CD,35625:CD,35626:CD,35630:CD,35631:CD,35632:CD,35633:CD,35637:CD,35638:CD,35639:CD,35640:CD,35641:CD,35645:JM,35580
35582 :: EXPR :: assign :: Ljava/lang/Object :: v55 = v4 ? #(26)::DD,35583
35583 :: EXPR :: assign :: Ljava/lang/Object :: v56 = v55 ? #(26)::DD,35584
35584 :: EXPR :: assign :: J :: v57 = CONVERT I to J v56::DD,35585
35585 :: EXPR :: assign :: Ljava/lang/Object :: v59 = v57 * #(1800000 l)::CF,35586
35586 :: NORM :: compound :: J :: return v59::DD,35573
35587 :: EXPR :: assign :: Ljava/lang/Object :: v38 = v4 ? #(26)::DD,35588
35588 :: EXPR :: assign :: Ljava/lang/Object :: v40 = v38 ? #(2)::DD,35594:JM,35616:JM,35587:JM,35605:JM,35637:JM,35623:JM,35609:JM,35593:JM,35580:JM,35645:JM,35582:JM,35630:JM,35599
35589 :: CALL :: call :: I :: v42 = p1 $null .readUnsignedByte()::JM,35616:JM,35587:JM,35605:JM,35637:JM,35623:JM,35609:JM,35593:JM,35580:JM,35645:JM,35582:JM,35630:JM,35599
35593 :: EXPR :: assign :: Ljava/lang/Object :: v43 = v42 ? #(16)::CF,35594
35594 :: EXPR :: assign :: Ljava/lang/Object :: v44 = v40 || v43::DD,35600:JM,35616:JM,35587:JM,35605:JM,35637:JM,35623:JM,35609:JM,35593:JM,35580:JM,35645:JM,35582:JM,35630:JM,35599
35595 :: CALL :: call :: I :: v46 = p1 $null .readUnsignedByte()::JM,35616:JM,35587:JM,35605:JM,35637:JM,35623:JM,35609:JM,35593:JM,35580:JM,35645:JM,35582:JM,35630:JM,35599
35599 :: EXPR :: assign :: Ljava/lang/Object :: v47 = v46 ? #(8)::CF,35600
35600 :: EXPR :: assign :: Ljava/lang/Object :: v48 = v44 || v47::DD,35605:JM,35616:JM,35587:JM,35637:JM,35623:JM,35609:JM,35593:JM,35580:JM,35645:JM,35582:JM,35630:JM,35599
35601 :: CALL :: call :: I :: v50 = p1 $null .readUnsignedByte()::JM,35616:JM,35587:JM,35605:JM,35637:JM,35623:JM,35609:JM,35593:JM,35580:JM,35645:JM,35582:JM,35630:JM,35599
35605 :: EXPR :: assign :: Ljava/lang/Object :: v51 = v48 || v50::DD,35606
35606 :: EXPR :: assign :: J :: v52 = CONVERT I to J v51::DD,35607
35607 :: EXPR :: assign :: Ljava/lang/Object :: v54 = v52 * #(60000 l)::CF,35608
35608 :: NORM :: compound :: J :: return v54::DD,35573
35609 :: EXPR :: assign :: J :: v9 = CONVERT I to J v4::DD,35610
35610 :: EXPR :: assign :: Ljava/lang/Object :: v11 = v9 ? #(58)::DD,35611
35611 :: EXPR :: assign :: Ljava/lang/Object :: v13 = v11 ? #(26)::DD,35618:JM,35616:JM,35587:JM,35605:JM,35637:JM,35623:JM,35609:JM,35593:JM,35580:JM,35645:JM,35582:JM,35630:JM,35599
35612 :: CALL :: call :: I :: v15 = p1 $null .readUnsignedByte()::JM,35616:JM,35587:JM,35605:JM,35637:JM,35623:JM,35609:JM,35593:JM,35580:JM,35645:JM,35582:JM,35630:JM,35599
35616 :: EXPR :: assign :: Ljava/lang/Object :: v17 = v15 ? #(24)::CF,35617
35617 :: EXPR :: assign :: J :: v18 = CONVERT I to J v17::CF,35618
35618 :: EXPR :: assign :: Ljava/lang/Object :: v19 = v13 || v18::DD,35625:JM,35616:JM,35587:JM,35605:JM,35637:JM,35623:JM,35609:JM,35593:JM,35580:JM,35645:JM,35582:JM,35630:JM,35599
35619 :: CALL :: call :: I :: v21 = p1 $null .readUnsignedByte()::JM,35616:JM,35587:JM,35605:JM,35637:JM,35623:JM,35609:JM,35593:JM,35580:JM,35645:JM,35582:JM,35630:JM,35599
35623 :: EXPR :: assign :: Ljava/lang/Object :: v23 = v21 ? #(16)::CF,35624
35624 :: EXPR :: assign :: J :: v24 = CONVERT I to J v23::CF,35625
35625 :: EXPR :: assign :: Ljava/lang/Object :: v25 = v19 || v24::DD,35632:JM,35616:JM,35587:JM,35605:JM,35637:JM,35623:JM,35609:JM,35593:JM,35580:JM,35645:JM,35582:JM,35630:JM,35599
35626 :: CALL :: call :: I :: v27 = p1 $null .readUnsignedByte()::JM,35616:JM,35587:JM,35605:JM,35637:JM,35623:JM,35609:JM,35593:JM,35580:JM,35645:JM,35582:JM,35630:JM,35599
35630 :: EXPR :: assign :: Ljava/lang/Object :: v29 = v27 ? #(8)::CF,35631
35631 :: EXPR :: assign :: J :: v30 = CONVERT I to J v29::CF,35632
35632 :: EXPR :: assign :: Ljava/lang/Object :: v31 = v25 || v30::DD,35638:JM,35616:JM,35587:JM,35605:JM,35637:JM,35623:JM,35609:JM,35593:JM,35580:JM,35645:JM,35582:JM,35630:JM,35599
35633 :: CALL :: call :: I :: v33 = p1 $null .readUnsignedByte()::JM,35616:JM,35587:JM,35605:JM,35637:JM,35623:JM,35609:JM,35593:JM,35580:JM,35645:JM,35582:JM,35630:JM,35599
35637 :: EXPR :: assign :: J :: v34 = CONVERT I to J v33::CF,35638
35638 :: EXPR :: assign :: Ljava/lang/Object :: v35 = v31 || v34::DD,35639
35639 :: EXPR :: assign :: Ljava/lang/Object :: v37 = v35 * #(1000 l)::CF,35640
35640 :: NORM :: compound :: J :: return v37::DD,35573
35641 :: CALL :: call :: J :: v8 = p1 $null .readLong()::JM,35616:JM,35587:JM,35605:JM,35637:JM,35623:JM,35609:JM,35593:JM,35580:JM,35645:JM,35582:JM,35630:JM,35599
35645 :: NORM :: compound :: J :: return v8::DD,35573
35695 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.readFrom(java.io.DataInput,java.lang.String)::CE,35696:CD,35700:CD,35704:CD,35705:CD,35716:CD,35720:CD,35721:CD,35722:CD,35723:CD,35724:CD,35770:CD,35778:CD,35782:CD,35788:JM,20785:JM,25330:JM,25318:JM,25321:JM,20779:JM,25324:JM,25327:CD,35798:CD,35800:CD,35801:JM,35751:JM,35802:JM,35710
35696 :: EXIT :: exit :: Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone :: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.readFrom(java.io.DataInput,java.lang.String)::JM,27487
35700 :: CALL :: call :: I :: v5 = p1 $null .readUnsignedShort()::JM,35782:JM,35751:JM,35704:JM,35720:JM,35705:JM,35721:JM,35722:JM,35802:JM,35723:JM,35724:JM,35710
35704 :: NORM :: declaration :: [Ljava/lang/String :: v6 = new java.lang.String[]::CF,35800
35705 :: PRED :: IF :: Z :: if (v12 >= v5) goto 38::CD,35706:CD,35714:CD,35800:JM,35782:JM,35751:JM,35704:JM,35720:JM,35705:JM,35721:JM,35722:JM,35802:JM,35723:JM,35724:JM,35710
35706 :: CALL :: call :: Ljava/lang/String :: v9 = p1 $null .readUTF()::JM,35782:JM,35751:JM,35704:JM,35720:JM,35705:JM,35721:JM,35722:JM,35802:JM,35723:JM,35724:JM,35710
35710 :: EXPR :: modify :: Ljava/lang/Object :: v6[v12] = v9::
35714 :: EXPR :: assign :: Ljava/lang/Object :: v11 = v12 + #(1)::DD,35800
35716 :: CALL :: call :: I :: v14 = p1 $null .readInt()::JM,35782:JM,35751:JM,35704:JM,35720:JM,35705:JM,35721:JM,35722:JM,35802:JM,35723:JM,35724:JM,35710
35720 :: NORM :: declaration :: [J :: v15 = new []::CF,35721
35721 :: NORM :: declaration :: [I :: v16 = new []::CF,35722
35722 :: NORM :: declaration :: [I :: v17 = new []::CF,35723
35723 :: NORM :: declaration :: [Ljava/lang/String :: v18 = new java.lang.String[]::CF,35801
35724 :: PRED :: IF :: Z :: if (v35 >= v14) goto 169::CD,35725:CD,35733:CD,35737:CD,35742:CD,35746:CD,35751:CD,35776:CD,35801:CD,35802:JM,35782:JM,35704:JM,35720:JM,35705:JM,35721:JM,35722:JM,35723:JM,35724:JM,35710
35725 :: CALL :: call :: J :: v20 = readMillis(p1 $null )::JM,35729:CL,35572
35729 :: EXPR :: modify :: J :: v15[v35] = v20::
35733 :: CALL :: call :: J :: v22 = readMillis(p1 $null )::JM,35737:CL,35572
35737 :: EXPR :: assign :: I :: v23 = CONVERT J to I v22::DD,35738
35738 :: EXPR :: modify :: I :: v16[v35] = v23::
35742 :: CALL :: call :: J :: v25 = readMillis(p1 $null )::JM,35746:CL,35572
35746 :: EXPR :: assign :: I :: v26 = CONVERT J to I v25::DD,35747
35747 :: EXPR :: modify :: I :: v17[v35] = v26::
35751 :: PRED :: IF :: Z :: if (v5 >= #(256)) goto 128::CD,35752:CD,35757:CD,35802:JM,35782:JM,35751:JM,35704:JM,35720:JM,35705:JM,35721:JM,35722:JM,35723:JM,35724:JM,35710
35752 :: CALL :: call :: I :: v29 = p1 $null .readUnsignedByte()::JM,35782:JM,35751:JM,35704:JM,35720:JM,35705:JM,35721:JM,35722:JM,35802:JM,35723:JM,35724:JM,35710
35757 :: CALL :: call :: I :: v31 = p1 $null .readUnsignedShort()::JM,35782:JM,35751:JM,35704:JM,35720:JM,35705:JM,35721:JM,35722:JM,35802:JM,35723:JM,35724:JM,35710
35761 :: EXPR :: reference :: Ljava/lang/Object :: v33 = v6[v32]::DD,35765
35765 :: EXPR :: modify :: Ljava/lang/Object :: v18[v35] = v33::
35770 :: NORM :: declaration :: Ljava/io/IOException :: v45 = new java.io.IOException::
35776 :: EXPR :: assign :: Ljava/lang/Object :: v34 = v35 + #(1)::DD,35801
35778 :: CALL :: call :: Z :: v38 = p1 $null .readBoolean()::JM,35782:JM,35751:JM,35704:JM,35720:JM,35705:JM,35721:JM,35722:JM,35802:JM,35723:JM,35724:JM,35710
35782 :: PRED :: IF :: Z :: if (v38 == #(0)) goto 184::CD,35783
35783 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone :: v40 = readFrom(p1 $null , p2 $null )::CL,45328
35788 :: NORM :: declaration :: Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone :: v42 = new org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone::DD,35798
35798 :: NORM :: compound :: Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone :: return v42::DD,35696
35800 :: EXPR :: assign :: null :: PHI v12 = v11, #(0)::DD,35705:DD,35714
35801 :: EXPR :: assign :: null :: PHI v35 = v34, #(0)::DD,35724:DD,35776
35802 :: EXPR :: assign :: null :: PHI v32 = v29, v31::
35865 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.OfYear.equals(java.lang.Object)::CE,35866:CD,35870:JM,35872:JM,35874
35866 :: EXIT :: exit :: Z :: org.joda.time.tz.DateTimeZoneBuilder.OfYear.equals(java.lang.Object)::JM,27550
35870 :: PRED :: IF :: Z :: if (p0 $null  != p1 $null ) goto 8::CD,35871:CD,35872:CD,35873
35871 :: NORM :: compound :: Z :: return #(1)::CF,35866
35872 :: EXPR :: assign :: Z :: v4=p1 $null  INSTANCEOF org.joda.time.tz.DateTimeZoneBuilder$OfYear::DD,35873
35873 :: PRED :: IF :: Z :: if (v4 == #(0)) goto 92::CD,35874:CD,35881:CD,35918:CD,35919:CD,35920
35874 :: EXPR :: assign :: Ljava/lang/Object :: v6 = CHECKCAST p1 $null ::
35875 :: EXPR :: reference :: C :: v7 = p0 $null .iMode::DD,35881
35878 :: EXPR :: reference :: C :: v8 = v6.iMode::DD,35881
35881 :: PRED :: IF :: Z :: if (v7 != v8) goto 90::CD,35888:CD,35920
35882 :: EXPR :: reference :: I :: v9 = p0 $null .iMonthOfYear::DD,35888
35885 :: EXPR :: reference :: I :: v10 = v6.iMonthOfYear::DD,35888
35888 :: PRED :: IF :: Z :: if (v9 != v10) goto 90::CD,35895:CD,35920
35889 :: EXPR :: reference :: I :: v11 = p0 $null .iDayOfMonth::DD,35895
35892 :: EXPR :: reference :: I :: v12 = v6.iDayOfMonth::DD,35895
35895 :: PRED :: IF :: Z :: if (v11 != v12) goto 90::CD,35902:CD,35920
35896 :: EXPR :: reference :: I :: v13 = p0 $null .iDayOfWeek::DD,35902
35899 :: EXPR :: reference :: I :: v14 = v6.iDayOfWeek::DD,35902
35902 :: PRED :: IF :: Z :: if (v13 != v14) goto 90::CD,35909:CD,35920
35903 :: EXPR :: reference :: Z :: v15 = p0 $null .iAdvance::DD,35909
35906 :: EXPR :: reference :: Z :: v16 = v6.iAdvance::DD,35909
35909 :: PRED :: IF :: Z :: if (v15 != v16) goto 90::CD,35916:CD,35920
35910 :: EXPR :: reference :: I :: v17 = p0 $null .iMillisOfDay::DD,35916
35913 :: EXPR :: reference :: I :: v18 = v6.iMillisOfDay::DD,35916
35916 :: PRED :: IF :: Z :: if (v17 != v18) goto 90::CD,35920
35918 :: NORM :: compound :: Z :: return v20::CF,35866
35919 :: NORM :: compound :: Z :: return #(0)::CF,35866
35920 :: EXPR :: assign :: null :: PHI v20 = #(1), #(0)::CF,35918
36000 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoLogger.1.initialValue()::CF,36001:CD,36004:CD,36006
36001 :: EXIT :: exit :: Ljava/lang/Boolean :: org.joda.time.tz.ZoneInfoLogger.1.initialValue()::JM,27594
36004 :: EXPR :: reference :: Ljava/lang/Boolean :: v3 = java.lang.Boolean.FALSE::CF,36006
36006 :: NORM :: compound :: Ljava/lang/Boolean :: return v3::CF,36001
36041 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getDaysInMonthMax()::CF,36042:CD,36045
36042 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicChronology.getDaysInMonthMax()::JM,27934
36045 :: NORM :: compound :: I :: return #(31)::CF,36042
36047 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getYearInfo(int)::CE,36048:CD,36055:CD,36060:CD,36084:CD,36085:JM,36064:JM,36079
36048 :: EXIT :: exit :: Lorg/joda/time/chrono/BasicChronology$YearInfo :: org.joda.time.chrono.BasicChronology.getYearInfo(int)::
36052 :: EXPR :: reference :: [Lorg/joda/time/chrono/BasicChronology$YearInfo :: v4 = p0 $null .iYearInfoCache::
36055 :: EXPR :: assign :: Ljava/lang/Object :: v6 = p1 $null  && #(1023)::
36056 :: EXPR :: reference :: Ljava/lang/Object :: v7 = v4[v6]::DD,36060:DD,36085
36060 :: PRED :: IF :: Z :: if (v7 == #(null)) goto 23::CF,36065:CD,36064:JM,45559:JM,45562:CD,36079:CD,36085
36061 :: EXPR :: reference :: I :: v9 = v7.iYear::DD,36064
36064 :: PRED :: IF :: Z :: if (v9 == p1 $null ) goto 49::CF,36085:CF,36065:JM,45559:JM,45562:CD,36079
36065 :: NORM :: declaration :: Lorg/joda/time/chrono/BasicChronology$YearInfo :: v10 = new org.joda.time.chrono.BasicChronology$YearInfo::DD,36080:DD,36085
36076 :: EXPR :: reference :: [Lorg/joda/time/chrono/BasicChronology$YearInfo :: v14 = p0 $null .iYearInfoCache::
36079 :: EXPR :: assign :: Ljava/lang/Object :: v15 = p1 $null  && #(1023)::
36080 :: EXPR :: modify :: Ljava/lang/Object :: v14[v15] = v10::
36084 :: NORM :: compound :: Lorg/joda/time/chrono/BasicChronology$YearInfo :: return v16::DD,36048
36085 :: EXPR :: assign :: null :: PHI v16 = v7, v10::CF,36084
36121 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.Fields.copyFieldsFrom(org.joda.time.Chronology)::CD,36126:CD,36130:CD,36134:CD,36138:CD,36142:CD,36146:CD,36150:CD,36154:CD,36158:CD,36162:CD,36166:CD,36170:CD,36174:CD,36178:CD,36182:CD,36186:CD,36190:CD,36194:CD,36198:CD,36202:CD,36206:CD,36210:CD,36214:CD,36218:CD,36222:CD,36226:CD,36230:CD,36234:CD,36238:CD,36242:CD,36246:CD,36250:CD,36254:CD,36258:CD,36262:CD,36266:CD,36270:CD,36274:CD,36278:CD,36282:CD,36286:CD,36290:CD,36294:CD,36298:CD,36302:CD,36306:CD,36310:CD,36314:CD,36318:CD,36322:CD,36326:CD,36330:CD,36334:CD,36338:CD,36342:CD,36346:CD,36350:CD,36354:CD,36358:CD,36362:CD,36366:CD,36370:CD,36374:CD,36378:CD,36382:CD,36386:CD,36390:CD,36394:CD,36398:CD,36402:CD,36406:CD,36410:CD,36414:CD,36418:CD,36422:CD,36426:CD,36430:CD,36434:CD,36438:CD,36442:CD,36446:CD,36450:CD,36454:CD,36458:CD,36462:CD,36466:CD,36470:CD,36474:CD,36478:CD,36482:CD,36486:CD,36490:CD,36494:CD,36498:CD,36502:CD,36506:CD,36510:CD,36514:CD,36518:CD,36522:CD,36526:CD,36530:CD,36534:CD,36538:CD,36542
36126 :: CALL :: call :: Lorg/joda/time/DurationField :: v5 = p1 $null .millis()::JM,36135:CL,44456
36130 :: CALL :: call :: Z :: v7 = isSupported(v5)::JM,36134:CL,45571
36134 :: PRED :: IF :: Z :: if (v7 == #(0)) goto 18::
36135 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .millis = v5::
36138 :: CALL :: call :: Lorg/joda/time/DurationField :: v10 = p1 $null .seconds()::JM,36147:CL,44447
36142 :: CALL :: call :: Z :: v12 = isSupported(v10)::JM,36146:CL,45571
36146 :: PRED :: IF :: Z :: if (v12 == #(0)) goto 35::
36147 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .seconds = v10::
36150 :: CALL :: call :: Lorg/joda/time/DurationField :: v14 = p1 $null .minutes()::JM,36159:CL,44438
36154 :: CALL :: call :: Z :: v16 = isSupported(v14)::JM,36158:CL,45571
36158 :: PRED :: IF :: Z :: if (v16 == #(0)) goto 52::
36159 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .minutes = v14::
36162 :: CALL :: call :: Lorg/joda/time/DurationField :: v18 = p1 $null .hours()::JM,36171:CL,44429
36166 :: CALL :: call :: Z :: v20 = isSupported(v18)::JM,36170:CL,45571
36170 :: PRED :: IF :: Z :: if (v20 == #(0)) goto 69::
36171 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .hours = v18::
36174 :: CALL :: call :: Lorg/joda/time/DurationField :: v22 = p1 $null .halfdays()::JM,36183:CL,44420
36178 :: CALL :: call :: Z :: v24 = isSupported(v22)::JM,36182:CL,45571
36182 :: PRED :: IF :: Z :: if (v24 == #(0)) goto 86::
36183 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .halfdays = v22::
36186 :: CALL :: call :: Lorg/joda/time/DurationField :: v26 = p1 $null .days()::JM,36195:CL,40263
36190 :: CALL :: call :: Z :: v28 = isSupported(v26)::JM,36194:CL,45571
36194 :: PRED :: IF :: Z :: if (v28 == #(0)) goto 103::
36195 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .days = v26::
36198 :: CALL :: call :: Lorg/joda/time/DurationField :: v30 = p1 $null .weeks()::JM,36207:CL,44411
36202 :: CALL :: call :: Z :: v32 = isSupported(v30)::JM,36206:CL,45571
36206 :: PRED :: IF :: Z :: if (v32 == #(0)) goto 120::
36207 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .weeks = v30::
36210 :: CALL :: call :: Lorg/joda/time/DurationField :: v34 = p1 $null .weekyears()::JM,36219:CL,44402
36214 :: CALL :: call :: Z :: v36 = isSupported(v34)::JM,36218:CL,45571
36218 :: PRED :: IF :: Z :: if (v36 == #(0)) goto 137::
36219 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .weekyears = v34::
36222 :: CALL :: call :: Lorg/joda/time/DurationField :: v38 = p1 $null .months()::JM,36231:CL,40199
36226 :: CALL :: call :: Z :: v40 = isSupported(v38)::JM,36230:CL,45571
36230 :: PRED :: IF :: Z :: if (v40 == #(0)) goto 154::
36231 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .months = v38::
36234 :: CALL :: call :: Lorg/joda/time/DurationField :: v42 = p1 $null .years()::JM,36243:CL,44363
36238 :: CALL :: call :: Z :: v44 = isSupported(v42)::JM,36242:CL,45571
36242 :: PRED :: IF :: Z :: if (v44 == #(0)) goto 171::
36243 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .years = v42::
36246 :: CALL :: call :: Lorg/joda/time/DurationField :: v46 = p1 $null .centuries()::JM,36255:CL,44379
36250 :: CALL :: call :: Z :: v48 = isSupported(v46)::JM,36254:CL,45571
36254 :: PRED :: IF :: Z :: if (v48 == #(0)) goto 188::
36255 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .centuries = v46::
36258 :: CALL :: call :: Lorg/joda/time/DurationField :: v50 = p1 $null .eras()::JM,36267:CL,44283
36262 :: CALL :: call :: Z :: v52 = isSupported(v50)::JM,36266:CL,45571
36266 :: PRED :: IF :: Z :: if (v52 == #(0)) goto 205::
36267 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .eras = v50::
36270 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v54 = p1 $null .millisOfSecond()::JM,36279:CL,33407
36274 :: CALL :: call :: Z :: v56 = isSupported(v54)::JM,36278:CL,45587
36278 :: PRED :: IF :: Z :: if (v56 == #(0)) goto 222::
36279 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .millisOfSecond = v54::
36282 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v58 = p1 $null .millisOfDay()::JM,36291:CL,32442
36286 :: CALL :: call :: Z :: v60 = isSupported(v58)::JM,36290:CL,45587
36290 :: PRED :: IF :: Z :: if (v60 == #(0)) goto 239::
36291 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .millisOfDay = v58::
36294 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v62 = p1 $null .secondOfMinute()::JM,36303:CL,33362
36298 :: CALL :: call :: Z :: v64 = isSupported(v62)::JM,36302:CL,45587
36302 :: PRED :: IF :: Z :: if (v64 == #(0)) goto 256::
36303 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .secondOfMinute = v62::
36306 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v66 = p1 $null .secondOfDay()::JM,36315:CL,33335
36310 :: CALL :: call :: Z :: v68 = isSupported(v66)::JM,36314:CL,45587
36314 :: PRED :: IF :: Z :: if (v68 == #(0)) goto 273::
36315 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .secondOfDay = v66::
36318 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v70 = p1 $null .minuteOfHour()::JM,36327:CL,33308
36322 :: CALL :: call :: Z :: v72 = isSupported(v70)::JM,36326:CL,45587
36326 :: PRED :: IF :: Z :: if (v72 == #(0)) goto 290::
36327 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .minuteOfHour = v70::
36330 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v74 = p1 $null .minuteOfDay()::JM,36339:CL,33281
36334 :: CALL :: call :: Z :: v76 = isSupported(v74)::JM,36338:CL,45587
36338 :: PRED :: IF :: Z :: if (v76 == #(0)) goto 307::
36339 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .minuteOfDay = v74::
36342 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v78 = p1 $null .hourOfDay()::JM,36351:CL,33254
36346 :: CALL :: call :: Z :: v80 = isSupported(v78)::JM,36350:CL,45587
36350 :: PRED :: IF :: Z :: if (v80 == #(0)) goto 324::
36351 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .hourOfDay = v78::
36354 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v82 = p1 $null .clockhourOfDay()::JM,36363:CL,33227
36358 :: CALL :: call :: Z :: v84 = isSupported(v82)::JM,36362:CL,45587
36362 :: PRED :: IF :: Z :: if (v84 == #(0)) goto 341::
36363 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .clockhourOfDay = v82::
36366 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v86 = p1 $null .hourOfHalfday()::JM,36375:CL,33173
36370 :: CALL :: call :: Z :: v88 = isSupported(v86)::JM,36374:CL,45587
36374 :: PRED :: IF :: Z :: if (v88 == #(0)) goto 358::
36375 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .hourOfHalfday = v86::
36378 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v90 = p1 $null .clockhourOfHalfday()::JM,36387:CL,33218
36382 :: CALL :: call :: Z :: v92 = isSupported(v90)::JM,36386:CL,45587
36386 :: PRED :: IF :: Z :: if (v92 == #(0)) goto 375::
36387 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .clockhourOfHalfday = v90::
36390 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v94 = p1 $null .halfdayOfDay()::JM,36399:CL,33164
36394 :: CALL :: call :: Z :: v96 = isSupported(v94)::JM,36398:CL,45587
36398 :: PRED :: IF :: Z :: if (v96 == #(0)) goto 392::
36399 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .halfdayOfDay = v94::
36402 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v98 = p1 $null .dayOfWeek()::JM,36411:CL,26576
36406 :: CALL :: call :: Z :: v100 = isSupported(v98)::JM,36410:CL,45587
36410 :: PRED :: IF :: Z :: if (v100 == #(0)) goto 409::
36411 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .dayOfWeek = v98::
36414 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v102 = p1 $null .dayOfMonth()::JM,36423:CL,33038
36418 :: CALL :: call :: Z :: v104 = isSupported(v102)::JM,36422:CL,45587
36422 :: PRED :: IF :: Z :: if (v104 == #(0)) goto 426::
36423 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .dayOfMonth = v102::
36426 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v106 = p1 $null .dayOfYear()::JM,36435:CL,32975
36430 :: CALL :: call :: Z :: v108 = isSupported(v106)::JM,36434:CL,45587
36434 :: PRED :: IF :: Z :: if (v108 == #(0)) goto 443::
36435 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .dayOfYear = v106::
36438 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v110 = p1 $null .weekOfWeekyear()::JM,36447:CL,33101
36442 :: CALL :: call :: Z :: v112 = isSupported(v110)::JM,36446:CL,45587
36446 :: PRED :: IF :: Z :: if (v112 == #(0)) goto 460::
36447 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .weekOfWeekyear = v110::
36450 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v114 = p1 $null .weekyear()::JM,36459:CL,33092
36454 :: CALL :: call :: Z :: v116 = isSupported(v114)::JM,36458:CL,45587
36458 :: PRED :: IF :: Z :: if (v116 == #(0)) goto 477::
36459 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .weekyear = v114::
36462 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v118 = p1 $null .weekyearOfCentury()::JM,36471:CL,33047
36466 :: CALL :: call :: Z :: v120 = isSupported(v118)::JM,36470:CL,45587
36470 :: PRED :: IF :: Z :: if (v120 == #(0)) goto 494::
36471 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .weekyearOfCentury = v118::
36474 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v122 = p1 $null .monthOfYear()::JM,36483:CL,32433
36478 :: CALL :: call :: Z :: v124 = isSupported(v122)::JM,36482:CL,45587
36482 :: PRED :: IF :: Z :: if (v124 == #(0)) goto 511::
36483 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .monthOfYear = v122::
36486 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v126 = p1 $null .year()::JM,36495:CL,10978
36490 :: CALL :: call :: Z :: v128 = isSupported(v126)::JM,36494:CL,45587
36494 :: PRED :: IF :: Z :: if (v128 == #(0)) goto 528::
36495 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .year = v126::
36498 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v130 = p1 $null .yearOfEra()::JM,36507:CL,32876
36502 :: CALL :: call :: Z :: v132 = isSupported(v130)::JM,36506:CL,45587
36506 :: PRED :: IF :: Z :: if (v132 == #(0)) goto 545::
36507 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .yearOfEra = v130::
36510 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v134 = p1 $null .yearOfCentury()::JM,36519:CL,32930
36514 :: CALL :: call :: Z :: v136 = isSupported(v134)::JM,36518:CL,45587
36518 :: PRED :: IF :: Z :: if (v136 == #(0)) goto 562::
36519 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .yearOfCentury = v134::
36522 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v138 = p1 $null .centuryOfEra()::JM,36531:CL,32903
36526 :: CALL :: call :: Z :: v140 = isSupported(v138)::JM,36530:CL,45587
36530 :: PRED :: IF :: Z :: if (v140 == #(0)) goto 579::
36531 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .centuryOfEra = v138::
36534 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v142 = p1 $null .era()::JM,36543:CL,32849
36538 :: CALL :: call :: Z :: v144 = isSupported(v142)::JM,36542:CL,45587
36542 :: PRED :: IF :: Z :: if (v144 == #(0)) goto 595::
36543 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .era = v142::
36757 :: ENTR :: entry :: null :: org.joda.time.chrono.LenientChronology.assemble(org.joda.time.chrono.AssembledChronology.Fields)::CD,36765:CD,36776:CD,36787:CD,36798:CD,36809:CD,36820:CD,36831:CD,36842:CD,36853:CD,36864:CD,36875:CD,36886:CD,36897:CD,36908:CD,36919:CD,36930:CD,36941:CD,36952:CD,36963:CD,36974:CD,36985:CD,36996:CD,37007
36765 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v6 = p0 $null .convertField(v4)::JM,36770:CL,45603
36770 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .year = v6::
36776 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v9 = p0 $null .convertField(v7)::JM,36781:CL,45603
36781 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .yearOfEra = v9::
36787 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v12 = p0 $null .convertField(v10)::JM,36792:CL,45603
36792 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .yearOfCentury = v12::
36798 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v15 = p0 $null .convertField(v13)::JM,36803:CL,45603
36803 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .centuryOfEra = v15::
36809 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v18 = p0 $null .convertField(v16)::JM,36814:CL,45603
36814 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .era = v18::
36820 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v21 = p0 $null .convertField(v19)::JM,36825:CL,45603
36825 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .dayOfWeek = v21::
36831 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v24 = p0 $null .convertField(v22)::JM,36836:CL,45603
36836 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .dayOfMonth = v24::
36842 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v27 = p0 $null .convertField(v25)::JM,36847:CL,45603
36847 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .dayOfYear = v27::
36853 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v30 = p0 $null .convertField(v28)::JM,36858:CL,45603
36858 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .monthOfYear = v30::
36864 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v33 = p0 $null .convertField(v31)::JM,36869:CL,45603
36869 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .weekOfWeekyear = v33::
36875 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v36 = p0 $null .convertField(v34)::JM,36880:CL,45603
36880 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .weekyear = v36::
36886 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v39 = p0 $null .convertField(v37)::JM,36891:CL,45603
36891 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .weekyearOfCentury = v39::
36897 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v42 = p0 $null .convertField(v40)::JM,36902:CL,45603
36902 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .millisOfSecond = v42::
36908 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v45 = p0 $null .convertField(v43)::JM,36913:CL,45603
36913 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .millisOfDay = v45::
36919 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v48 = p0 $null .convertField(v46)::JM,36924:CL,45603
36924 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .secondOfMinute = v48::
36930 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v51 = p0 $null .convertField(v49)::JM,36935:CL,45603
36935 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .secondOfDay = v51::
36941 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v54 = p0 $null .convertField(v52)::JM,36946:CL,45603
36946 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .minuteOfHour = v54::
36952 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v57 = p0 $null .convertField(v55)::JM,36957:CL,45603
36957 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .minuteOfDay = v57::
36963 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v60 = p0 $null .convertField(v58)::JM,36968:CL,45603
36968 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .hourOfDay = v60::
36974 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v63 = p0 $null .convertField(v61)::JM,36979:CL,45603
36979 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .hourOfHalfday = v63::
36985 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v66 = p0 $null .convertField(v64)::JM,36990:CL,45603
36990 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .clockhourOfDay = v66::
36996 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v69 = p0 $null .convertField(v67)::JM,37001:CL,45603
37001 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .clockhourOfHalfday = v69::
37007 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v72 = p0 $null .convertField(v70)::JM,37012:CL,45603
37012 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .halfdayOfDay = v72::
37085 :: ENTR :: entry :: null :: org.joda.time.chrono.GregorianChronology.assemble(org.joda.time.chrono.AssembledChronology.Fields)::CD,37090:CD,37094
37090 :: CALL :: call :: Lorg/joda/time/Chronology :: v5 = p0 $null .getBase()::JM,37094:CL,32840
37094 :: PRED :: IF :: Z :: if (v5 != #(null)) goto 12::CD,37095
37095 :: CALL :: call :: V :: p0 $null .assemble(p1 $null )::CL,45620
37104 :: ENTR :: entry :: null :: org.joda.time.chrono.ISOChronology.assemble(org.joda.time.chrono.AssembledChronology.Fields)::CD,37113:CD,37117:CD,37119
37113 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v7 = v5.getZone()::JM,37119:CL,25659:CL,25670:CL,25639
37117 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v8 = org.joda.time.DateTimeZone.UTC::CF,37119
37119 :: PRED :: IF :: Z :: if (v7 != v8) goto 89::CD,37120:JM,51808:JM,51841:JM,51842:JM,29378:JM,51812:JM,51845:JM,51847:JM,21193:JM,51851:JM,51852:JM,51855:JM,21204:JM,51831:JM,51864:JM,51865:JM,51834:JM,21210:JM,29372:JM,51837:CD,37138:CD,37145:JM,46056:JM,46093:CD,37161
37120 :: NORM :: declaration :: Lorg/joda/time/field/DividedDateTimeField :: v9 = new org.joda.time.field.DividedDateTimeField::DD,37132
37132 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .centuryOfEra = v9::
37138 :: CALL :: call :: Lorg/joda/time/DurationField :: v17 = v15.getDurationField()::JM,37142:CL,33678:CL,33687:CL,44465:CL,33709:CL,33730:CL,33718:CL,33933:CL,33669:CL,33700
37142 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .centuries = v17::
37145 :: NORM :: declaration :: Lorg/joda/time/field/RemainderDateTimeField :: v18 = new org.joda.time.field.RemainderDateTimeField::DD,37158
37158 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .yearOfCentury = v18::
37161 :: NORM :: declaration :: Lorg/joda/time/field/RemainderDateTimeField :: v24 = new org.joda.time.field.RemainderDateTimeField::DD,37178
37178 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .weekyearOfCentury = v24::
37197 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.assemble(org.joda.time.chrono.AssembledChronology.Fields)::CD,37202:CD,37209:CD,37221:CD,37233:CD,37245:CD,37257:CD,37269:CD,37281:CD,37293:CD,37305:CD,37317:CD,37329:CD,37341:CD,37353:CD,37365:CD,37377:CD,37389:CD,37401:CD,37413:CD,37425:CD,37437:CD,37449:CD,37461:CD,37473:CD,37485:CD,37497:CD,37509:CD,37521:CD,37533:CD,37545:CD,37557:CD,37569:CD,37581:CD,37593:CD,37605:CD,37617
37202 :: NORM :: declaration :: Ljava/util/HashMap :: v4 = new java.util.HashMap::
37209 :: CALL :: call :: Lorg/joda/time/DurationField :: v8 = p0 $null .convertField(v6, v4)::JM,37215:CL,46112
37215 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .eras = v8::
37221 :: CALL :: call :: Lorg/joda/time/DurationField :: v11 = p0 $null .convertField(v9, v4)::JM,37227:CL,46112
37227 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .centuries = v11::
37233 :: CALL :: call :: Lorg/joda/time/DurationField :: v14 = p0 $null .convertField(v12, v4)::JM,37239:CL,46112
37239 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .years = v14::
37245 :: CALL :: call :: Lorg/joda/time/DurationField :: v17 = p0 $null .convertField(v15, v4)::JM,37251:CL,46112
37251 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .months = v17::
37257 :: CALL :: call :: Lorg/joda/time/DurationField :: v20 = p0 $null .convertField(v18, v4)::JM,37263:CL,46112
37263 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .weekyears = v20::
37269 :: CALL :: call :: Lorg/joda/time/DurationField :: v23 = p0 $null .convertField(v21, v4)::JM,37275:CL,46112
37275 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .weeks = v23::
37281 :: CALL :: call :: Lorg/joda/time/DurationField :: v26 = p0 $null .convertField(v24, v4)::JM,37287:CL,46112
37287 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .days = v26::
37293 :: CALL :: call :: Lorg/joda/time/DurationField :: v29 = p0 $null .convertField(v27, v4)::JM,37299:CL,46112
37299 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .halfdays = v29::
37305 :: CALL :: call :: Lorg/joda/time/DurationField :: v32 = p0 $null .convertField(v30, v4)::JM,37311:CL,46112
37311 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .hours = v32::
37317 :: CALL :: call :: Lorg/joda/time/DurationField :: v35 = p0 $null .convertField(v33, v4)::JM,37323:CL,46112
37323 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .minutes = v35::
37329 :: CALL :: call :: Lorg/joda/time/DurationField :: v38 = p0 $null .convertField(v36, v4)::JM,37335:CL,46112
37335 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .seconds = v38::
37341 :: CALL :: call :: Lorg/joda/time/DurationField :: v41 = p0 $null .convertField(v39, v4)::JM,37347:CL,46112
37347 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .millis = v41::
37353 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v44 = p0 $null .convertField(v42, v4)::JM,37359:CL,46174
37359 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .year = v44::
37365 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v47 = p0 $null .convertField(v45, v4)::JM,37371:CL,46174
37371 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .yearOfEra = v47::
37377 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v50 = p0 $null .convertField(v48, v4)::JM,37383:CL,46174
37383 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .yearOfCentury = v50::
37389 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v53 = p0 $null .convertField(v51, v4)::JM,37395:CL,46174
37395 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .centuryOfEra = v53::
37401 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v56 = p0 $null .convertField(v54, v4)::JM,37407:CL,46174
37407 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .era = v56::
37413 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v59 = p0 $null .convertField(v57, v4)::JM,37419:CL,46174
37419 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .dayOfWeek = v59::
37425 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v62 = p0 $null .convertField(v60, v4)::JM,37431:CL,46174
37431 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .dayOfMonth = v62::
37437 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v65 = p0 $null .convertField(v63, v4)::JM,37443:CL,46174
37443 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .dayOfYear = v65::
37449 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v68 = p0 $null .convertField(v66, v4)::JM,37455:CL,46174
37455 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .monthOfYear = v68::
37461 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v71 = p0 $null .convertField(v69, v4)::JM,37467:CL,46174
37467 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .weekOfWeekyear = v71::
37473 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v74 = p0 $null .convertField(v72, v4)::JM,37479:CL,46174
37479 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .weekyear = v74::
37485 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v77 = p0 $null .convertField(v75, v4)::JM,37491:CL,46174
37491 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .weekyearOfCentury = v77::
37497 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v80 = p0 $null .convertField(v78, v4)::JM,37503:CL,46174
37503 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .millisOfSecond = v80::
37509 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v83 = p0 $null .convertField(v81, v4)::JM,37515:CL,46174
37515 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .millisOfDay = v83::
37521 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v86 = p0 $null .convertField(v84, v4)::JM,37527:CL,46174
37527 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .secondOfMinute = v86::
37533 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v89 = p0 $null .convertField(v87, v4)::JM,37539:CL,46174
37539 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .secondOfDay = v89::
37545 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v92 = p0 $null .convertField(v90, v4)::JM,37551:CL,46174
37551 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .minuteOfHour = v92::
37557 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v95 = p0 $null .convertField(v93, v4)::JM,37563:CL,46174
37563 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .minuteOfDay = v95::
37569 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v98 = p0 $null .convertField(v96, v4)::JM,37575:CL,46174
37575 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .hourOfDay = v98::
37581 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v101 = p0 $null .convertField(v99, v4)::JM,37587:CL,46174
37587 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .hourOfHalfday = v101::
37593 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v104 = p0 $null .convertField(v102, v4)::JM,37599:CL,46174
37599 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .clockhourOfDay = v104::
37605 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v107 = p0 $null .convertField(v105, v4)::JM,37611:CL,46174
37611 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .clockhourOfHalfday = v107::
37617 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v110 = p0 $null .convertField(v108, v4)::JM,37623:CL,46174
37623 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .halfdayOfDay = v110::
37769 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.millis()::CE,37770:CD,37776:CD,37780
37770 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.BaseChronology.millis()::JM,28644
37776 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDurationField :: v6 = getInstance(v4)::JM,37780:CL,44478
37780 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v6::DD,37770
37781 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.seconds()::CE,37782:CD,37788:CD,37792
37782 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.BaseChronology.seconds()::JM,28645
37788 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDurationField :: v6 = getInstance(v4)::JM,37792:CL,44478
37792 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v6::DD,37782
37793 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.minutes()::CE,37794:CD,37800:CD,37804
37794 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.BaseChronology.minutes()::JM,28646
37800 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDurationField :: v6 = getInstance(v4)::JM,37804:CL,44478
37804 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v6::DD,37794
37805 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.hours()::CE,37806:CD,37812:CD,37816
37806 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.BaseChronology.hours()::JM,28647
37812 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDurationField :: v6 = getInstance(v4)::JM,37816:CL,44478
37816 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v6::DD,37806
37817 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.halfdays()::CE,37818:CD,37824:CD,37828
37818 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.BaseChronology.halfdays()::JM,28648
37824 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDurationField :: v6 = getInstance(v4)::JM,37828:CL,44478
37828 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v6::DD,37818
37829 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.days()::CE,37830:CD,37836:CD,37840
37830 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.BaseChronology.days()::JM,28649
37836 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDurationField :: v6 = getInstance(v4)::JM,37840:CL,44478
37840 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v6::DD,37830
37841 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.weeks()::CE,37842:CD,37848:CD,37852
37842 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.BaseChronology.weeks()::JM,28650
37848 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDurationField :: v6 = getInstance(v4)::JM,37852:CL,44478
37852 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v6::DD,37842
37853 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.weekyears()::CE,37854:CD,37860:CD,37864
37854 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.BaseChronology.weekyears()::JM,28651
37860 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDurationField :: v6 = getInstance(v4)::JM,37864:CL,44478
37864 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v6::DD,37854
37865 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.months()::CE,37866:CD,37872:CD,37876
37866 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.BaseChronology.months()::JM,28652
37872 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDurationField :: v6 = getInstance(v4)::JM,37876:CL,44478
37876 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v6::DD,37866
37877 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.years()::CE,37878:CD,37884:CD,37888
37878 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.BaseChronology.years()::JM,28653
37884 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDurationField :: v6 = getInstance(v4)::JM,37888:CL,44478
37888 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v6::DD,37878
37889 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.centuries()::CE,37890:CD,37896:CD,37900
37890 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.BaseChronology.centuries()::JM,28654
37896 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDurationField :: v6 = getInstance(v4)::JM,37900:CL,44478
37900 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v6::DD,37890
37901 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.eras()::CE,37902:CD,37908:CD,37912
37902 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.BaseChronology.eras()::JM,28655
37908 :: CALL :: call :: Lorg/joda/time/field/UnsupportedDurationField :: v6 = getInstance(v4)::JM,37912:CL,44478
37912 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v6::DD,37902
37943 :: ENTR :: entry :: null :: org.joda.time.DateTimeUtils.getPeriodType(org.joda.time.PeriodType)::CE,37944:CD,37947:JM,37952
37944 :: EXIT :: exit :: Lorg/joda/time/PeriodType :: org.joda.time.DateTimeUtils.getPeriodType(org.joda.time.PeriodType)::JM,29055
37947 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 9::CD,37948:CD,37951:CD,37952
37948 :: CALL :: call :: Lorg/joda/time/PeriodType :: v5 = standard()::JM,37951:CL,46314
37951 :: NORM :: compound :: Lorg/joda/time/PeriodType :: return v5::DD,37944
37952 :: NORM :: compound :: Lorg/joda/time/PeriodType :: return p1 $null ::DD,37944
37956 :: ENTR :: entry :: null :: org.joda.time.chrono.ISOChronology.getInstance()::CD,37959:CD,37962
37959 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v3 = getDefault()::CL,29153
37962 :: CALL :: call :: Lorg/joda/time/chrono/ISOChronology :: v5 = getInstance(v3)::CL,46472
37967 :: ENTR :: entry :: null :: org.joda.time.base.AbstractPeriod.size()::CE,37968:CD,37975:CD,37979
37968 :: EXIT :: exit :: I :: org.joda.time.base.AbstractPeriod.size()::JM,29080:JM,29083:JM,44170
37975 :: CALL :: call :: I :: v6 = v4.size()::JM,37979:CL,46533
37979 :: NORM :: compound :: I :: return v6::CF,37968
37998 :: ENTR :: entry :: null :: org.joda.time.DurationFieldType.StandardDurationFieldType.getField(org.joda.time.Chronology)::CD,38003:CD,38010
38003 :: CALL :: call :: Lorg/joda/time/Chronology :: v5 = getChronology(p1 $null )::CL,29057
38007 :: EXPR :: reference :: B :: v6 = p0 $null .iOrdinal::DD,38010
38010 :: PRED :: IF :: null :: switch v6::CD,38011:CD,38016:CD,38021:CD,38026:CD,38031:CD,38036:CD,38041:CD,38046:CD,38051:CD,38056:CD,38061:CD,38066
38011 :: CALL :: call :: Lorg/joda/time/DurationField :: v32 = v5.eras()::CL,44283:CL,37901
38016 :: CALL :: call :: Lorg/joda/time/DurationField :: v30 = v5.centuries()::CL,37889:CL,44379
38021 :: CALL :: call :: Lorg/joda/time/DurationField :: v28 = v5.weekyears()::CL,44402:CL,37853
38026 :: CALL :: call :: Lorg/joda/time/DurationField :: v26 = v5.years()::CL,44363:CL,37877
38031 :: CALL :: call :: Lorg/joda/time/DurationField :: v24 = v5.months()::CL,40199:CL,37865
38036 :: CALL :: call :: Lorg/joda/time/DurationField :: v22 = v5.weeks()::CL,44411:CL,37841
38041 :: CALL :: call :: Lorg/joda/time/DurationField :: v20 = v5.days()::CL,40263:CL,37829
38046 :: CALL :: call :: Lorg/joda/time/DurationField :: v18 = v5.halfdays()::CL,44420:CL,37817
38051 :: CALL :: call :: Lorg/joda/time/DurationField :: v16 = v5.hours()::CL,37805:CL,44429
38056 :: CALL :: call :: Lorg/joda/time/DurationField :: v14 = v5.minutes()::CL,44438:CL,37793
38061 :: CALL :: call :: Lorg/joda/time/DurationField :: v12 = v5.seconds()::CL,37781:CL,44447
38066 :: CALL :: call :: Lorg/joda/time/DurationField :: v10 = v5.millis()::CL,37769:CL,44456
38091 :: ENTR :: entry :: null :: org.joda.time.field.BaseDurationField.getDifference(long,long)::CE,38092:CD,38097:CD,38103:CD,38107
38092 :: EXIT :: exit :: I :: org.joda.time.field.BaseDurationField.getDifference(long,long)::JM,29111:JM,38145:JM,38226:JM,44187
38097 :: CALL :: call :: J :: v6 = p0 $null .getDifferenceAsLong(p1 $null , p2 $null )::CL,46558:CL,46625:CL,46606:CL,46646
38103 :: CALL :: call :: I :: v8 = safeToInt(v6)::JM,38107:CL,33942
38107 :: NORM :: compound :: I :: return v8::DD,38092
38111 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDurationField.getDifference(long,long)::CE,38112:CD,38117:CD,38128:CD,38139:CD,38145
38112 :: EXIT :: exit :: I :: org.joda.time.chrono.ZonedChronology.ZonedDurationField.getDifference(long,long)::JM,29111:JM,38145:JM,38226:JM,44187
38117 :: CALL :: call :: I :: v6 = p0 $null .getOffsetToAdd(p2 $null )::CL,44828
38125 :: EXPR :: reference :: Z :: v8 = p0 $null .iTimeField::DD,38128
38128 :: PRED :: IF :: Z :: if (v8 == #(0)) goto 26::CD,38130
38130 :: CALL :: call :: I :: v11 = p0 $null .getOffsetToAdd(p1 $null )::CL,44828
38139 :: CALL :: call :: I :: v18 = v7.getDifference(v14, v16)::JM,38145:CL,38178:CL,38207:CL,38159:CL,38189:CL,38111:CL,38091
38145 :: NORM :: compound :: I :: return v18::DD,38112
38159 :: ENTR :: entry :: null :: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField.getDifference(long,long)::CE,38160:CD,38168:CD,38174
38160 :: EXIT :: exit :: I :: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField.getDifference(long,long)::JM,29111:JM,38145:JM,38226:JM,44187
38168 :: CALL :: call :: I :: v7 = v5.getDifference(p1 $null , p2 $null )::JM,38174:CL,46672
38174 :: NORM :: compound :: I :: return v7::DD,38160
38178 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDurationField.getDifference(long,long)::CE,38179:CD,38184
38179 :: EXIT :: exit :: I :: org.joda.time.field.UnsupportedDurationField.getDifference(long,long)::JM,29111:JM,38145:JM,38226:JM,44187
38184 :: CALL :: call :: Ljava/lang/UnsupportedOperationException :: v6 = p0 $null .unsupported()::CL,44793
38189 :: ENTR :: entry :: null :: org.joda.time.field.MillisDurationField.getDifference(long,long)::CE,38190:CD,38200:CD,38204
38190 :: EXIT :: exit :: I :: org.joda.time.field.MillisDurationField.getDifference(long,long)::JM,29111:JM,38145:JM,38226:JM,44187
38200 :: CALL :: call :: I :: v8 = safeToInt(v6)::JM,38204:CL,33942
38204 :: NORM :: compound :: I :: return v8::DD,38190
38207 :: ENTR :: entry :: null :: org.joda.time.field.ScaledDurationField.getDifference(long,long)::CE,38208:CD,38217:CD,38226:CD,38227
38208 :: EXIT :: exit :: I :: org.joda.time.field.ScaledDurationField.getDifference(long,long)::JM,29111:JM,38145:JM,38226:JM,44187
38217 :: CALL :: call :: I :: v8 = v6.getDifference(p1 $null , p2 $null )::JM,38226:CL,38178:CL,38207:CL,38159:CL,38189:CL,38111:CL,38091
38223 :: EXPR :: reference :: I :: v9 = p0 $null .iScalar::DD,38226
38226 :: EXPR :: assign :: Ljava/lang/Object :: v10 = v8 / v9::CF,38227
38227 :: NORM :: compound :: I :: return v10::DD,38208
38232 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDurationField.add(long,int)::CE,38233:CD,38238
38233 :: EXIT :: exit :: J :: org.joda.time.field.UnsupportedDurationField.add(long,int)::JM,38361:JM,43972:JM,43992
38238 :: CALL :: call :: Ljava/lang/UnsupportedOperationException :: v6 = p0 $null .unsupported()::CL,44793
38243 :: ENTR :: entry :: null :: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField.add(long,int)::CE,38244:CD,38252:CD,38258
38244 :: EXIT :: exit :: J :: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField.add(long,int)::JM,38361:JM,43972:JM,43992
38252 :: CALL :: call :: J :: v7 = v5.add(p1 $null , p2 $null )::JM,38258:CL,34012:CL,33983:CL,33434
38258 :: NORM :: compound :: J :: return v7::DD,38244
38262 :: ENTR :: entry :: null :: org.joda.time.field.MillisDurationField.add(long,int)::CE,38263:CD,38269:CD,38274
38263 :: EXIT :: exit :: J :: org.joda.time.field.MillisDurationField.add(long,int)::JM,38361:JM,43972:JM,43992
38269 :: CALL :: call :: J :: v7 = safeAdd(p1 $null , v5)::JM,38274:CL,44632
38274 :: NORM :: compound :: J :: return v7::DD,38263
38277 :: ENTR :: entry :: null :: org.joda.time.field.ScaledDurationField.add(long,int)::CE,38278:CD,38293:CD,38299
38278 :: EXIT :: exit :: J :: org.joda.time.field.ScaledDurationField.add(long,int)::JM,38361:JM,43972:JM,43992
38293 :: CALL :: call :: J :: v12 = v10.add(p1 $null , v8)::JM,38299:CL,33814:CL,33839:CL,33783:CL,33739:CL,33828:CL,33764
38299 :: NORM :: compound :: J :: return v12::DD,38278
38306 :: ENTR :: entry :: null :: org.joda.time.field.PreciseDurationField.add(long,int)::CE,38307:CD,38317:CD,38322
38307 :: EXIT :: exit :: J :: org.joda.time.field.PreciseDurationField.add(long,int)::JM,38361:JM,43972:JM,43992
38317 :: CALL :: call :: J :: v9 = safeAdd(p1 $null , v7)::JM,38322:CL,44632
38322 :: NORM :: compound :: J :: return v9::DD,38307
38328 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDurationField.add(long,int)::CE,38329:CD,38334:CD,38344:CD,38353:CD,38360:CD,38361:CD,38362:CD,38363
38329 :: EXIT :: exit :: J :: org.joda.time.chrono.ZonedChronology.ZonedDurationField.add(long,int)::JM,38361:JM,43972:JM,43992
38334 :: CALL :: call :: I :: v6 = p0 $null .getOffsetToAdd(p1 $null )::JM,38363:CL,44828
38344 :: CALL :: call :: J :: v11 = v7.add(v9, p2 $null )::JM,38361:CL,38306:CL,38328:CL,38277:CL,38243:CL,38232:CL,38262
38350 :: EXPR :: reference :: Z :: v12 = p0 $null .iTimeField::DD,38353
38353 :: PRED :: IF :: Z :: if (v12 == #(0)) goto 36::CD,38355:CD,38363
38355 :: CALL :: call :: I :: v15 = p0 $null .getOffsetFromLocalToSubtract(v11)::JM,38363:CL,44872
38360 :: EXPR :: assign :: J :: v17 = CONVERT I to J v16::CF,38361
38361 :: EXPR :: assign :: Ljava/lang/Object :: v18 = v11 - v17::CF,38362
38362 :: NORM :: compound :: J :: return v18::DD,38329
38363 :: EXPR :: assign :: null :: PHI v16 = v6, v15::CF,38360
38378 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.forID(java.lang.String)::CE,38379:CD,38382:CD,38439:CD,38443:CD,38448:CD,38453:CD,38458:JM,38392
38379 :: EXIT :: exit :: Lorg/joda/time/DateTimeZone :: org.joda.time.DateTimeZone.forID(java.lang.String)::JM,29205
38382 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 11::CD,38383:CD,38386:CD,38387:CD,38392
38383 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v44 = getDefault()::JM,38386:CL,29153
38386 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v44::DD,38379
38387 :: CALL :: call :: Z :: v6 = p1 $null .equals(#(UTC))::JM,38392
38392 :: PRED :: IF :: Z :: if (v6 == #(0)) goto 21::CD,38393:CD,38395:CD,38396:CD,38399:CD,38404
38393 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v42 = org.joda.time.DateTimeZone.UTC::CF,38395
38395 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v42::DD,38379
38396 :: CALL :: call :: Lorg/joda/time/tz/Provider :: v9 = getProvider()::CL,22835
38399 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v11 = v9.getZone(p1 $null )::JM,38404:JM,38405:CL,46692:CL,46712
38404 :: PRED :: IF :: Z :: if (v11 == #(null)) goto 40::CD,38405:CD,38418:CD,38422:CD,38423:CD,38424
38405 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v11::DD,38379
38418 :: CALL :: call :: I :: v33 = parseOffset(p1 $null )::JM,38422:CL,46791
38422 :: EXPR :: assign :: J :: v34 = CONVERT I to J v33::DD,38423
38423 :: EXPR :: assign :: Z :: v36 = v34 == #(0 l)::DD,38424
38424 :: PRED :: IF :: Z :: if (v36 != #(0)) goto 72::CD,38425:CD,38427:CD,38428:CD,38432:CD,38437
38425 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v41 = org.joda.time.DateTimeZone.UTC::CF,38427
38427 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v41::DD,38379
38428 :: CALL :: call :: Ljava/lang/String :: v38 = printOffset(v33)::CL,46807
38432 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v40 = fixedOffsetZone(v38, v33)::JM,38437:CL,46950
38437 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v40::DD,38379
38439 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v19 = new java.lang.StringBuilder::
38443 :: CALL :: call :: Ljava/lang/StringBuilder :: v23 = v19.append(#(The datetime zone id '))::
38448 :: CALL :: call :: Ljava/lang/StringBuilder :: v25 = v23.append(p1 $null )::JM,38392
38453 :: CALL :: call :: Ljava/lang/StringBuilder :: v28 = v25.append(#(' is not recognised))::
38458 :: CALL :: call :: Ljava/lang/String :: v30 = v28.toString()::
38505 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.forTimeZone(java.util.TimeZone)::CE,38506:CD,38509:CD,38614:CD,38618:CD,38623:CD,38628:CD,38633:JM,38577:JM,38514:JM,38530:JM,38578:JM,38583:JM,38568:JM,38588:JM,38525:JM,38573
38506 :: EXIT :: exit :: Lorg/joda/time/DateTimeZone :: org.joda.time.DateTimeZone.forTimeZone(java.util.TimeZone)::JM,29207
38509 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 9::CD,38510:CD,38513:CD,38514:CD,38525:CD,38530:JM,38577:JM,38578:JM,38583:JM,38568:JM,38588:JM,38573
38510 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v71 = getDefault()::JM,38513:CL,29153
38513 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v71::DD,38506
38514 :: CALL :: call :: Ljava/lang/String :: v5 = p1 $null .getID()::JM,38577:JM,38514:JM,38530:JM,38578:JM,38583:JM,38568:JM,38588:JM,38525:JM,38573
38525 :: CALL :: call :: Z :: v8 = v5.equals(#(UTC))::JM,38577:JM,38530:JM,38578:JM,38583:JM,38568:JM,38588:JM,38525:JM,38573
38530 :: PRED :: IF :: Z :: if (v8 == #(0)) goto 43::CD,38531:CD,38533:CD,38534:CD,38538:CD,38541:CD,38547:CD,38553:CD,38642:CD,38643
38531 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v66 = org.joda.time.DateTimeZone.UTC::CF,38533
38533 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v66::DD,38506
38534 :: CALL :: call :: Ljava/lang/String :: v11 = getConvertedId(v5)::JM,38541:CL,47017
38538 :: CALL :: call :: Lorg/joda/time/tz/Provider :: v13 = getProvider()::CL,22835
38541 :: PRED :: IF :: Z :: if (v11 == #(null)) goto 66::CF,38642:CD,38542
38542 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v15 = v13.getZone(v11)::JM,38642:CL,46692:CL,46712
38547 :: PRED :: IF :: Z :: if (v16 != #(null)) goto 79::CF,38643:CD,38548
38548 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v18 = v13.getZone(v5)::JM,38643:CL,46692:CL,46712
38553 :: PRED :: IF :: Z :: if (v19 == #(null)) goto 85::CD,38554:CD,38568:CD,38573:CD,38577:CD,38593:CD,38597:CD,38598:CD,38599
38554 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v19::DD,38506
38568 :: CALL :: call :: Ljava/lang/String :: v43 = v5.substring(#(3))::JM,38577:JM,38530:JM,38578:JM,38583:JM,38568:JM,38588:JM,38525:JM,38573
38573 :: CALL :: call :: I :: v45 = v43.length()::JM,38577:JM,38578:JM,38583:JM,38588:JM,38573
38577 :: PRED :: IF :: Z :: if (v45 <= #(2)) goto 150::CD,38578:CD,38583:JM,38577:JM,38588:JM,38573
38578 :: CALL :: call :: C :: v49 = v43.charAt(#(1))::JM,38577:JM,38578:JM,38583:JM,38588:JM,38573
38583 :: PRED :: IF :: Z :: if (v49 <= #(57)) goto 150::CD,38584:CD,38588
38584 :: CALL :: call :: Z :: v52 = isDigit(v49)::JM,38588
38588 :: PRED :: IF :: Z :: if (v52 == #(0)) goto 150::CD,38589
38589 :: CALL :: call :: Ljava/lang/String :: v54 = convertToAsciiNumber(v43)::CL,47032
38593 :: CALL :: call :: I :: v57 = parseOffset(v55)::JM,38597:CL,46791
38597 :: EXPR :: assign :: J :: v58 = CONVERT I to J v57::DD,38598
38598 :: EXPR :: assign :: Z :: v60 = v58 == #(0 l)::DD,38599
38599 :: PRED :: IF :: Z :: if (v60 != #(0)) goto 169::CD,38600:CD,38602:CD,38603:CD,38607:CD,38612
38600 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v65 = org.joda.time.DateTimeZone.UTC::CF,38602
38602 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v65::DD,38506
38603 :: CALL :: call :: Ljava/lang/String :: v62 = printOffset(v57)::CL,46807
38607 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v64 = fixedOffsetZone(v62, v57)::JM,38612:CL,46950
38612 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v64::DD,38506
38614 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v28 = new java.lang.StringBuilder::
38618 :: CALL :: call :: Ljava/lang/StringBuilder :: v32 = v28.append(#(The datetime zone id '))::
38623 :: CALL :: call :: Ljava/lang/StringBuilder :: v34 = v32.append(v5)::JM,38577:JM,38530:JM,38578:JM,38583:JM,38568:JM,38588:JM,38525:JM,38573
38628 :: CALL :: call :: Ljava/lang/StringBuilder :: v37 = v34.append(#(' is not recognised))::JM,38577:JM,38578:JM,38583:JM,38588:JM,38573
38633 :: CALL :: call :: Ljava/lang/String :: v39 = v37.toString()::JM,38588
38642 :: EXPR :: assign :: null :: PHI v16 = #(null), v15::DD,38547:DD,38643
38643 :: EXPR :: assign :: null :: PHI v19 = v16, v18::DD,38553:DD,38554
38844 :: EXPR :: modify :: I :: p0 $null .iMinPrintedDigits = p4 $null ::
38862 :: NORM :: declaration :: Ljava/util/ArrayList :: v5 = new java.util.ArrayList::JM,38881:JM,38886:JM,38898:JM,38902:JM,38908
38866 :: NORM :: declaration :: Ljava/util/ArrayList :: v7 = new java.util.ArrayList::JM,38931:JM,38936:JM,38948:JM,38952:JM,38958
38870 :: CALL :: call :: V :: p0 $null .decompose(p1 $null , v5, v7)::CL,47203
38876 :: CALL :: call :: Z :: v12 = v5.contains(#(null))::JM,38881
38881 :: PRED :: IF :: Z :: if (v12 != #(0)) goto 48::CD,38882:CD,38886
38882 :: CALL :: call :: Z :: v15 = v5.isEmpty()::JM,38886
38886 :: PRED :: IF :: Z :: if (v15 == #(0)) goto 60::CD,38894:CD,38898:CD,38902:CD,38977:CD,38978
38887 :: EXPR :: modify :: [Lorg/joda/time/format/InternalPrinter :: p0 $null .iPrinters = #(null)::
38890 :: EXPR :: modify :: I :: p0 $null .iPrintedLengthEstimate = #(0)::
38894 :: CALL :: call :: I :: v17 = v5.size()::JM,38898:JM,38902
38898 :: NORM :: declaration :: [Lorg/joda/time/format/InternalPrinter :: v18 = new org.joda.time.format.InternalPrinter[]::DD,38899
38899 :: EXPR :: modify :: [Lorg/joda/time/format/InternalPrinter :: p0 $null .iPrinters = v18::
38902 :: PRED :: IF :: Z :: if (v29 >= v17) goto 132::CD,38903:CD,38908:CD,38909:CD,38913:CD,38921:CD,38977:CD,38978
38903 :: CALL :: call :: Ljava/lang/Object :: v20 = v5.get(v29)::JM,38908
38908 :: EXPR :: assign :: Ljava/lang/Object :: v21 = CHECKCAST v20::DD,38917
38909 :: CALL :: call :: I :: v23 = v21.estimatePrintedLength()::JM,38913:CL,47423:CL,47401:CL,47295:CL,47301:CL,47323:CL,47378:CL,47429:CL,47453:CL,47410:CL,47314:CL,47386:CL,47444
38913 :: EXPR :: assign :: Ljava/lang/Object :: v24 = v28 + v23::DD,38977
38914 :: EXPR :: reference :: [Lorg/joda/time/format/InternalPrinter :: v25 = p0 $null .iPrinters::
38917 :: EXPR :: modify :: Ljava/lang/Object :: v25[v29] = v21::
38921 :: EXPR :: assign :: Ljava/lang/Object :: v27 = v29 + #(1)::DD,38978
38923 :: EXPR :: modify :: I :: p0 $null .iPrintedLengthEstimate = v28::
38926 :: CALL :: call :: Z :: v31 = v7.contains(#(null))::JM,38931
38931 :: PRED :: IF :: Z :: if (v31 != #(0)) goto 156::CD,38932:CD,38936
38932 :: CALL :: call :: Z :: v33 = v7.isEmpty()::JM,38936
38936 :: PRED :: IF :: Z :: if (v33 == #(0)) goto 168::CD,38944:CD,38948:CD,38952:CD,38979:CD,38980
38937 :: EXPR :: modify :: [Lorg/joda/time/format/InternalParser :: p0 $null .iParsers = #(null)::
38940 :: EXPR :: modify :: I :: p0 $null .iParsedLengthEstimate = #(0)::
38944 :: CALL :: call :: I :: v35 = v7.size()::JM,38948:JM,38952
38948 :: NORM :: declaration :: [Lorg/joda/time/format/InternalParser :: v36 = new org.joda.time.format.InternalParser[]::DD,38949
38949 :: EXPR :: modify :: [Lorg/joda/time/format/InternalParser :: p0 $null .iParsers = v36::
38952 :: PRED :: IF :: Z :: if (v46 >= v35) goto 240::CD,38953:CD,38958:CD,38959:CD,38963:CD,38971:CD,38979:CD,38980
38953 :: CALL :: call :: Ljava/lang/Object :: v38 = v7.get(v46)::JM,38958
38958 :: EXPR :: assign :: Ljava/lang/Object :: v39 = CHECKCAST v38::DD,38967
38959 :: CALL :: call :: I :: v41 = v39.estimateParsedLength()::JM,38963:CL,47496:CL,47514:CL,47462:CL,39162:CL,39175:CL,47471:CL,47527:CL,47560:CL,47542:CL,47504:CL,47486:CL,47533:CL,47551
38963 :: EXPR :: assign :: Ljava/lang/Object :: v42 = v45 + v41::DD,38979
38964 :: EXPR :: reference :: [Lorg/joda/time/format/InternalParser :: v43 = p0 $null .iParsers::
38967 :: EXPR :: modify :: Ljava/lang/Object :: v43[v46] = v39::
38971 :: EXPR :: assign :: Ljava/lang/Object :: v44 = v46 + #(1)::DD,38980
38973 :: EXPR :: modify :: I :: p0 $null .iParsedLengthEstimate = v45::
38977 :: EXPR :: assign :: null :: PHI v28 = v24, #(0)::CF,38978:DD,38913:DD,38923
38978 :: EXPR :: assign :: null :: PHI v29 = v27, #(0)::DD,38902:JM,38908:DD,38921
38979 :: EXPR :: assign :: null :: PHI v45 = v42, #(0)::CF,38980:DD,38963:DD,38973
38980 :: EXPR :: assign :: null :: PHI v46 = v44, #(0)::DD,38952:JM,38958:DD,38971
39094 :: EXPR :: modify :: Lorg/joda/time/DateTimeFieldType :: p0 $null .iFieldType = p1 $null ::
39097 :: PRED :: IF :: Z :: if (p3 $null  <= #(18)) goto 20::CF,39105
39098 :: EXPR :: modify :: I :: p0 $null .iMinDigits = p2 $null ::
39101 :: EXPR :: modify :: I :: p0 $null .iMaxDigits = v8::
39105 :: EXPR :: assign :: null :: PHI v8 = p3 $null , #(18)::DD,39101
39140 :: EXPR :: modify :: Lorg/joda/time/format/InternalParser :: p0 $null .underlying = p1 $null ::
39155 :: EXPR :: modify :: Lorg/joda/time/format/DateTimeParser :: p0 $null .underlying = p1 $null ::
39162 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserInternalParser.estimateParsedLength()::CE,39163:CD,39169:CD,39173
39163 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeParserInternalParser.estimateParsedLength()::JM,30161:JM,30153:JM,38963:JM,39186
39169 :: CALL :: call :: I :: v5 = v3.estimateParsedLength()::JM,39173:CL,39175
39173 :: NORM :: compound :: I :: return v5::CF,39163
39175 :: ENTR :: entry :: null :: org.joda.time.format.InternalParserDateTimeParser.estimateParsedLength()::CE,39176:CD,39182:CD,39186
39176 :: EXIT :: exit :: I :: org.joda.time.format.InternalParserDateTimeParser.estimateParsedLength()::JM,30161:JM,30153:JM,38963:JM,39173:JM,39186
39182 :: CALL :: call :: I :: v5 = v3.estimateParsedLength()::JM,39186:CL,47496:CL,47514:CL,47462:CL,39162:CL,39175:CL,47471:CL,47527:CL,47560:CL,47542:CL,47504:CL,47486:CL,47533:CL,47551
39186 :: NORM :: compound :: I :: return v5::CF,39176
39196 :: EXPR :: modify :: Lorg/joda/time/format/DateTimePrinter :: p0 $null .underlying = p1 $null ::
39610 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoProvider.access$000(org.joda.time.tz.ZoneInfoProvider)::CE,39611:CD,39617
39611 :: EXIT :: exit :: Ljava/lang/ClassLoader :: org.joda.time.tz.ZoneInfoProvider.access$000(org.joda.time.tz.ZoneInfoProvider)::JM,30881:JM,30897
39614 :: EXPR :: reference :: Ljava/lang/ClassLoader :: v3 = p1 $null .iLoader::DD,39617
39617 :: NORM :: compound :: Ljava/lang/ClassLoader :: return v3::CF,39611
39648 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.validateProvider(org.joda.time.tz.Provider)::CD,39668:CD,39682
39668 :: CALL :: call :: Z :: v11 = v4.contains(#(UTC))::
39682 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v14 = p1 $null .getZone(#(UTC))::CL,46712
39729 :: CALL :: call :: Z :: v7 = p1 $null .exists()::
39735 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v35 = new java.lang.StringBuilder::
39739 :: CALL :: call :: Ljava/lang/StringBuilder :: v39 = v35.append(#(File directory doesn'...))::
39744 :: CALL :: call :: Ljava/lang/StringBuilder :: v41 = v39.append(p1 $null )::
39749 :: CALL :: call :: Ljava/lang/String :: v43 = v41.toString()::
39758 :: CALL :: call :: Z :: v10 = p1 $null .isDirectory()::
39764 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v24 = new java.lang.StringBuilder::
39768 :: CALL :: call :: Ljava/lang/StringBuilder :: v28 = v24.append(#(File doesn't refer to...))::
39773 :: CALL :: call :: Ljava/lang/StringBuilder :: v30 = v28.append(p1 $null )::
39778 :: CALL :: call :: Ljava/lang/String :: v32 = v30.toString()::
39796 :: CALL :: call :: Ljava/io/InputStream :: v13 = p0 $null .openResource(#(ZoneInfoMap))::CL,47936
39801 :: CALL :: call :: Ljava/util/Map :: v15 = loadZoneInfoMap(v13)::JM,39805:CL,48046
39805 :: EXPR :: modify :: Ljava/util/Map :: p0 $null .iZoneInfoMap = v15::
39808 :: NORM :: declaration :: Ljava/util/TreeSet :: v16 = new java.util.TreeSet::JM,39820
39809 :: EXPR :: reference :: Ljava/util/Map :: v17 = p0 $null .iZoneInfoMap::
39812 :: CALL :: call :: Ljava/util/Set :: v19 = v17.keySet()::
39820 :: CALL :: call :: Ljava/util/SortedSet :: v22 = unmodifiableSortedSet(v16)::JM,39820
39876 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserBucket.SavedField.compareTo(java.lang.Object)::CE,39877:CD,39882:CD,39887
39877 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeParserBucket.SavedField.compareTo(java.lang.Object)::
39882 :: CALL :: call :: I :: v6 = p0 $null .compareTo(v4)::JM,39887:CL,48242
39887 :: NORM :: compound :: I :: return v6::DD,39877
39890 :: ENTR :: entry :: null :: org.joda.time.field.BaseDurationField.compareTo(java.lang.Object)::CE,39891:CD,39896:CD,39901
39891 :: EXIT :: exit :: I :: org.joda.time.field.BaseDurationField.compareTo(java.lang.Object)::JM,53686
39896 :: CALL :: call :: I :: v6 = p0 $null .compareTo(v4)::JM,39901:CL,48295
39901 :: NORM :: compound :: I :: return v6::CF,39891
39904 :: ENTR :: entry :: null :: org.joda.time.field.MillisDurationField.compareTo(java.lang.Object)::CE,39905:CD,39910:CD,39915
39905 :: EXIT :: exit :: I :: org.joda.time.field.MillisDurationField.compareTo(java.lang.Object)::JM,53686
39910 :: CALL :: call :: I :: v6 = p0 $null .compareTo(v4)::JM,39915:CL,48328
39915 :: NORM :: compound :: I :: return v6::CF,39905
39918 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDurationField.compareTo(java.lang.Object)::CF,39919:CD,39924:CD,39929
39919 :: EXIT :: exit :: I :: org.joda.time.field.UnsupportedDurationField.compareTo(java.lang.Object)::JM,53686
39924 :: CALL :: call :: I :: v6 = p0 $null .compareTo(v4)::JM,39929:CL,48361
39929 :: NORM :: compound :: I :: return v6::CF,39919
39932 :: ENTR :: entry :: null :: org.joda.time.DurationFieldType.getName()::CE,39933:CD,39939
39933 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.DurationFieldType.getName()::JM,31258
39936 :: EXPR :: reference :: Ljava/lang/String :: v3 = p0 $null .iName::DD,39939
39939 :: NORM :: compound :: Ljava/lang/String :: return v3::CF,39933
39948 :: EXPR :: modify :: I :: p0 $null .iMonthOfYear = #(1)::
39951 :: EXPR :: modify :: I :: p0 $null .iDayOfMonth = #(1)::
39954 :: EXPR :: modify :: I :: p0 $null .iDayOfWeek = #(0)::
39957 :: EXPR :: modify :: Z :: p0 $null .iAdvanceDayOfWeek = #(0)::
39960 :: EXPR :: modify :: I :: p0 $null .iMillisOfDay = #(0)::
39963 :: EXPR :: modify :: C :: p0 $null .iZoneChar = #(119)::
39980 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.HalfdayField.set(long,java.lang.String,java.util.Locale)::CE,39981:CD,39987:CD,39991:CD,39996:CD,40002
39981 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicChronology.HalfdayField.set(long,java.lang.String,java.util.Locale)::JM,40051:JM,55486
39987 :: CALL :: call :: Lorg/joda/time/chrono/GJLocaleSymbols :: v7 = forLocale(p3 $null )::CL,48368
39991 :: CALL :: call :: I :: v9 = v7.halfdayTextToValue(p2 $null )::CL,48421
39996 :: CALL :: call :: J :: v11 = p0 $null .set(p1 $null , v9)::JM,40002:CL,17826
40002 :: NORM :: compound :: J :: return v11::DD,39981
40007 :: ENTR :: entry :: null :: org.joda.time.field.BaseDateTimeField.set(long,java.lang.String,java.util.Locale)::CE,40008:CD,40014:CD,40020:CD,40026
40008 :: EXIT :: exit :: J :: org.joda.time.field.BaseDateTimeField.set(long,java.lang.String,java.util.Locale)::JM,40051:JM,55486
40014 :: CALL :: call :: I :: v7 = p0 $null .convertText(p2 $null , p3 $null )::CL,48485:CL,48467:CL,48509
40020 :: CALL :: call :: J :: v9 = p0 $null .set(p1 $null , v7)::JM,40026:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17719:CL,17999:CL,17826
40026 :: NORM :: compound :: J :: return v9::DD,40008
40034 :: ENTR :: entry :: null :: org.joda.time.field.DelegatedDateTimeField.set(long,java.lang.String,java.util.Locale)::CE,40035:CD,40044:CD,40051
40035 :: EXIT :: exit :: J :: org.joda.time.field.DelegatedDateTimeField.set(long,java.lang.String,java.util.Locale)::JM,40051:JM,55486
40044 :: CALL :: call :: J :: v8 = v6.set(p1 $null , p2 $null , p3 $null )::JM,40051:CL,39980:CL,40056:CL,40068:CL,40007:CL,40095:CL,40034
40051 :: NORM :: compound :: J :: return v8::DD,40035
40056 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.set(long,java.lang.String,java.util.Locale)::CE,40057:CD,40063
40057 :: EXIT :: exit :: J :: org.joda.time.field.UnsupportedDateTimeField.set(long,java.lang.String,java.util.Locale)::JM,40051:JM,55486
40063 :: CALL :: call :: Ljava/lang/UnsupportedOperationException :: v7 = p0 $null .unsupported()::CL,20439
40068 :: ENTR :: entry :: null :: org.joda.time.chrono.GJEraDateTimeField.set(long,java.lang.String,java.util.Locale)::CE,40069:CD,40075:CD,40079:CD,40084:CD,40090
40069 :: EXIT :: exit :: J :: org.joda.time.chrono.GJEraDateTimeField.set(long,java.lang.String,java.util.Locale)::JM,40051:JM,55486
40075 :: CALL :: call :: Lorg/joda/time/chrono/GJLocaleSymbols :: v7 = forLocale(p3 $null )::CL,48368
40079 :: CALL :: call :: I :: v9 = v7.eraTextToValue(p2 $null )::CL,48527
40084 :: CALL :: call :: J :: v11 = p0 $null .set(p1 $null , v9)::JM,40090:CL,18511
40090 :: NORM :: compound :: J :: return v11::DD,40069
40095 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.set(long,java.lang.String,java.util.Locale)::CE,40096:CD,40105:CD,40113:CD,40123:CD,40130
40096 :: EXIT :: exit :: J :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.set(long,java.lang.String,java.util.Locale)::JM,40051:JM,55486
40105 :: CALL :: call :: J :: v8 = v6.convertUTCToLocal(p1 $null )::CL,20087
40113 :: CALL :: call :: J :: v11 = v9.set(v8, p2 $null , p3 $null )::CL,39980:CL,40056:CL,40068:CL,40007:CL,40095:CL,40034
40123 :: CALL :: call :: J :: v15 = v12.convertLocalToUTC(v11, #(0), p1 $null )::JM,40130:CL,26477
40130 :: NORM :: compound :: J :: return v15::DD,40096
40154 :: CALL :: call :: Lorg/joda/time/Chronology :: v9 = getChronology(p4 $null )::CL,29057
40158 :: CALL :: call :: Lorg/joda/time/Chronology :: v11 = v9.withUTC()::CL,45183
40162 :: CALL :: call :: J :: v14 = v11.getDateTimeMillis(p1 $null , p2 $null , p3 $null , #(0))::CL,48572:CL,48720:CL,48656:CL,48624
40199 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.months()::CE,40200:CD,40206
40200 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.AssembledChronology.months()::JM,36231
40203 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v3 = p0 $null .iMonths::DD,40206
40206 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v3::CF,40200
40208 :: ENTR :: entry :: null :: org.joda.time.LocalDate.getLocalMillis()::CE,40209:CD,40215
40209 :: EXIT :: exit :: J :: org.joda.time.LocalDate.getLocalMillis()::JM,40238
40212 :: EXPR :: reference :: J :: v3 = p0 $null .iLocalMillis::DD,40215
40215 :: NORM :: compound :: J :: return v3::CF,40209
40217 :: ENTR :: entry :: null :: org.joda.time.LocalDate.withLocalMillis(long)::CD,40225:CD,40229:CD,40234:CD,40238:CD,40239
40225 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v6 = v4.dayOfMonth()::CL,33038:CL,33020
40229 :: CALL :: call :: J :: v8 = v6.roundFloor(p1 $null )::JM,40238:CL,48947:CL,49087:CL,49010:CL,48742:CL,48892:CL,48759:CL,48876:CL,48993:CL,49065:CL,49027:CL,48964:CL,49124:CL,48902:CL,48834
40234 :: CALL :: call :: J :: v10 = p0 $null .getLocalMillis()::JM,40238:CL,40208
40238 :: EXPR :: assign :: Z :: v11 = v8 == v10::DD,40239
40239 :: PRED :: IF :: Z :: if (v11 != #(0)) goto 25::JM,49170:JM,49174:JM,49160:JM,49150:JM,49166
40263 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.days()::CE,40264:CD,40270
40264 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.AssembledChronology.days()::JM,36195
40267 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v3 = p0 $null .iDays::DD,40270
40270 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v3::CF,40264
40279 :: ENTR :: entry :: null :: org.joda.time.chrono.LenientChronology.getInstance(org.joda.time.Chronology)::CE,40280:CD,40290:JM,20518:JM,20521:JM,20524:CD,40295
40280 :: EXIT :: exit :: Lorg/joda/time/chrono/LenientChronology :: org.joda.time.chrono.LenientChronology.getInstance(org.joda.time.Chronology)::JM,45214
40290 :: NORM :: declaration :: Lorg/joda/time/chrono/LenientChronology :: v4 = new org.joda.time.chrono.LenientChronology::DD,40295
40295 :: NORM :: compound :: Lorg/joda/time/chrono/LenientChronology :: return v4::DD,40280
40320 :: ENTR :: entry :: null :: org.joda.time.base.BaseDateTime.getChronology()::CE,40321:CD,40327
40321 :: EXIT :: exit :: Lorg/joda/time/Chronology :: org.joda.time.base.BaseDateTime.getChronology()::JM,56427
40324 :: EXPR :: reference :: Lorg/joda/time/Chronology :: v3 = p0 $null .iChronology::DD,40327
40327 :: NORM :: compound :: Lorg/joda/time/Chronology :: return v3::CF,40321
40329 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.LazyInit.1.getZone()::CF,40330:CD,40333
40330 :: EXIT :: exit :: Lorg/joda/time/DateTimeZone :: org.joda.time.DateTimeZone.LazyInit.1.getZone()::JM,43307
40333 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return #(null)::CF,40330
40335 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatter.selectChronology(org.joda.time.Chronology)::CD,40340:CD,40354
40340 :: CALL :: call :: Lorg/joda/time/Chronology :: v5 = getChronology(p1 $null )::CL,29057
40351 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v10 = p0 $null .iZone::DD,40354
40354 :: PRED :: IF :: Z :: if (v10 == #(null)) goto 34::CD,40358
40358 :: CALL :: call :: Lorg/joda/time/Chronology :: v13 = v9.withZone(v11)::CL,43189:CL,43235:CL,43162:CL,43114
40388 :: CALL :: call :: Lorg/joda/time/Chronology :: v10 = getChronology(p2 $null )::CL,29057
40402 :: CALL :: call :: Lorg/joda/time/Chronology :: v14 = v10.withUTC()::CL,45183
40409 :: PRED :: IF :: Z :: if (p3 $null  != #(null)) goto 44::CD,40410
40410 :: CALL :: call :: Ljava/util/Locale :: v17 = getDefault()::
40464 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::CE,40465:CD,40471:CD,40475:CD,40479:JM,40545:JM,40577:JM,40548:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40531:JM,40659:JM,40692:JM,40534:JM,40505:JM,40541:JM,40702:JM,40543
40465 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::JM,41196:JM,41446:JM,49701
40471 :: CALL :: call :: I :: v7 = p2 $null .length()::JM,40545:JM,40577:JM,40548:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40531:JM,40659:JM,40692:JM,40534:JM,40505:JM,40475:JM,40541:JM,40702:JM,40543
40475 :: EXPR :: assign :: Ljava/lang/Object :: v8 = v7 - p3 $null ::DD,40488:DD,40533:DD,40547
40476 :: EXPR :: reference :: Ljava/lang/String :: v9 = p0 $null .iZeroOffsetParseText::DD,40479
40479 :: PRED :: IF :: Z :: if (v9 == #(null)) goto 101::CD,40483:CD,40487:CD,40533
40480 :: EXPR :: reference :: Ljava/lang/String :: v11 = p0 $null .iZeroOffsetParseText::JM,40487
40483 :: CALL :: call :: I :: v13 = v11.length()::JM,40487
40487 :: PRED :: IF :: Z :: if (v13 != #(0)) goto 71::CD,40488:CD,40509:CD,40515
40488 :: PRED :: IF :: Z :: if (v8 <= #(0)) goto 60::CD,40489:CD,40494:CD,40497:CD,40505:JM,40545:JM,40577:JM,40548:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40495:JM,40531:JM,40659:JM,40692:JM,40534:JM,40475:JM,40541:JM,40702:JM,40543
40489 :: CALL :: call :: C :: v26 = p2 $null .charAt(p3 $null )::JM,40545:JM,40577:JM,40548:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40531:JM,40659:JM,40692:JM,40534:JM,40505:JM,40475:JM,40541:JM,40702:JM,40543
40494 :: PRED :: IF :: Z :: if (v26 == #(45)) goto 101::CD,40495:CD,40533
40495 :: PRED :: IF :: Z :: if (v26 != #(43)) goto 60::CD,40497:CD,40505:CD,40533
40497 :: CALL :: call :: Ljava/lang/Integer :: v30 = valueOf(#(0))::
40505 :: NORM :: compound :: I :: return p3 $null ::DD,40465
40509 :: CALL :: call :: Z :: v17 = csStartsWithIgnoreCase(p2 $null , p3 $null , v15)::JM,40515:CL,49355
40515 :: PRED :: IF :: Z :: if (v17 == #(0)) goto 101::CD,40516:CD,40527:CD,40531:CD,40532:CD,40533
40516 :: CALL :: call :: Ljava/lang/Integer :: v19 = valueOf(#(0))::
40524 :: EXPR :: reference :: Ljava/lang/String :: v21 = p0 $null .iZeroOffsetParseText::JM,40531
40527 :: CALL :: call :: I :: v23 = v21.length()::JM,40531
40531 :: EXPR :: assign :: Ljava/lang/Object :: v24 = p3 $null  + v23::CF,40532
40532 :: NORM :: compound :: I :: return v24::DD,40465
40533 :: PRED :: IF :: Z :: if (v8 > #(1)) goto 110::CD,40534:CD,40535:CD,40536:CD,40541:JM,40545:JM,40577:JM,40548:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40531:JM,40659:JM,40692:JM,40505:JM,40475:JM,40702:JM,40543
40534 :: EXPR :: assign :: Ljava/lang/Object :: v134 = p3 $null  ^ #(-1)::CF,40535
40535 :: NORM :: compound :: I :: return v134::DD,40465
40536 :: CALL :: call :: C :: v34 = p2 $null .charAt(p3 $null )::JM,40545:JM,40577:JM,40548:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40531:JM,40659:JM,40692:JM,40534:JM,40505:JM,40475:JM,40541:JM,40702:JM,40543
40541 :: PRED :: IF :: Z :: if (v34 != #(45)) goto 134::CD,40543:CD,40547:CD,40548:CD,40549:CD,40556:CD,40716
40543 :: PRED :: IF :: Z :: if (v34 != #(43)) goto 145::CD,40545:CD,40546:CD,40547:CD,40548:CD,40549:CD,40556:CD,40716
40545 :: EXPR :: assign :: Ljava/lang/Object :: v36 = p3 $null  ^ #(-1)::CF,40546
40546 :: NORM :: compound :: I :: return v36::DD,40465
40547 :: EXPR :: assign :: Ljava/lang/Object :: v38 = v8 + #(-1)::DD,40568:CF,40548
40548 :: EXPR :: assign :: Ljava/lang/Object :: v39 = p3 $null  + #(1)::DD,40557:DD,40565:DD,40569
40549 :: CALL :: call :: I :: v42 = p0 $null .digitCount(p2 $null , v39, #(2))::JM,40556:CL,49439
40556 :: PRED :: IF :: Z :: if (v42 >= #(2)) goto 170::CD,40557:CD,40558:CD,40559:CD,40564
40557 :: EXPR :: assign :: Ljava/lang/Object :: v133 = v39 ^ #(-1)::CF,40558
40558 :: NORM :: compound :: I :: return v133::DD,40465
40559 :: CALL :: call :: I :: v44 = parseTwoDigits(p2 $null , v39)::JM,40564:JM,40567:CL,49494
40564 :: PRED :: IF :: Z :: if (v44 <= #(23)) goto 190::CD,40565:CD,40566:CD,40567:CD,40568:CD,40569:CD,40570
40565 :: EXPR :: assign :: Ljava/lang/Object :: v132 = v39 ^ #(-1)::CF,40566
40566 :: NORM :: compound :: I :: return v132::DD,40465
40567 :: EXPR :: assign :: Ljava/lang/Object :: v47 = v44 * #(3600000)::DD,40605:DD,40724:CF,40568
40568 :: EXPR :: assign :: Ljava/lang/Object :: v49 = v38 + #(-2)::DD,40570:DD,40578:DD,40718:CF,40569
40569 :: EXPR :: assign :: Ljava/lang/Object :: v50 = v39 + #(2)::JM,40577:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40659:JM,40692:JM,40475:JM,40541:JM,40702:JM,40543:DD,40579:DD,40717:DD,40723:CF,40570
40570 :: PRED :: IF :: Z :: if (v49 > #(0)) goto 209::CD,40572:CD,40577:CD,40704:CD,40707:CD,40715:CD,40723:CD,40724:CD,40725:JM,40545:JM,40548:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40531:JM,40659:JM,40692:JM,40534:JM,40505:JM,40475:JM,40541:JM,40702:JM,40543
40572 :: CALL :: call :: C :: v52 = p2 $null .charAt(v50)::JM,40545:JM,40577:JM,40548:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40531:JM,40659:JM,40692:JM,40534:JM,40505:JM,40475:JM,40541:JM,40702:JM,40543
40577 :: PRED :: IF :: Z :: if (v52 != #(58)) goto 239::CD,40578:CD,40579:CD,40581:CD,40583:CD,40590:CD,40717:CD,40718:CD,40719:CD,40723:CD,40724
40578 :: EXPR :: assign :: Ljava/lang/Object :: v56 = v49 + #(-1)::DD,40718:CF,40579
40579 :: EXPR :: assign :: Ljava/lang/Object :: v57 = v50 + #(1)::DD,40717
40581 :: PRED :: IF :: Z :: if (v52 < #(48)) goto 572::CF,40723:CD,40582:CD,40704:CD,40707:CD,40715:CD,40724:CD,40725
40582 :: PRED :: IF :: Z :: if (v52 > #(57)) goto 572::CF,40723:CD,40583:CD,40590:CD,40704:CD,40707:CD,40715:CD,40717:CD,40718:CD,40719:CD,40724:CD,40725
40583 :: CALL :: call :: I :: v62 = p0 $null .digitCount(p2 $null , v58, #(2))::JM,40593:JM,40590:CL,49439
40590 :: PRED :: IF :: Z :: if (v62 != #(0)) goto 277::CD,40591:CD,40593
40591 :: PRED :: IF :: Z :: if (v60 != #(0)) goto 277::CD,40593:CD,40704:CD,40707:CD,40715:CD,40723:CD,40724:CD,40725
40593 :: PRED :: IF :: Z :: if (v62 >= #(2)) goto 286::CD,40594:CD,40595:CD,40596:CD,40601
40594 :: EXPR :: assign :: Ljava/lang/Object :: v122 = v58 ^ #(-1)::CF,40595
40595 :: NORM :: compound :: I :: return v122::DD,40465
40596 :: CALL :: call :: I :: v64 = parseTwoDigits(p2 $null , v58)::JM,40601:JM,40604:CL,49494
40601 :: PRED :: IF :: Z :: if (v64 <= #(59)) goto 308::CD,40602:CD,40603:CD,40604:CD,40605:CD,40606:CD,40607:CD,40608
40602 :: EXPR :: assign :: Ljava/lang/Object :: v121 = v58 ^ #(-1)::CF,40603
40603 :: NORM :: compound :: I :: return v121::DD,40465
40604 :: EXPR :: assign :: Ljava/lang/Object :: v67 = v64 * #(60000)::CF,40605
40605 :: EXPR :: assign :: Ljava/lang/Object :: v68 = v47 + v67::DD,40642:DD,40724:CF,40606
40606 :: EXPR :: assign :: Ljava/lang/Object :: v69 = v59 + #(-2)::DD,40608:DD,40618:DD,40721:CF,40607
40607 :: EXPR :: assign :: Ljava/lang/Object :: v70 = v58 + #(2)::JM,40577:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40659:JM,40692:JM,40475:JM,40541:JM,40702:JM,40543:DD,40619:DD,40720:DD,40723:CF,40608
40608 :: PRED :: IF :: Z :: if (v69 > #(0)) goto 328::CD,40610:CD,40704:CD,40707:CD,40715:CD,40723:CD,40724:CD,40725:CD,40720:CD,40721
40610 :: PRED :: IF :: Z :: if (v60 == #(0)) goto 356::CF,40720:CD,40611:CD,40616:CD,40620:CD,40627:CD,40721:JM,40545:JM,40577:JM,40548:JM,40581:JM,40582:JM,40682:JM,40653:JM,40494:JM,40495:JM,40531:JM,40659:JM,40692:JM,40534:JM,40505:JM,40475:JM,40541:JM,40702:JM,40543
40611 :: CALL :: call :: C :: v72 = p2 $null .charAt(v70)::JM,40545:JM,40577:JM,40548:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40531:JM,40659:JM,40692:JM,40534:JM,40505:JM,40475:JM,40541:JM,40702:JM,40543
40616 :: PRED :: IF :: Z :: if (v72 == #(58)) goto 346::CD,40618:CD,40619:CD,40620:CD,40627:CD,40704:CD,40707:CD,40715:CD,40720:CD,40721:CD,40723:CD,40724:CD,40725
40618 :: EXPR :: assign :: Ljava/lang/Object :: v73 = v69 + #(-1)::DD,40721:CF,40619
40619 :: EXPR :: assign :: Ljava/lang/Object :: v74 = v70 + #(1)::DD,40720
40620 :: CALL :: call :: I :: v78 = p0 $null .digitCount(p2 $null , v75, #(2))::JM,40627:JM,40630:CL,49439
40627 :: PRED :: IF :: Z :: if (v78 != #(0)) goto 377::CD,40628:CD,40630
40628 :: PRED :: IF :: Z :: if (v60 != #(0)) goto 377::CD,40630:CD,40704:CD,40707:CD,40715:CD,40723:CD,40724:CD,40725
40630 :: PRED :: IF :: Z :: if (v78 >= #(2)) goto 386::CD,40631:CD,40632:CD,40633:CD,40638
40631 :: EXPR :: assign :: Ljava/lang/Object :: v120 = v75 ^ #(-1)::CF,40632
40632 :: NORM :: compound :: I :: return v120::DD,40465
40633 :: CALL :: call :: I :: v80 = parseTwoDigits(p2 $null , v75)::JM,40641:JM,40638:CL,49494
40638 :: PRED :: IF :: Z :: if (v80 <= #(59)) goto 409::CD,40639:CD,40640:CD,40641:CD,40642:CD,40643:CD,40644:CD,40645
40639 :: EXPR :: assign :: Ljava/lang/Object :: v119 = v75 ^ #(-1)::CF,40640
40640 :: NORM :: compound :: I :: return v119::DD,40465
40641 :: EXPR :: assign :: Ljava/lang/Object :: v82 = v80 * #(1000)::CF,40642
40642 :: EXPR :: assign :: Ljava/lang/Object :: v83 = v68 + v82::DD,40684:DD,40724:CF,40643
40643 :: EXPR :: assign :: Ljava/lang/Object :: v84 = v76 + #(-2)::DD,40645:CF,40644
40644 :: EXPR :: assign :: Ljava/lang/Object :: v85 = v75 + #(2)::JM,40577:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40659:JM,40692:JM,40475:JM,40541:JM,40702:JM,40543:DD,40662:DD,40722:DD,40723:CF,40645
40645 :: PRED :: IF :: Z :: if (v84 > #(0)) goto 429::CD,40647:CD,40704:CD,40707:CD,40715:CD,40723:CD,40724:CD,40725:CD,40722
40647 :: PRED :: IF :: Z :: if (v60 == #(0)) goto 469::CF,40722:CD,40648:CD,40653:CD,40663:CD,40670:JM,40545:JM,40577:JM,40548:JM,40581:JM,40582:JM,40616:JM,40682:JM,40494:JM,40495:JM,40531:JM,40659:JM,40692:JM,40534:JM,40505:JM,40475:JM,40541:JM,40702:JM,40543
40648 :: CALL :: call :: C :: v87 = p2 $null .charAt(v85)::JM,40545:JM,40577:JM,40548:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40531:JM,40659:JM,40692:JM,40534:JM,40505:JM,40475:JM,40541:JM,40702:JM,40543
40653 :: PRED :: IF :: Z :: if (v87 == #(46)) goto 459::CD,40654:CD,40659:CD,40662:CD,40663:CD,40670:CD,40722:JM,40545:JM,40577:JM,40548:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40531:JM,40692:JM,40534:JM,40505:JM,40475:JM,40541:JM,40702:JM,40543
40654 :: CALL :: call :: C :: v90 = p2 $null .charAt(v85)::JM,40545:JM,40577:JM,40548:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40531:JM,40659:JM,40692:JM,40534:JM,40505:JM,40475:JM,40541:JM,40702:JM,40543
40659 :: PRED :: IF :: Z :: if (v90 == #(44)) goto 459::CD,40662:CD,40663:CD,40670:CD,40704:CD,40707:CD,40715:CD,40722:CD,40723:CD,40724:CD,40725
40662 :: EXPR :: assign :: Ljava/lang/Object :: v93 = v85 + #(1)::DD,40722
40663 :: CALL :: call :: I :: v98 = p0 $null .digitCount(p2 $null , v94, #(3))::JM,40673:JM,40695:JM,40685:JM,40670:CL,49439
40670 :: PRED :: IF :: Z :: if (v98 != #(0)) goto 490::CD,40671:CD,40673
40671 :: PRED :: IF :: Z :: if (v60 != #(0)) goto 490::CD,40673:CD,40704:CD,40707:CD,40715:CD,40723:CD,40724:CD,40725
40673 :: PRED :: IF :: Z :: if (v98 >= #(1)) goto 501::CD,40674:CD,40675:CD,40676:CD,40677:CD,40682:CD,40683:CD,40684:CD,40685:CD,40704:CD,40707:CD,40715:CD,40723:CD,40724:CD,40725
40674 :: EXPR :: assign :: Ljava/lang/Object :: v118 = v94 ^ #(-1)::CF,40675
40675 :: NORM :: compound :: I :: return v118::DD,40465
40676 :: EXPR :: assign :: Ljava/lang/Object :: v99 = v94 + #(1)::DD,40686:JM,40577:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40659:JM,40692:JM,40475:JM,40541:JM,40702:JM,40543:DD,40723:JM,40545:JM,40548:JM,40531:JM,40534:JM,40505
40677 :: CALL :: call :: C :: v101 = p2 $null .charAt(v94)::JM,40545:JM,40577:JM,40548:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40531:JM,40659:JM,40692:JM,40534:JM,40505:JM,40475:JM,40541:JM,40702:JM,40543
40682 :: EXPR :: assign :: Ljava/lang/Object :: v102 = v101 - #(48)::DD,40683
40683 :: EXPR :: assign :: Ljava/lang/Object :: v104 = v102 * #(100)::CF,40684
40684 :: EXPR :: assign :: Ljava/lang/Object :: v105 = v83 + v104::DD,40694:DD,40724:CF,40685
40685 :: PRED :: IF :: Z :: if (v98 <= #(1)) goto 572::CF,40723:CD,40686:CD,40687:CD,40692:CD,40693:CD,40694:CD,40695:CD,40724
40686 :: EXPR :: assign :: Ljava/lang/Object :: v106 = v99 + #(1)::DD,40696:JM,40577:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40659:JM,40692:JM,40475:JM,40541:JM,40702:JM,40543:DD,40723:JM,40545:JM,40548:JM,40531:JM,40534:JM,40505
40687 :: CALL :: call :: C :: v108 = p2 $null .charAt(v99)::JM,40545:JM,40577:JM,40548:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40531:JM,40659:JM,40692:JM,40534:JM,40505:JM,40475:JM,40541:JM,40702:JM,40543
40692 :: EXPR :: assign :: Ljava/lang/Object :: v109 = v108 - #(48)::DD,40693
40693 :: EXPR :: assign :: Ljava/lang/Object :: v111 = v109 * #(10)::CF,40694
40694 :: EXPR :: assign :: Ljava/lang/Object :: v112 = v105 + v111::DD,40703:DD,40724:CF,40695
40695 :: PRED :: IF :: Z :: if (v98 <= #(2)) goto 572::CF,40723:CD,40696:CD,40697:CD,40702:CD,40703:CD,40724
40696 :: EXPR :: assign :: Ljava/lang/Object :: v113 = v106 + #(1)::DD,40723:JM,40545:JM,40577:JM,40548:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40531:JM,40659:JM,40692:JM,40534:JM,40505:JM,40475:JM,40541:JM,40702:JM,40543
40697 :: CALL :: call :: C :: v115 = p2 $null .charAt(v106)::JM,40545:JM,40577:JM,40548:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40531:JM,40659:JM,40692:JM,40534:JM,40505:JM,40475:JM,40541:JM,40702:JM,40543
40702 :: EXPR :: assign :: Ljava/lang/Object :: v116 = v115 - #(48)::CF,40703
40703 :: EXPR :: assign :: Ljava/lang/Object :: v117 = v112 + v116::DD,40724:CF,40723
40704 :: PRED :: IF :: Z :: if (v37 == #(0)) goto 583::CD,40705:CD,40725
40705 :: EXPR :: assign :: Ljava/lang/Object :: v127 = -(v126)::DD,40725
40707 :: CALL :: call :: Ljava/lang/Integer :: v130 = valueOf(v128)::
40715 :: NORM :: compound :: I :: return v123::DD,40465
40716 :: EXPR :: assign :: null :: PHI v37 = #(1), #(0)::DD,40704:CF,40547
40717 :: EXPR :: assign :: null :: PHI v58 = v57, v50::CF,40718:DD,40594:DD,40602:DD,40607:DD,40723
40718 :: EXPR :: assign :: null :: PHI v59 = v56, v49::CF,40719:DD,40606
40719 :: EXPR :: assign :: null :: PHI v60 = #(1), #(0)::DD,40591:DD,40610:DD,40628:DD,40647:DD,40671
40720 :: EXPR :: assign :: null :: PHI v75 = v70, v74::CF,40721:DD,40631:DD,40639:DD,40644:DD,40723
40721 :: EXPR :: assign :: null :: PHI v76 = v69, v73::DD,40643
40722 :: EXPR :: assign :: null :: PHI v94 = v85, v93::DD,40674:DD,40676:JM,40577:JM,40581:JM,40582:JM,40616:JM,40682:JM,40653:JM,40494:JM,40495:JM,40659:JM,40692:JM,40475:JM,40541:JM,40702:JM,40543:DD,40723
40723 :: EXPR :: assign :: null :: PHI v123 = v50, v50, v50, v58, v70, v70, v75, v85, v85, v94, v99, v106, v113::CF,40724:DD,40715
40724 :: EXPR :: assign :: null :: PHI v126 = v47, v47, v47, v47, v68, v68, v68, v83, v83, v83, v105, v112, v117::DD,40705:DD,40725:CF,40704
40725 :: EXPR :: assign :: null :: PHI v128 = v127, v126::
40953 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.Fraction.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::CE,40954:CD,40967:CD,40975:CD,40979:CD,40980:CD,40985:CD,40989:CD,40993:CD,40994:CD,41011:CD,41012:CD,41043:CD,41044:CD,41045:JM,41041:JM,40995:JM,41013:JM,41017:JM,41001:JM,41002:JM,41006
40954 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.Fraction.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::JM,41196:JM,41446:JM,49701
40967 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v10 = v6.getField(v8)::CL,25774
40972 :: EXPR :: reference :: I :: v11 = p0 $null .iMaxDigits::JM,40994:JM,40980
40975 :: CALL :: call :: I :: v13 = p2 $null .length()::JM,41041:JM,40979:JM,40995:JM,41013:JM,41017:JM,41001:JM,41002:JM,41006
40979 :: EXPR :: assign :: Ljava/lang/Object :: v14 = v13 - p3 $null ::JM,40994:JM,40980
40980 :: CALL :: call :: I :: v16 = min(v11, v14)::JM,40994:JM,40980
40985 :: CALL :: call :: Lorg/joda/time/DurationField :: v19 = v10.getDurationField()::CL,33678:CL,33687:CL,44465:CL,33709:CL,33730:CL,33718:CL,33933:CL,33669:CL,33700
40989 :: CALL :: call :: J :: v21 = v19.getUnitMillis()::JM,40993:CL,21151:CL,21164:CL,21125:CL,21116:CL,21131:CL,21170
40993 :: EXPR :: assign :: Ljava/lang/Object :: v23 = v21 * #(10 l)::DD,41044:CF,41043
40994 :: PRED :: IF :: Z :: if (v39 >= v16) goto 123::CD,40995:CD,40996:CD,41001:CF,41011
40995 :: EXPR :: assign :: Ljava/lang/Object :: v25 = p3 $null  + v39::JM,41041:JM,40979:JM,40995:JM,41013:JM,41017:JM,41001:JM,41002:JM,41006
40996 :: CALL :: call :: C :: v27 = p2 $null .charAt(v25)::JM,41041:JM,40979:JM,40995:JM,41013:JM,41017:JM,41001:JM,41002:JM,41006
41001 :: PRED :: IF :: Z :: if (v27 < #(48)) goto 123::CD,41002:CF,41011
41002 :: PRED :: IF :: Z :: if (v27 <= #(57)) goto 86::CD,40994:CD,41004:CD,41005:CD,41006:CD,41007:CD,41008:CD,41009:CD,41043:CD,41044:CD,41045
41004 :: EXPR :: assign :: Ljava/lang/Object :: v31 = v39 + #(1)::DD,41045:CF,41005
41005 :: EXPR :: assign :: Ljava/lang/Object :: v32 = v38 / #(10 l)::DD,41008:DD,41044:CF,41006
41006 :: EXPR :: assign :: Ljava/lang/Object :: v33 = v27 - #(48)::CF,41007
41007 :: EXPR :: assign :: J :: v34 = CONVERT I to J v33::DD,41008
41008 :: EXPR :: assign :: Ljava/lang/Object :: v35 = v34 * v32::CF,41009
41009 :: EXPR :: assign :: Ljava/lang/Object :: v36 = v37 + v35::DD,41043
41011 :: EXPR :: assign :: Ljava/lang/Object :: v40 = v37 / #(10 l)::DD,41015:CF,41012
41012 :: PRED :: IF :: Z :: if (v39 != #(0)) goto 140::CD,41013:CD,41014:CD,41015:CD,41016
41013 :: EXPR :: assign :: Ljava/lang/Object :: v55 = p3 $null  ^ #(-1)::CF,41014
41014 :: NORM :: compound :: I :: return v55::DD,40954
41015 :: EXPR :: assign :: Z :: v42 = v40 == #(2147483647 l)::DD,41016
41016 :: PRED :: IF :: Z :: if (v42 <= #(0)) goto 148::CD,41017:CD,41018:CD,41025:JM,11586:JM,29378:JM,20996:JM,11590:JM,11591:JM,21002:JM,11599:JM,11605:JM,21014:JM,11576:JM,21020:JM,29372:JM,11582:CD,41036:CD,41041:CD,41042
41017 :: EXPR :: assign :: Ljava/lang/Object :: v54 = p3 $null  ^ #(-1)::CF,41018
41018 :: NORM :: compound :: I :: return v54::DD,40954
41025 :: CALL :: call :: Lorg/joda/time/DurationField :: v48 = v10.getDurationField()::CL,33678:CL,33687:CL,44465:CL,33709:CL,33730:CL,33718:CL,33933:CL,33669:CL,33700
41036 :: CALL :: call :: V :: p1 $null .saveField(v43, v50)::CL,49538
41041 :: EXPR :: assign :: Ljava/lang/Object :: v52 = p3 $null  + v39::CF,41042
41042 :: NORM :: compound :: I :: return v52::DD,40954
41043 :: EXPR :: assign :: null :: PHI v37 = v36, #(0 l)::CF,41044:DD,41009:DD,41011
41044 :: EXPR :: assign :: null :: PHI v38 = v32, v23::CF,41045:DD,41005
41045 :: EXPR :: assign :: null :: PHI v39 = v31, #(0)::DD,40994:DD,40995:DD,41004:DD,41012:DD,41041
41103 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.FixedNumber.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::CE,41104:CD,41110:CD,41117:JM,41122:JM,41133:JM,41134
41104 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.FixedNumber.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::JM,41196:JM,41446:JM,49701
41110 :: CALL :: call :: I :: v7 = p0 $null .parseInto(p1 $null , p2 $null , p3 $null )::JM,41136:JM,41123:JM,41140:JM,41141:JM,41143:JM,41117:JM,41118:CL,42459
41117 :: PRED :: IF :: Z :: if (v7 >= #(0)) goto 19::CD,41118:CD,41122:CD,41123
41118 :: NORM :: compound :: I :: return v7::DD,41104
41119 :: EXPR :: reference :: I :: v9 = p0 $null .iMaxParsedDigits::DD,41122
41122 :: EXPR :: assign :: Ljava/lang/Object :: v10 = p3 $null  + v9::DD,41123:DD,41135:DD,41144
41123 :: PRED :: IF :: Z :: if (v7 == v10) goto 93::CD,41127:CD,41136:CD,41143:CD,41144
41124 :: EXPR :: reference :: Z :: v11 = p0 $null .iSigned::DD,41127
41127 :: PRED :: IF :: Z :: if (v11 == #(0)) goto 69::CF,41144:CD,41128:CD,41133:JM,41122:JM,41134
41128 :: CALL :: call :: C :: v13 = p2 $null .charAt(p3 $null )::JM,41122:JM,41133:JM,41134
41133 :: PRED :: IF :: Z :: if (v13 == #(45)) goto 62::CD,41134:CD,41135:CD,41144
41134 :: PRED :: IF :: Z :: if (v13 != #(43)) goto 69::CF,41144:CD,41135
41135 :: EXPR :: assign :: Ljava/lang/Object :: v17 = v10 + #(1)::DD,41144
41136 :: PRED :: IF :: Z :: if (v7 <= v18) goto 83::CD,41137:CD,41138:CD,41139:CD,41140
41137 :: EXPR :: assign :: Ljava/lang/Object :: v22 = v18 + #(1)::DD,41138
41138 :: EXPR :: assign :: Ljava/lang/Object :: v23 = v22 ^ #(-1)::CF,41139
41139 :: NORM :: compound :: I :: return v23::DD,41104
41140 :: PRED :: IF :: Z :: if (v7 >= v18) goto 93::CD,41141:CD,41142:CD,41143
41141 :: EXPR :: assign :: Ljava/lang/Object :: v21 = v7 ^ #(-1)::CF,41142
41142 :: NORM :: compound :: I :: return v21::DD,41104
41143 :: NORM :: compound :: I :: return v7::DD,41104
41144 :: EXPR :: assign :: null :: PHI v18 = v10, v10, v17::DD,41136:DD,41137:DD,41140
41179 :: ENTR :: entry :: null :: org.joda.time.format.InternalParserDateTimeParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::CE,41180:CD,41189:CD,41196
41180 :: EXIT :: exit :: I :: org.joda.time.format.InternalParserDateTimeParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::JM,41196:JM,41446:JM,41541:JM,41573:JM,41526:JM,41527:JM,41547:JM,41532:JM,41548:JM,49701
41189 :: CALL :: call :: I :: v8 = v6.parseInto(p1 $null , p2 $null , p3 $null )::JM,41196:CL,40953:CL,41103:CL,41377:CL,41413:CL,42459:CL,41179:CL,41201:CL,41273:CL,40464:CL,41495:CL,42002:CL,42734:CL,41654:CL,41469
41196 :: NORM :: compound :: I :: return v8::DD,41180
41201 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::CE,41202:CD,41208:CD,41212:JM,41232:JM,41223:JM,41241:JM,41242:JM,41244:JM,41213
41202 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::JM,41196:JM,41446:JM,49701
41208 :: CALL :: call :: I :: v7 = p2 $null .length()::JM,41232:JM,41223:JM,41241:JM,41242:JM,41212:JM,41244:JM,41213
41212 :: PRED :: IF :: Z :: if (p3 $null  < v7) goto 16::CD,41213:CD,41214:CD,41215:CD,41223:JM,41232:JM,41241:JM,41242:JM,41212:JM,41244
41213 :: EXPR :: assign :: Ljava/lang/Object :: v25 = p3 $null  ^ #(-1)::CF,41214
41214 :: NORM :: compound :: I :: return v25::DD,41202
41215 :: CALL :: call :: C :: v9 = p2 $null .charAt(p3 $null )::JM,41232:JM,41223:JM,41241:JM,41242:JM,41212:JM,41244:JM,41213
41220 :: EXPR :: reference :: C :: v10 = p0 $null .iValue::DD,41223:JM,41232:JM,41241
41223 :: PRED :: IF :: Z :: if (v9 == v10) goto 84::CD,41224:CD,41228:CD,41232:CD,41244:CD,41245:JM,41241
41224 :: CALL :: call :: C :: v12 = toUpperCase(v9)::JM,41232:JM,41241
41228 :: CALL :: call :: C :: v14 = toUpperCase(v10)::JM,41232:JM,41241
41232 :: PRED :: IF :: Z :: if (v12 == v14) goto 84::CD,41233:CD,41237:CD,41241:CD,41244:CD,41245
41233 :: CALL :: call :: C :: v16 = toLowerCase(v12)::JM,41241
41237 :: CALL :: call :: C :: v18 = toLowerCase(v14)::JM,41241
41241 :: PRED :: IF :: Z :: if (v16 == v18) goto 84::CD,41242:CD,41243:CD,41244:CD,41245
41242 :: EXPR :: assign :: Ljava/lang/Object :: v24 = p3 $null  ^ #(-1)::CF,41243
41243 :: NORM :: compound :: I :: return v24::DD,41202
41244 :: EXPR :: assign :: Ljava/lang/Object :: v22 = p3 $null  + #(1)::CF,41245
41245 :: NORM :: compound :: I :: return v22::DD,41202
41273 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::CE,41274:CD,41283:CD,41288:CD,41292:CD,41296:CD,41300:CD,41324:CD,41343:CD,41344:JM,41339:JM,41341
41274 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::JM,41196:JM,41446:JM,49701
41280 :: EXPR :: reference :: Ljava/util/Map :: v6 = p0 $null .iParseLookup::DD,41283:DD,41343
41283 :: PRED :: IF :: Z :: if (v6 == #(null)) goto 16::CD,41285:CD,41343
41285 :: CALL :: call :: Ljava/util/Map :: v9 = getDefaultTimeZoneNames()::JM,41343:CL,49557
41288 :: CALL :: call :: Ljava/util/Set :: v12 = v10.keySet()::JM,41300:JM,41305
41292 :: CALL :: call :: Ljava/util/Iterator :: v14 = v12.iterator()::JM,41300:JM,41305
41296 :: CALL :: call :: Z :: v16 = v14.hasNext()::JM,41300:JM,41305
41300 :: PRED :: IF :: Z :: if (v16 == #(0)) goto 97::CD,41296:CD,41301:CD,41305:CD,41306:CD,41312:CD,41344:CD,41345:JM,41300:CF,41324
41301 :: CALL :: call :: Ljava/lang/Object :: v19 = v14.next()::JM,41300:JM,41305
41305 :: EXPR :: assign :: Ljava/lang/Object :: v20 = CHECKCAST v19::JM,41322:DD,41345
41306 :: CALL :: call :: Z :: v22 = csStartsWith(p2 $null , p3 $null , v20)::JM,41312:CL,49598
41312 :: PRED :: IF :: Z :: if (v22 == #(0)) goto 92::CF,41345:CD,41313
41313 :: PRED :: IF :: Z :: if (v28 == #(null)) goto 92::CD,41314:CD,41318:CD,41322:CD,41345
41314 :: CALL :: call :: I :: v24 = v20.length()::JM,41322
41318 :: CALL :: call :: I :: v26 = v28.length()::JM,41322
41322 :: PRED :: IF :: Z :: if (v24 <= v26) goto 92::CF,41345
41324 :: PRED :: IF :: Z :: if (v28 == #(null)) goto 126::CD,41325:CD,41335:CD,41339:CD,41340:CD,41341:CD,41342
41325 :: CALL :: call :: Ljava/lang/Object :: v32 = v10.get(v28)::
41335 :: CALL :: call :: I :: v36 = v28.length()::JM,41339
41339 :: EXPR :: assign :: Ljava/lang/Object :: v37 = p3 $null  + v36::CF,41340
41340 :: NORM :: compound :: I :: return v37::DD,41274
41341 :: EXPR :: assign :: Ljava/lang/Object :: v30 = p3 $null  ^ #(-1)::CF,41342
41342 :: NORM :: compound :: I :: return v30::DD,41274
41343 :: EXPR :: assign :: null :: PHI v10 = v6, v9::JM,41300:JM,41305
41344 :: EXPR :: assign :: null :: PHI v28 = v27, #(null)::JM,41300:JM,41305:DD,41313:JM,41322:DD,41324:JM,41339:DD,41345
41345 :: EXPR :: assign :: null :: PHI v27 = v28, v28, v20::DD,41344
41377 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.StringLiteral.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::CE,41378:CD,41387:CD,41393:JM,41401:JM,41403
41378 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.StringLiteral.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::JM,41196:JM,41446:JM,49701
41387 :: CALL :: call :: Z :: v8 = csStartsWithIgnoreCase(p2 $null , p3 $null , v6)::JM,41393:CL,49355
41393 :: PRED :: IF :: Z :: if (v8 == #(0)) goto 24::CD,41397:CD,41401:CD,41402:CD,41403:CD,41404
41394 :: EXPR :: reference :: Ljava/lang/String :: v12 = p0 $null .iValue::JM,41401
41397 :: CALL :: call :: I :: v14 = v12.length()::JM,41401
41401 :: EXPR :: assign :: Ljava/lang/Object :: v15 = p3 $null  + v14::CF,41402
41402 :: NORM :: compound :: I :: return v15::DD,41378
41403 :: EXPR :: assign :: Ljava/lang/Object :: v11 = p3 $null  ^ #(-1)::CF,41404
41404 :: NORM :: compound :: I :: return v11::DD,41378
41413 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.Composite.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::CE,41414:CD,41429:CD,41430:CD,41445:CD,41446:CD,41447
41414 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.Composite.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::JM,41196:JM,41446:JM,49701
41420 :: EXPR :: reference :: [Lorg/joda/time/format/InternalParser :: v6 = p0 $null .iParsers::DD,41429
41429 :: EXPR :: assign :: I :: v8 = v6.length::DD,41430:CF,41446
41430 :: PRED :: IF :: Z :: if (v16 >= v8) goto 59::CD,41431:CF,41445
41431 :: PRED :: IF :: Z :: if (v15 < #(0)) goto 59::CD,41430:CD,41436:CD,41443:CD,41446:CD,41447:CF,41445
41436 :: CALL :: call :: I :: v12 = v10.parseInto(p1 $null , p2 $null , v15)::JM,41446:CL,40953:CL,41103:CL,41377:CL,41413:CL,42459:CL,41179:CL,41201:CL,41273:CL,40464:CL,41495:CL,42002:CL,42734:CL,41654:CL,41469
41443 :: EXPR :: assign :: Ljava/lang/Object :: v14 = v16 + #(1)::DD,41447
41445 :: NORM :: compound :: I :: return v15::DD,41414
41446 :: EXPR :: assign :: null :: PHI v15 = v12, p3 $null ::CF,41447:DD,41431:DD,41445
41447 :: EXPR :: assign :: null :: PHI v16 = v14, #(0)::DD,41430:DD,41443
41469 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserInternalParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::CE,41470:CD,41483:CD,41490
41470 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeParserInternalParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::JM,41196:JM,41446:JM,41541:JM,41573:JM,41526:JM,41527:JM,41547:JM,41532:JM,41548:JM,49701
41483 :: CALL :: call :: I :: v10 = v6.parseInto(p1 $null , v8, p3 $null )::JM,41490:CL,49684
41490 :: NORM :: compound :: I :: return v10::DD,41470
41495 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.MatchingParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::CE,41496:CD,41505:CD,41506:CD,41510:CD,41569:CD,41571:CD,41572:JM,41557:JM,41526:JM,41558:JM,41516:JM,41532:JM,41517:CD,41576
41496 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.MatchingParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::JM,41196:JM,41446:JM,49701
41502 :: EXPR :: reference :: [Lorg/joda/time/format/InternalParser :: v6 = p0 $null .iParsers::DD,41505
41505 :: EXPR :: assign :: I :: v7 = v6.length::DD,41510:DD,41534
41506 :: CALL :: call :: Ljava/lang/Object :: v9 = p1 $null .saveState()::CL,49706
41510 :: PRED :: IF :: Z :: if (v35 >= v7) goto 174::CF,41576:CD,41515:CD,41557
41511 :: EXPR :: reference :: Ljava/lang/Object :: v12 = v6[v35]::DD,41515
41515 :: PRED :: IF :: Z :: if (v12 != #(null)) goto 70::CD,41516:CD,41519:CD,41526
41516 :: PRED :: IF :: Z :: if (v32 > p3 $null ) goto 62::CD,41517:CD,41557:CD,41576
41517 :: NORM :: compound :: I :: return p3 $null ::DD,41496
41519 :: CALL :: call :: I :: v14 = v12.parseInto(p1 $null , p2 $null , p3 $null )::JM,41541:JM,41573:JM,41526:JM,41527:JM,41547:JM,41532:JM,41548:CL,41179:CL,41469
41526 :: PRED :: IF :: Z :: if (v14 < p3 $null ) goto 138::CD,41510:CD,41527:CD,41547:CD,41555:CD,41569:CD,41571:CD,41572:CD,41573:CD,41575:CD,41576
41527 :: PRED :: IF :: Z :: if (v14 <= v32) goto 161::CF,41573:CD,41510:CD,41528:CD,41532:CD,41555:CD,41569:CD,41571:CD,41572:CD,41575:CD,41576:JM,41557:JM,41526:JM,41558:JM,41516:JM,41517
41528 :: CALL :: call :: I :: v18 = p2 $null .length()::JM,41569:JM,41571:JM,41557:JM,41526:JM,41558:JM,41516:JM,41532:JM,41517
41532 :: PRED :: IF :: Z :: if (v14 >= v18) goto 122::CD,41533:CD,41534:CD,41541
41533 :: EXPR :: assign :: Ljava/lang/Object :: v20 = v35 + #(1)::DD,41534
41534 :: PRED :: IF :: Z :: if (v20 >= v7) goto 122::CD,41535:CD,41540:CD,41541
41535 :: EXPR :: assign :: Ljava/lang/Object :: v21 = v35 + #(1)::
41536 :: EXPR :: reference :: Ljava/lang/Object :: v22 = v6[v21]::DD,41540
41540 :: PRED :: IF :: Z :: if (v22 != #(null)) goto 128::CD,41510:CD,41541:CD,41542:CD,41555:CD,41569:CD,41571:CD,41572:CD,41573:CD,41575:CD,41576
41541 :: NORM :: compound :: I :: return v14::DD,41496
41542 :: CALL :: call :: Ljava/lang/Object :: v24 = p1 $null .saveState()::CL,49706
41547 :: PRED :: IF :: Z :: if (v14 >= #(0)) goto 161::CF,41573:CD,41548:CD,41549:CD,41575
41548 :: EXPR :: assign :: Ljava/lang/Object :: v16 = v14 ^ #(-1)::DD,41549:DD,41575
41549 :: PRED :: IF :: Z :: if (v16 <= v34) goto 161::CF,41573:CD,41575
41555 :: EXPR :: assign :: Ljava/lang/Object :: v31 = v35 + #(1)::DD,41572
41557 :: PRED :: IF :: Z :: if (v32 > p3 $null ) goto 190::CD,41558:CD,41566
41558 :: PRED :: IF :: Z :: if (v32 != p3 $null ) goto 206::CD,41559:CD,41567:CD,41568
41559 :: PRED :: IF :: Z :: if (v36 == #(0)) goto 206::CD,41566:CD,41567:CD,41568
41566 :: NORM :: compound :: I :: return v32::DD,41496
41567 :: EXPR :: assign :: Ljava/lang/Object :: v37 = v34 ^ #(-1)::CF,41568
41568 :: NORM :: compound :: I :: return v37::DD,41496
41569 :: EXPR :: assign :: null :: PHI v32 = v25, p3 $null ::DD,41516:DD,41527:DD,41557:DD,41558:DD,41566:DD,41573
41571 :: EXPR :: assign :: null :: PHI v34 = v27, p3 $null ::CF,41572:DD,41549:DD,41567:DD,41575
41572 :: EXPR :: assign :: null :: PHI v35 = v31, #(0)::DD,41510:DD,41533:DD,41535:DD,41555
41573 :: EXPR :: assign :: null :: PHI v25 = v32, v14, v32, v32, v32::DD,41569
41575 :: EXPR :: assign :: null :: PHI v27 = v34, v34, v34, v34, v16::DD,41571
41576 :: EXPR :: assign :: null :: PHI v36 = #(0), #(1)::DD,41559:CF,41557
41654 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::CE,41655:CD,41661:CD,41665:CD,41669:CD,41733:CD,41734:JM,41824:JM,41696:JM,41697:JM,41765:JM,41766:JM,41835:JM,41676:JM,41776:JM,41777:JM,41714:JM,41686:JM,41687:JM,41688
41655 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::JM,41196:JM,41446:JM,49701
41661 :: CALL :: call :: I :: v7 = p2 $null .length()::JM,41824:JM,41696:JM,41665:JM,41697:JM,41765:JM,41766:JM,41835:JM,41676:JM,41776:JM,41777:JM,41714:JM,41686:JM,41687:JM,41688
41665 :: EXPR :: assign :: Ljava/lang/Object :: v8 = v7 - p3 $null ::JM,41670:JM,41675:DD,41825
41666 :: EXPR :: reference :: Z :: v9 = p0 $null .iLenientParse::DD,41669
41669 :: PRED :: IF :: Z :: if (v9 != #(0)) goto 48::CD,41670:CD,41675:CD,41678:CD,41701:CD,41824:CD,41825:CD,41826:CD,41827:CD,41828:CD,41835
41670 :: CALL :: call :: I :: v66 = min(#(2), v8)::JM,41670:JM,41675
41675 :: PRED :: IF :: Z :: if (v66 >= #(2)) goto 295::CF,41835:CD,41676:CD,41677:CD,41760:CD,41765
41676 :: EXPR :: assign :: Ljava/lang/Object :: v107 = p3 $null  ^ #(-1)::CF,41677
41677 :: NORM :: compound :: I :: return v107::DD,41655
41678 :: PRED :: IF :: Z :: if (v21 >= v26) goto 144::CD,41679:CD,41680:CD,41685:CF,41701
41679 :: EXPR :: assign :: Ljava/lang/Object :: v11 = v25 + v21::JM,41824:JM,41696:JM,41665:JM,41697:JM,41765:JM,41766:JM,41835:JM,41676:JM,41776:JM,41777:JM,41714:JM,41686:JM,41687:JM,41688
41680 :: CALL :: call :: C :: v13 = p2 $null .charAt(v11)::JM,41824:JM,41696:JM,41665:JM,41697:JM,41765:JM,41766:JM,41835:JM,41676:JM,41776:JM,41777:JM,41714:JM,41686:JM,41687:JM,41688
41685 :: PRED :: IF :: Z :: if (v21 != #(0)) goto 123::CD,41686:CD,41696
41686 :: PRED :: IF :: Z :: if (v13 == #(45)) goto 89::CD,41678:CD,41687:CD,41688:CD,41690:CD,41824:CD,41825:CD,41826:CD,41827:CD,41828:CD,41829
41687 :: PRED :: IF :: Z :: if (v13 != #(43)) goto 123::CD,41678:CD,41688:CD,41690:CD,41696:CD,41824:CD,41825:CD,41826:CD,41827:CD,41828:CD,41829
41688 :: PRED :: IF :: Z :: if (v13 != #(45)) goto 101::CD,41829
41690 :: PRED :: IF :: Z :: if (v17 == #(0)) goto 110::CD,41691:CD,41693:CD,41694:CD,41824:CD,41825:CD,41826:CD,41827:CD,41828
41691 :: EXPR :: assign :: Ljava/lang/Object :: v18 = v21 + #(1)::DD,41828
41693 :: EXPR :: assign :: Ljava/lang/Object :: v22 = v25 + #(1)::DD,41824:CF,41694
41694 :: EXPR :: assign :: Ljava/lang/Object :: v24 = v26 + #(-1)::DD,41825
41696 :: PRED :: IF :: Z :: if (v13 < #(48)) goto 144::CD,41697:CF,41701
41697 :: PRED :: IF :: Z :: if (v13 <= #(57)) goto 136::CD,41678:CD,41699:CD,41824:CD,41825:CD,41826:CD,41827:CD,41828
41699 :: EXPR :: assign :: Ljava/lang/Object :: v29 = v21 + #(1)::DD,41828
41701 :: PRED :: IF :: Z :: if (v21 != #(0)) goto 153::CD,41702:CD,41703:CD,41704
41702 :: EXPR :: assign :: Ljava/lang/Object :: v64 = v25 ^ #(-1)::CF,41703
41703 :: NORM :: compound :: I :: return v64::DD,41655
41704 :: PRED :: IF :: Z :: if (v19 != #(0)) goto 166::CD,41705:CD,41706:CD,41754:CD,41759:CD,41833:CD,41835
41705 :: PRED :: IF :: Z :: if (v21 == #(2)) goto 295::CF,41835:CD,41706:CD,41754:CD,41759:CD,41760:CD,41765:CD,41833
41706 :: PRED :: IF :: Z :: if (v21 < #(9)) goto 200::CD,41707:CD,41708:CD,41714:CD,41718:CD,41723:CD,41725:CD,41726:CD,41735:CD,41736:CD,41749:CD,41830:CD,41832:CD,41833
41707 :: EXPR :: assign :: Ljava/lang/Object :: v53 = v25 + v21::JM,41696:JM,41776:JM,41665:JM,41697:JM,41777:JM,41714:JM,41765:JM,41686:JM,41766:JM,41687:JM,41688:DD,41833:JM,41824:JM,41835:JM,41676
41708 :: CALL :: call :: Ljava/lang/CharSequence :: v55 = p2 $null .subSequence(v25, v53)::JM,41824:JM,41696:JM,41665:JM,41697:JM,41765:JM,41766:JM,41835:JM,41676:JM,41776:JM,41777:JM,41714:JM,41686:JM,41687:JM,41688
41714 :: CALL :: call :: Ljava/lang/String :: v57 = v55.toString()::JM,41776:JM,41777:JM,41714:JM,41765:JM,41766
41718 :: CALL :: call :: I :: v59 = parseInt(v57)::
41723 :: PRED :: IF :: Z :: if (v20 == #(0)) goto 209::CF,41830:CD,41724
41724 :: EXPR :: assign :: Ljava/lang/Object :: v32 = v25 + #(1)::DD,41830
41725 :: EXPR :: assign :: Ljava/lang/Object :: v34 = v33 + #(1)::DD,41832:JM,41824:JM,41696:JM,41665:JM,41697:JM,41765:JM,41766:JM,41835:JM,41676:JM,41776:JM,41777:JM,41714:JM,41686:JM,41687:JM,41688
41726 :: CALL :: call :: C :: v36 = p2 $null .charAt(v33)::JM,41824:JM,41696:JM,41665:JM,41697:JM,41765:JM,41766:JM,41835:JM,41676:JM,41776:JM,41777:JM,41714:JM,41686:JM,41687:JM,41688
41733 :: EXPR :: assign :: Ljava/lang/Object :: v38 = v25 ^ #(-1)::DD,41734
41734 :: NORM :: compound :: I :: return v38::DD,41655
41735 :: EXPR :: assign :: Ljava/lang/Object :: v40 = v25 + v21::DD,41736:DD,41833
41736 :: PRED :: IF :: Z :: if (v51 >= v40) goto 273::CD,41740:CD,41741:CD,41832:CF,41749
41740 :: EXPR :: assign :: Ljava/lang/Object :: v45 = v51 + #(1)::DD,41832:JM,41824:JM,41696:JM,41665:JM,41697:JM,41765:JM,41766:JM,41835:JM,41676:JM,41776:JM,41777:JM,41714:JM,41686:JM,41687:JM,41688
41741 :: CALL :: call :: C :: v47 = p2 $null .charAt(v51)::JM,41824:JM,41696:JM,41665:JM,41697:JM,41765:JM,41766:JM,41835:JM,41676:JM,41776:JM,41777:JM,41714:JM,41686:JM,41687:JM,41688
41749 :: PRED :: IF :: Z :: if (v20 == #(0)) goto 283::CF,41833
41754 :: CALL :: call :: V :: p1 $null .saveField(v62, v61)::CL,49760
41759 :: NORM :: compound :: I :: return v60::DD,41655
41760 :: CALL :: call :: C :: v70 = p2 $null .charAt(v67)::JM,41824:JM,41696:JM,41665:JM,41697:JM,41765:JM,41766:JM,41835:JM,41676:JM,41776:JM,41777:JM,41714:JM,41686:JM,41687:JM,41688
41765 :: PRED :: IF :: Z :: if (v70 < #(48)) goto 318::CD,41766:CD,41767:CD,41768
41766 :: PRED :: IF :: Z :: if (v70 <= #(57)) goto 324::CD,41767:CD,41768:CD,41770:CD,41771:CD,41776
41767 :: EXPR :: assign :: Ljava/lang/Object :: v106 = v67 ^ #(-1)::CF,41768
41768 :: NORM :: compound :: I :: return v106::DD,41655
41770 :: EXPR :: assign :: Ljava/lang/Object :: v72 = v67 + #(1)::JM,41824:JM,41696:JM,41665:JM,41697:JM,41765:JM,41766:JM,41835:JM,41676:JM,41776:JM,41777:JM,41714:JM,41686:JM,41687:JM,41688
41771 :: CALL :: call :: C :: v74 = p2 $null .charAt(v72)::JM,41824:JM,41696:JM,41665:JM,41697:JM,41765:JM,41766:JM,41835:JM,41676:JM,41776:JM,41777:JM,41714:JM,41686:JM,41687:JM,41688
41776 :: PRED :: IF :: Z :: if (v74 < #(48)) goto 354::CD,41777:CD,41778:CD,41779
41777 :: PRED :: IF :: Z :: if (v74 <= #(57)) goto 359::CD,41778:CD,41779:CD,41816:CD,41821:CD,41822
41778 :: EXPR :: assign :: Ljava/lang/Object :: v105 = v67 ^ #(-1)::CF,41779
41779 :: NORM :: compound :: I :: return v105::DD,41655
41816 :: CALL :: call :: V :: p1 $null .saveField(v102, v101)::CL,49760
41821 :: EXPR :: assign :: Ljava/lang/Object :: v104 = v67 + #(2)::CF,41822
41822 :: NORM :: compound :: I :: return v104::DD,41655
41824 :: EXPR :: assign :: null :: PHI v25 = v25, v22, v25, p3 $null ::CF,41825:DD,41679:DD,41693:DD,41702:DD,41707:JM,41696:JM,41776:JM,41665:JM,41697:JM,41777:JM,41714:JM,41765:JM,41686:JM,41766:JM,41687:JM,41688:DD,41724:DD,41733:DD,41735:DD,41824:DD,41830:DD,41835
41825 :: EXPR :: assign :: null :: PHI v26 = v26, v24, v26, v8::CF,41826:DD,41678:DD,41694:DD,41825
41826 :: EXPR :: assign :: null :: PHI v19 = #(1), #(1), v19, #(0)::CF,41827:DD,41704:DD,41826
41827 :: EXPR :: assign :: null :: PHI v20 = v17, v17, v20, #(0)::CF,41828:DD,41723:DD,41749:DD,41827
41828 :: EXPR :: assign :: null :: PHI v21 = v18, v21, v29, #(0)::DD,41678:DD,41679:DD,41685:DD,41691:DD,41699:DD,41701:DD,41705:DD,41706:DD,41707:DD,41735:DD,41828
41829 :: EXPR :: assign :: null :: PHI v17 = #(1), #(0)::DD,41690:DD,41827
41830 :: EXPR :: assign :: null :: PHI v33 = v25, v32::DD,41725:JM,41696:JM,41776:JM,41665:JM,41697:JM,41777:JM,41714:JM,41765:JM,41686:JM,41766:JM,41687:JM,41688
41832 :: EXPR :: assign :: null :: PHI v51 = v45, v34::DD,41736:DD,41740:JM,41696:JM,41776:JM,41665:JM,41697:JM,41777:JM,41714:JM,41765:JM,41686:JM,41766:JM,41687:JM,41688
41833 :: EXPR :: assign :: null :: PHI v60 = v53, v40, v40::DD,41759
41835 :: EXPR :: assign :: null :: PHI v67 = p3 $null , v25::JM,41696:JM,41776:JM,41665:JM,41697:JM,41777:JM,41714:JM,41765:JM,41686:JM,41766:JM,41687:JM,41688:DD,41767:DD,41770:DD,41778:DD,41821:JM,41824:JM,41835:JM,41676
42002 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TextField.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::CE,42003:CD,42009:CD,42015:CD,42020:CD,42021:CD,42037:CD,42042:CD,42043:JM,42320:JM,42278:JM,42279:JM,42313:JM,42075:JM,42284
42003 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.TextField.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::JM,41196:JM,41446:JM,49701
42009 :: CALL :: call :: Ljava/util/Locale :: v7 = p1 $null .getLocale()::JM,42197:CL,49797
42015 :: CALL :: call :: Ljava/lang/Object :: v12 = v10.get(v7)::JM,42020
42020 :: EXPR :: assign :: Ljava/lang/Object :: v13 = CHECKCAST v12::DD,42021
42021 :: PRED :: IF :: Z :: if (v13 != #(null)) goto 57::CF,42022:CD,42028
42022 :: NORM :: declaration :: Ljava/util/concurrent/ConcurrentHashMap :: v14 = new java.util.concurrent.ConcurrentHashMap::
42028 :: CALL :: call :: Ljava/lang/Object :: v18 = v16.put(v7, v14)::
42037 :: CALL :: call :: Ljava/lang/Object :: v22 = v19.get(v20)::JM,42042
42042 :: EXPR :: assign :: Ljava/lang/Object :: v23 = CHECKCAST v22::DD,42043
42043 :: PRED :: IF :: Z :: if (v23 != #(null)) goto 417::CF,42044:JM,54849:JM,27297:JM,27277:CD,42060:CD,42065:CD,42069:CD,42073:CD,42074:CD,42269:CD,42270:CD,42274:CD,42278:CD,42279:CD,42284:CD,42319:CD,42320
42044 :: NORM :: declaration :: Ljava/util/concurrent/ConcurrentHashMap :: v31 = new java.util.concurrent.ConcurrentHashMap::DD,42238
42060 :: CALL :: call :: Lorg/joda/time/MutableDateTime$Property :: v40 = v34.property(v38)::CL,49821
42065 :: CALL :: call :: I :: v42 = v40.getMinimumValueOverall()::JM,42073:JM,42316:CL,49893
42069 :: CALL :: call :: I :: v44 = v40.getMaximumValueOverall()::JM,42082:JM,42073:CL,49907
42073 :: EXPR :: assign :: Ljava/lang/Object :: v45 = v44 - v42::DD,42074
42074 :: PRED :: IF :: Z :: if (v45 <= #(32)) goto 142::CD,42075:CD,42076:CD,42077:CD,42082:CD,42188:CD,42192:CD,42197:CD,42237:CD,42242:CD,42253:CD,42274:CD,42278:CD,42279:CD,42284:CD,42316:CD,42317:CD,42319:CD,42320
42075 :: EXPR :: assign :: Ljava/lang/Object :: v144 = p3 $null  ^ #(-1)::CF,42076
42076 :: NORM :: compound :: I :: return v144::DD,42003
42077 :: CALL :: call :: I :: v47 = v40.getMaximumTextLength(v7)::JM,42317:CL,49921
42082 :: PRED :: IF :: Z :: if (v89 > v44) goto 304::CD,42083:CD,42088:CD,42095:CD,42101:CD,42106:CD,42113:CD,42119:CD,42124:CD,42131:CD,42137:CD,42144:CD,42150:CD,42155:CD,42162:CD,42168:CD,42173:CD,42180:CD,42186:CD,42316:JM,42197
42083 :: CALL :: call :: Lorg/joda/time/MutableDateTime :: v49 = v40.set(v89)::CL,49938
42088 :: CALL :: call :: Ljava/lang/String :: v51 = v40.getAsShortText(v7)::CL,49976
42095 :: CALL :: call :: Ljava/lang/Object :: v54 = v31.put(v51, v52)::
42101 :: CALL :: call :: Ljava/lang/String :: v56 = v40.getAsShortText(v7)::CL,49976
42106 :: CALL :: call :: Ljava/lang/String :: v58 = v56.toLowerCase(v7)::JM,42197
42113 :: CALL :: call :: Ljava/lang/Object :: v61 = v31.put(v58, v59)::
42119 :: CALL :: call :: Ljava/lang/String :: v63 = v40.getAsShortText(v7)::CL,49976
42124 :: CALL :: call :: Ljava/lang/String :: v65 = v63.toUpperCase(v7)::JM,42197
42131 :: CALL :: call :: Ljava/lang/Object :: v68 = v31.put(v65, v66)::
42137 :: CALL :: call :: Ljava/lang/String :: v70 = v40.getAsText(v7)::CL,49999
42144 :: CALL :: call :: Ljava/lang/Object :: v73 = v31.put(v70, v71)::
42150 :: CALL :: call :: Ljava/lang/String :: v75 = v40.getAsText(v7)::CL,49999
42155 :: CALL :: call :: Ljava/lang/String :: v77 = v75.toLowerCase(v7)::JM,42197
42162 :: CALL :: call :: Ljava/lang/Object :: v80 = v31.put(v77, v78)::
42168 :: CALL :: call :: Ljava/lang/String :: v82 = v40.getAsText(v7)::CL,49999
42173 :: CALL :: call :: Ljava/lang/String :: v84 = v82.toUpperCase(v7)::JM,42197
42180 :: CALL :: call :: Ljava/lang/Object :: v87 = v31.put(v84, v85)::
42186 :: EXPR :: assign :: Ljava/lang/Object :: v88 = v89 + #(1)::DD,42316
42188 :: CALL :: call :: Ljava/lang/String :: v92 = v7.getLanguage()::JM,42197
42192 :: CALL :: call :: Z :: v94 = #(en).equals(v92)::JM,42197
42197 :: PRED :: IF :: Z :: if (v94 == #(0)) goto 379::CF,42317:CD,42201:CD,42204
42198 :: EXPR :: reference :: Lorg/joda/time/DateTimeFieldType :: v95 = p0 $null .iFieldType::DD,42204
42201 :: CALL :: call :: Lorg/joda/time/DateTimeFieldType :: v97 = era()::JM,42204:CL,44276
42204 :: PRED :: IF :: Z :: if (v95 != v97) goto 379::CF,42317:CD,42207:CD,42215:CD,42223:CD,42231
42207 :: CALL :: call :: Ljava/lang/Object :: v101 = v31.put(#(BCE), v99)::
42215 :: CALL :: call :: Ljava/lang/Object :: v105 = v31.put(#(bce), v103)::
42223 :: CALL :: call :: Ljava/lang/Object :: v109 = v31.put(#(CE), v107)::
42231 :: CALL :: call :: Ljava/lang/Object :: v113 = v31.put(#(ce), v111)::
42237 :: NORM :: declaration :: [Ljava/lang/Object :: v117 = new java.lang.Object[]::
42238 :: EXPR :: modify :: Ljava/lang/Object :: v117[#(0)] = v31::
42242 :: CALL :: call :: Ljava/lang/Integer :: v119 = valueOf(v115)::JM,42246
42246 :: EXPR :: modify :: Ljava/lang/Object :: v117[#(1)] = v119::
42253 :: CALL :: call :: Ljava/lang/Object :: v122 = v19.put(v120, v117)::
42265 :: EXPR :: reference :: Ljava/lang/Object :: v27 = v23[#(1)]::DD,42269
42269 :: EXPR :: assign :: Ljava/lang/Object :: v28 = CHECKCAST v27::JM,42319
42270 :: CALL :: call :: I :: v30 = v28.intValue()::JM,42319
42274 :: CALL :: call :: I :: v127 = p2 $null .length()::JM,42320:JM,42278:JM,42279:JM,42313:JM,42075:JM,42284
42278 :: EXPR :: assign :: Ljava/lang/Object :: v128 = p3 $null  + v124::JM,42320:JM,42279
42279 :: CALL :: call :: I :: v130 = min(v127, v128)::JM,42320:JM,42279
42284 :: PRED :: IF :: Z :: if (v139 <= p3 $null ) goto 511::CD,42285:CD,42295:CD,42300:CD,42313:CD,42314:JM,42320:JM,42278:JM,42279:JM,42075:JM,42284
42285 :: CALL :: call :: Ljava/lang/CharSequence :: v132 = p2 $null .subSequence(p3 $null , v139)::JM,42320:JM,42278:JM,42279:JM,42313:JM,42075:JM,42284
42295 :: CALL :: call :: Z :: v136 = v123.containsKey(v134)::JM,42300
42300 :: PRED :: IF :: Z :: if (v136 == #(0)) goto 503::CD,42284:CD,42304:CD,42310:CD,42311:CD,42320
42304 :: CALL :: call :: V :: p1 $null .saveField(v142, v134, v7)::CL,50049
42310 :: NORM :: compound :: I :: return v139::DD,42003
42311 :: EXPR :: assign :: Ljava/lang/Object :: v138 = v139 + #(-1)::DD,42320
42313 :: EXPR :: assign :: Ljava/lang/Object :: v141 = p3 $null  ^ #(-1)::CF,42314
42314 :: NORM :: compound :: I :: return v141::DD,42003
42316 :: EXPR :: assign :: null :: PHI v89 = v88, v42::DD,42082:DD,42186
42317 :: EXPR :: assign :: null :: PHI v115 = v47, v47, #(3)::CF,42237:JM,42246:DD,42319
42319 :: EXPR :: assign :: null :: PHI v124 = v115, v30::JM,42320:JM,42279:JM,42313:JM,42075:JM,42284:DD,42278
42320 :: EXPR :: assign :: null :: PHI v139 = v138, v130::DD,42284:JM,42320:JM,42279:DD,42310:DD,42311
42459 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.NumberFormatter.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::CE,42460:CD,42469:CD,42473:CD,42474:CD,42479:CD,42527:CD,42576:CD,42577:CD,42604:CD,42605:CD,42606:CD,42607:CD,42610:CD,42611:JM,42528:JM,42499:JM,42532:JM,42533:JM,42567:JM,42506:JM,42507:JM,42540:JM,42480:JM,42578:JM,42515:JM,42612:JM,42549:JM,42487:JM,42488:JM,42522:JM,42523:JM,42556:JM,42493:JM,42495
42460 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.NumberFormatter.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::JM,41136:JM,41123:JM,41140:JM,41141:JM,41143:JM,41117:JM,41118:JM,41196:JM,41446:JM,49701
42466 :: EXPR :: reference :: I :: v6 = p0 $null .iMaxParsedDigits::JM,42474:JM,42604
42469 :: CALL :: call :: I :: v8 = p2 $null .length()::JM,42528:JM,42499:JM,42532:JM,42533:JM,42567:JM,42473:JM,42506:JM,42507:JM,42540:JM,42480:JM,42576:JM,42578:JM,42515:JM,42612:JM,42549:JM,42487:JM,42488:JM,42522:JM,42523:JM,42556:JM,42493:JM,42495
42473 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v8 - p3 $null ::JM,42474:JM,42604
42474 :: CALL :: call :: I :: v11 = min(v6, v9)::JM,42474:JM,42604
42479 :: PRED :: IF :: Z :: if (v39 >= v36) goto 186::CF,42610:CD,42480:CD,42481:CD,42486
42480 :: EXPR :: assign :: Ljava/lang/Object :: v13 = p3 $null  + v39::JM,42528:JM,42499:JM,42532:JM,42533:JM,42567:JM,42473:JM,42506:JM,42507:JM,42540:JM,42480:JM,42576:JM,42578:JM,42515:JM,42612:JM,42549:JM,42487:JM,42488:JM,42522:JM,42523:JM,42556:JM,42493:JM,42495
42481 :: CALL :: call :: C :: v15 = p2 $null .charAt(v13)::JM,42528:JM,42499:JM,42532:JM,42533:JM,42567:JM,42473:JM,42506:JM,42507:JM,42540:JM,42480:JM,42576:JM,42578:JM,42515:JM,42612:JM,42549:JM,42487:JM,42488:JM,42522:JM,42523:JM,42556:JM,42493:JM,42495
42486 :: PRED :: IF :: Z :: if (v39 != #(0)) goto 165::CD,42487:CD,42522:CD,42610:CD,42611
42487 :: PRED :: IF :: Z :: if (v15 == #(45)) goto 65::CD,42488:CD,42492
42488 :: PRED :: IF :: Z :: if (v15 != #(43)) goto 165::CD,42492:CD,42522:CD,42610:CD,42611
42489 :: EXPR :: reference :: Z :: v18 = p0 $null .iSigned::DD,42492
42492 :: PRED :: IF :: Z :: if (v18 == #(0)) goto 165::CD,42493:CD,42495:CD,42497:CD,42498:CD,42522:CD,42608:CD,42609:CD,42610:CD,42611
42493 :: PRED :: IF :: Z :: if (v15 != #(45)) goto 89::CD,42608
42495 :: PRED :: IF :: Z :: if (v15 != #(43)) goto 102::CD,42609
42497 :: EXPR :: assign :: Ljava/lang/Object :: v22 = v39 + #(1)::DD,42498
42498 :: PRED :: IF :: Z :: if (v22 >= v36) goto 186::CF,42610:CD,42499:CD,42500:CD,42501:CD,42506:CD,42611
42499 :: EXPR :: assign :: Ljava/lang/Object :: v23 = p3 $null  + v39::DD,42500
42500 :: EXPR :: assign :: Ljava/lang/Object :: v24 = v23 + #(1)::JM,42528:JM,42499:JM,42532:JM,42533:JM,42567:JM,42473:JM,42506:JM,42507:JM,42540:JM,42480:JM,42576:JM,42578:JM,42515:JM,42612:JM,42549:JM,42487:JM,42488:JM,42522:JM,42523:JM,42556:JM,42493:JM,42495
42501 :: CALL :: call :: C :: v26 = p2 $null .charAt(v24)::JM,42528:JM,42499:JM,42532:JM,42533:JM,42567:JM,42473:JM,42506:JM,42507:JM,42540:JM,42480:JM,42576:JM,42578:JM,42515:JM,42612:JM,42549:JM,42487:JM,42488:JM,42522:JM,42523:JM,42556:JM,42493:JM,42495
42506 :: PRED :: IF :: Z :: if (v26 < #(48)) goto 186::CF,42610:CD,42507
42507 :: PRED :: IF :: Z :: if (v26 <= #(57)) goto 138::CD,42479:CD,42509:CD,42510:CD,42511:CD,42515:CD,42516:CD,42604:CD,42605:CD,42606:CD,42607:CD,42610:CD,42611
42509 :: EXPR :: assign :: Ljava/lang/Object :: v29 = v39 + #(1)::DD,42607:CF,42510
42510 :: EXPR :: assign :: Ljava/lang/Object :: v30 = v36 + #(1)::JM,42516:JM,42604:JM,42528:JM,42499:JM,42532:JM,42533:JM,42567:JM,42473:JM,42506:JM,42507:JM,42540:JM,42480:JM,42576:JM,42578:JM,42515:JM,42612:JM,42549:JM,42487:JM,42488:JM,42522:JM,42523:JM,42556:JM,42493:JM,42495
42511 :: CALL :: call :: I :: v32 = p2 $null .length()::JM,42528:JM,42499:JM,42532:JM,42533:JM,42567:JM,42473:JM,42506:JM,42507:JM,42540:JM,42480:JM,42576:JM,42578:JM,42515:JM,42612:JM,42549:JM,42487:JM,42488:JM,42522:JM,42523:JM,42556:JM,42493:JM,42495
42515 :: EXPR :: assign :: Ljava/lang/Object :: v33 = v32 - p3 $null ::JM,42516:JM,42604
42516 :: CALL :: call :: I :: v35 = min(v30, v33)::JM,42516:JM,42604
42522 :: PRED :: IF :: Z :: if (v15 < #(48)) goto 186::CF,42610:CD,42523
42523 :: PRED :: IF :: Z :: if (v15 <= #(57)) goto 178::CD,42479:CD,42525:CD,42604:CD,42605:CD,42606:CD,42607:CD,42610:CD,42611
42525 :: EXPR :: assign :: Ljava/lang/Object :: v40 = v39 + #(1)::DD,42607
42527 :: PRED :: IF :: Z :: if (v39 != #(0)) goto 197::CD,42528:CD,42529:CD,42530:CD,42597:CD,42602:CD,42615
42528 :: EXPR :: assign :: Ljava/lang/Object :: v87 = p3 $null  ^ #(-1)::CF,42529
42529 :: NORM :: compound :: I :: return v87::DD,42460
42530 :: PRED :: IF :: Z :: if (v39 < #(9)) goto 264::CD,42531:CD,42565:CD,42568:CD,42569:CD,42578:CD,42579:CD,42592:CD,42612:CD,42614:CD,42615
42531 :: PRED :: IF :: Z :: if (v43 == #(0)) goto 238::CD,42532:CD,42533:CD,42534:CD,42540:CD,42544:CD,42549:CD,42550:CD,42556:CD,42560:CD,42615
42532 :: EXPR :: assign :: Ljava/lang/Object :: v75 = p3 $null  + #(1)::JM,42515:JM,42487:JM,42488:JM,42473:JM,42522:JM,42506:JM,42523:JM,42507:JM,42540:JM,42556:JM,42493:JM,42495:CF,42533
42533 :: EXPR :: assign :: Ljava/lang/Object :: v76 = p3 $null  + v39::JM,42515:JM,42487:JM,42488:JM,42473:JM,42522:JM,42506:JM,42523:JM,42507:JM,42540:JM,42556:JM,42493:JM,42495:DD,42615:JM,42528:JM,42499:JM,42532:JM,42533:JM,42567:JM,42480:JM,42576:JM,42578:JM,42612:JM,42549
42534 :: CALL :: call :: Ljava/lang/CharSequence :: v78 = p2 $null .subSequence(v75, v76)::JM,42528:JM,42499:JM,42532:JM,42533:JM,42567:JM,42473:JM,42506:JM,42507:JM,42540:JM,42480:JM,42576:JM,42578:JM,42515:JM,42612:JM,42549:JM,42487:JM,42488:JM,42522:JM,42523:JM,42556:JM,42493:JM,42495
42540 :: CALL :: call :: Ljava/lang/String :: v80 = v78.toString()::JM,42540:JM,42556
42544 :: CALL :: call :: I :: v82 = parseInt(v80)::
42549 :: EXPR :: assign :: Ljava/lang/Object :: v68 = p3 $null  + v39::JM,42515:JM,42487:JM,42488:JM,42473:JM,42522:JM,42506:JM,42523:JM,42507:JM,42540:JM,42556:JM,42493:JM,42495:DD,42615:JM,42528:JM,42499:JM,42532:JM,42533:JM,42567:JM,42480:JM,42576:JM,42578:JM,42612:JM,42549
42550 :: CALL :: call :: Ljava/lang/CharSequence :: v70 = p2 $null .subSequence(p3 $null , v68)::JM,42528:JM,42499:JM,42532:JM,42533:JM,42567:JM,42473:JM,42506:JM,42507:JM,42540:JM,42480:JM,42576:JM,42578:JM,42515:JM,42612:JM,42549:JM,42487:JM,42488:JM,42522:JM,42523:JM,42556:JM,42493:JM,42495
42556 :: CALL :: call :: Ljava/lang/String :: v72 = v70.toString()::JM,42540:JM,42556
42560 :: CALL :: call :: I :: v74 = parseInt(v72)::
42565 :: PRED :: IF :: Z :: if (v42 != #(0)) goto 272::CD,42566:CD,42567:CD,42612
42566 :: PRED :: IF :: Z :: if (v43 == #(0)) goto 278::CF,42612:CD,42567
42567 :: EXPR :: assign :: Ljava/lang/Object :: v46 = p3 $null  + #(1)::DD,42612
42568 :: EXPR :: assign :: Ljava/lang/Object :: v48 = v47 + #(1)::DD,42614:JM,42528:JM,42499:JM,42532:JM,42533:JM,42567:JM,42473:JM,42506:JM,42507:JM,42540:JM,42480:JM,42576:JM,42578:JM,42515:JM,42612:JM,42549:JM,42487:JM,42488:JM,42522:JM,42523:JM,42556:JM,42493:JM,42495
42569 :: CALL :: call :: C :: v50 = p2 $null .charAt(v47)::JM,42528:JM,42499:JM,42532:JM,42533:JM,42567:JM,42473:JM,42506:JM,42507:JM,42540:JM,42480:JM,42576:JM,42578:JM,42515:JM,42612:JM,42549:JM,42487:JM,42488:JM,42522:JM,42523:JM,42556:JM,42493:JM,42495
42576 :: EXPR :: assign :: Ljava/lang/Object :: v53 = p3 $null  ^ #(-1)::DD,42577
42577 :: NORM :: compound :: I :: return v53::DD,42460
42578 :: EXPR :: assign :: Ljava/lang/Object :: v55 = p3 $null  + v39::DD,42579:DD,42615
42579 :: PRED :: IF :: Z :: if (v66 >= v55) goto 342::CD,42583:CD,42584:CD,42614:CF,42592
42583 :: EXPR :: assign :: Ljava/lang/Object :: v60 = v66 + #(1)::DD,42614:JM,42528:JM,42499:JM,42532:JM,42533:JM,42567:JM,42473:JM,42506:JM,42507:JM,42540:JM,42480:JM,42576:JM,42578:JM,42515:JM,42612:JM,42549:JM,42487:JM,42488:JM,42522:JM,42523:JM,42556:JM,42493:JM,42495
42584 :: CALL :: call :: C :: v62 = p2 $null .charAt(v66)::JM,42528:JM,42499:JM,42532:JM,42533:JM,42567:JM,42473:JM,42506:JM,42507:JM,42540:JM,42480:JM,42576:JM,42578:JM,42515:JM,42612:JM,42549:JM,42487:JM,42488:JM,42522:JM,42523:JM,42556:JM,42493:JM,42495
42592 :: PRED :: IF :: Z :: if (v42 == #(0)) goto 352::CF,42615
42597 :: CALL :: call :: V :: p1 $null .saveField(v85, v84)::CL,49760
42602 :: NORM :: compound :: I :: return v83::DD,42460
42604 :: EXPR :: assign :: null :: PHI v36 = v35, v36, v11::CF,42605:DD,42479:DD,42498:DD,42510:DD,42604
42605 :: EXPR :: assign :: null :: PHI v37 = v20, v37, #(0)::CF,42606:DD,42605:DD,42610
42606 :: EXPR :: assign :: null :: PHI v38 = v21, v38, #(0)::CF,42607:DD,42606:DD,42611
42607 :: EXPR :: assign :: null :: PHI v39 = v29, v40, #(0)::DD,42479:DD,42480:DD,42486:DD,42497:DD,42499:DD,42509:DD,42525:DD,42527:DD,42530:DD,42533:DD,42549:DD,42578
42608 :: EXPR :: assign :: null :: PHI v20 = #(1), #(0)::DD,42605:DD,42610:CF,42495
42609 :: EXPR :: assign :: null :: PHI v21 = #(1), #(0)::DD,42606:DD,42611:CF,42497
42610 :: EXPR :: assign :: null :: PHI v42 = v37, v20, v20, v20, v37, v37::CF,42611:DD,42565:DD,42592
42611 :: EXPR :: assign :: null :: PHI v43 = v38, v21, v21, v21, v38, v38::DD,42531:DD,42566:CF,42527
42612 :: EXPR :: assign :: null :: PHI v47 = p3 $null , v46::DD,42568:JM,42515:JM,42487:JM,42488:JM,42473:JM,42522:JM,42506:JM,42523:JM,42507:JM,42540:JM,42556:JM,42493:JM,42495
42614 :: EXPR :: assign :: null :: PHI v66 = v60, v48::DD,42579:DD,42583:JM,42515:JM,42487:JM,42488:JM,42473:JM,42522:JM,42506:JM,42523:JM,42507:JM,42540:JM,42556:JM,42493:JM,42495
42615 :: EXPR :: assign :: null :: PHI v83 = v76, v68, v55, v55::DD,42602
42734 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::CE,42735:CD,42741:CD,42743:CD,42747:CD,42749:CD,42750:CD,42755:CD,42881:JM,42769:JM,42777:JM,42761:JM,42778:JM,42812:JM,42879:CD,42883:CD,42884:CD,42885
42735 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)::JM,41196:JM,41446:JM,49701
42741 :: EXPR :: reference :: Ljava/util/List :: v6 = org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.BASE_GROUPED_IDS::DD,42883:JM,42881:JM,42769:JM,42755:JM,42884:JM,42885:JM,42777:JM,42761:JM,42778:JM,42812:JM,42749:JM,42750:JM,42879
42743 :: CALL :: call :: I :: v8 = p2 $null .length()::JM,42881:JM,42769:JM,42755:JM,42884:JM,42885:JM,42777:JM,42761:JM,42778:JM,42812:JM,42749:JM,42750:JM,42879
42747 :: EXPR :: reference :: I :: v9 = org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.MAX_PREFIX_LENGTH::CF,42749
42749 :: EXPR :: assign :: Ljava/lang/Object :: v10 = p3 $null  + v9::JM,42769:JM,42755:JM,42885:JM,42761:JM,42777:JM,42778:JM,42750
42750 :: CALL :: call :: I :: v12 = min(v8, v10)::JM,42769:JM,42755:JM,42885:JM,42761:JM,42777:JM,42778:JM,42750
42755 :: PRED :: IF :: Z :: if (v19 >= v12) goto 166::CF,42883:CD,42756:CD,42761:CD,42816:CD,42820:CD,42846:CD,42884:CD,42885:CD,42886:CD,42887:JM,42881:JM,42769:JM,42755:JM,42777:JM,42778:JM,42812:JM,42749:JM,42750:JM,42879
42756 :: CALL :: call :: C :: v15 = p2 $null .charAt(v19)::JM,42881:JM,42769:JM,42755:JM,42884:JM,42885:JM,42777:JM,42761:JM,42778:JM,42812:JM,42749:JM,42750:JM,42879
42761 :: PRED :: IF :: Z :: if (v15 != #(47)) goto 150::CD,42755:CD,42762:CD,42763:CD,42769:CD,42773:CD,42777:CD,42778:CD,42805:CD,42810:CD,42811:CD,42814:CD,42881:CD,42883:CD,42884:CD,42885
42762 :: EXPR :: assign :: Ljava/lang/Object :: v20 = v19 + #(1)::JM,42881:JM,42769:JM,42755:JM,42884:JM,42885:JM,42777:JM,42761:JM,42778:JM,42812:JM,42749:JM,42750:JM,42879
42763 :: CALL :: call :: Ljava/lang/CharSequence :: v22 = p2 $null .subSequence(p3 $null , v20)::JM,42881:JM,42769:JM,42755:JM,42884:JM,42885:JM,42777:JM,42761:JM,42778:JM,42812:JM,42749:JM,42750:JM,42879
42769 :: CALL :: call :: Ljava/lang/String :: v24 = v22.toString()::JM,42769:JM,42755:JM,42885:JM,42777:JM,42750
42773 :: CALL :: call :: I :: v26 = v24.length()::JM,42885:JM,42777
42777 :: EXPR :: assign :: Ljava/lang/Object :: v27 = p3 $null  + v26::DD,42884:CF,42778
42778 :: PRED :: IF :: Z :: if (v19 >= v8) goto 126::CF,42779:CD,42783:CD,42788:CD,42789:CD,42794:CD,42799
42779 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v28 = new java.lang.StringBuilder::
42783 :: CALL :: call :: Ljava/lang/StringBuilder :: v31 = v28.append(v24)::JM,42885:JM,42777
42788 :: EXPR :: assign :: Ljava/lang/Object :: v32 = v19 + #(1)::JM,42881:JM,42769:JM,42755:JM,42884:JM,42885:JM,42777:JM,42761:JM,42778:JM,42812:JM,42749:JM,42750:JM,42879
42789 :: CALL :: call :: C :: v34 = p2 $null .charAt(v32)::JM,42881:JM,42769:JM,42755:JM,42884:JM,42885:JM,42777:JM,42761:JM,42778:JM,42812:JM,42749:JM,42750:JM,42879
42794 :: CALL :: call :: Ljava/lang/StringBuilder :: v36 = v31.append(v34)::JM,42769:JM,42755:JM,42885:JM,42777:JM,42750
42799 :: CALL :: call :: Ljava/lang/String :: v38 = v36.toString()::JM,42777
42805 :: CALL :: call :: Ljava/lang/Object :: v42 = v40.get(v39)::JM,42810
42810 :: EXPR :: assign :: Ljava/lang/Object :: v43 = CHECKCAST v42::DD,42811:DD,42883
42811 :: PRED :: IF :: Z :: if (v43 != #(null)) goto 166::CF,42883:CD,42812:CD,42813:CD,42816:CD,42820:CD,42846:CD,42884:CD,42885:CD,42886:CD,42887
42812 :: EXPR :: assign :: Ljava/lang/Object :: v80 = p3 $null  ^ #(-1)::CF,42813
42813 :: NORM :: compound :: I :: return v80::DD,42735
42814 :: EXPR :: assign :: Ljava/lang/Object :: v18 = v19 + #(1)::DD,42881
42816 :: CALL :: call :: I :: v50 = v45.size()::JM,42820
42820 :: PRED :: IF :: Z :: if (v63 >= v50) goto 229::CD,42816:CD,42821:CD,42826:CD,42827:CD,42833:CD,42844:CD,42886:CD,42887:CD,42888:CF,42846
42821 :: CALL :: call :: Ljava/lang/Object :: v52 = v45.get(v63)::JM,42826
42826 :: EXPR :: assign :: Ljava/lang/Object :: v53 = CHECKCAST v52::JM,42843:DD,42888
42827 :: CALL :: call :: Z :: v55 = csStartsWith(p2 $null , v46, v53)::JM,42833:CL,49598
42833 :: PRED :: IF :: Z :: if (v55 == #(0)) goto 221::CF,42888:CD,42834
42834 :: PRED :: IF :: Z :: if (v62 == #(null)) goto 221::CD,42835:CD,42839:CD,42843:CD,42888
42835 :: CALL :: call :: I :: v57 = v53.length()::JM,42843
42839 :: CALL :: call :: I :: v59 = v62.length()::JM,42843
42843 :: PRED :: IF :: Z :: if (v57 <= v59) goto 221::CF,42888
42844 :: EXPR :: assign :: Ljava/lang/Object :: v61 = v63 + #(1)::DD,42887
42846 :: PRED :: IF :: Z :: if (v62 == #(null)) goto 270::CD,42847:CD,42851:CD,42856:CD,42861:CD,42865:CD,42873:CD,42877:CD,42878:CD,42879:CD,42880
42847 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v66 = new java.lang.StringBuilder::
42851 :: CALL :: call :: Ljava/lang/StringBuilder :: v69 = v66.append(v47)::
42856 :: CALL :: call :: Ljava/lang/StringBuilder :: v71 = v69.append(v62)::
42861 :: CALL :: call :: Ljava/lang/String :: v73 = v71.toString()::
42865 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v75 = forID(v73)::CL,38378
42873 :: CALL :: call :: I :: v78 = v62.length()::JM,42877
42877 :: EXPR :: assign :: Ljava/lang/Object :: v79 = v46 + v78::CF,42878
42878 :: NORM :: compound :: I :: return v79::DD,42735
42879 :: EXPR :: assign :: Ljava/lang/Object :: v65 = p3 $null  ^ #(-1)::CF,42880
42880 :: NORM :: compound :: I :: return v65::DD,42735
42881 :: EXPR :: assign :: null :: PHI v19 = v18, p3 $null ::DD,42755:JM,42769:JM,42885:JM,42761:JM,42777:JM,42750:DD,42762:DD,42778:DD,42788:DD,42814
42883 :: EXPR :: assign :: null :: PHI v45 = v6, v43::CF,42884:JM,42820:JM,42826
42884 :: EXPR :: assign :: null :: PHI v46 = p3 $null , v27::CF,42885:DD,42877
42885 :: EXPR :: assign :: null :: PHI v47 = #(), v24::CF,42886
42886 :: EXPR :: assign :: null :: PHI v62 = v60, #(null)::CF,42887:DD,42834:JM,42843:DD,42846:JM,42877:DD,42888
42887 :: EXPR :: assign :: null :: PHI v63 = v61, #(0)::DD,42820:JM,42826:DD,42844
42888 :: EXPR :: assign :: null :: PHI v60 = v62, v62, v53::DD,42886:CF,42844
42964 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserBucket.computeMillis(boolean,java.lang.String)::CD,42970
42970 :: CALL :: call :: J :: v6 = p0 $null .computeMillis(p1 $null , p2 $null )::CL,50080
43057 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserBucket.getOffsetInteger()::CE,43058:CD,43064
43058 :: EXIT :: exit :: Ljava/lang/Integer :: org.joda.time.format.DateTimeParserBucket.getOffsetInteger()::JM,31778
43061 :: EXPR :: reference :: Ljava/lang/Integer :: v3 = p0 $null .iOffset::DD,43064
43064 :: NORM :: compound :: Ljava/lang/Integer :: return v3::CF,43058
43066 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.forOffsetMillis(int)::CD,43072:CD,43073:CD,43077:CD,43082:CD,43087:CD,43096:CD,43100
43072 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v9 = new java.lang.IllegalArgumentException::
43073 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v10 = new java.lang.StringBuilder::
43077 :: CALL :: call :: Ljava/lang/StringBuilder :: v14 = v10.append(#(Millis out of range: ))::
43082 :: CALL :: call :: Ljava/lang/StringBuilder :: v16 = v14.append(p1 $null )::
43087 :: CALL :: call :: Ljava/lang/String :: v18 = v16.toString()::
43096 :: CALL :: call :: Ljava/lang/String :: v6 = printOffset(p1 $null )::CL,46807
43100 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v8 = fixedOffsetZone(v6, p1 $null )::CL,46950
43114 :: ENTR :: entry :: null :: org.joda.time.chrono.LenientChronology.withZone(org.joda.time.DateTimeZone)::CD,43119:CD,43123:CD,43125:CD,43151
43119 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 9::CF,43151:CD,43120
43120 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v6 = getDefault()::JM,43151:CL,29153
43123 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v8 = org.joda.time.DateTimeZone.UTC::CF,43125
43125 :: PRED :: IF :: Z :: if (v7 != v8) goto 22::CD,43126:CD,43131:CD,43135
43126 :: CALL :: call :: Lorg/joda/time/Chronology :: v18 = p0 $null .withUTC()::CL,45183
43131 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v10 = p0 $null .getZone()::JM,43135:CL,25639
43135 :: PRED :: IF :: Z :: if (v7 != v10) goto 31::CD,43141:CD,43146
43141 :: CALL :: call :: Lorg/joda/time/Chronology :: v14 = v12.withZone(v7)::CL,43189:CL,43235:CL,43162
43146 :: CALL :: call :: Lorg/joda/time/chrono/LenientChronology :: v16 = getInstance(v14)::CL,40279
43151 :: EXPR :: assign :: null :: PHI v7 = p1 $null , v6::DD,43125:DD,43135
43162 :: ENTR :: entry :: null :: org.joda.time.chrono.ISOChronology.withZone(org.joda.time.DateTimeZone)::CD,43167:CD,43171:CD,43175:CD,43182
43167 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 10::CF,43182:CD,43168
43168 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v6 = getDefault()::JM,43182:CL,29153
43171 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v9 = p0 $null .getZone()::JM,43175:CL,25639
43175 :: PRED :: IF :: Z :: if (v7 != v9) goto 19::CD,43177
43177 :: CALL :: call :: Lorg/joda/time/chrono/ISOChronology :: v11 = getInstance(v7)::CL,46472
43182 :: EXPR :: assign :: null :: PHI v7 = p1 $null , v6::DD,43175
43189 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.withZone(org.joda.time.DateTimeZone)::CD,43194:CD,43198:CD,43202:CD,43223
43194 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 10::CF,43223:CD,43195
43195 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v6 = getDefault()::JM,43223:CL,29153
43198 :: CALL :: call :: Ljava/lang/Object :: v9 = p0 $null .getParam()::JM,43202:CL,32808
43202 :: PRED :: IF :: Z :: if (v7 != v9) goto 19::CD,43204:CD,43206
43204 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v10 = org.joda.time.DateTimeZone.UTC::CF,43206
43206 :: PRED :: IF :: Z :: if (v7 != v10) goto 30::JM,20518:JM,20521:JM,20524
43223 :: EXPR :: assign :: null :: PHI v7 = p1 $null , v6::DD,43202:DD,43206
43235 :: ENTR :: entry :: null :: org.joda.time.chrono.GregorianChronology.withZone(org.joda.time.DateTimeZone)::CD,43240:CD,43244:CD,43248:CD,43255
43240 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 10::CF,43255:CD,43241
43241 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v6 = getDefault()::JM,43255:CL,29153
43244 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v9 = p0 $null .getZone()::JM,43248:CL,25670
43248 :: PRED :: IF :: Z :: if (v7 != v9) goto 19::CD,43250
43250 :: CALL :: call :: Lorg/joda/time/chrono/GregorianChronology :: v11 = getInstance(v7)::CL,11480
43255 :: EXPR :: assign :: null :: PHI v7 = p1 $null , v6::DD,43248
43269 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserBucket.getZone()::CE,43270:CD,43276
43270 :: EXIT :: exit :: Lorg/joda/time/DateTimeZone :: org.joda.time.format.DateTimeParserBucket.getZone()::JM,31801
43273 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v3 = p0 $null .iZone::DD,43276
43276 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v3::CF,43270
43278 :: ENTR :: entry :: null :: org.joda.time.MutableDateTime.setChronology(org.joda.time.Chronology)::CD,43283
43283 :: CALL :: call :: V :: p0 $null .setChronology(p1 $null )::CL,50452
43290 :: ENTR :: entry :: null :: org.joda.time.MutableDateTime.setZone(org.joda.time.DateTimeZone)::CD,43295:CD,43303:CD,43307
43295 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v5 = getZone(p1 $null )::JM,43307:CL,50469
43303 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v9 = v7.getZone()::JM,43307:CL,40329:CL,25659:CL,25670:CL,25639
43307 :: PRED :: IF :: Z :: if (v9 == v5) goto 27::CD,43308:CD,43313
43308 :: CALL :: call :: Lorg/joda/time/Chronology :: v11 = v7.withZone(v5)::CL,43189:CL,43235:CL,43162:CL,43114
43313 :: CALL :: call :: V :: p0 $null .setChronology(v11)::CL,43278
43603 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoCompiler.Rule.formatName(java.lang.String)::CD,43608:CD,43613:JM,43653:JM,43629:JM,43645
43608 :: CALL :: call :: I :: v6 = p1 $null .indexOf(#(47))::JM,43653:JM,43613:JM,43629:JM,43645
43613 :: PRED :: IF :: Z :: if (v6 <= #(0)) goto 42::CD,43617:CD,43640:CD,43645:JM,43653:JM,43613:JM,43629
43614 :: EXPR :: reference :: I :: v35 = p0 $null .iSaveMillis::DD,43617
43617 :: PRED :: IF :: Z :: if (v35 != #(0)) goto 31::CD,43618:CD,43629:CD,43630:JM,43653:JM,43613:JM,43645
43618 :: CALL :: call :: Ljava/lang/String :: v43 = p1 $null .substring(#(0), v6)::JM,43653:JM,43613:JM,43629:JM,43645
43629 :: EXPR :: assign :: Ljava/lang/Object :: v37 = v6 + #(1)::JM,43653:JM,43613:JM,43629:JM,43645
43630 :: CALL :: call :: Ljava/lang/String :: v39 = p1 $null .substring(v37)::JM,43653:JM,43613:JM,43629:JM,43645
43640 :: CALL :: call :: I :: v10 = p1 $null .indexOf(#(%s))::JM,43653:JM,43613:JM,43629:JM,43645
43645 :: PRED :: IF :: Z :: if (v10 >= #(0)) goto 55::CD,43647:CD,43653:CD,43654:CD,43662:JM,43613:JM,43629:JM,43645
43647 :: CALL :: call :: Ljava/lang/String :: v12 = p1 $null .substring(#(0), v10)::JM,43653:JM,43613:JM,43629:JM,43645
43653 :: EXPR :: assign :: Ljava/lang/Object :: v14 = v10 + #(2)::JM,43653:JM,43613:JM,43629:JM,43645
43654 :: CALL :: call :: Ljava/lang/String :: v16 = p1 $null .substring(v14)::JM,43653:JM,43613:JM,43629:JM,43645
43659 :: EXPR :: reference :: Ljava/lang/String :: v17 = p0 $null .iLetterS::DD,43662
43662 :: PRED :: IF :: Z :: if (v17 != #(null)) goto 86::CF,43669:CD,43663:CD,43673:CD,43681:CD,43686:CD,43691
43663 :: CALL :: call :: Ljava/lang/String :: v31 = v12.concat(v16)::
43669 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v19 = new java.lang.StringBuilder::
43673 :: CALL :: call :: Ljava/lang/StringBuilder :: v22 = v19.append(v12)::
43678 :: EXPR :: reference :: Ljava/lang/String :: v23 = p0 $null .iLetterS::
43681 :: CALL :: call :: Ljava/lang/StringBuilder :: v25 = v22.append(v23)::
43686 :: CALL :: call :: Ljava/lang/StringBuilder :: v27 = v25.append(v16)::
43691 :: CALL :: call :: Ljava/lang/String :: v29 = v27.toString()::
43738 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear.addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String,int,int,int)::CD,43765
43765 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder :: v15 = p1 $null .addRecurringSavings(p2 $null , p3 $null , p4 $null , p5 $null , v8, v9, v10, v11, v12, v13)::CL,50482
43808 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v13 = new java.lang.IllegalArgumentException::JM,43841:JM,43844:JM,43847:JM,43832:JM,43835:JM,43838
43809 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v14 = new java.lang.StringBuilder::JM,43841:JM,43844:JM,43847:JM,43832:JM,43835:JM,43838
43813 :: CALL :: call :: Ljava/lang/StringBuilder :: v18 = v14.append(#(Unknown mode: ))::
43818 :: CALL :: call :: Ljava/lang/StringBuilder :: v20 = v18.append(p1 $null )::JM,43841:JM,43844:JM,43847:JM,43832:JM,43835:JM,43838
43823 :: CALL :: call :: Ljava/lang/String :: v22 = v20.toString()::
43832 :: EXPR :: modify :: C :: p0 $null .iMode = p1 $null ::
43835 :: EXPR :: modify :: I :: p0 $null .iMonthOfYear = p2 $null ::
43838 :: EXPR :: modify :: I :: p0 $null .iDayOfMonth = p3 $null ::
43841 :: EXPR :: modify :: I :: p0 $null .iDayOfWeek = p4 $null ::
43844 :: EXPR :: modify :: Z :: p0 $null .iAdvance = p5 $null ::
43847 :: EXPR :: modify :: I :: p0 $null .iMillisOfDay = p6 $null ::
43894 :: NORM :: declaration :: Ljava/util/ArrayList :: v4 = new java.util.ArrayList::
43912 :: ENTR :: entry :: null :: org.joda.time.field.DelegatedDateTimeField.add(long,int)::CE,43913:CD,43921:CD,43927
43913 :: EXIT :: exit :: J :: org.joda.time.field.DelegatedDateTimeField.add(long,int)::JM,32509:JM,32569:JM,43927:JM,43951:JM,44012:JM,44083:JM,44152:JM,50569
43921 :: CALL :: call :: J :: v7 = v5.add(p1 $null , p2 $null )::JM,43927:CL,43931:CL,44136:CL,44016:CL,43956:CL,43976:CL,43996:CL,43912:CL,34012:CL,33983:CL,33434:CL,44056
43927 :: NORM :: compound :: J :: return v7::DD,43913
43931 :: ENTR :: entry :: null :: org.joda.time.field.DividedDateTimeField.add(long,int)::CE,43932:CD,43945:CD,43951
43932 :: EXIT :: exit :: J :: org.joda.time.field.DividedDateTimeField.add(long,int)::JM,32509:JM,32569:JM,43927:JM,43951:JM,44012:JM,44083:JM,44152:JM,50569
43945 :: CALL :: call :: J :: v10 = v6.add(p1 $null , v8)::JM,43951:CL,43931:CL,44136:CL,44016:CL,43956:CL,43976:CL,43996:CL,43912:CL,34012:CL,33983:CL,33434:CL,44056:CL,50553
43951 :: NORM :: compound :: J :: return v10::DD,43932
43956 :: ENTR :: entry :: null :: org.joda.time.field.BaseDateTimeField.add(long,int)::CE,43957:CD,43962:CD,43966:CD,43972
43957 :: EXIT :: exit :: J :: org.joda.time.field.BaseDateTimeField.add(long,int)::JM,32509:JM,32569:JM,43927:JM,43951:JM,44012:JM,44045:JM,44083:JM,44152:JM,50569
43962 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p0 $null .getDurationField()::CL,33678:CL,33687:CL,33709:CL,33730:CL,33718:CL,33669:CL,33700
43966 :: CALL :: call :: J :: v8 = v6.add(p1 $null , p2 $null )::JM,43972:CL,38306:CL,38328:CL,38277:CL,38243:CL,38232:CL,38262
43972 :: NORM :: compound :: J :: return v8::DD,43957
43976 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.add(long,int)::CE,43977:CD,43986:CD,43992
43977 :: EXIT :: exit :: J :: org.joda.time.field.UnsupportedDateTimeField.add(long,int)::JM,32509:JM,32569:JM,43927:JM,43951:JM,44012:JM,44083:JM,44152:JM,50569
43986 :: CALL :: call :: J :: v8 = v6.add(p1 $null , p2 $null )::JM,43992:CL,38306:CL,38328:CL,38277:CL,38243:CL,38232:CL,38262
43992 :: NORM :: compound :: J :: return v8::DD,43977
43996 :: ENTR :: entry :: null :: org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,int)::CE,43997:CD,44006:CD,44012
43997 :: EXIT :: exit :: J :: org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,int)::JM,32509:JM,32569:JM,43927:JM,43951:JM,44012:JM,44083:JM,44152:JM,50569
44006 :: CALL :: call :: J :: v8 = v6.add(p1 $null , p2 $null )::JM,44012:CL,43931:CL,44136:CL,44016:CL,43956:CL,43976:CL,43996:CL,43912:CL,34012:CL,33983:CL,33434:CL,44056:CL,50553
44012 :: NORM :: compound :: J :: return v8::DD,43997
44016 :: ENTR :: entry :: null :: org.joda.time.field.OffsetDateTimeField.add(long,int)::CE,44017:CD,44022:CD,44028:CD,44039:CD,44045
44017 :: EXIT :: exit :: J :: org.joda.time.field.OffsetDateTimeField.add(long,int)::JM,32509:JM,32569:JM,43927:JM,43951:JM,44012:JM,44083:JM,44152:JM,50569
44022 :: CALL :: call :: J :: v6 = p0 $null .add(p1 $null , p2 $null )::JM,44045:CL,43956
44028 :: CALL :: call :: I :: v8 = p0 $null .get(v6)::CL,10987
44039 :: CALL :: call :: V :: verifyValueBounds(p0 $null , v8, v9, v10)::CL,25389
44045 :: NORM :: compound :: J :: return v6::DD,44017
44056 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.add(long,int)::CE,44057:CD,44065
44057 :: EXIT :: exit :: J :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.add(long,int)::JM,32509:JM,32569:JM,43927:JM,43951:JM,44012:JM,44083:JM,44152:JM,50569
44062 :: EXPR :: reference :: Z :: v5 = p0 $null .iTimeField::DD,44065
44065 :: PRED :: IF :: Z :: if (v5 == #(0)) goto 37::CD,44066:CD,44076:CD,44082:CD,44083:CD,44084:CD,44088:CD,44096:CD,44105:CD,44112
44066 :: CALL :: call :: I :: v17 = p0 $null .getOffsetToAdd(p1 $null )::JM,44082:CL,33889
44076 :: CALL :: call :: J :: v22 = v18.add(v20, p2 $null )::JM,44083:CL,43931:CL,44136:CL,44016:CL,43956:CL,43976:CL,43996:CL,43912:CL,34012:CL,33983:CL,33434:CL,44056
44082 :: EXPR :: assign :: J :: v23 = CONVERT I to J v17::CF,44083
44083 :: EXPR :: assign :: Ljava/lang/Object :: v24 = v22 - v23::CF,44084
44084 :: NORM :: compound :: J :: return v24::DD,44057
44088 :: CALL :: call :: J :: v9 = v7.convertUTCToLocal(p1 $null )::CL,20087
44096 :: CALL :: call :: J :: v12 = v10.add(v9, p2 $null )::CL,43931:CL,44136:CL,44016:CL,43956:CL,43976:CL,43996:CL,43912:CL,34012:CL,33983:CL,33434:CL,44056
44105 :: CALL :: call :: J :: v15 = v13.convertLocalToUTC(v12, #(0), p1 $null )::JM,44112:CL,26477
44112 :: NORM :: compound :: J :: return v15::DD,44057
44136 :: ENTR :: entry :: null :: org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int)::CE,44137:CD,44146:CD,44152
44137 :: EXIT :: exit :: J :: org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int)::JM,32509:JM,32569:JM,43927:JM,43951:JM,44012:JM,44083:JM,44152:JM,50569
44146 :: CALL :: call :: J :: v8 = v6.add(p1 $null , p2 $null )::JM,44152:CL,43931:CL,44136:CL,44016:CL,43956:CL,43976:CL,43996:CL,43912:CL,34012:CL,33983:CL,33434:CL,44056:CL,50553
44152 :: NORM :: compound :: J :: return v8::DD,44137
44156 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.get(org.joda.time.ReadablePeriod,long,long)::CD,44163:CD,44168:CD,44169
44163 :: CALL :: call :: I :: v7 = p1 $null .size()::JM,44170:CL,37967
44168 :: EXPR :: assign :: Z :: v9 = p2 $null  == p3 $null ::DD,44169
44169 :: PRED :: IF :: Z :: if (v9 == #(0)) goto 84::CD,44170:CD,44202
44170 :: PRED :: IF :: Z :: if (v23 >= v7) goto 84::CD,44176:CD,44181:CD,44187:CD,44198:CD,44202
44176 :: CALL :: call :: Lorg/joda/time/DurationField :: v14 = v12.getField(p0 $null )::CL,37998
44181 :: CALL :: call :: I :: v16 = v14.getDifference(p3 $null , v22)::JM,44187:CL,38178:CL,38207:CL,38159:CL,38189:CL,38111:CL,38091
44187 :: PRED :: IF :: Z :: if (v16 == #(0)) goto 75::CD,44188
44188 :: CALL :: call :: J :: v18 = v14.add(v22, v16)::CL,38306:CL,38328:CL,38277:CL,38243:CL,38232:CL,38262
44198 :: EXPR :: assign :: Ljava/lang/Object :: v21 = v23 + #(1)::DD,44202
44202 :: EXPR :: assign :: null :: PHI v23 = v21, #(0)::DD,44170:DD,44198
44234 :: ENTR :: entry :: null :: org.joda.time.base.BasePeriod.getValue(int)::CE,44235:CD,44246
44235 :: EXIT :: exit :: I :: org.joda.time.base.BasePeriod.getValue(int)::JM,32697
44239 :: EXPR :: reference :: [I :: v4 = p0 $null .iValues::
44242 :: EXPR :: reference :: I :: v5 = v4[p1 $null ]::DD,44246
44246 :: NORM :: compound :: I :: return v5::CF,44235
44259 :: EXPR :: modify :: Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear :: p0 $null .iOfYear = p1 $null ::
44262 :: EXPR :: modify :: Ljava/lang/String :: p0 $null .iNameKey = p2 $null ::
44265 :: EXPR :: modify :: I :: p0 $null .iSaveMillis = p3 $null ::
44276 :: ENTR :: entry :: null :: org.joda.time.DateTimeFieldType.era()::CF,44277:CD,44279:CD,44281
44277 :: EXIT :: exit :: Lorg/joda/time/DateTimeFieldType :: org.joda.time.DateTimeFieldType.era()::JM,42204
44279 :: EXPR :: reference :: Lorg/joda/time/DateTimeFieldType :: v2 = org.joda.time.DateTimeFieldType.ERA_TYPE::CF,44281
44281 :: NORM :: compound :: Lorg/joda/time/DateTimeFieldType :: return v2::CF,44277
44283 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.eras()::CE,44284:CD,44290
44284 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.AssembledChronology.eras()::JM,36267
44287 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v3 = p0 $null .iEras::DD,44290
44290 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v3::CF,44284
44292 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)::CE,44293:CD,44297:CD,44299:CD,44322:CD,44337:CD,44338:CD,44339:JM,44321
44293 :: EXIT :: exit :: Lorg/joda/time/field/UnsupportedDateTimeField :: org.joda.time.field.UnsupportedDateTimeField.getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)::JM,32874:JM,32901:JM,32928:JM,32955:JM,32973:JM,33000:JM,33018:JM,33036:JM,33072:JM,33090:JM,33126:JM,33144:JM,33162:JM,33198:JM,33216:JM,33252:JM,33279:JM,33306:JM,33333:JM,33360:JM,33387:JM,33405:JM,33432
44297 :: EXPR :: reference :: Ljava/util/HashMap :: v4 = org.joda.time.field.UnsupportedDateTimeField.cCache::DD,44299
44299 :: PRED :: IF :: Z :: if (v4 != #(null)) goto 23::CF,44300:CD,44310:CD,44315:CD,44316:CD,44338
44300 :: NORM :: declaration :: Ljava/util/HashMap :: v12 = new java.util.HashMap::
44310 :: CALL :: call :: Ljava/lang/Object :: v8 = v6.get(p1 $null )::JM,44315
44315 :: EXPR :: assign :: Ljava/lang/Object :: v9 = CHECKCAST v8::DD,44316:DD,44338
44316 :: PRED :: IF :: Z :: if (v9 == #(null)) goto 49::CF,44338:CD,44317:CD,44321
44317 :: CALL :: call :: Lorg/joda/time/DurationField :: v11 = v9.getDurationField()::JM,44321:CL,33933
44321 :: PRED :: IF :: Z :: if (v11 == p2 $null ) goto 49::CF,44338
44322 :: PRED :: IF :: Z :: if (v15 != #(null)) goto 72::CF,44339:CF,44323:JM,50592:JM,50584:JM,50589:CD,44331
44323 :: NORM :: declaration :: Lorg/joda/time/field/UnsupportedDateTimeField :: v16 = new org.joda.time.field.UnsupportedDateTimeField::DD,44339
44331 :: CALL :: call :: Ljava/lang/Object :: v20 = v18.put(p1 $null , v16)::
44337 :: NORM :: compound :: Lorg/joda/time/field/UnsupportedDateTimeField :: return v21::DD,44293
44338 :: EXPR :: assign :: null :: PHI v15 = #(null), v9, v9, #(null)::DD,44322:DD,44339
44339 :: EXPR :: assign :: null :: PHI v21 = v15, v16::CF,44337
44363 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.years()::CE,44364:CD,44370
44364 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.AssembledChronology.years()::JM,36243
44367 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v3 = p0 $null .iYears::DD,44370
44370 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v3::CF,44364
44379 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.centuries()::CE,44380:CD,44386
44380 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.AssembledChronology.centuries()::JM,36255
44383 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v3 = p0 $null .iCenturies::DD,44386
44386 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v3::CF,44380
44402 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.weekyears()::CE,44403:CD,44409
44403 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.AssembledChronology.weekyears()::JM,36219
44406 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v3 = p0 $null .iWeekyears::DD,44409
44409 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v3::CF,44403
44411 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.weeks()::CE,44412:CD,44418
44412 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.AssembledChronology.weeks()::JM,36207
44415 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v3 = p0 $null .iWeeks::DD,44418
44418 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v3::CF,44412
44420 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.halfdays()::CE,44421:CD,44427
44421 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.AssembledChronology.halfdays()::JM,36183
44424 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v3 = p0 $null .iHalfdays::DD,44427
44427 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v3::CF,44421
44429 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.hours()::CE,44430:CD,44436
44430 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.AssembledChronology.hours()::JM,36171
44433 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v3 = p0 $null .iHours::DD,44436
44436 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v3::CF,44430
44438 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.minutes()::CE,44439:CD,44445
44439 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.AssembledChronology.minutes()::JM,36159
44442 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v3 = p0 $null .iMinutes::DD,44445
44445 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v3::CF,44439
44447 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.seconds()::CE,44448:CD,44454
44448 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.AssembledChronology.seconds()::JM,36147
44451 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v3 = p0 $null .iSeconds::DD,44454
44454 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v3::CF,44448
44456 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.millis()::CE,44457:CD,44463
44457 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.AssembledChronology.millis()::JM,36135
44460 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v3 = p0 $null .iMillis::DD,44463
44463 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v3::CF,44457
44465 :: ENTR :: entry :: null :: org.joda.time.field.DelegatedDateTimeField.getDurationField()::CE,44466:CD,44472:CD,44476
44466 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.field.DelegatedDateTimeField.getDurationField()::JM,33698:JM,37142:JM,44476:JM,45764:JM,45898:JM,45908:JM,45918:JM,51745
44472 :: CALL :: call :: Lorg/joda/time/DurationField :: v5 = v3.getDurationField()::JM,44476:CL,33678:CL,33687:CL,44465:CL,33709:CL,33730:CL,33718:CL,33933:CL,33669:CL,33700
44476 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v5::DD,44466
44478 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDurationField.getInstance(org.joda.time.DurationFieldType)::CE,44479:CD,44482:CD,44484:CD,44501:CD,44515:CD,44516:CD,44517
44479 :: EXIT :: exit :: Lorg/joda/time/field/UnsupportedDurationField :: org.joda.time.field.UnsupportedDurationField.getInstance(org.joda.time.DurationFieldType)::JM,33729:JM,37780:JM,37792:JM,37804:JM,37816:JM,37828:JM,37840:JM,37852:JM,37864:JM,37876:JM,37888:JM,37900:JM,37912
44482 :: EXPR :: reference :: Ljava/util/HashMap :: v3 = org.joda.time.field.UnsupportedDurationField.cCache::DD,44484
44484 :: PRED :: IF :: Z :: if (v3 != #(null)) goto 23::CF,44485:CD,44495:CD,44500:CD,44516
44485 :: NORM :: declaration :: Ljava/util/HashMap :: v9 = new java.util.HashMap::
44495 :: CALL :: call :: Ljava/lang/Object :: v7 = v5.get(p1 $null )::JM,44500
44500 :: EXPR :: assign :: Ljava/lang/Object :: v8 = CHECKCAST v7::DD,44516
44501 :: PRED :: IF :: Z :: if (v12 != #(null)) goto 57::CF,44517:CF,44502:JM,50613:CD,44509
44502 :: NORM :: declaration :: Lorg/joda/time/field/UnsupportedDurationField :: v13 = new org.joda.time.field.UnsupportedDurationField::DD,44517
44509 :: CALL :: call :: Ljava/lang/Object :: v17 = v15.put(p1 $null , v13)::
44515 :: NORM :: compound :: Lorg/joda/time/field/UnsupportedDurationField :: return v18::DD,44479
44516 :: EXPR :: assign :: null :: PHI v12 = #(null), v8::DD,44501:DD,44517
44517 :: EXPR :: assign :: null :: PHI v18 = v12, v13::CF,44515
44632 :: ENTR :: entry :: null :: org.joda.time.field.FieldUtils.safeAdd(long,long)::CF,44633:CD,44637:CD,44678
44633 :: EXIT :: exit :: J :: org.joda.time.field.FieldUtils.safeAdd(long,long)::JM,33758:JM,33825:JM,38274:JM,38322
44637 :: EXPR :: assign :: Ljava/lang/Object :: v4 = p1 $null  + p2 $null ::DD,44678
44678 :: NORM :: compound :: J :: return v4::CF,44633
44793 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDurationField.unsupported()::CD,44798:CD,44805:CD,44810:CD,44815
44798 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v4 = new java.lang.StringBuilder::
44805 :: CALL :: call :: Ljava/lang/StringBuilder :: v8 = v4.append(v6)::
44810 :: CALL :: call :: Ljava/lang/StringBuilder :: v11 = v8.append(#( field is unsupported))::
44815 :: CALL :: call :: Ljava/lang/String :: v13 = v11.toString()::
44828 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDurationField.getOffsetToAdd(long)::CE,44829:CD,44836:CD,44856
44829 :: EXIT :: exit :: I :: org.joda.time.chrono.ZonedChronology.ZonedDurationField.getOffsetToAdd(long)::JM,33874:JM,38363
44836 :: CALL :: call :: I :: v6 = v4.getOffset(p1 $null )::JM,44856:CL,18682:CL,18565:CL,18672:CL,18689
44856 :: NORM :: compound :: I :: return v6::DD,44829
44872 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDurationField.getOffsetFromLocalToSubtract(long)::CE,44873:CD,44880:CD,44900
44873 :: EXIT :: exit :: I :: org.joda.time.chrono.ZonedChronology.ZonedDurationField.getOffsetFromLocalToSubtract(long)::JM,33874:JM,38363
44880 :: CALL :: call :: I :: v6 = v4.getOffsetFromLocal(p1 $null )::JM,44900:CL,50741:CL,50620:CL,50751
44900 :: NORM :: compound :: I :: return v6::DD,44873
44990 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getDaysInMonthMax(long)::CD,44995:CD,45000
44995 :: CALL :: call :: I :: v5 = p0 $null .getYear(p1 $null )::CL,20337
45000 :: CALL :: call :: I :: v7 = p0 $null .getMonthOfYear(p1 $null , v5)::CL,27623
45023 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormat.forPattern(java.lang.String)::CD,45027
45027 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v4 = createFormatterForPattern(p1 $null )::CL,50758
45048 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatter.print(org.joda.time.ReadableInstant)::CE,45049:CD,45053:CD,45054:CD,45058:CD,45066:CD,45072:CD,45076
45049 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.format.DateTimeFormatter.print(org.joda.time.ReadableInstant)::
45053 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v4 = new java.lang.StringBuilder::JM,45076
45054 :: CALL :: call :: Lorg/joda/time/format/InternalPrinter :: v6 = p0 $null .requirePrinter()::CL,50837
45058 :: CALL :: call :: I :: v8 = v6.estimatePrintedLength()::CL,47423:CL,47401:CL,47295:CL,47301:CL,47323:CL,47378:CL,47429:CL,47453:CL,47410:CL,47314:CL,47386:CL,47444
45066 :: CALL :: call :: V :: p0 $null .printTo(v4, p1 $null )::CL,50857
45072 :: CALL :: call :: Ljava/lang/String :: v14 = v4.toString()::JM,45076
45076 :: NORM :: compound :: Ljava/lang/String :: return v14::DD,45049
45094 :: EXPR :: modify :: I :: p0 $null .iOffset = #(-2147483648)::
45097 :: EXPR :: modify :: I :: p0 $null .iStandardOffset = #(-2147483648)::
45100 :: EXPR :: modify :: J :: p0 $null .iPeriodStart = p2 $null ::
45103 :: EXPR :: modify :: Lorg/joda/time/DateTimeZone :: p0 $null .iZoneRef = p1 $null ::
45116 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.OfYear.setDayOfMonthNext(org.joda.time.Chronology,long)::CE,45117:CD,45122:CD,45141:CD,45151:CD,45158:CD,45166:CD,45169
45117 :: EXIT :: exit :: J :: org.joda.time.tz.DateTimeZoneBuilder.OfYear.setDayOfMonthNext(org.joda.time.Chronology,long)::JM,34771:JM,34837
45122 :: CALL :: call :: J :: v6 = p0 $null .setDayOfMonth(p1 $null , p2 $null )::JM,45169:CL,32451
45141 :: CALL :: call :: Z :: v15 = v13.isLeap(v22)::CL,50998:CL,50886:CL,50930:CL,51063:CL,50913:CL,50946:CL,51014:CL,51036:CL,51053:CL,51101
45151 :: CALL :: call :: J :: v21 = v18.add(v22, #(1))::CL,43931:CL,44136:CL,44016:CL,43956:CL,43976:CL,43996:CL,43912:CL,34012:CL,33983:CL,33434:CL,44056
45158 :: CALL :: call :: J :: v24 = p0 $null .setDayOfMonth(p1 $null , v22)::JM,45169:CL,32451
45166 :: NORM :: compound :: J :: return v26::DD,45117
45169 :: EXPR :: assign :: null :: PHI v26 = v6, v24::CF,45166
45183 :: ENTR :: entry :: null :: org.joda.time.chrono.LenientChronology.withUTC()::CD,45190:JM,45198
45187 :: EXPR :: reference :: Lorg/joda/time/Chronology :: v3 = p0 $null .iWithUTC::DD,45190
45190 :: PRED :: IF :: Z :: if (v3 != #(null)) goto 40::CD,45191:CD,45195:CD,45197
45191 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v6 = p0 $null .getZone()::JM,45197:CL,25639
45195 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v7 = org.joda.time.DateTimeZone.UTC::CF,45197
45197 :: PRED :: IF :: Z :: if (v6 != v7) goto 27::CD,45210
45198 :: EXPR :: modify :: Lorg/joda/time/Chronology :: p0 $null .iWithUTC = p0 $null ::
45210 :: CALL :: call :: Lorg/joda/time/chrono/LenientChronology :: v13 = getInstance(v11)::JM,45214:CL,40279
45214 :: EXPR :: modify :: Lorg/joda/time/Chronology :: p0 $null .iWithUTC = v13::
45236 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.OfYear.setDayOfMonthPrevious(org.joda.time.Chronology,long)::CE,45237:CD,45242:CD,45261:CD,45271:CD,45278:CD,45286:CD,45289
45237 :: EXIT :: exit :: J :: org.joda.time.tz.DateTimeZoneBuilder.OfYear.setDayOfMonthPrevious(org.joda.time.Chronology,long)::JM,35035:JM,35101
45242 :: CALL :: call :: J :: v6 = p0 $null .setDayOfMonth(p1 $null , p2 $null )::JM,45289:CL,32451
45261 :: CALL :: call :: Z :: v15 = v13.isLeap(v22)::CL,50998:CL,50886:CL,50930:CL,51063:CL,50913:CL,50946:CL,51014:CL,51036:CL,51053:CL,51101
45271 :: CALL :: call :: J :: v21 = v18.add(v22, #(-1))::CL,43931:CL,44136:CL,44016:CL,43956:CL,43976:CL,43996:CL,43912:CL,34012:CL,33983:CL,33434:CL,44056
45278 :: CALL :: call :: J :: v24 = p0 $null .setDayOfMonth(p1 $null , v22)::JM,45289:CL,32451
45286 :: NORM :: compound :: J :: return v26::DD,45237
45289 :: EXPR :: assign :: null :: PHI v26 = v6, v24::CF,45286
45294 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.DSTZone.writeTo(java.io.DataOutput)::CD,45303:CD,45310:CD,45317
45303 :: CALL :: call :: V :: writeMillis(p1 $null , v5)::CL,35169
45310 :: CALL :: call :: V :: v7.writeTo(p1 $null )::CL,51117
45317 :: CALL :: call :: V :: v9.writeTo(p1 $null )::CL,51117
45328 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.DSTZone.readFrom(java.io.DataInput,java.lang.String)::CD,45334:CD,45339:CD,45343:JM,25024:JM,20785:JM,25027:JM,25030:JM,20779
45334 :: CALL :: call :: J :: v6 = readMillis(p1 $null )::CL,35572
45339 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence :: v9 = readFrom(p1 $null )::CL,51151
45343 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence :: v11 = readFrom(p1 $null )::CL,51151
45559 :: EXPR :: modify :: I :: p0 $null .iYear = p1 $null ::
45562 :: EXPR :: modify :: J :: p0 $null .iFirstDayMillis = p2 $null ::
45571 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.Fields.isSupported(org.joda.time.DurationField)::CF,45572:CD,45575:CD,45581:CD,45582
45572 :: EXIT :: exit :: Z :: org.joda.time.chrono.AssembledChronology.Fields.isSupported(org.joda.time.DurationField)::JM,36134:JM,36146:JM,36158:JM,36170:JM,36182:JM,36194:JM,36206:JM,36218:JM,36230:JM,36242:JM,36254:JM,36266
45575 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 9::CD,45577:CD,45582
45577 :: CALL :: call :: Z :: v5 = p1 $null .isSupported()::JM,45582:CL,51397:CL,51403:CL,51409
45581 :: NORM :: compound :: Z :: return v7::CF,45572
45582 :: EXPR :: assign :: null :: PHI v7 = #(0), v5::CF,45581
45587 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.Fields.isSupported(org.joda.time.DateTimeField)::CE,45588:CD,45591:CD,45597:CD,45598
45588 :: EXIT :: exit :: Z :: org.joda.time.chrono.AssembledChronology.Fields.isSupported(org.joda.time.DateTimeField)::JM,36278:JM,36290:JM,36302:JM,36314:JM,36326:JM,36338:JM,36350:JM,36362:JM,36374:JM,36386:JM,36398:JM,36410:JM,36422:JM,36434:JM,36446:JM,36458:JM,36470:JM,36482:JM,36494:JM,36506:JM,36518:JM,36530:JM,36542
45591 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 9::CD,45593:CD,45598
45593 :: CALL :: call :: Z :: v5 = p1 $null .isSupported()::JM,45598:CL,29433:CL,29427:CL,29446
45597 :: NORM :: compound :: Z :: return v7::CF,45588
45598 :: EXPR :: assign :: null :: PHI v7 = #(0), v5::CF,45597
45603 :: ENTR :: entry :: null :: org.joda.time.chrono.LenientChronology.convertField(org.joda.time.DateTimeField)::CE,45604:CD,45612:CD,45617
45604 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.LenientChronology.convertField(org.joda.time.DateTimeField)::JM,36770:JM,36781:JM,36792:JM,36803:JM,36814:JM,36825:JM,36836:JM,36847:JM,36858:JM,36869:JM,36880:JM,36891:JM,36902:JM,36913:JM,36924:JM,36935:JM,36946:JM,36957:JM,36968:JM,36979:JM,36990:JM,37001:JM,37012
45612 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v7 = getInstance(p1 $null , v5)::JM,45617:CL,51415
45617 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v7::DD,45604
45620 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.assemble(org.joda.time.chrono.AssembledChronology.Fields)::CD,45625:CD,45630:CD,45635:CD,45640:CD,45645:CD,45650:CD,45655:CD,45660:CD,45665:CD,45670:CD,45675:CD,45680:CD,45685:CD,45690:CD,45695:CD,45700:CD,45705:CD,45710:CD,45715:JM,51472:JM,60433:JM,29378:JM,20966:JM,56776:JM,56779:JM,29372:JM,20972:CD,45723:JM,21204:JM,51494:JM,21193:JM,21210:JM,56835:JM,56840:JM,56843:JM,56847:JM,56848:JM,51508:JM,56853:JM,56822:JM,56825:JM,56858:JM,56829:JM,56830:CD,45744:JM,51808:JM,51841:JM,51842:JM,51812:JM,51845:JM,51847:JM,51851:JM,51852:JM,51855:JM,51831:JM,51864:JM,51865:JM,51834:JM,51837:CD,45760:JM,46056:JM,46093:CD,45776:CD,45789:JM,51584:CD,45797:JM,20996:JM,51605:JM,21014:JM,21002:JM,21020:CD,45809:JM,51627:CD,45821:JM,51649:CD,45833:JM,56916:JM,56903:JM,56909:CD,45841:JM,51688:CD,45849:JM,51710:JM,51732:JM,51748:JM,51738:JM,51741:CD,45878:CD,45894:CD,45904:CD,45914
45625 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v4 = org.joda.time.chrono.BasicChronology.cMillisField::DD,45627
45627 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .millis = v4::
45630 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v5 = org.joda.time.chrono.BasicChronology.cSecondsField::DD,45632
45632 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .seconds = v5::
45635 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v6 = org.joda.time.chrono.BasicChronology.cMinutesField::DD,45637
45637 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .minutes = v6::
45640 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v7 = org.joda.time.chrono.BasicChronology.cHoursField::DD,45642
45642 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .hours = v7::
45645 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v8 = org.joda.time.chrono.BasicChronology.cHalfdaysField::DD,45647
45647 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .halfdays = v8::
45650 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v9 = org.joda.time.chrono.BasicChronology.cDaysField::DD,45652
45652 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .days = v9::
45655 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v10 = org.joda.time.chrono.BasicChronology.cWeeksField::DD,45657
45657 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .weeks = v10::
45660 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v11 = org.joda.time.chrono.BasicChronology.cMillisOfSecondField::DD,45662
45662 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .millisOfSecond = v11::
45665 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v12 = org.joda.time.chrono.BasicChronology.cMillisOfDayField::DD,45667
45667 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .millisOfDay = v12::
45670 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v13 = org.joda.time.chrono.BasicChronology.cSecondOfMinuteField::DD,45672
45672 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .secondOfMinute = v13::
45675 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v14 = org.joda.time.chrono.BasicChronology.cSecondOfDayField::DD,45677
45677 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .secondOfDay = v14::
45680 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v15 = org.joda.time.chrono.BasicChronology.cMinuteOfHourField::DD,45682
45682 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .minuteOfHour = v15::
45685 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v16 = org.joda.time.chrono.BasicChronology.cMinuteOfDayField::DD,45687
45687 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .minuteOfDay = v16::
45690 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v17 = org.joda.time.chrono.BasicChronology.cHourOfDayField::DD,45692
45692 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .hourOfDay = v17::
45695 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v18 = org.joda.time.chrono.BasicChronology.cHourOfHalfdayField::DD,45697
45697 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .hourOfHalfday = v18::
45700 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v19 = org.joda.time.chrono.BasicChronology.cClockhourOfDayField::DD,45702
45702 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .clockhourOfDay = v19::
45705 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v20 = org.joda.time.chrono.BasicChronology.cClockhourOfHalfdayField::DD,45707
45707 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .clockhourOfHalfday = v20::
45710 :: EXPR :: reference :: Lorg/joda/time/DateTimeField :: v21 = org.joda.time.chrono.BasicChronology.cHalfdayOfDayField::DD,45712
45712 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .halfdayOfDay = v21::
45715 :: NORM :: declaration :: Lorg/joda/time/chrono/BasicYearDateTimeField :: v22 = new org.joda.time.chrono.BasicYearDateTimeField::DD,45720
45720 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .year = v22::
45723 :: NORM :: declaration :: Lorg/joda/time/chrono/GJYearOfEraDateTimeField :: v24 = new org.joda.time.chrono.GJYearOfEraDateTimeField::DD,45732
45732 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .yearOfEra = v24::
45744 :: NORM :: declaration :: Lorg/joda/time/field/DividedDateTimeField :: v31 = new org.joda.time.field.DividedDateTimeField::DD,45754
45754 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .centuryOfEra = v31::
45760 :: CALL :: call :: Lorg/joda/time/DurationField :: v38 = v36.getDurationField()::JM,45764:CL,33678:CL,33687:CL,44465:CL,33709:CL,33730:CL,33718:CL,33933:CL,33669:CL,33700
45764 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .centuries = v38::
45776 :: NORM :: declaration :: Lorg/joda/time/field/OffsetDateTimeField :: v43 = new org.joda.time.field.OffsetDateTimeField::DD,45786
45786 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .yearOfCentury = v43::
45789 :: NORM :: declaration :: Lorg/joda/time/chrono/GJEraDateTimeField :: v48 = new org.joda.time.chrono.GJEraDateTimeField::DD,45794
45794 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .era = v48::
45797 :: NORM :: declaration :: Lorg/joda/time/chrono/GJDayOfWeekDateTimeField :: v50 = new org.joda.time.chrono.GJDayOfWeekDateTimeField::DD,45806
45806 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .dayOfWeek = v50::
45809 :: NORM :: declaration :: Lorg/joda/time/chrono/BasicDayOfMonthDateTimeField :: v53 = new org.joda.time.chrono.BasicDayOfMonthDateTimeField::DD,45818
45818 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .dayOfMonth = v53::
45821 :: NORM :: declaration :: Lorg/joda/time/chrono/BasicDayOfYearDateTimeField :: v56 = new org.joda.time.chrono.BasicDayOfYearDateTimeField::DD,45830
45830 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .dayOfYear = v56::
45833 :: NORM :: declaration :: Lorg/joda/time/chrono/GJMonthOfYearDateTimeField :: v59 = new org.joda.time.chrono.GJMonthOfYearDateTimeField::DD,45838
45838 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .monthOfYear = v59::
45841 :: NORM :: declaration :: Lorg/joda/time/chrono/BasicWeekyearDateTimeField :: v61 = new org.joda.time.chrono.BasicWeekyearDateTimeField::DD,45846
45846 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .weekyear = v61::
45849 :: NORM :: declaration :: Lorg/joda/time/chrono/BasicWeekOfWeekyearDateTimeField :: v63 = new org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField::DD,45858
45858 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .weekOfWeekyear = v63::
45878 :: NORM :: declaration :: Lorg/joda/time/field/OffsetDateTimeField :: v72 = new org.joda.time.field.OffsetDateTimeField::DD,45888
45888 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p1 $null .weekyearOfCentury = v72::
45894 :: CALL :: call :: Lorg/joda/time/DurationField :: v78 = v76.getDurationField()::JM,45898:CL,33678:CL,33687:CL,44465:CL,33709:CL,33730:CL,33718:CL,33933:CL,33669:CL,33700
45898 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .years = v78::
45904 :: CALL :: call :: Lorg/joda/time/DurationField :: v81 = v79.getDurationField()::JM,45908:CL,33678:CL,33687:CL,44465:CL,33709:CL,33730:CL,33718:CL,33933:CL,33669:CL,33700
45908 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .months = v81::
45914 :: CALL :: call :: Lorg/joda/time/DurationField :: v84 = v82.getDurationField()::JM,45918:CL,33678:CL,33687:CL,44465:CL,33709:CL,33730:CL,33718:CL,33933:CL,33669:CL,33700
45918 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p1 $null .weekyears = v84::
46056 :: CALL :: call :: Lorg/joda/time/DurationField :: v8 = v6.getDurationField()::CL,33678:CL,33687:CL,44465:CL,33709:CL,33730:CL,33718:CL,33933:CL,33669:CL,33700
46087 :: EXPR :: reference :: I :: v9 = p1 $null .iDivisor::DD,46090
46090 :: EXPR :: modify :: I :: p0 $null .iDivisor = v9::
46093 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iDurationField = p2 $null ::
46096 :: EXPR :: reference :: Lorg/joda/time/DurationField :: v10 = p1 $null .iDurationField::DD,46099
46099 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iRangeField = v10::
46112 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.convertField(org.joda.time.DurationField,java.util.HashMap)::CE,46113:CD,46118:JM,46124
46113 :: EXIT :: exit :: Lorg/joda/time/DurationField :: org.joda.time.chrono.ZonedChronology.convertField(org.joda.time.DurationField,java.util.HashMap)::JM,37215:JM,37227:JM,37239:JM,37251:JM,37263:JM,37275:JM,37287:JM,37299:JM,37311:JM,37323:JM,37335:JM,37347
46118 :: PRED :: IF :: Z :: if (p1 $null  == #(null)) goto 12::CD,46119:CD,46123:CD,46124
46119 :: CALL :: call :: Z :: v7 = p1 $null .isSupported()::JM,46123:CL,51397:CL,51403:CL,51409
46123 :: PRED :: IF :: Z :: if (v7 != #(0)) goto 15::CD,46124:CD,46125:CD,46130
46124 :: NORM :: compound :: Lorg/joda/time/DurationField :: return p1 $null ::DD,46113
46125 :: CALL :: call :: Z :: v10 = p2 $null .containsKey(p1 $null )::JM,46130
46130 :: PRED :: IF :: Z :: if (v10 == #(0)) goto 30::CF,46138:CD,46131:CD,46136:CD,46137:JM,51937:JM,20966:JM,51944:JM,51929:JM,20972:JM,51934:CD,46148:CD,46154
46131 :: CALL :: call :: Ljava/lang/Object :: v18 = p2 $null .get(p1 $null )::JM,46136
46136 :: EXPR :: assign :: Ljava/lang/Object :: v19 = CHECKCAST v18::CF,46137
46137 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v19::DD,46113
46138 :: NORM :: declaration :: Lorg/joda/time/chrono/ZonedChronology$ZonedDurationField :: v11 = new org.joda.time.chrono.ZonedChronology$ZonedDurationField::DD,46154
46148 :: CALL :: call :: Ljava/lang/Object :: v16 = p2 $null .put(p1 $null , v11)::
46154 :: NORM :: compound :: Lorg/joda/time/DurationField :: return v11::DD,46113
46174 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.convertField(org.joda.time.DateTimeField,java.util.HashMap)::CE,46175:CD,46180:JM,46186
46175 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.chrono.ZonedChronology.convertField(org.joda.time.DateTimeField,java.util.HashMap)::JM,37359:JM,37371:JM,37383:JM,37395:JM,37407:JM,37419:JM,37431:JM,37443:JM,37455:JM,37467:JM,37479:JM,37491:JM,37503:JM,37515:JM,37527:JM,37539:JM,37551:JM,37563:JM,37575:JM,37587:JM,37599:JM,37611:JM,37623
46180 :: PRED :: IF :: Z :: if (p1 $null  == #(null)) goto 12::CD,46181:CD,46185:CD,46186
46181 :: CALL :: call :: Z :: v7 = p1 $null .isSupported()::JM,46185:CL,29433:CL,29427:CL,29446
46185 :: PRED :: IF :: Z :: if (v7 != #(0)) goto 15::CD,46186:CD,46187:CD,46192
46186 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return p1 $null ::DD,46175
46187 :: CALL :: call :: Z :: v10 = p2 $null .containsKey(p1 $null )::JM,46192
46192 :: PRED :: IF :: Z :: if (v10 == #(0)) goto 30::CF,46200:CD,46193:CD,46198:CD,46199:CD,46205:CD,46209:CD,46219:CD,46229:JM,29378:JM,52260:JM,52276:JM,52263:JM,52279:JM,52266:JM,29372:JM,52269:JM,52255:CD,46243:CD,46249
46193 :: CALL :: call :: Ljava/lang/Object :: v30 = p2 $null .get(p1 $null )::JM,46198
46198 :: EXPR :: assign :: Ljava/lang/Object :: v31 = CHECKCAST v30::CF,46199
46199 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v31::DD,46175
46200 :: NORM :: declaration :: Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField :: v11 = new org.joda.time.chrono.ZonedChronology$ZonedDateTimeField::DD,46249
46205 :: CALL :: call :: Lorg/joda/time/DurationField :: v15 = p1 $null .getDurationField()::CL,33678:CL,33687:CL,44465:CL,33709:CL,33730:CL,33718:CL,33933:CL,33669:CL,33700
46209 :: CALL :: call :: Lorg/joda/time/DurationField :: v17 = p0 $null .convertField(v15, p2 $null )::CL,46112
46219 :: CALL :: call :: Lorg/joda/time/DurationField :: v21 = p0 $null .convertField(v19, p2 $null )::CL,46112
46229 :: CALL :: call :: Lorg/joda/time/DurationField :: v25 = p0 $null .convertField(v23, p2 $null )::CL,46112
46243 :: CALL :: call :: Ljava/lang/Object :: v28 = p2 $null .put(p1 $null , v11)::
46249 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v11::DD,46175
46314 :: ENTR :: entry :: null :: org.joda.time.PeriodType.standard()::CE,46315:CD,46317:CD,46319:CD,46419:CD,46420
46315 :: EXIT :: exit :: Lorg/joda/time/PeriodType :: org.joda.time.PeriodType.standard()::JM,37951
46317 :: EXPR :: reference :: Lorg/joda/time/PeriodType :: v2 = org.joda.time.PeriodType.cStandard::DD,46319:DD,46420
46319 :: PRED :: IF :: Z :: if (v2 != #(null)) goto 118::CF,46420:CF,46320:CD,46321:CD,46322:CD,46329:CD,46336:CD,46343:CD,46350:CD,46357:CD,46364:CD,46371:CD,46378:JM,32609:JM,32603:JM,32606
46320 :: NORM :: declaration :: Lorg/joda/time/PeriodType :: v4 = new org.joda.time.PeriodType::DD,46420:CF,46321
46321 :: NORM :: declaration :: [Lorg/joda/time/DurationFieldType :: v7 = new org.joda.time.DurationFieldType[]::
46322 :: CALL :: call :: Lorg/joda/time/DurationFieldType :: v10 = years()::JM,46325:CL,11774
46325 :: EXPR :: modify :: Ljava/lang/Object :: v7[#(0)] = v10::
46329 :: CALL :: call :: Lorg/joda/time/DurationFieldType :: v13 = months()::JM,46332:CL,11760
46332 :: EXPR :: modify :: Ljava/lang/Object :: v7[#(1)] = v13::
46336 :: CALL :: call :: Lorg/joda/time/DurationFieldType :: v16 = weeks()::JM,46339:CL,11545
46339 :: EXPR :: modify :: Ljava/lang/Object :: v7[#(2)] = v16::
46343 :: CALL :: call :: Lorg/joda/time/DurationFieldType :: v19 = days()::JM,46346:CL,11538
46346 :: EXPR :: modify :: Ljava/lang/Object :: v7[#(3)] = v19::
46350 :: CALL :: call :: Lorg/joda/time/DurationFieldType :: v22 = hours()::JM,46353:CL,11524
46353 :: EXPR :: modify :: Ljava/lang/Object :: v7[#(4)] = v22::
46357 :: CALL :: call :: Lorg/joda/time/DurationFieldType :: v25 = minutes()::JM,46360:CL,11517
46360 :: EXPR :: modify :: Ljava/lang/Object :: v7[#(5)] = v25::
46364 :: CALL :: call :: Lorg/joda/time/DurationFieldType :: v28 = seconds()::JM,46367:CL,11492
46367 :: EXPR :: modify :: Ljava/lang/Object :: v7[#(6)] = v28::
46371 :: CALL :: call :: Lorg/joda/time/DurationFieldType :: v31 = millis()::JM,46374:CL,11852
46374 :: EXPR :: modify :: Ljava/lang/Object :: v7[#(7)] = v31::
46378 :: NORM :: declaration :: [I :: v32 = new []::
46379 :: EXPR :: modify :: I :: v32[#(0)] = #(0)::
46383 :: EXPR :: modify :: I :: v32[#(1)] = #(1)::
46387 :: EXPR :: modify :: I :: v32[#(2)] = #(2)::
46391 :: EXPR :: modify :: I :: v32[#(3)] = #(3)::
46395 :: EXPR :: modify :: I :: v32[#(4)] = #(4)::
46399 :: EXPR :: modify :: I :: v32[#(5)] = #(5)::
46403 :: EXPR :: modify :: I :: v32[#(6)] = #(6)::
46407 :: EXPR :: modify :: I :: v32[#(7)] = #(7)::
46419 :: NORM :: compound :: Lorg/joda/time/PeriodType :: return v34::DD,46315
46420 :: EXPR :: assign :: null :: PHI v34 = v2, v4::CF,46419
46472 :: ENTR :: entry :: null :: org.joda.time.chrono.ISOChronology.getInstance(org.joda.time.DateTimeZone)::CD,46476:CD,46482:CD,46487:CD,46488
46476 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 8::CD,46477
46477 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v5 = getDefault()::CL,29153
46482 :: CALL :: call :: Ljava/lang/Object :: v9 = v7.get(v6)::JM,46487
46487 :: EXPR :: assign :: Ljava/lang/Object :: v10 = CHECKCAST v9::DD,46488
46488 :: PRED :: IF :: Z :: if (v10 != #(null)) goto 57::CD,46492:JM,20518:JM,20521:JM,20524:CD,46503
46492 :: CALL :: call :: Lorg/joda/time/chrono/ZonedChronology :: v14 = getInstance(v12, v6)::CL,29315
46503 :: CALL :: call :: Ljava/lang/Object :: v18 = v16.putIfAbsent(v6, v11)::
46533 :: ENTR :: entry :: null :: org.joda.time.PeriodType.size()::CE,46534:CD,46540:CD,46541
46534 :: EXIT :: exit :: I :: org.joda.time.PeriodType.size()::JM,37979
46537 :: EXPR :: reference :: [Lorg/joda/time/DurationFieldType :: v3 = p0 $null .iTypes::DD,46540
46540 :: EXPR :: assign :: I :: v4 = v3.length::CF,46541
46541 :: NORM :: compound :: I :: return v4::CF,46534
46558 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDurationField.getDifferenceAsLong(long,long)::CD,46564:CD,46575:CD,46586
46564 :: CALL :: call :: I :: v6 = p0 $null .getOffsetToAdd(p2 $null )::CL,44828
46572 :: EXPR :: reference :: Z :: v8 = p0 $null .iTimeField::DD,46575
46575 :: PRED :: IF :: Z :: if (v8 == #(0)) goto 26::CD,46577
46577 :: CALL :: call :: I :: v11 = p0 $null .getOffsetToAdd(p1 $null )::CL,44828
46586 :: CALL :: call :: J :: v18 = v7.getDifferenceAsLong(v14, v16)::CL,46558:CL,52323:CL,52309:CL,46625:CL,46606:CL,46646
46606 :: ENTR :: entry :: null :: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField.getDifferenceAsLong(long,long)::CD,46615
46615 :: CALL :: call :: J :: v7 = v5.getDifferenceAsLong(p1 $null , p2 $null )::CL,52464:CL,52334:CL,52372
46625 :: ENTR :: entry :: null :: org.joda.time.field.PreciseDurationField.getDifferenceAsLong(long,long)::
46646 :: ENTR :: entry :: null :: org.joda.time.field.ScaledDurationField.getDifferenceAsLong(long,long)::CD,46656
46656 :: CALL :: call :: J :: v8 = v6.getDifferenceAsLong(p1 $null , p2 $null )::CL,46558:CL,52323:CL,52309:CL,46625:CL,46606:CL,46646
46672 :: ENTR :: entry :: null :: org.joda.time.field.ImpreciseDateTimeField.getDifference(long,long)::CE,46673:CD,46678:CD,46684:CD,46688
46673 :: EXIT :: exit :: I :: org.joda.time.field.ImpreciseDateTimeField.getDifference(long,long)::JM,38174
46678 :: CALL :: call :: J :: v6 = p0 $null .getDifferenceAsLong(p1 $null , p2 $null )::CL,52464:CL,52334:CL,52372
46684 :: CALL :: call :: I :: v8 = safeToInt(v6)::JM,46688:CL,33942
46688 :: NORM :: compound :: I :: return v8::DD,46673
46692 :: ENTR :: entry :: null :: org.joda.time.tz.UTCProvider.getZone(java.lang.String)::CE,46693:CD,46697:CD,46702
46693 :: EXIT :: exit :: Lorg/joda/time/DateTimeZone :: org.joda.time.tz.UTCProvider.getZone(java.lang.String)::JM,38404:JM,38405:JM,38642:JM,38643
46697 :: CALL :: call :: Z :: v6 = #(UTC).equalsIgnoreCase(p1 $null )::JM,46702
46702 :: PRED :: IF :: Z :: if (v6 == #(0)) goto 14::CD,46703:CD,46705:CD,46706
46703 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v9 = org.joda.time.DateTimeZone.UTC::CF,46705
46705 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v9::CF,46693
46706 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return #(null)::CF,46693
46712 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoProvider.getZone(java.lang.String)::CE,46713:CD,46717:JM,46750
46713 :: EXIT :: exit :: Lorg/joda/time/DateTimeZone :: org.joda.time.tz.ZoneInfoProvider.getZone(java.lang.String)::JM,38404:JM,38405:JM,38642:JM,38643:JM,46763
46717 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 7::CD,46718:CD,46722:CD,46727
46718 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return #(null)::DD,46713
46722 :: CALL :: call :: Ljava/lang/Object :: v7 = v5.get(p1 $null )::JM,46727:JM,46729:JM,46731:JM,46750
46727 :: PRED :: IF :: Z :: if (v7 != #(null)) goto 24::CD,46728:CD,46729:CD,46730
46728 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return #(null)::DD,46713
46729 :: EXPR :: assign :: Z :: v8=v7 INSTANCEOF java.lang.ref.SoftReference::DD,46730
46730 :: PRED :: IF :: Z :: if (v8 == #(0)) goto 60::CD,46731:CD,46732:CD,46736:CD,46737:CD,46745:CD,46750:JM,46717
46731 :: EXPR :: assign :: Ljava/lang/Object :: v17 = CHECKCAST v7::JM,46736
46732 :: CALL :: call :: Ljava/lang/Object :: v19 = v17.get()::JM,46736
46736 :: EXPR :: assign :: Ljava/lang/Object :: v20 = CHECKCAST v19::DD,46737:DD,46738
46737 :: PRED :: IF :: Z :: if (v20 == #(null)) goto 54::CD,46738:CD,46739:CD,46744
46738 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v20::DD,46713
46739 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v22 = p0 $null .loadZoneData(p1 $null )::JM,46744:CL,52657
46744 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v22::DD,46713
46745 :: CALL :: call :: Z :: v11 = p1 $null .equals(v7)::JM,46717:JM,46750
46750 :: PRED :: IF :: Z :: if (v11 == #(0)) goto 74::CD,46751:CD,46756:CD,46758:CD,46763
46751 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v16 = p0 $null .loadZoneData(p1 $null )::JM,46756:CL,52657
46756 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v16::DD,46713
46758 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v14 = p0 $null .getZone(v12)::JM,46763:CL,46712
46763 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v14::DD,46713
46791 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.parseOffset(java.lang.String)::CE,46792:CD,46797:CD,46802:CD,46803:CD,46804
46792 :: EXIT :: exit :: I :: org.joda.time.DateTimeZone.parseOffset(java.lang.String)::JM,38422:JM,38597
46797 :: CALL :: call :: J :: v5 = v3.parseMillis(p1 $null )::JM,46802:CL,52742
46802 :: EXPR :: assign :: I :: v6 = CONVERT J to I v5::CF,46803
46803 :: EXPR :: assign :: Ljava/lang/Object :: v7 = -(v6)::CF,46804
46804 :: NORM :: compound :: I :: return v7::DD,46792
46807 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.printOffset(int)::CE,46808:CD,46811:CD,46815:CD,46828:CD,46829:CD,46834:CD,46835:CD,46836:CD,46837:CD,46842:CD,46847:CD,46848:CD,46849:CD,46889:JM,46827
46808 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.DateTimeZone.printOffset(int)::JM,63040:JM,63134
46811 :: NORM :: declaration :: Ljava/lang/StringBuffer :: v3 = new java.lang.StringBuffer::JM,46854:JM,46873:JM,46888
46815 :: PRED :: IF :: Z :: if (p1 $null  < #(0)) goto 25::CD,46816:CD,46822:CD,46827:CD,46889
46816 :: CALL :: call :: Ljava/lang/StringBuffer :: v12 = v3.append(#(43))::
46822 :: CALL :: call :: Ljava/lang/StringBuffer :: v8 = v3.append(#(45))::
46827 :: EXPR :: assign :: Ljava/lang/Object :: v9 = -(p1 $null )::DD,46889
46828 :: EXPR :: assign :: Ljava/lang/Object :: v15 = v13 / #(3600000)::DD,46834
46829 :: CALL :: call :: V :: appendPaddedInteger(v3, v15, #(2))::CL,52799
46834 :: EXPR :: assign :: Ljava/lang/Object :: v18 = v15 * #(3600000)::CF,46835
46835 :: EXPR :: assign :: Ljava/lang/Object :: v19 = v13 - v18::DD,46836:DD,46848
46836 :: EXPR :: assign :: Ljava/lang/Object :: v21 = v19 / #(60000)::DD,46847
46837 :: CALL :: call :: Ljava/lang/StringBuffer :: v24 = v3.append(#(58))::
46842 :: CALL :: call :: V :: appendPaddedInteger(v3, v21, #(2))::CL,52799
46847 :: EXPR :: assign :: Ljava/lang/Object :: v26 = v21 * #(60000)::CF,46848
46848 :: EXPR :: assign :: Ljava/lang/Object :: v27 = v19 - v26::DD,46849:DD,46855:DD,46867
46849 :: PRED :: IF :: Z :: if (v27 != #(0)) goto 88::CD,46850:CD,46854:CD,46855:CD,46856:CD,46861:CD,46866:CD,46867:CD,46868
46850 :: CALL :: call :: Ljava/lang/String :: v45 = v3.toString()::JM,46854
46854 :: NORM :: compound :: Ljava/lang/String :: return v45::DD,46808
46855 :: EXPR :: assign :: Ljava/lang/Object :: v29 = v27 / #(1000)::DD,46866
46856 :: CALL :: call :: Ljava/lang/StringBuffer :: v31 = v3.append(#(58))::
46861 :: CALL :: call :: V :: appendPaddedInteger(v3, v29, #(2))::CL,52799
46866 :: EXPR :: assign :: Ljava/lang/Object :: v33 = v29 * #(1000)::CF,46867
46867 :: EXPR :: assign :: Ljava/lang/Object :: v34 = v27 - v33::DD,46868
46868 :: PRED :: IF :: Z :: if (v34 != #(0)) goto 126::CD,46869:CD,46873:CD,46874:CD,46879:CD,46884:CD,46888
46869 :: CALL :: call :: Ljava/lang/String :: v43 = v3.toString()::JM,46873
46873 :: NORM :: compound :: Ljava/lang/String :: return v43::DD,46808
46874 :: CALL :: call :: Ljava/lang/StringBuffer :: v37 = v3.append(#(46))::
46879 :: CALL :: call :: V :: appendPaddedInteger(v3, v34, #(3))::CL,52799
46884 :: CALL :: call :: Ljava/lang/String :: v41 = v3.toString()::JM,46888
46888 :: NORM :: compound :: Ljava/lang/String :: return v41::DD,46808
46889 :: EXPR :: assign :: null :: PHI v13 = p1 $null , v9::DD,46828:DD,46835
46950 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.fixedOffsetZone(java.lang.String,int)::CE,46951:CD,46955
46951 :: EXIT :: exit :: Lorg/joda/time/DateTimeZone :: org.joda.time.DateTimeZone.fixedOffsetZone(java.lang.String,int)::JM,38437:JM,38612
46955 :: PRED :: IF :: Z :: if (p2 $null  != #(0)) goto 8::CF,46959:CD,46956:CD,46958:JM,25057:JM,20785:JM,25060:JM,20779:JM,25054:CD,46967
46956 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v8 = org.joda.time.DateTimeZone.UTC::CF,46958
46958 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v8::DD,46951
46959 :: NORM :: declaration :: Lorg/joda/time/tz/FixedDateTimeZone :: v5 = new org.joda.time.tz.FixedDateTimeZone::DD,46967
46967 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v5::DD,46951
47017 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.getConvertedId(java.lang.String)::CE,47018:CD,47023:CD,47028:CD,47029
47018 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.DateTimeZone.getConvertedId(java.lang.String)::JM,38541
47023 :: CALL :: call :: Ljava/lang/Object :: v5 = v3.get(p1 $null )::JM,47028
47028 :: EXPR :: assign :: Ljava/lang/Object :: v6 = CHECKCAST v5::CF,47029
47029 :: NORM :: compound :: Ljava/lang/String :: return v6::DD,47018
47032 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.convertToAsciiNumber(java.lang.String)::CD,47036:CD,47041:CD,47045:CD,47066:CD,47071
47036 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v3 = new java.lang.StringBuilder::JM,47045:JM,47056:JM,47057
47041 :: CALL :: call :: I :: v7 = v3.length()::JM,47045
47045 :: PRED :: IF :: Z :: if (v19 >= v7) goto 56::CD,47041:CD,47046:CD,47051:CD,47056:CD,47064:CD,47071:JM,47057
47046 :: CALL :: call :: C :: v9 = v3.charAt(v19)::JM,47056:JM,47057
47051 :: CALL :: call :: I :: v12 = digit(v9, #(10))::JM,47056:JM,47057
47056 :: PRED :: IF :: Z :: if (v12 < #(0)) goto 49::CD,47057:CD,47058:CD,47059:CF,47064
47057 :: EXPR :: assign :: Ljava/lang/Object :: v14 = #(48) + v12::CF,47058
47058 :: EXPR :: assign :: C :: v15 = CONVERT I to C v14::
47059 :: CALL :: call :: V :: v3.setCharAt(v19, v15)::
47064 :: EXPR :: assign :: Ljava/lang/Object :: v18 = v19 + #(1)::DD,47071
47066 :: CALL :: call :: Ljava/lang/String :: v21 = v3.toString()::
47071 :: EXPR :: assign :: null :: PHI v19 = v18, #(0)::DD,47045:JM,47056:JM,47057:DD,47064
47131 :: NORM :: declaration :: [Lorg/joda/time/chrono/BasicChronology$YearInfo :: v8 = new org.joda.time.chrono.BasicChronology$YearInfo[]::DD,47132
47132 :: EXPR :: modify :: [Lorg/joda/time/chrono/BasicChronology$YearInfo :: p0 $null .iYearInfoCache = v8::
47138 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v12 = new java.lang.StringBuilder::
47142 :: CALL :: call :: Ljava/lang/StringBuilder :: v16 = v12.append(#(Invalid min days in f...))::
47147 :: CALL :: call :: Ljava/lang/StringBuilder :: v18 = v16.append(p3 $null )::JM,20518:JM,47161:JM,20521:JM,20524
47152 :: CALL :: call :: Ljava/lang/String :: v20 = v18.toString()::
47161 :: EXPR :: modify :: I :: p0 $null .iMinDaysInFirstWeek = p3 $null ::
47186 :: EXPR :: modify :: Lorg/joda/time/DateTimeFieldType :: p0 $null .iFieldType = p1 $null ::
47189 :: EXPR :: modify :: I :: p0 $null .iMaxParsedDigits = p2 $null ::
47192 :: EXPR :: modify :: Z :: p0 $null .iSigned = p3 $null ::
47203 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.Composite.decompose(java.util.List,java.util.List,java.util.List)::CD,47210:CD,47214:CD,47263:JM,47220:JM,47243
47210 :: CALL :: call :: I :: v7 = p1 $null .size()::JM,47220:JM,47243:JM,47214
47214 :: PRED :: IF :: Z :: if (v29 >= v7) goto 112::CD,47215:CD,47220:CD,47221:CD,47237:CD,47238:CD,47243:CD,47244:CD,47260:CD,47263:JM,47214
47215 :: CALL :: call :: Ljava/lang/Object :: v10 = p1 $null .get(v29)::JM,47220:JM,47243:JM,47214
47220 :: EXPR :: assign :: Z :: v11=v10 INSTANCEOF org.joda.time.format.DateTimeFormatterBuilder$Composite::DD,47221
47221 :: PRED :: IF :: Z :: if (v11 == #(0)) goto 55::CD,47226:CD,47232:JM,47220:JM,47243:JM,47214
47226 :: CALL :: call :: V :: p0 $null .addArrayToList(p2 $null , v13)::CL,52964
47232 :: CALL :: call :: Z :: v16 = p2 $null .add(v10)::JM,47220:JM,47243:JM,47214
47237 :: EXPR :: assign :: Ljava/lang/Object :: v18 = v29 + #(1)::JM,47220:JM,47243:JM,47214
47238 :: CALL :: call :: Ljava/lang/Object :: v20 = p1 $null .get(v18)::JM,47220:JM,47243:JM,47214
47243 :: EXPR :: assign :: Z :: v21=v20 INSTANCEOF org.joda.time.format.DateTimeFormatterBuilder$Composite::DD,47244
47244 :: PRED :: IF :: Z :: if (v21 == #(0)) goto 100::CD,47249:CD,47255:JM,47220:JM,47243:JM,47214
47249 :: CALL :: call :: V :: p0 $null .addArrayToList(p3 $null , v23)::CL,52964
47255 :: CALL :: call :: Z :: v26 = p3 $null .add(v20)::JM,47220:JM,47243:JM,47214
47260 :: EXPR :: assign :: Ljava/lang/Object :: v28 = v29 + #(2)::DD,47263
47263 :: EXPR :: assign :: null :: PHI v29 = v28, #(0)::DD,47214:JM,47220:JM,47243:DD,47237:DD,47260
47295 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral.estimatePrintedLength()::CF,47296:CD,47299
47296 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral.estimatePrintedLength()::JM,38913
47299 :: NORM :: compound :: I :: return #(1)::CF,47296
47301 :: ENTR :: entry :: null :: org.joda.time.format.DateTimePrinterInternalPrinter.estimatePrintedLength()::CE,47302:CD,47308:CD,47312
47302 :: EXIT :: exit :: I :: org.joda.time.format.DateTimePrinterInternalPrinter.estimatePrintedLength()::JM,38913
47305 :: EXPR :: reference :: Lorg/joda/time/format/DateTimePrinter :: v3 = p0 $null .underlying::JM,47312:JM,47308
47308 :: CALL :: call :: I :: v5 = v3.estimatePrintedLength()::JM,47312:JM,47308
47312 :: NORM :: compound :: I :: return v5::CF,47302
47314 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.Fraction.estimatePrintedLength()::CE,47315:CD,47321
47315 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.Fraction.estimatePrintedLength()::JM,38913
47318 :: EXPR :: reference :: I :: v3 = p0 $null .iMaxDigits::DD,47321
47321 :: NORM :: compound :: I :: return v3::CF,47315
47323 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset.estimatePrintedLength()::CE,47324:CD,47330:CD,47331:CD,47335:CD,47344:CD,47360:CD,47361:CD,47362
47324 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset.estimatePrintedLength()::JM,38913:JM,47494
47327 :: EXPR :: reference :: I :: v4 = p0 $null .iMinFields::DD,47330
47330 :: EXPR :: assign :: Ljava/lang/Object :: v5 = #(1) + v4::DD,47331
47331 :: EXPR :: assign :: Ljava/lang/Object :: v6 = v5 ? #(1)::DD,47340:DD,47361
47332 :: EXPR :: reference :: Z :: v7 = p0 $null .iShowSeparators::DD,47335
47335 :: PRED :: IF :: Z :: if (v7 == #(0)) goto 26::CF,47361:CD,47339:CD,47340
47336 :: EXPR :: reference :: I :: v9 = p0 $null .iMinFields::DD,47339
47339 :: EXPR :: assign :: Ljava/lang/Object :: v10 = v9 - #(1)::CF,47340
47340 :: EXPR :: assign :: Ljava/lang/Object :: v11 = v6 + v10::DD,47361
47341 :: EXPR :: reference :: Ljava/lang/String :: v13 = p0 $null .iZeroOffsetPrintText::DD,47344
47344 :: PRED :: IF :: Z :: if (v13 == #(null)) goto 52::CF,47362:CD,47348:CD,47352
47345 :: EXPR :: reference :: Ljava/lang/String :: v15 = p0 $null .iZeroOffsetPrintText::JM,47352
47348 :: CALL :: call :: I :: v17 = v15.length()::JM,47352
47352 :: PRED :: IF :: Z :: if (v17 <= v12) goto 52::CF,47362:CD,47356
47353 :: EXPR :: reference :: Ljava/lang/String :: v18 = p0 $null .iZeroOffsetPrintText::JM,47362
47356 :: CALL :: call :: I :: v20 = v18.length()::JM,47362
47360 :: NORM :: compound :: I :: return v21::CF,47324
47361 :: EXPR :: assign :: null :: PHI v12 = v6, v11::DD,47352:DD,47362
47362 :: EXPR :: assign :: null :: PHI v21 = v12, v12, v20::CF,47360
47378 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId.estimatePrintedLength()::CF,47379:CD,47382:CD,47384
47379 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId.estimatePrintedLength()::JM,38913
47382 :: EXPR :: reference :: I :: v3 = org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.MAX_LENGTH::CF,47384
47384 :: NORM :: compound :: I :: return v3::CF,47379
47386 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TextField.estimatePrintedLength()::CE,47387:CD,47393:CD,47395:CD,47396
47387 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.TextField.estimatePrintedLength()::JM,38913:JM,47512
47390 :: EXPR :: reference :: Z :: v3 = p0 $null .iShort::DD,47393
47393 :: PRED :: IF :: Z :: if (v3 == #(0)) goto 14::CD,47396
47395 :: NORM :: compound :: I :: return v7::CF,47387
47396 :: EXPR :: assign :: null :: PHI v7 = #(6), #(20)::CF,47395
47401 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber.estimatePrintedLength()::CE,47402:CD,47408
47402 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber.estimatePrintedLength()::JM,38913
47405 :: EXPR :: reference :: I :: v3 = p0 $null .iMaxParsedDigits::DD,47408
47408 :: NORM :: compound :: I :: return v3::CF,47402
47410 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.StringLiteral.estimatePrintedLength()::CE,47411:CD,47417:CD,47421
47411 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.StringLiteral.estimatePrintedLength()::JM,38913
47414 :: EXPR :: reference :: Ljava/lang/String :: v3 = p0 $null .iValue::JM,47421
47417 :: CALL :: call :: I :: v5 = v3.length()::JM,47421
47421 :: NORM :: compound :: I :: return v5::CF,47411
47423 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear.estimatePrintedLength()::CF,47424:CD,47427
47424 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear.estimatePrintedLength()::JM,38913
47427 :: NORM :: compound :: I :: return #(2)::CF,47424
47429 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName.estimatePrintedLength()::CE,47430:CD,47436:CD,47438:CD,47439
47430 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName.estimatePrintedLength()::JM,38913
47433 :: EXPR :: reference :: I :: v3 = p0 $null .iType::DD,47436
47436 :: PRED :: IF :: Z :: if (v3 != #(1)) goto 14::CD,47439
47438 :: NORM :: compound :: I :: return v7::CF,47430
47439 :: EXPR :: assign :: null :: PHI v7 = #(4), #(20)::CF,47438
47444 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.Composite.estimatePrintedLength()::CE,47445:CD,47451
47445 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.Composite.estimatePrintedLength()::JM,38913
47448 :: EXPR :: reference :: I :: v3 = p0 $null .iPrintedLengthEstimate::DD,47451
47451 :: NORM :: compound :: I :: return v3::CF,47445
47453 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber.estimatePrintedLength()::CE,47454:CD,47460
47454 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber.estimatePrintedLength()::JM,38913
47457 :: EXPR :: reference :: I :: v3 = p0 $null .iMaxParsedDigits::DD,47460
47460 :: NORM :: compound :: I :: return v3::CF,47454
47462 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.MatchingParser.estimateParsedLength()::CE,47463:CD,47469
47463 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.MatchingParser.estimateParsedLength()::JM,38963:JM,39186
47466 :: EXPR :: reference :: I :: v3 = p0 $null .iParsedLengthEstimate::DD,47469
47469 :: NORM :: compound :: I :: return v3::CF,47463
47471 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear.estimateParsedLength()::CE,47472:CD,47478:CD,47480:CD,47481
47472 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear.estimateParsedLength()::JM,38963:JM,39186
47475 :: EXPR :: reference :: Z :: v3 = p0 $null .iLenientParse::DD,47478
47478 :: PRED :: IF :: Z :: if (v3 == #(0)) goto 12::CD,47481
47480 :: NORM :: compound :: I :: return v7::CF,47472
47481 :: EXPR :: assign :: null :: PHI v7 = #(4), #(2)::CF,47480
47486 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset.estimateParsedLength()::CE,47487:CD,47490:CD,47494
47487 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset.estimateParsedLength()::JM,38963:JM,39186
47490 :: CALL :: call :: I :: v4 = p0 $null .estimatePrintedLength()::JM,47494:CL,47323
47494 :: NORM :: compound :: I :: return v4::CF,47487
47496 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId.estimateParsedLength()::CF,47497:CD,47500:CD,47502
47497 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId.estimateParsedLength()::JM,38963:JM,39186
47500 :: EXPR :: reference :: I :: v3 = org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.MAX_LENGTH::CF,47502
47502 :: NORM :: compound :: I :: return v3::CF,47497
47504 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TextField.estimateParsedLength()::CE,47505:CD,47508:CD,47512
47505 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.TextField.estimateParsedLength()::JM,38963:JM,39186
47508 :: CALL :: call :: I :: v4 = p0 $null .estimatePrintedLength()::JM,47512:CL,47386
47512 :: NORM :: compound :: I :: return v4::CF,47505
47514 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.StringLiteral.estimateParsedLength()::CE,47515:CD,47521:CD,47525
47515 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.StringLiteral.estimateParsedLength()::JM,38963:JM,39186
47518 :: EXPR :: reference :: Ljava/lang/String :: v3 = p0 $null .iValue::JM,47525
47521 :: CALL :: call :: I :: v5 = v3.length()::JM,47525
47525 :: NORM :: compound :: I :: return v5::CF,47515
47527 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral.estimateParsedLength()::CF,47528:CD,47531
47528 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral.estimateParsedLength()::JM,38963:JM,39186
47531 :: NORM :: compound :: I :: return #(1)::CF,47528
47533 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.NumberFormatter.estimateParsedLength()::CE,47534:CD,47540
47534 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.NumberFormatter.estimateParsedLength()::JM,38963:JM,39186
47537 :: EXPR :: reference :: I :: v3 = p0 $null .iMaxParsedDigits::DD,47540
47540 :: NORM :: compound :: I :: return v3::CF,47534
47542 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.Fraction.estimateParsedLength()::CE,47543:CD,47549
47543 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.Fraction.estimateParsedLength()::JM,38963:JM,39186
47546 :: EXPR :: reference :: I :: v3 = p0 $null .iMaxDigits::DD,47549
47549 :: NORM :: compound :: I :: return v3::CF,47543
47551 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.Composite.estimateParsedLength()::CE,47552:CD,47558
47552 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.Composite.estimateParsedLength()::JM,38963:JM,39186
47555 :: EXPR :: reference :: I :: v3 = p0 $null .iParsedLengthEstimate::DD,47558
47558 :: NORM :: compound :: I :: return v3::CF,47552
47560 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName.estimateParsedLength()::CE,47561:CD,47567:CD,47569:CD,47570
47561 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName.estimateParsedLength()::JM,38963:JM,39186
47564 :: EXPR :: reference :: I :: v3 = p0 $null .iType::DD,47567
47567 :: PRED :: IF :: Z :: if (v3 != #(1)) goto 14::CD,47570
47569 :: NORM :: compound :: I :: return v7::CF,47561
47570 :: EXPR :: assign :: null :: PHI v7 = #(4), #(20)::CF,47569
47936 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoProvider.openResource(java.lang.String)::CD,47944:CD,47980:CD,47985:CD,47990:CD,47995:CD,48007:CD,48012:CD,48018:CD,48028
47941 :: EXPR :: reference :: Ljava/io/File :: v4 = p0 $null .iFileDir::DD,47944
47944 :: PRED :: IF :: Z :: if (v4 == #(null)) goto 31::CD,47963:CD,47974
47960 :: EXPR :: reference :: Ljava/lang/String :: v6 = p0 $null .iResourcePath::
47963 :: CALL :: call :: Ljava/lang/String :: v8 = v6.concat(p1 $null )::
47974 :: CALL :: call :: Ljava/lang/Object :: v12 = doPrivileged(v9)::
47980 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v14 = new java.lang.StringBuilder::
47985 :: CALL :: call :: Ljava/lang/StringBuilder :: v19 = v14.append(#(Resource not found: '))::
47990 :: CALL :: call :: Ljava/lang/StringBuilder :: v21 = v19.append(v8)::
47995 :: CALL :: call :: Ljava/lang/StringBuilder :: v24 = v21.append(#(' ClassLoader: ))::
48004 :: EXPR :: reference :: Ljava/lang/ClassLoader :: v27 = p0 $null .iLoader::JM,48028
48007 :: CALL :: call :: Ljava/lang/String :: v29 = v27.toString()::JM,48028
48012 :: CALL :: call :: Ljava/lang/StringBuilder :: v32 = v24.append(v30)::
48018 :: CALL :: call :: Ljava/lang/String :: v35 = v32.toString()::
48028 :: EXPR :: assign :: null :: PHI v30 = v29, #(system)::
48046 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap(java.io.InputStream)::CE,48047:CD,48050:CD,48054:CD,48059:CD,48073:CD,48074:CD,48080:CD,48086
48047 :: EXIT :: exit :: Ljava/util/Map :: org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap(java.io.InputStream)::JM,39805:JM,48191
48050 :: NORM :: declaration :: Ljava/util/concurrent/ConcurrentHashMap :: v3 = new java.util.concurrent.ConcurrentHashMap::DD,48086
48054 :: NORM :: declaration :: Ljava/io/DataInputStream :: v5 = new java.io.DataInputStream::
48059 :: CALL :: call :: V :: readZoneInfoMap(v5, v3)::CL,53474
48073 :: NORM :: declaration :: Ljava/lang/ref/SoftReference :: v15 = new java.lang.ref.SoftReference::
48074 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v16 = org.joda.time.DateTimeZone.UTC::
48080 :: CALL :: call :: Ljava/lang/Object :: v19 = v3.put(#(UTC), v15)::
48086 :: NORM :: compound :: Ljava/util/Map :: return v3::DD,48047
48139 :: CALL :: call :: Z :: v10 = p1 $null .endsWith(#(/))::JM,48144:JM,48169:JM,48170
48144 :: PRED :: IF :: Z :: if (v10 != #(0)) goto 49::CF,48145:CD,48149:CD,48154:CD,48159
48145 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v12 = new java.lang.StringBuilder::
48149 :: CALL :: call :: Ljava/lang/StringBuilder :: v15 = v12.append(p1 $null )::JM,48144:JM,48169:JM,48170
48154 :: CALL :: call :: Ljava/lang/StringBuilder :: v18 = v15.append(#(47))::
48159 :: CALL :: call :: Ljava/lang/String :: v20 = v18.toString()::
48169 :: PRED :: IF :: Z :: if (p2 $null  != #(null)) goto 75::CD,48170
48170 :: PRED :: IF :: Z :: if (p3 $null  != #(0)) goto 75::CD,48175
48175 :: CALL :: call :: Ljava/lang/ClassLoader :: v25 = v23.getClassLoader()::
48182 :: CALL :: call :: Ljava/io/InputStream :: v29 = p0 $null .openResource(#(ZoneInfoMap))::CL,47936
48187 :: CALL :: call :: Ljava/util/Map :: v31 = loadZoneInfoMap(v29)::JM,48191:CL,48046
48191 :: EXPR :: modify :: Ljava/util/Map :: p0 $null .iZoneInfoMap = v31::
48194 :: NORM :: declaration :: Ljava/util/TreeSet :: v32 = new java.util.TreeSet::JM,48206
48195 :: EXPR :: reference :: Ljava/util/Map :: v33 = p0 $null .iZoneInfoMap::
48198 :: CALL :: call :: Ljava/util/Set :: v35 = v33.keySet()::
48206 :: CALL :: call :: Ljava/util/SortedSet :: v38 = unmodifiableSortedSet(v32)::JM,48206
48242 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserBucket.SavedField.compareTo(org.joda.time.format.DateTimeParserBucket.SavedField)::CE,48243:CD,48261:CD,48266
48243 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeParserBucket.SavedField.compareTo(org.joda.time.format.DateTimeParserBucket.SavedField)::JM,39887:JM,55375
48261 :: CALL :: call :: I :: v11 = compareReverse(v7, v9)::JM,48266:JM,48267:CL,53655
48266 :: PRED :: IF :: Z :: if (v11 == #(0)) goto 27::CD,48267:CD,48271:CD,48275:CD,48279:CD,48284
48267 :: NORM :: compound :: I :: return v11::DD,48243
48271 :: CALL :: call :: Lorg/joda/time/DurationField :: v15 = v13.getDurationField()::CL,33678:CL,33687:CL,44465:CL,33709:CL,33730:CL,33718:CL,33933:CL,33669:CL,33700
48275 :: CALL :: call :: Lorg/joda/time/DurationField :: v17 = v4.getDurationField()::CL,33678:CL,33687:CL,44465:CL,33709:CL,33730:CL,33718:CL,33933:CL,33669:CL,33700
48279 :: CALL :: call :: I :: v19 = compareReverse(v15, v17)::JM,48284:CL,53655
48284 :: NORM :: compound :: I :: return v19::DD,48243
48295 :: ENTR :: entry :: null :: org.joda.time.field.BaseDurationField.compareTo(org.joda.time.DurationField)::CE,48296:CD,48300:CD,48304:CD,48308:CD,48309
48296 :: EXIT :: exit :: I :: org.joda.time.field.BaseDurationField.compareTo(org.joda.time.DurationField)::JM,39901
48300 :: CALL :: call :: J :: v5 = p1 $null .getUnitMillis()::JM,48308:JM,48311:CL,21151:CL,21164:CL,21125:CL,21116:CL,21131:CL,21170
48304 :: CALL :: call :: J :: v7 = p0 $null .getUnitMillis()::JM,48308:JM,48311:CL,21151:CL,21116:CL,21131:CL,21170
48308 :: EXPR :: assign :: Z :: v8 = v7 == v5::DD,48309
48309 :: PRED :: IF :: Z :: if (v8 != #(0)) goto 23::CD,48310:CD,48311:CD,48312
48310 :: NORM :: compound :: I :: return #(0)::CF,48296
48311 :: EXPR :: assign :: Z :: v10 = v7 == v5::DD,48312
48312 :: PRED :: IF :: Z :: if (v10 >= #(0)) goto 30::CD,48313:CD,48314
48313 :: NORM :: compound :: I :: return #(-1)::CF,48296
48314 :: NORM :: compound :: I :: return #(1)::CF,48296
48328 :: ENTR :: entry :: null :: org.joda.time.field.MillisDurationField.compareTo(org.joda.time.DurationField)::CE,48329:CD,48333:CD,48337:CD,48341:CD,48342
48329 :: EXIT :: exit :: I :: org.joda.time.field.MillisDurationField.compareTo(org.joda.time.DurationField)::JM,39915
48333 :: CALL :: call :: J :: v5 = p1 $null .getUnitMillis()::JM,48341:JM,48344:CL,21151:CL,21164:CL,21125:CL,21116:CL,21131:CL,21170
48337 :: CALL :: call :: J :: v7 = p0 $null .getUnitMillis()::JM,48341:JM,48344:CL,21125
48341 :: EXPR :: assign :: Z :: v8 = v7 == v5::DD,48342
48342 :: PRED :: IF :: Z :: if (v8 != #(0)) goto 23::CD,48343:CD,48344:CD,48345
48343 :: NORM :: compound :: I :: return #(0)::CF,48329
48344 :: EXPR :: assign :: Z :: v10 = v7 == v5::DD,48345
48345 :: PRED :: IF :: Z :: if (v10 >= #(0)) goto 30::CD,48346:CD,48347
48346 :: NORM :: compound :: I :: return #(-1)::CF,48329
48347 :: NORM :: compound :: I :: return #(1)::CF,48329
48361 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDurationField.compareTo(org.joda.time.DurationField)::CF,48362:CD,48366
48362 :: EXIT :: exit :: I :: org.joda.time.field.UnsupportedDurationField.compareTo(org.joda.time.DurationField)::JM,39929
48366 :: NORM :: compound :: I :: return #(0)::CF,48362
48368 :: ENTR :: entry :: null :: org.joda.time.chrono.GJLocaleSymbols.forLocale(java.util.Locale)::CD,48372:CD,48378:CD,48383:CD,48384
48372 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 8::CD,48373
48373 :: CALL :: call :: Ljava/util/Locale :: v5 = getDefault()::
48378 :: CALL :: call :: Ljava/lang/Object :: v9 = v7.get(v6)::JM,48383
48383 :: EXPR :: assign :: Ljava/lang/Object :: v10 = CHECKCAST v9::DD,48384
48384 :: PRED :: IF :: Z :: if (v10 != #(null)) goto 55::JM,53728:JM,53920:JM,53713:JM,53761:JM,53750:JM,53879:JM,53739:CD,48392
48392 :: CALL :: call :: Ljava/lang/Object :: v15 = v13.putIfAbsent(v6, v11)::
48421 :: ENTR :: entry :: null :: org.joda.time.chrono.GJLocaleSymbols.halfdayTextToValue(java.lang.String)::JM,54079
48467 :: ENTR :: entry :: null :: org.joda.time.chrono.GJDayOfWeekDateTimeField.convertText(java.lang.String,java.util.Locale)::CD,48473:CD,48477
48473 :: CALL :: call :: Lorg/joda/time/chrono/GJLocaleSymbols :: v6 = forLocale(p2 $null )::CL,48368
48477 :: CALL :: call :: I :: v8 = v6.dayOfWeekTextToValue(p1 $null )::CL,54140
48485 :: ENTR :: entry :: null :: org.joda.time.field.BaseDateTimeField.convertText(java.lang.String,java.util.Locale)::CD,48491:JM,54079
48491 :: CALL :: call :: I :: v6 = parseInt(p1 $null )::
48509 :: ENTR :: entry :: null :: org.joda.time.chrono.GJMonthOfYearDateTimeField.convertText(java.lang.String,java.util.Locale)::CD,48515:CD,48519
48515 :: CALL :: call :: Lorg/joda/time/chrono/GJLocaleSymbols :: v6 = forLocale(p2 $null )::CL,48368
48519 :: CALL :: call :: I :: v8 = v6.monthOfYearTextToValue(p1 $null )::CL,54176
48527 :: ENTR :: entry :: null :: org.joda.time.chrono.GJLocaleSymbols.eraTextToValue(java.lang.String)::JM,54079
48572 :: ENTR :: entry :: null :: org.joda.time.chrono.AssembledChronology.getDateTimeMillis(int,int,int,int)::CD,48583
48580 :: EXPR :: reference :: Lorg/joda/time/Chronology :: v7 = p0 $null .iBase::DD,48583
48583 :: PRED :: IF :: Z :: if (v7 == #(null)) goto 39::CD,48587:CD,48588:CD,48598
48584 :: EXPR :: reference :: I :: v9 = p0 $null .iBaseFlags::DD,48587
48587 :: EXPR :: assign :: Ljava/lang/Object :: v11 = v9 && #(6)::DD,48588
48588 :: PRED :: IF :: Z :: if (v11 != #(6)) goto 39::CD,48589:CD,48598
48589 :: CALL :: call :: J :: v15 = v7.getDateTimeMillis(p1 $null , p2 $null , p3 $null , p4 $null )::CL,48572:CL,48720:CL,48624
48598 :: CALL :: call :: J :: v13 = p0 $null .getDateTimeMillis(p1 $null , p2 $null , p3 $null , p4 $null )::CL,48656
48624 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.getDateTimeMillis(int,int,int,int)::CD,48636:CD,48644
48636 :: CALL :: call :: J :: v10 = v8.getDateTimeMillis(p1 $null , p2 $null , p3 $null , p4 $null )::CL,48572:CL,48720:CL,48624
48644 :: CALL :: call :: J :: v12 = p0 $null .localToUTC(v10)::CL,54221
48656 :: ENTR :: entry :: null :: org.joda.time.chrono.BaseChronology.getDateTimeMillis(int,int,int,int)::CD,48664:CD,48668:CD,48674:CD,48678:CD,48684:CD,48688:CD,48694:CD,48698
48664 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v8 = p0 $null .year()::CL,10978:CL,32957
48668 :: CALL :: call :: J :: v11 = v8.set(#(0 l), p1 $null )::CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
48674 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v13 = p0 $null .monthOfYear()::CL,32433:CL,33002
48678 :: CALL :: call :: J :: v15 = v13.set(v11, p2 $null )::CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
48684 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v17 = p0 $null .dayOfMonth()::CL,33038:CL,33020
48688 :: CALL :: call :: J :: v19 = v17.set(v15, p3 $null )::CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
48694 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v21 = p0 $null .millisOfDay()::CL,33389:CL,32442
48698 :: CALL :: call :: J :: v23 = v21.set(v19, p4 $null )::CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
48720 :: ENTR :: entry :: null :: org.joda.time.chrono.GregorianChronology.getDateTimeMillis(int,int,int,int)::CD,48728
48728 :: CALL :: call :: J :: v8 = p0 $null .getDateTimeMillis(p1 $null , p2 $null , p3 $null , p4 $null )::CL,54307
48742 :: ENTR :: entry :: null :: org.joda.time.field.OffsetDateTimeField.roundFloor(long)::CE,48743:CD,48751:CD,48756
48743 :: EXIT :: exit :: J :: org.joda.time.field.OffsetDateTimeField.roundFloor(long)::JM,40238:JM,48756:JM,48784:JM,48889:JM,48931:JM,48933:JM,48961:JM,49024:JM,49056:JM,49138:JM,54378:JM,55487:JM,62640
48751 :: CALL :: call :: J :: v7 = v5.roundFloor(p1 $null )::JM,48756:CL,48947:CL,49087:CL,49010:CL,48742:CL,48892:CL,48759:CL,48876:CL,48993:CL,54364:CL,49065:CL,49027:CL,48964:CL,49124:CL,48902:CL,48834
48756 :: NORM :: compound :: J :: return v7::DD,48743
48759 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.roundFloor(long)::CE,48760:CD,48767
48760 :: EXIT :: exit :: J :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.roundFloor(long)::JM,40238:JM,48756:JM,48784:JM,48889:JM,48931:JM,48933:JM,48961:JM,49024:JM,49056:JM,49138:JM,54378:JM,55487:JM,62640
48764 :: EXPR :: reference :: Z :: v4 = p0 $null .iTimeField::DD,48767
48767 :: PRED :: IF :: Z :: if (v4 == #(0)) goto 31::CD,48768:CD,48778:CD,48783:CD,48784:CD,48785:CD,48789:CD,48797:CD,48805:CD,48812
48768 :: CALL :: call :: I :: v16 = p0 $null .getOffsetToAdd(p1 $null )::JM,48783:CL,33889
48778 :: CALL :: call :: J :: v21 = v17.roundFloor(v19)::JM,48784:CL,48947:CL,49087:CL,49010:CL,48742:CL,48892:CL,48759:CL,48876:CL,48993:CL,49065:CL,49027:CL,48964:CL,49124:CL,48902:CL,48834
48783 :: EXPR :: assign :: J :: v22 = CONVERT I to J v16::CF,48784
48784 :: EXPR :: assign :: Ljava/lang/Object :: v23 = v21 - v22::CF,48785
48785 :: NORM :: compound :: J :: return v23::DD,48760
48789 :: CALL :: call :: J :: v8 = v6.convertUTCToLocal(p1 $null )::CL,20087
48797 :: CALL :: call :: J :: v11 = v9.roundFloor(v8)::CL,48947:CL,49087:CL,49010:CL,48742:CL,48892:CL,48759:CL,48876:CL,48993:CL,49065:CL,49027:CL,48964:CL,49124:CL,48902:CL,48834
48805 :: CALL :: call :: J :: v14 = v12.convertLocalToUTC(v11, #(0), p1 $null )::JM,48812:CL,26477
48812 :: NORM :: compound :: J :: return v14::DD,48760
48834 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor(long)::CE,48835:CD,48842:CD,48850:CD,48859:CD,48865
48835 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor(long)::JM,40238:JM,48756:JM,48784:JM,48889:JM,48931:JM,48933:JM,48961:JM,49024:JM,49056:JM,49138:JM,54378:JM,55487:JM,62640:JM,62812
48842 :: CALL :: call :: I :: v6 = v4.getYear(p1 $null )::CL,20337
48850 :: CALL :: call :: I :: v9 = v7.getMonthOfYear(p1 $null , v6)::CL,27623
48859 :: CALL :: call :: J :: v12 = v10.getYearMonthMillis(v6, v9)::JM,48865:CL,54381
48865 :: NORM :: compound :: J :: return v12::DD,48835
48876 :: ENTR :: entry :: null :: org.joda.time.field.DelegatedDateTimeField.roundFloor(long)::CE,48877:CD,48884:CD,48889
48877 :: EXIT :: exit :: J :: org.joda.time.field.DelegatedDateTimeField.roundFloor(long)::JM,40238:JM,48756:JM,48784:JM,48889:JM,48931:JM,48933:JM,48961:JM,49024:JM,49056:JM,49138:JM,54378:JM,55487
48884 :: CALL :: call :: J :: v6 = v4.roundFloor(p1 $null )::JM,48889:CL,48947:CL,49087:CL,49010:CL,48742:CL,48892:CL,48759:CL,48876:CL,48993:CL,49065:CL,49027:CL,48964:CL,49124:CL,48902:CL,48834
48889 :: NORM :: compound :: J :: return v6::DD,48877
48892 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.roundFloor(long)::CE,48893:CD,48897
48893 :: EXIT :: exit :: J :: org.joda.time.field.UnsupportedDateTimeField.roundFloor(long)::JM,40238:JM,48756:JM,48784:JM,48889:JM,48931:JM,48933:JM,48961:JM,49024:JM,49056:JM,49138:JM,54378:JM,55487
48897 :: CALL :: call :: Ljava/lang/UnsupportedOperationException :: v5 = p0 $null .unsupported()::CL,20439
48902 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor(long)::CE,48903:CD,48914:CD,48922:CD,48927:CD,48932:CD,48933
48903 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor(long)::JM,40238:JM,48756:JM,48784:JM,48889:JM,48931:JM,48933:JM,48961:JM,49024:JM,49056:JM,49138:JM,54378:JM,55487:JM,57129:JM,62640
48914 :: CALL :: call :: J :: v8 = v6.roundFloor(p1 $null )::JM,48931:JM,48933:CL,48947:CL,49087:CL,49010:CL,48742:CL,48892:CL,48759:CL,48876:CL,48993:CL,49065:CL,49027:CL,48964:CL,49124:CL,48902:CL,48834
48922 :: CALL :: call :: I :: v11 = v9.getWeekOfWeekyear(v8)::JM,48928:JM,48927:CL,20316
48927 :: PRED :: IF :: Z :: if (v11 <= #(1)) goto 38::CF,48933:CD,48928:CD,48929:CD,48930:CD,48931
48928 :: EXPR :: assign :: Ljava/lang/Object :: v14 = v11 - #(1)::CF,48929
48929 :: EXPR :: assign :: J :: v15 = CONVERT I to J v14::CF,48930
48930 :: EXPR :: assign :: Ljava/lang/Object :: v16 = #(604800000 l) * v15::CF,48931
48931 :: EXPR :: assign :: Ljava/lang/Object :: v17 = v8 - v16::DD,48933
48932 :: NORM :: compound :: J :: return v18::DD,48903
48933 :: EXPR :: assign :: null :: PHI v18 = v8, v17::CF,48932
48947 :: ENTR :: entry :: null :: org.joda.time.field.RemainderDateTimeField.roundFloor(long)::CE,48948:CD,48956:CD,48961
48948 :: EXIT :: exit :: J :: org.joda.time.field.RemainderDateTimeField.roundFloor(long)::JM,40238:JM,48756:JM,48784:JM,48889:JM,48931:JM,48933:JM,48961:JM,49024:JM,49056:JM,49138:JM,54378:JM,55487:JM,62640
48956 :: CALL :: call :: J :: v7 = v5.roundFloor(p1 $null )::JM,48961:CL,48947:CL,49087:CL,49010:CL,48742:CL,48892:CL,48759:CL,48876:CL,48993:CL,54364:CL,49065:CL,49027:CL,48964:CL,49124:CL,48902:CL,48834
48961 :: NORM :: compound :: J :: return v7::DD,48948
48964 :: ENTR :: entry :: null :: org.joda.time.chrono.GJEraDateTimeField.roundFloor(long)::CE,48965:CD,48969:CD,48974
48965 :: EXIT :: exit :: J :: org.joda.time.chrono.GJEraDateTimeField.roundFloor(long)::JM,40238:JM,48756:JM,48784:JM,48889:JM,48931:JM,48933:JM,48961:JM,49024:JM,49056:JM,49138:JM,54378:JM,55487:JM,62640
48969 :: CALL :: call :: I :: v5 = p0 $null .get(p1 $null )::JM,48974:CL,11220
48974 :: PRED :: IF :: Z :: if (v5 != #(1)) goto 22::CD,48978:CD,48984:CD,48985
48978 :: CALL :: call :: J :: v11 = v8.setYear(#(0 l), #(1))::JM,48984:CL,25428
48984 :: NORM :: compound :: J :: return v11::DD,48965
48985 :: NORM :: compound :: J :: return #(-9223372036854775808 l)::DD,48965
48993 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.roundFloor(long)::CE,48994:CD,48999:CD,49004:CD,49005
48994 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.roundFloor(long)::JM,40238:JM,48756:JM,48784:JM,48889:JM,48931:JM,48933:JM,48961:JM,49024:JM,49056:JM,49138:JM,54378:JM,55487:JM,62640
48999 :: CALL :: call :: J :: v7 = p0 $null .roundFloor(v5)::JM,49004:CL,49087
49004 :: EXPR :: assign :: Ljava/lang/Object :: v8 = v7 - #(259200000 l)::CF,49005
49005 :: NORM :: compound :: J :: return v8::CF,48994
49010 :: ENTR :: entry :: null :: org.joda.time.field.ZeroIsMaxDateTimeField.roundFloor(long)::CE,49011:CD,49019:CD,49024
49011 :: EXIT :: exit :: J :: org.joda.time.field.ZeroIsMaxDateTimeField.roundFloor(long)::JM,40238:JM,48756:JM,48784:JM,48889:JM,48931:JM,48933:JM,48961:JM,49024:JM,49056:JM,49138:JM,54378:JM,55487:JM,62640
49019 :: CALL :: call :: J :: v7 = v5.roundFloor(p1 $null )::JM,49024:CL,48947:CL,49087:CL,49010:CL,48742:CL,48892:CL,48759:CL,48876:CL,48993:CL,54364:CL,49065:CL,49027:CL,48964:CL,49124:CL,48902:CL,48834
49024 :: NORM :: compound :: J :: return v7::DD,49011
49027 :: ENTR :: entry :: null :: org.joda.time.field.DividedDateTimeField.roundFloor(long)::CE,49028:CD,49036:CD,49045:CD,49051:CD,49056
49028 :: EXIT :: exit :: J :: org.joda.time.field.DividedDateTimeField.roundFloor(long)::JM,40238:JM,48756:JM,48784:JM,48889:JM,48931:JM,48933:JM,48961:JM,49024:JM,49056:JM,49138:JM,54378:JM,55487:JM,62640
49036 :: CALL :: call :: I :: v7 = p0 $null .get(p1 $null )::CL,11150
49045 :: CALL :: call :: J :: v11 = v5.set(p1 $null , v9)::CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,25549:CL,17826
49051 :: CALL :: call :: J :: v13 = v5.roundFloor(v11)::JM,49056:CL,48947:CL,49087:CL,49010:CL,48742:CL,48892:CL,48759:CL,48876:CL,48993:CL,54364:CL,49065:CL,49027:CL,48964:CL,49124:CL,48902:CL,48834
49056 :: NORM :: compound :: J :: return v13::DD,49028
49065 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicYearDateTimeField.roundFloor(long)::CE,49066:CD,49073:CD,49078:CD,49083
49066 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicYearDateTimeField.roundFloor(long)::JM,40238:JM,48756:JM,48784:JM,48889:JM,48931:JM,48933:JM,48961:JM,49024:JM,49056:JM,49138:JM,54378:JM,55487:JM,62640:JM,62655
49073 :: CALL :: call :: I :: v6 = p0 $null .get(p1 $null )::CL,11241
49078 :: CALL :: call :: J :: v8 = v4.getYearMillis(v6)::JM,49083:CL,28013
49083 :: NORM :: compound :: J :: return v8::DD,49066
49087 :: ENTR :: entry :: null :: org.joda.time.field.PreciseDurationDateTimeField.roundFloor(long)::CE,49088:CD,49092:CD,49093:JM,49097:JM,49098:JM,49100
49088 :: EXIT :: exit :: J :: org.joda.time.field.PreciseDurationDateTimeField.roundFloor(long)::JM,40238:JM,48756:JM,48784:JM,48889:JM,48931:JM,48933:JM,48961:JM,49004:JM,49024:JM,49056:JM,49138:JM,54378:JM,55487:JM,62640
49092 :: EXPR :: assign :: Z :: v5 = p1 $null  == #(0 l)::DD,49093
49093 :: PRED :: IF :: Z :: if (v5 < #(0)) goto 17::CD,49097:CD,49098:CD,49099:CD,49100:CD,49104:CD,49105:CD,49109:CD,49110
49094 :: EXPR :: reference :: J :: v14 = p0 $null .iUnitMillis::DD,49097
49097 :: EXPR :: assign :: Ljava/lang/Object :: v15 = p1 $null  % v14::CF,49098
49098 :: EXPR :: assign :: Ljava/lang/Object :: v16 = p1 $null  - v15::CF,49099
49099 :: NORM :: compound :: J :: return v16::CF,49088
49100 :: EXPR :: assign :: Ljava/lang/Object :: v8 = p1 $null  + #(1 l)::DD,49104:DD,49105
49101 :: EXPR :: reference :: J :: v9 = p0 $null .iUnitMillis::DD,49104
49104 :: EXPR :: assign :: Ljava/lang/Object :: v10 = v8 % v9::CF,49105
49105 :: EXPR :: assign :: Ljava/lang/Object :: v11 = v8 - v10::DD,49109
49106 :: EXPR :: reference :: J :: v12 = p0 $null .iUnitMillis::DD,49109
49109 :: EXPR :: assign :: Ljava/lang/Object :: v13 = v11 - v12::CF,49110
49110 :: NORM :: compound :: J :: return v13::CF,49088
49124 :: ENTR :: entry :: null :: org.joda.time.chrono.GJYearOfEraDateTimeField.roundFloor(long)::CE,49125:CD,49133:CD,49138
49125 :: EXIT :: exit :: J :: org.joda.time.chrono.GJYearOfEraDateTimeField.roundFloor(long)::JM,40238:JM,48756:JM,48784:JM,48889:JM,48931:JM,48933:JM,48961:JM,49024:JM,49056:JM,49138:JM,54378:JM,55487:JM,62640
49133 :: CALL :: call :: J :: v7 = v5.roundFloor(p1 $null )::JM,49138:CL,48947:CL,49087:CL,49010:CL,48742:CL,48892:CL,48759:CL,48876:CL,48993:CL,54364:CL,49065:CL,49027:CL,48964:CL,49124:CL,48902:CL,48834
49138 :: NORM :: compound :: J :: return v7::DD,49125
49150 :: CALL :: call :: Lorg/joda/time/Chronology :: v7 = getChronology(p2 $null )::CL,29057
49160 :: CALL :: call :: J :: v12 = v9.getMillisKeepLocal(v10, p1 $null )::CL,54409
49166 :: CALL :: call :: Lorg/joda/time/Chronology :: v14 = v7.withUTC()::CL,45183
49170 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v16 = v14.dayOfMonth()::CL,33038:CL,33020
49174 :: CALL :: call :: J :: v18 = v16.roundFloor(v12)::CL,48947:CL,49087:CL,49010:CL,48742:CL,48892:CL,48759:CL,48876:CL,48993:CL,49065:CL,49027:CL,48964:CL,49124:CL,48902:CL,48834
49355 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)::CE,49356:CD,49361:CD,49365:CD,49369:CD,49370:JM,49393:JM,49384:JM,49402:JM,49372:JM,49373
49356 :: EXIT :: exit :: Z :: org.joda.time.format.DateTimeFormatterBuilder.csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)::JM,40515:JM,41393
49361 :: CALL :: call :: I :: v6 = p3 $null .length()::JM,49393:JM,49384:JM,49369:JM,49370:JM,49402:JM,49372
49365 :: CALL :: call :: I :: v8 = p1 $null .length()::JM,49393:JM,49384:JM,49369:JM,49370:JM,49402:JM,49372:JM,49373
49369 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v8 - p2 $null ::DD,49370
49370 :: PRED :: IF :: Z :: if (v9 >= v6) goto 25::CD,49371:CD,49372:CD,49407
49371 :: NORM :: compound :: Z :: return #(0)::DD,49356
49372 :: PRED :: IF :: Z :: if (v26 >= v6) goto 98::CD,49373:CD,49374:CD,49379:CD,49384:CD,49406
49373 :: EXPR :: assign :: Ljava/lang/Object :: v11 = p2 $null  + v26::JM,49393:JM,49384:JM,49369:JM,49370:JM,49402:JM,49372:JM,49373
49374 :: CALL :: call :: C :: v13 = p1 $null .charAt(v11)::JM,49393:JM,49384:JM,49369:JM,49370:JM,49402:JM,49372:JM,49373
49379 :: CALL :: call :: C :: v15 = p3 $null .charAt(v26)::JM,49393:JM,49384:JM,49369:JM,49370:JM,49402:JM,49372
49384 :: PRED :: IF :: Z :: if (v13 == v15) goto 91::CD,49372:CD,49385:CD,49389:CD,49393:CD,49404:CD,49407:JM,49384:JM,49370:JM,49402
49385 :: CALL :: call :: C :: v17 = toUpperCase(v13)::JM,49393:JM,49384:JM,49370:JM,49402:JM,49372
49389 :: CALL :: call :: C :: v19 = toUpperCase(v15)::JM,49393:JM,49402
49393 :: PRED :: IF :: Z :: if (v17 == v19) goto 91::CD,49372:CD,49394:CD,49398:CD,49402:CD,49404:CD,49407:JM,49393
49394 :: CALL :: call :: C :: v21 = toLowerCase(v17)::JM,49393:JM,49402
49398 :: CALL :: call :: C :: v23 = toLowerCase(v19)::JM,49402
49402 :: PRED :: IF :: Z :: if (v21 == v23) goto 91::CD,49372:CD,49403:CD,49404:CD,49407
49403 :: NORM :: compound :: Z :: return #(0)::DD,49356
49404 :: EXPR :: assign :: Ljava/lang/Object :: v25 = v26 + #(1)::DD,49407
49406 :: NORM :: compound :: Z :: return #(1)::DD,49356
49407 :: EXPR :: assign :: null :: PHI v26 = v25, #(0)::DD,49372:DD,49373:JM,49393:JM,49384:JM,49369:JM,49370:JM,49402:DD,49404
49439 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset.digitCount(java.lang.CharSequence,int,int)::CE,49440:CD,49446:CD,49450:CD,49451:CD,49456:CD,49469:CD,49470:CD,49471:JM,49457:JM,49463:JM,49464
49440 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset.digitCount(java.lang.CharSequence,int,int)::JM,40556:JM,40593:JM,40590:JM,40627:JM,40630:JM,40673:JM,40695:JM,40685:JM,40670
49446 :: CALL :: call :: I :: v7 = p1 $null .length()::JM,49457:JM,49463:JM,49464:JM,49450:JM,49451:JM,49471
49450 :: EXPR :: assign :: Ljava/lang/Object :: v8 = v7 - p2 $null ::JM,49451:JM,49471
49451 :: CALL :: call :: I :: v10 = min(v8, p3 $null )::JM,49451:JM,49471:JM,49463:JM,49464:JM,49450
49456 :: PRED :: IF :: Z :: if (v22 <= #(0)) goto 59::CD,49457:CD,49458:CD,49463:CF,49469
49457 :: EXPR :: assign :: Ljava/lang/Object :: v12 = p2 $null  + v21::JM,49457:JM,49463:JM,49464:JM,49450:JM,49451:JM,49471
49458 :: CALL :: call :: C :: v14 = p1 $null .charAt(v12)::JM,49457:JM,49463:JM,49464:JM,49450:JM,49451:JM,49471
49463 :: PRED :: IF :: Z :: if (v14 < #(48)) goto 59::CD,49464:CF,49469
49464 :: PRED :: IF :: Z :: if (v14 <= #(57)) goto 49::CD,49456:CD,49466:CD,49467:CD,49470:CD,49471
49466 :: EXPR :: assign :: Ljava/lang/Object :: v18 = v21 + #(1)::DD,49470:CF,49467
49467 :: EXPR :: assign :: Ljava/lang/Object :: v20 = v22 + #(-1)::DD,49471
49469 :: NORM :: compound :: I :: return v21::DD,49440
49470 :: EXPR :: assign :: null :: PHI v21 = v18, #(0)::CF,49471:DD,49457:DD,49466:DD,49469
49471 :: EXPR :: assign :: null :: PHI v22 = v20, v10::DD,49456:DD,49467
49494 :: ENTR :: entry :: null :: org.joda.time.format.FormatUtils.parseTwoDigits(java.lang.CharSequence,int)::CE,49495:CD,49499:CD,49504:CD,49505:CD,49506:CD,49507:CD,49508:CD,49509:CD,49514:CD,49515:CD,49516
49495 :: EXIT :: exit :: I :: org.joda.time.format.FormatUtils.parseTwoDigits(java.lang.CharSequence,int)::JM,40564:JM,40567:JM,40601:JM,40604:JM,40641:JM,40638
49499 :: CALL :: call :: C :: v5 = p1 $null .charAt(p2 $null )::JM,49504:JM,49508:JM,49514
49504 :: EXPR :: assign :: Ljava/lang/Object :: v7 = v5 - #(48)::DD,49505:DD,49506
49505 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v7 ? #(3)::DD,49507:CF,49506
49506 :: EXPR :: assign :: Ljava/lang/Object :: v11 = v7 ? #(1)::CF,49507
49507 :: EXPR :: assign :: Ljava/lang/Object :: v12 = v9 + v11::DD,49514:CF,49508
49508 :: EXPR :: assign :: Ljava/lang/Object :: v13 = p2 $null  + #(1)::JM,49504:JM,49508:JM,49514
49509 :: CALL :: call :: C :: v15 = p1 $null .charAt(v13)::JM,49504:JM,49508:JM,49514
49514 :: EXPR :: assign :: Ljava/lang/Object :: v16 = v12 + v15::DD,49515
49515 :: EXPR :: assign :: Ljava/lang/Object :: v17 = v16 - #(48)::CF,49516
49516 :: NORM :: compound :: I :: return v17::DD,49495
49538 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserBucket.saveField(org.joda.time.DateTimeField,int)::CD,49544
49544 :: CALL :: call :: Lorg/joda/time/format/DateTimeParserBucket$SavedField :: v6 = p0 $null .obtainSaveField()::CL,54447
49557 :: ENTR :: entry :: null :: org.joda.time.DateTimeUtils.getDefaultTimeZoneNames()::CE,49558:CD,49560:CD,49562:CD,49566:CD,49567:CD,49587:CD,49588
49558 :: EXIT :: exit :: Ljava/util/Map :: org.joda.time.DateTimeUtils.getDefaultTimeZoneNames()::JM,41343
49560 :: EXPR :: reference :: Ljava/util/concurrent/atomic/AtomicReference :: v2 = org.joda.time.DateTimeUtils.cZoneNames::JM,49562:JM,49566
49562 :: CALL :: call :: Ljava/lang/Object :: v4 = v2.get()::JM,49562:JM,49566
49566 :: EXPR :: assign :: Ljava/lang/Object :: v5 = CHECKCAST v4::DD,49567:DD,49588
49567 :: PRED :: IF :: Z :: if (v5 != #(null)) goto 40::CF,49588:CD,49568:CD,49571:CD,49573:CD,49579
49568 :: CALL :: call :: Ljava/util/Map :: v8 = buildDefaultTimeZoneNames()::JM,49588:JM,49573:JM,49579:CL,54572
49571 :: EXPR :: reference :: Ljava/util/concurrent/atomic/AtomicReference :: v9 = org.joda.time.DateTimeUtils.cZoneNames::JM,49573:JM,49579
49573 :: CALL :: call :: Z :: v11 = v9.compareAndSet(#(null), v8)::JM,49573:JM,49579:JM,49588
49579 :: PRED :: IF :: Z :: if (v11 != #(0)) goto 40::CF,49588:CD,49580:CD,49582:CD,49586
49580 :: EXPR :: reference :: Ljava/util/concurrent/atomic/AtomicReference :: v13 = org.joda.time.DateTimeUtils.cZoneNames::JM,49586:JM,49582
49582 :: CALL :: call :: Ljava/lang/Object :: v15 = v13.get()::JM,49586:JM,49582
49586 :: EXPR :: assign :: Ljava/lang/Object :: v16 = CHECKCAST v15::DD,49588
49587 :: NORM :: compound :: Ljava/util/Map :: return v17::DD,49558
49588 :: EXPR :: assign :: null :: PHI v17 = v5, v8, v16::CF,49587
49598 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.csStartsWith(java.lang.CharSequence,int,java.lang.String)::CE,49599:CD,49604:CD,49608:CD,49612:CD,49613:JM,49616:JM,49627:JM,49615
49599 :: EXIT :: exit :: Z :: org.joda.time.format.DateTimeFormatterBuilder.csStartsWith(java.lang.CharSequence,int,java.lang.String)::JM,41312:JM,42833
49604 :: CALL :: call :: I :: v6 = p3 $null .length()::JM,49627:JM,49612:JM,49613:JM,49615
49608 :: CALL :: call :: I :: v8 = p1 $null .length()::JM,49616:JM,49627:JM,49612:JM,49613:JM,49615
49612 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v8 - p2 $null ::DD,49613
49613 :: PRED :: IF :: Z :: if (v9 >= v6) goto 25::CD,49614:CD,49615:CD,49632
49614 :: NORM :: compound :: Z :: return #(0)::DD,49599
49615 :: PRED :: IF :: Z :: if (v18 >= v6) goto 56::CD,49616:CD,49617:CD,49622:CD,49627:CD,49631
49616 :: EXPR :: assign :: Ljava/lang/Object :: v11 = p2 $null  + v18::JM,49616:JM,49627:JM,49612:JM,49613:JM,49615
49617 :: CALL :: call :: C :: v13 = p1 $null .charAt(v11)::JM,49616:JM,49627:JM,49612:JM,49613:JM,49615
49622 :: CALL :: call :: C :: v15 = p3 $null .charAt(v18)::JM,49627:JM,49612:JM,49613:JM,49615
49627 :: PRED :: IF :: Z :: if (v13 == v15) goto 49::CD,49615:CD,49628:CD,49629:CD,49632
49628 :: NORM :: compound :: Z :: return #(0)::DD,49599
49629 :: EXPR :: assign :: Ljava/lang/Object :: v17 = v18 + #(1)::DD,49632
49631 :: NORM :: compound :: Z :: return #(1)::DD,49599
49632 :: EXPR :: assign :: null :: PHI v18 = v17, #(0)::DD,49615:DD,49616:JM,49627:JM,49612:JM,49613:DD,49629
49684 :: ENTR :: entry :: null :: org.joda.time.format.InternalParserDateTimeParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)::CE,49685:CD,49694:CD,49701
49685 :: EXIT :: exit :: I :: org.joda.time.format.InternalParserDateTimeParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)::JM,41490
49694 :: CALL :: call :: I :: v8 = v6.parseInto(p1 $null , p2 $null , p3 $null )::JM,49701:CL,40953:CL,41103:CL,41377:CL,41413:CL,42459:CL,41179:CL,41201:CL,41273:CL,40464:CL,41495:CL,42002:CL,42734:CL,41654:CL,41469
49701 :: NORM :: compound :: I :: return v8::DD,49685
49706 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserBucket.saveState()::CD,49713
49710 :: EXPR :: reference :: Ljava/lang/Object :: v3 = p0 $null .iSavedState::DD,49713
49713 :: PRED :: IF :: Z :: if (v3 != #(null)) goto 20::JM,54720:JM,54740:JM,54726:JM,54747:JM,54733
49760 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserBucket.saveField(org.joda.time.DateTimeFieldType,int)::CD,49766:CD,49773
49766 :: CALL :: call :: Lorg/joda/time/format/DateTimeParserBucket$SavedField :: v6 = p0 $null .obtainSaveField()::CL,54447
49773 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v9 = p1 $null .getField(v7)::CL,25774
49797 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserBucket.getLocale()::CE,49798:CD,49804
49798 :: EXIT :: exit :: Ljava/util/Locale :: org.joda.time.format.DateTimeParserBucket.getLocale()::JM,42197
49801 :: EXPR :: reference :: Ljava/util/Locale :: v3 = p0 $null .iLocale::DD,49804
49804 :: NORM :: compound :: Ljava/util/Locale :: return v3::CF,49798
49821 :: ENTR :: entry :: null :: org.joda.time.MutableDateTime.property(org.joda.time.DateTimeFieldType)::CD,49837:CD,49848:CD,49852:CD,49857:CD,49862:CD,49867
49837 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v8 = p1 $null .getField(v6)::CL,25774
49848 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v15 = new java.lang.StringBuilder::
49852 :: CALL :: call :: Ljava/lang/StringBuilder :: v19 = v15.append(#(Field '))::
49857 :: CALL :: call :: Ljava/lang/StringBuilder :: v21 = v19.append(p1 $null )::
49862 :: CALL :: call :: Ljava/lang/StringBuilder :: v24 = v21.append(#(' is not supported))::
49867 :: CALL :: call :: Ljava/lang/String :: v26 = v24.toString()::
49893 :: ENTR :: entry :: null :: org.joda.time.field.AbstractReadableInstantFieldProperty.getMinimumValueOverall()::CE,49894:CD,49901:CD,49905
49894 :: EXIT :: exit :: I :: org.joda.time.field.AbstractReadableInstantFieldProperty.getMinimumValueOverall()::JM,42073:JM,42316
49901 :: CALL :: call :: I :: v6 = v4.getMinimumValue()::JM,49905:CL,26710:CL,54982:CL,54910:CL,54898:CL,54947:CL,54973:CL,54919:CL,26716:CL,54960:CL,54988:CL,54892:CL,54904:CL,26722:CL,26728:CL,54928:CL,54934:CL,21222
49905 :: NORM :: compound :: I :: return v6::DD,49894
49907 :: ENTR :: entry :: null :: org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumValueOverall()::CE,49908:CD,49915:CD,49919
49908 :: EXIT :: exit :: I :: org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumValueOverall()::JM,42082:JM,42073
49915 :: CALL :: call :: I :: v6 = v4.getMaximumValue()::JM,49919:CL,27834:CL,25595:CL,25628:CL,27881:CL,27840:CL,27894:CL,27875:CL,27947:CL,27821:CL,27969:CL,27923:CL,27849:CL,27914:CL,20279:CL,27936:CL,27862:CL,27960
49919 :: NORM :: compound :: I :: return v6::DD,49908
49921 :: ENTR :: entry :: null :: org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumTextLength(java.util.Locale)::CE,49922:CD,49930:CD,49935
49922 :: EXIT :: exit :: I :: org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumTextLength(java.util.Locale)::JM,42317
49930 :: CALL :: call :: I :: v7 = v5.getMaximumTextLength(p1 $null )::JM,49935:CL,55070:CL,55085:CL,55132:CL,55100:CL,55040:CL,55001:CL,55116:CL,55055
49935 :: NORM :: compound :: I :: return v7::DD,49922
49938 :: ENTR :: entry :: null :: org.joda.time.MutableDateTime.Property.set(int)::CD,49957
49957 :: CALL :: call :: J :: v11 = v6.set(v9, p1 $null )::CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
49976 :: ENTR :: entry :: null :: org.joda.time.field.AbstractReadableInstantFieldProperty.getAsShortText(java.util.Locale)::CE,49977:CD,49989:CD,49995
49977 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.field.AbstractReadableInstantFieldProperty.getAsShortText(java.util.Locale)::
49989 :: CALL :: call :: Ljava/lang/String :: v9 = v5.getAsShortText(v7, p1 $null )::JM,49995:CL,55177:CL,55218:CL,55155:CL,55188
49995 :: NORM :: compound :: Ljava/lang/String :: return v9::DD,49977
49999 :: ENTR :: entry :: null :: org.joda.time.field.AbstractReadableInstantFieldProperty.getAsText(java.util.Locale)::CE,50000:CD,50012:CD,50018
50000 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.field.AbstractReadableInstantFieldProperty.getAsText(java.util.Locale)::
50012 :: CALL :: call :: Ljava/lang/String :: v9 = v5.getAsText(v7, p1 $null )::JM,50018:CL,55256:CL,55278:CL,55308:CL,55237
50018 :: NORM :: compound :: Ljava/lang/String :: return v9::DD,50000
50049 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserBucket.saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale)::CD,50056:CD,50063
50056 :: CALL :: call :: Lorg/joda/time/format/DateTimeParserBucket$SavedField :: v7 = p0 $null .obtainSaveField()::CL,54447
50063 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v10 = p1 $null .getField(v8)::CL,25774
50080 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserBucket.computeMillis(boolean,java.lang.CharSequence)::CE,50081:CD,50111:CD,50115:CD,50214:CD,50218:CD,50223:CD,50228:CD,50233:CD,50237:CD,50279:CD,50283:CD,50291:CD,50296:CD,50301:CD,50306:CD,50310:CD,50315:CD,50320:CD,50325:CD,50330:JM,50195
50081 :: EXIT :: exit :: J :: org.joda.time.format.DateTimeParserBucket.computeMillis(boolean,java.lang.CharSequence)::JM,50178:JM,57198
50089 :: EXPR :: reference :: I :: v6 = p0 $null .iSavedFieldsCount::DD,50115:DD,50182:DD,50196
50111 :: CALL :: call :: V :: sort(v14, v6)::CL,55347
50115 :: PRED :: IF :: Z :: if (v6 <= #(0)) goto 127::CD,50122:CD,50133:CD,50145:CD,50149:CD,50154:CD,50182:CD,50195:CD,50245:CD,50340:CD,50343:CD,50344:CD,50348:CD,50350
50122 :: CALL :: call :: Lorg/joda/time/DurationField :: v20 = v17.getField(v18)::CL,37998
50133 :: CALL :: call :: Lorg/joda/time/DurationField :: v25 = v22.getField(v23)::CL,37998
50145 :: CALL :: call :: Lorg/joda/time/DurationField :: v29 = v27.getDurationField()::CL,33678:CL,33687:CL,44465:CL,33709:CL,33730:CL,33718:CL,33933:CL,33669:CL,33700
50149 :: CALL :: call :: I :: v31 = compareReverse(v29, v20)::JM,50154:CL,53655
50154 :: PRED :: IF :: Z :: if (v31 < #(0)) goto 127::CD,50155:CD,50160:CD,50182:CD,50195:CD,50245:CD,50340:CD,50343:CD,50344:CD,50348:CD,50350
50155 :: CALL :: call :: I :: v33 = compareReverse(v29, v25)::JM,50160:CL,53655
50160 :: PRED :: IF :: Z :: if (v33 > #(0)) goto 127::CD,50167:CD,50172:CD,50178:CD,50182:CD,50195:CD,50245:CD,50340:CD,50343:CD,50344:CD,50348:CD,50350
50167 :: CALL :: call :: V :: p0 $null .saveField(v116, v117)::CL,49760
50172 :: CALL :: call :: J :: v120 = p0 $null .computeMillis(p1 $null , p2 $null )::JM,50178:CL,50080
50178 :: NORM :: compound :: J :: return v120::DD,50081
50179 :: EXPR :: reference :: J :: v34 = p0 $null .iMillis::DD,50343
50182 :: PRED :: IF :: Z :: if (v41 >= v6) goto 161::CD,50187:CD,50193:CD,50343:CD,50344:CF,50195
50187 :: CALL :: call :: J :: v37 = v35.set(v40, p1 $null )::JM,50343:CL,55437
50193 :: EXPR :: assign :: Ljava/lang/Object :: v39 = v41 + #(1)::DD,50344
50195 :: PRED :: IF :: Z :: if (p1 $null  == #(0)) goto 205::CF,50348:CD,50196:CD,50345:CD,50346
50196 :: PRED :: IF :: Z :: if (v49 >= v6) goto 205::CF,50348:CD,50204:CD,50210:CD,50345:CD,50346
50204 :: CALL :: call :: J :: v46 = v42.set(v48, v44)::JM,50345:CL,55437
50210 :: EXPR :: assign :: Ljava/lang/Object :: v47 = v49 + #(1)::DD,50346
50214 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v103 = new java.lang.StringBuilder::
50218 :: CALL :: call :: Ljava/lang/StringBuilder :: v106 = v103.append(#(Cannot parse '))::
50223 :: CALL :: call :: Ljava/lang/StringBuilder :: v108 = v106.append(p2 $null )::
50228 :: CALL :: call :: Ljava/lang/StringBuilder :: v111 = v108.append(#(34))::
50233 :: CALL :: call :: Ljava/lang/String :: v113 = v111.toString()::
50237 :: CALL :: call :: V :: v100.prependMessage(v113)::CL,55503
50242 :: EXPR :: reference :: Ljava/lang/Integer :: v52 = p0 $null .iOffset::DD,50245
50245 :: PRED :: IF :: Z :: if (v52 == #(null)) goto 270::CD,50249:CD,50253:CD,50254:CD,50259:CD,50350
50246 :: EXPR :: reference :: Ljava/lang/Integer :: v93 = p0 $null .iOffset::JM,50253
50249 :: CALL :: call :: I :: v95 = v93.intValue()::JM,50253
50253 :: EXPR :: assign :: J :: v96 = CONVERT I to J v95::CF,50254
50254 :: EXPR :: assign :: Ljava/lang/Object :: v97 = v50 - v96::DD,50350
50256 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v54 = p0 $null .iZone::DD,50259
50259 :: PRED :: IF :: Z :: if (v54 == #(null)) goto 385::CF,50350:CD,50263:CD,50268:CD,50269:CD,50273
50263 :: CALL :: call :: I :: v57 = v55.getOffsetFromLocal(v50)::JM,50268:CL,50741:CL,50620:CL,50751
50268 :: EXPR :: assign :: J :: v58 = CONVERT I to J v57::CF,50269
50269 :: EXPR :: assign :: Ljava/lang/Object :: v59 = v50 - v58::DD,50350
50273 :: CALL :: call :: I :: v62 = v60.getOffset(v59)::CL,18682:CL,18565:CL,18672:CL,18689
50279 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v63 = new java.lang.StringBuilder::
50283 :: CALL :: call :: Ljava/lang/StringBuilder :: v67 = v63.append(#(Illegal instant due t...))::
50291 :: CALL :: call :: Ljava/lang/StringBuilder :: v70 = v67.append(v68)::
50296 :: CALL :: call :: Ljava/lang/StringBuilder :: v73 = v70.append(#(41))::
50301 :: CALL :: call :: Ljava/lang/String :: v75 = v73.toString()::
50306 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v76 = new java.lang.StringBuilder::
50310 :: CALL :: call :: Ljava/lang/StringBuilder :: v80 = v76.append(#(Cannot parse '))::
50315 :: CALL :: call :: Ljava/lang/StringBuilder :: v82 = v80.append(p2 $null )::
50320 :: CALL :: call :: Ljava/lang/StringBuilder :: v85 = v82.append(#(': ))::
50325 :: CALL :: call :: Ljava/lang/StringBuilder :: v87 = v85.append(v75)::
50330 :: CALL :: call :: Ljava/lang/String :: v89 = v87.toString()::
50340 :: NORM :: compound :: J :: return v98::DD,50081
50343 :: EXPR :: assign :: null :: PHI v40 = v37, v34::CF,50344:DD,50345:DD,50348
50344 :: EXPR :: assign :: null :: PHI v41 = v39, #(0)::DD,50182:DD,50193
50345 :: EXPR :: assign :: null :: PHI v48 = v46, v40::CF,50346:DD,50348
50346 :: EXPR :: assign :: null :: PHI v49 = v47, #(0)::DD,50196:DD,50210
50348 :: EXPR :: assign :: null :: PHI v50 = v40, v48::DD,50254:DD,50269:DD,50350
50350 :: EXPR :: assign :: null :: PHI v98 = v97, v50, v59::CF,50340
50452 :: ENTR :: entry :: null :: org.joda.time.base.BaseDateTime.setChronology(org.joda.time.Chronology)::CD,50457
50457 :: CALL :: call :: Lorg/joda/time/Chronology :: v5 = p0 $null .checkChronology(p1 $null )::CL,34914
50469 :: ENTR :: entry :: null :: org.joda.time.DateTimeUtils.getZone(org.joda.time.DateTimeZone)::CE,50470:CD,50473:JM,50478
50470 :: EXIT :: exit :: Lorg/joda/time/DateTimeZone :: org.joda.time.DateTimeUtils.getZone(org.joda.time.DateTimeZone)::JM,43307
50473 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 9::CD,50474:CD,50477:CD,50478
50474 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v5 = getDefault()::JM,50477:CL,29153
50477 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v5::DD,50470
50478 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return p1 $null ::DD,50470
50482 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)::CD,50496
50496 :: PRED :: IF :: Z :: if (p3 $null  > p4 $null ) goto 64::JM,43808:JM,43809:JM,43841:JM,43844:JM,43813:JM,43847:JM,43832:JM,43818:JM,43835:JM,43838:JM,43823:JM,44259:JM,44262:JM,44265:CD,50521:CD,50525
50521 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet :: v20 = p0 $null .getLastRuleSet()::CL,32211
50525 :: CALL :: call :: V :: v20.addRule(v17)::CL,55597
50553 :: ENTR :: entry :: null :: org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int)::CE,50554:CD,50563:CD,50569
50554 :: EXIT :: exit :: J :: org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int)::JM,43951:JM,44012:JM,44152:JM,50569
50563 :: CALL :: call :: J :: v8 = v6.add(p1 $null , p2 $null )::JM,50569:CL,43931:CL,44136:CL,44016:CL,43956:CL,43976:CL,43996:CL,43912:CL,34012:CL,33983:CL,33434:CL,44056:CL,50553
50569 :: NORM :: compound :: J :: return v8::DD,50554
50584 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v7 = new java.lang.IllegalArgumentException::JM,50592:JM,50584:JM,50589
50589 :: EXPR :: modify :: Lorg/joda/time/DateTimeFieldType :: p0 $null .iType = p1 $null ::
50592 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iDurationField = p2 $null ::
50613 :: EXPR :: modify :: Lorg/joda/time/DurationFieldType :: p0 $null .iType = p1 $null ::
50620 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.getOffsetFromLocal(long)::CE,50621:CD,50625:CD,50630:CD,50631:CD,50632:CD,50637:JM,50657:JM,50646
50621 :: EXIT :: exit :: I :: org.joda.time.DateTimeZone.getOffsetFromLocal(long)::JM,44900:JM,50268:JM,54241
50625 :: CALL :: call :: I :: v5 = p0 $null .getOffset(p1 $null )::JM,50645:JM,50677:JM,50630:JM,50662:JM,50664:JM,50637:JM,50638:CL,18682:CL,18565:CL,18672:CL,18689
50630 :: EXPR :: assign :: J :: v6 = CONVERT I to J v5::CF,50631
50631 :: EXPR :: assign :: Ljava/lang/Object :: v7 = p1 $null  - v6::DD,50670:DD,50678
50632 :: CALL :: call :: I :: v9 = p0 $null .getOffset(v7)::JM,50656:JM,50683:JM,50637:JM,50638:CL,18682:CL,18565:CL,18672:CL,18689
50637 :: PRED :: IF :: Z :: if (v5 == v9) goto 97::CD,50638:CD,50639:CD,50664
50638 :: EXPR :: assign :: Ljava/lang/Object :: v20 = v5 - v9::DD,50639
50639 :: PRED :: IF :: Z :: if (v20 >= #(0)) goto 147::CD,50640:CD,50645:CD,50646:CD,50647:CD,50648:CD,50651:CD,50656:CD,50657:CD,50658:CD,50659:CD,50660:CD,50661:CD,50683:CD,50684:CD,50685
50640 :: CALL :: call :: J :: v22 = p0 $null .nextTransition(v7)::JM,50647:JM,50684:CL,19000:CL,18977:CL,18993:CL,19007
50645 :: EXPR :: assign :: J :: v23 = CONVERT I to J v5::CF,50646
50646 :: EXPR :: assign :: Ljava/lang/Object :: v24 = p1 $null  - v23::CF,50647
50647 :: EXPR :: assign :: Z :: v25 = v22 == v24::DD,50648
50648 :: PRED :: IF :: Z :: if (v25 != #(0)) goto 60::CF,50684
50651 :: CALL :: call :: J :: v31 = p0 $null .nextTransition(v29)::JM,50658:JM,50685:CL,19000:CL,18977:CL,18993:CL,19007
50656 :: EXPR :: assign :: J :: v32 = CONVERT I to J v9::CF,50657
50657 :: EXPR :: assign :: Ljava/lang/Object :: v33 = p1 $null  - v32::CF,50658
50658 :: EXPR :: assign :: Z :: v34 = v31 == v33::DD,50659
50659 :: PRED :: IF :: Z :: if (v34 != #(0)) goto 87::CF,50685
50660 :: EXPR :: assign :: Z :: v36 = v27 == v35::DD,50661
50661 :: PRED :: IF :: Z :: if (v36 == #(0)) goto 93::CD,50662:CD,50683
50662 :: NORM :: compound :: I :: return v5::DD,50621
50664 :: PRED :: IF :: Z :: if (v5 < #(0)) goto 147::CD,50665:CD,50670:CD,50671:CD,50683
50665 :: CALL :: call :: J :: v12 = p0 $null .previousTransition(v7)::JM,50678:JM,50670:CL,19210:CL,19194:CL,19425:CL,19317
50670 :: EXPR :: assign :: Z :: v13 = v12 == v7::DD,50671
50671 :: PRED :: IF :: Z :: if (v13 >= #(0)) goto 147::CD,50672:CD,50677:CD,50678:CD,50679:CD,50680:CD,50681:CD,50683
50672 :: CALL :: call :: I :: v15 = p0 $null .getOffset(v12)::JM,50677:JM,50682:CL,18682:CL,18565:CL,18672:CL,18689
50677 :: EXPR :: assign :: Ljava/lang/Object :: v16 = v15 - v5::DD,50679:CF,50678
50678 :: EXPR :: assign :: Ljava/lang/Object :: v17 = v7 - v12::DD,50680:CF,50679
50679 :: EXPR :: assign :: J :: v18 = CONVERT I to J v16::CF,50680
50680 :: EXPR :: assign :: Z :: v19 = v17 == v18::DD,50681
50681 :: PRED :: IF :: Z :: if (v19 > #(0)) goto 147::CD,50682:CD,50683
50682 :: NORM :: compound :: I :: return v15::DD,50621
50683 :: NORM :: compound :: I :: return v9::DD,50621
50684 :: EXPR :: assign :: null :: PHI v27 = v22, #(9223372036854775807 l)::DD,50660
50685 :: EXPR :: assign :: null :: PHI v35 = v31, #(9223372036854775807 l)::DD,50660
50741 :: ENTR :: entry :: null :: org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal(long)::CE,50742:CD,50749
50742 :: EXIT :: exit :: I :: org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal(long)::JM,44900:JM,50268:JM,54241
50746 :: EXPR :: reference :: I :: v4 = p0 $null .iWallOffset::DD,50749
50749 :: NORM :: compound :: I :: return v4::CF,50742
50751 :: ENTR :: entry :: null :: org.joda.time.UTCDateTimeZone.getOffsetFromLocal(long)::CF,50752:CD,50756
50752 :: EXIT :: exit :: I :: org.joda.time.UTCDateTimeZone.getOffsetFromLocal(long)::JM,44900:JM,50268:JM,54241
50756 :: NORM :: compound :: I :: return #(0)::CF,50752
50758 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormat.createFormatterForPattern(java.lang.String)::CD,50776:CD,50781:CD,50782
50776 :: CALL :: call :: Ljava/lang/Object :: v9 = v7.get(p1 $null )::JM,50781
50781 :: EXPR :: assign :: Ljava/lang/Object :: v10 = CHECKCAST v9::DD,50782
50782 :: PRED :: IF :: Z :: if (v10 != #(null)) goto 85::JM,21295:CD,50787:CD,50791:CD,50797:CD,50801
50787 :: CALL :: call :: V :: parsePatternTo(v11, p1 $null )::CL,55626
50791 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatter :: v15 = v11.toFormatter()::CL,21326
50797 :: CALL :: call :: I :: v18 = v16.size()::JM,50801
50801 :: PRED :: IF :: Z :: if (v18 >= #(500)) goto 85::CD,50804
50804 :: CALL :: call :: Ljava/lang/Object :: v22 = v20.putIfAbsent(p1 $null , v15)::
50837 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatter.requirePrinter()::CD,50845
50845 :: NORM :: declaration :: Ljava/lang/UnsupportedOperationException :: v5 = new java.lang.UnsupportedOperationException::
50857 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatter.printTo(java.lang.Appendable,org.joda.time.ReadableInstant)::CD,50867:CD,50871
50867 :: CALL :: call :: Lorg/joda/time/Chronology :: v8 = getInstantChronology(p2 $null )::CL,56414
50871 :: CALL :: call :: V :: p0 $null .printTo(p1 $null , v6, v8)::CL,56440
50886 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.isLeap(long)::CD,50894:CD,50902
50894 :: CALL :: call :: J :: v6 = v4.convertUTCToLocal(p1 $null )::CL,20087
50902 :: CALL :: call :: Z :: v9 = v7.isLeap(v6)::CL,50998:CL,50886:CL,50930:CL,51063:CL,50913:CL,50946:CL,51014:CL,51036:CL,51053:CL,51101
50913 :: ENTR :: entry :: null :: org.joda.time.field.OffsetDateTimeField.isLeap(long)::CD,50922
50922 :: CALL :: call :: Z :: v7 = v5.isLeap(p1 $null )::CL,50998:CL,50886:CL,50930:CL,51063:CL,50913:CL,50946:CL,51014:CL,51036:CL,51053:CL,51101
50930 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicDayOfYearDateTimeField.isLeap(long)::CD,50938
50938 :: CALL :: call :: Z :: v6 = v4.isLeapDay(p1 $null )::CL,56529
50946 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicMonthOfYearDateTimeField.isLeap(long)::CD,50954:CD,50962:CD,50967
50954 :: CALL :: call :: I :: v6 = v4.getYear(p1 $null )::CL,20337
50962 :: CALL :: call :: Z :: v9 = v7.isLeapYear(v6)::JM,50967:CL,28029
50967 :: PRED :: IF :: Z :: if (v9 == #(0)) goto 43::CD,50971
50971 :: CALL :: call :: I :: v13 = v11.getMonthOfYear(p1 $null , v6)::CL,27623
50998 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicDayOfMonthDateTimeField.isLeap(long)::CD,51006
51006 :: CALL :: call :: Z :: v6 = v4.isLeapDay(p1 $null )::CL,56529
51014 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicYearDateTimeField.isLeap(long)::CD,51022
51022 :: CALL :: call :: I :: v6 = p0 $null .get(p1 $null )::CL,11241
51036 :: ENTR :: entry :: null :: org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long)::CD,51045
51045 :: CALL :: call :: Z :: v7 = v5.isLeap(p1 $null )::CL,50998:CL,50886:CL,50930:CL,51063:CL,50913:CL,50946:CL,51014:CL,51036:CL,51053:CL,51101
51053 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.isLeap(long)::CD,51058
51058 :: CALL :: call :: Ljava/lang/UnsupportedOperationException :: v5 = p0 $null .unsupported()::CL,20439
51063 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicWeekyearDateTimeField.isLeap(long)::CD,51074:CD,51079
51074 :: CALL :: call :: I :: v7 = v5.getWeekyear(p1 $null )::CL,20193
51079 :: CALL :: call :: I :: v9 = v4.getWeeksInYear(v7)::CL,26546
51101 :: ENTR :: entry :: null :: org.joda.time.field.DelegatedDateTimeField.isLeap(long)::CD,51109
51109 :: CALL :: call :: Z :: v6 = v4.isLeap(p1 $null )::CL,50998:CL,50886:CL,50930:CL,51063:CL,50913:CL,50946:CL,51014:CL,51036:CL,51053:CL,51101
51117 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.Recurrence.writeTo(java.io.DataOutput)::CD,51125:CD,51132:CD,51140
51125 :: CALL :: call :: V :: v4.writeTo(p1 $null )::CL,56565
51129 :: EXPR :: reference :: Ljava/lang/String :: v6 = p0 $null .iNameKey::
51132 :: CALL :: call :: V :: p1 $null .writeUTF(v6)::
51140 :: CALL :: call :: V :: writeMillis(p1 $null , v9)::CL,35169
51151 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.Recurrence.readFrom(java.io.DataInput)::CD,51156:CD,51160:CD,51164:JM,44259:JM,44262:JM,44265
51156 :: CALL :: call :: Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear :: v5 = readFrom(p1 $null )::CL,56626
51160 :: CALL :: call :: Ljava/lang/String :: v7 = p1 $null .readUTF()::
51164 :: CALL :: call :: J :: v9 = readMillis(p1 $null )::CL,35572
51397 :: ENTR :: entry :: null :: org.joda.time.field.BaseDurationField.isSupported()::CF,51398:CD,51401
51398 :: EXIT :: exit :: Z :: org.joda.time.field.BaseDurationField.isSupported()::JM,45582:JM,46123:JM,53665:JM,53671:JM,53679
51401 :: NORM :: compound :: Z :: return #(1)::CF,51398
51403 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDurationField.isSupported()::CF,51404:CD,51407
51404 :: EXIT :: exit :: Z :: org.joda.time.field.UnsupportedDurationField.isSupported()::JM,45582:JM,46123:JM,53665:JM,53671:JM,53679
51407 :: NORM :: compound :: Z :: return #(0)::CF,51404
51409 :: ENTR :: entry :: null :: org.joda.time.field.MillisDurationField.isSupported()::CF,51410:CD,51413
51410 :: EXIT :: exit :: Z :: org.joda.time.field.MillisDurationField.isSupported()::JM,45582:JM,46123:JM,53665:JM,53671:JM,53679
51413 :: NORM :: compound :: Z :: return #(1)::CF,51410
51415 :: ENTR :: entry :: null :: org.joda.time.field.LenientDateTimeField.getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)::CE,51416:CD,51420:JM,51424:JM,51442:JM,51422
51416 :: EXIT :: exit :: Lorg/joda/time/DateTimeField :: org.joda.time.field.LenientDateTimeField.getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)::JM,45617
51420 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 7::CD,51421:CD,51422:CD,51423:CD,51429:CD,51433:CD,51442
51421 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return #(null)::DD,51416
51422 :: EXPR :: assign :: Z :: v5=p1 $null  INSTANCEOF org.joda.time.field.StrictDateTimeField::DD,51423
51423 :: PRED :: IF :: Z :: if (v5 == #(0)) goto 22::CF,51442:CD,51424:CD,51425
51424 :: EXPR :: assign :: Ljava/lang/Object :: v7 = CHECKCAST p1 $null ::JM,51425:JM,51442
51425 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v9 = v7.getWrappedField()::JM,51425:JM,51442
51429 :: CALL :: call :: Z :: v12 = v10.isLenient()::JM,51433:CL,56686:CL,56712:CL,56718:CL,56736:CL,56680:CL,56730:CL,56674:CL,56724:CL,56699
51433 :: PRED :: IF :: Z :: if (v12 == #(0)) goto 30::CF,51435:CD,51434:JM,56752:JM,63184:JM,63187:JM,63197:JM,63181:CD,51441
51434 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v10::DD,51416
51435 :: NORM :: declaration :: Lorg/joda/time/field/LenientDateTimeField :: v13 = new org.joda.time.field.LenientDateTimeField::DD,51441
51441 :: NORM :: compound :: Lorg/joda/time/DateTimeField :: return v13::DD,51416
51442 :: EXPR :: assign :: null :: PHI v10 = p1 $null , v9::DD,51434
51472 :: EXPR :: modify :: Lorg/joda/time/chrono/BasicChronology :: p0 $null .iChronology = p1 $null ::
51494 :: EXPR :: modify :: Lorg/joda/time/chrono/BasicChronology :: p0 $null .iChronology = p2 $null ::
51508 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 11::CD,51510
51510 :: CALL :: call :: Lorg/joda/time/DateTimeFieldType :: v7 = p1 $null .getType()::CL,25739:CL,26840:CL,26849
51584 :: EXPR :: modify :: Lorg/joda/time/chrono/BasicChronology :: p0 $null .iChronology = p1 $null ::
51605 :: EXPR :: modify :: Lorg/joda/time/chrono/BasicChronology :: p0 $null .iChronology = p1 $null ::
51627 :: EXPR :: modify :: Lorg/joda/time/chrono/BasicChronology :: p0 $null .iChronology = p1 $null ::
51649 :: EXPR :: modify :: Lorg/joda/time/chrono/BasicChronology :: p0 $null .iChronology = p1 $null ::
51688 :: EXPR :: modify :: Lorg/joda/time/chrono/BasicChronology :: p0 $null .iChronology = p1 $null ::
51710 :: EXPR :: modify :: Lorg/joda/time/chrono/BasicChronology :: p0 $null .iChronology = p1 $null ::
51732 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v11 = new java.lang.IllegalArgumentException::JM,29378:JM,51748:JM,21204:JM,21193:JM,51738:JM,21210:JM,29372
51738 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iRangeField = p2 $null ::
51741 :: CALL :: call :: Lorg/joda/time/DurationField :: v10 = p1 $null .getDurationField()::JM,51745:CL,33678:CL,33687:CL,44465:CL,33709:CL,33730:CL,33718:CL,33933:CL,33669:CL,33700
51745 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iDurationField = v10::
51748 :: EXPR :: modify :: I :: p0 $null .iDivisor = p4 $null ::
51808 :: CALL :: call :: Lorg/joda/time/DurationField :: v10 = p1 $null .getDurationField()::JM,51812:CL,33687
51812 :: PRED :: IF :: Z :: if (v10 != #(null)) goto 42::CD,51817:JM,60485:JM,20966:JM,20972:JM,56957
51813 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iDurationField = #(null)::
51817 :: NORM :: declaration :: Lorg/joda/time/field/ScaledDurationField :: v12 = new org.joda.time.field.ScaledDurationField::DD,51828
51828 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iDurationField = v12::
51831 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iRangeDurationField = p2 $null ::
51834 :: EXPR :: modify :: I :: p0 $null .iDivisor = p4 $null ::
51837 :: CALL :: call :: I :: v17 = p1 $null .getMinimumValue()::JM,51841:JM,51842:JM,51844:CL,54910:CL,56970
51841 :: PRED :: IF :: Z :: if (v17 < #(0)) goto 93::CD,51842:CD,51844:CD,51845:CD,51846:CD,51864
51842 :: EXPR :: assign :: Ljava/lang/Object :: v23 = v17 / p4 $null ::DD,51864
51844 :: EXPR :: assign :: Ljava/lang/Object :: v20 = v17 + #(1)::DD,51845
51845 :: EXPR :: assign :: Ljava/lang/Object :: v21 = v20 / p4 $null ::DD,51846
51846 :: EXPR :: assign :: Ljava/lang/Object :: v22 = v21 - #(1)::CF,51864
51847 :: CALL :: call :: I :: v26 = p1 $null .getMaximumValue()::JM,51851:JM,51852:JM,51854:CL,27900:CL,27960
51851 :: PRED :: IF :: Z :: if (v26 < #(0)) goto 123::CD,51852:CD,51854:CD,51855:CD,51856:CD,51865
51852 :: EXPR :: assign :: Ljava/lang/Object :: v30 = v26 / p4 $null ::DD,51865
51854 :: EXPR :: assign :: Ljava/lang/Object :: v27 = v26 + #(1)::DD,51855
51855 :: EXPR :: assign :: Ljava/lang/Object :: v28 = v27 / p4 $null ::DD,51856
51856 :: EXPR :: assign :: Ljava/lang/Object :: v29 = v28 - #(1)::CF,51865
51857 :: EXPR :: modify :: I :: p0 $null .iMin = v24::
51860 :: EXPR :: modify :: I :: p0 $null .iMax = v31::
51864 :: EXPR :: assign :: null :: PHI v24 = v23, v22::DD,51857
51865 :: EXPR :: assign :: null :: PHI v31 = v30, v29::DD,51860
51929 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v13 = new java.lang.IllegalArgumentException::JM,20966:JM,51944:JM,20972:JM,51934
51934 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iField = p1 $null ::
51937 :: CALL :: call :: Z :: v12 = useTimeArithmetic(p1 $null )::JM,51941:CL,56993
51941 :: EXPR :: modify :: Z :: p0 $null .iTimeField = v12::
51944 :: EXPR :: modify :: Lorg/joda/time/DateTimeZone :: p0 $null .iZone = p2 $null ::
52255 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v16 = new java.lang.IllegalArgumentException::JM,29378:JM,52260:JM,52276:JM,52263:JM,52279:JM,52266:JM,29372
52260 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iField = p1 $null ::
52263 :: EXPR :: modify :: Lorg/joda/time/DateTimeZone :: p0 $null .iZone = p2 $null ::
52266 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iDurationField = p3 $null ::
52269 :: CALL :: call :: Z :: v15 = useTimeArithmetic(p3 $null )::JM,52273:CL,56993
52273 :: EXPR :: modify :: Z :: p0 $null .iTimeField = v15::
52276 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iRangeDurationField = p4 $null ::
52279 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iLeapDurationField = p5 $null ::
52309 :: ENTR :: entry :: null :: org.joda.time.field.MillisDurationField.getDifferenceAsLong(long,long)::
52323 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDurationField.getDifferenceAsLong(long,long)::CD,52329
52329 :: CALL :: call :: Ljava/lang/UnsupportedOperationException :: v6 = p0 $null .unsupported()::CL,44793
52334 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong(long,long)::CD,52340:CD,52341
52340 :: EXPR :: assign :: Z :: v5 = p1 $null  == p2 $null ::DD,52341
52341 :: PRED :: IF :: Z :: if (v5 >= #(0)) goto 18::CD,52345:CD,52356
52345 :: CALL :: call :: J :: v12 = v10.getYearDifference(p2 $null , p1 $null )::CL,57014
52356 :: CALL :: call :: J :: v9 = v7.getYearDifference(p1 $null , p2 $null )::CL,57014
52372 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicWeekyearDateTimeField.getDifferenceAsLong(long,long)::CD,52378:CD,52379
52378 :: EXPR :: assign :: Z :: v5 = p1 $null  == p2 $null ::DD,52379
52379 :: PRED :: IF :: Z :: if (v5 >= #(0)) goto 17::CD,52380:CD,52389:CD,52394:CD,52399:CD,52404:CD,52409:CD,52410
52380 :: CALL :: call :: I :: v31 = p0 $null .getDifference(p2 $null , p1 $null )::CL,46672
52389 :: CALL :: call :: I :: v8 = p0 $null .get(p1 $null )::CL,11080
52394 :: CALL :: call :: I :: v10 = p0 $null .get(p2 $null )::CL,11080
52399 :: CALL :: call :: J :: v12 = p0 $null .remainder(p1 $null )::CL,57119
52404 :: CALL :: call :: J :: v14 = p0 $null .remainder(p2 $null )::JM,52409:CL,57119
52409 :: EXPR :: assign :: Z :: v16 = v14 == #(31449600000 l)::DD,52410
52410 :: PRED :: IF :: Z :: if (v16 < #(0)) goto 78::CD,52414
52414 :: CALL :: call :: I :: v19 = v17.getWeeksInYear(v8)::CL,26546
52464 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong(long,long)::CD,52470:CD,52471
52470 :: EXPR :: assign :: Z :: v5 = p1 $null  == p2 $null ::DD,52471
52471 :: PRED :: IF :: Z :: if (v5 >= #(0)) goto 16::CD,52472:CD,52484:CD,52492:CD,52501:CD,52509:CD,52529:CD,52539:CD,52545:CD,52573:CD,52583
52472 :: CALL :: call :: I :: v56 = p0 $null .getDifference(p2 $null , p1 $null )::CL,46672
52484 :: CALL :: call :: I :: v9 = v7.getYear(p1 $null )::CL,20337
52492 :: CALL :: call :: I :: v12 = v10.getMonthOfYear(p1 $null , v9)::CL,27623
52501 :: CALL :: call :: I :: v15 = v13.getYear(p2 $null )::CL,20337
52509 :: CALL :: call :: I :: v18 = v16.getMonthOfYear(p2 $null , v15)::CL,27623
52529 :: CALL :: call :: I :: v30 = v28.getDayOfMonth(p1 $null , v9, v12)::JM,52545:JM,52556:CL,28054
52539 :: CALL :: call :: I :: v33 = v31.getDaysInYearMonth(v9, v12)::JM,52545:CL,26613
52545 :: PRED :: IF :: Z :: if (v30 != v33) goto 148::CD,52549:CD,52556
52549 :: CALL :: call :: I :: v36 = v34.getDayOfMonth(p2 $null , v15, v18)::JM,52556:CL,28054
52556 :: PRED :: IF :: Z :: if (v36 <= v30) goto 148::CD,52564
52564 :: CALL :: call :: J :: v41 = v39.set(p2 $null , v30)::CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
52573 :: CALL :: call :: J :: v45 = v43.getYearMonthMillis(v9, v12)::CL,54381
52583 :: CALL :: call :: J :: v49 = v47.getYearMonthMillis(v15, v18)::CL,54381
52657 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoProvider.loadZoneData(java.lang.String)::CE,52658:CD,52662:CD,52667:CD,52675:CD,52680:CD,52691:CD,52692:CD,52699:CD,52709
52658 :: EXIT :: exit :: Lorg/joda/time/DateTimeZone :: org.joda.time.tz.ZoneInfoProvider.loadZoneData(java.lang.String)::JM,46744:JM,46756
52662 :: CALL :: call :: Ljava/io/InputStream :: v6 = p0 $null .openResource(p1 $null )::CL,47936
52667 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v8 = readFrom(v6, p1 $null )::JM,52691:CL,19535
52675 :: NORM :: declaration :: Ljava/lang/ref/SoftReference :: v18 = new java.lang.ref.SoftReference::
52680 :: CALL :: call :: Ljava/lang/Object :: v21 = v17.put(p1 $null , v18)::
52691 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v8::DD,52658
52692 :: CALL :: call :: V :: p0 $null .uncaughtException(v9)::CL,57134
52699 :: CALL :: call :: Ljava/lang/Object :: v14 = v12.remove(p1 $null )::
52709 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return #(null)::DD,52658
52742 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatter.parseMillis(java.lang.String)::CE,52743:CD,52754:JM,40402:JM,40388:JM,40409:CD,52777:CD,52783
52743 :: EXIT :: exit :: J :: org.joda.time.format.DateTimeFormatter.parseMillis(java.lang.String)::JM,46802
52754 :: CALL :: call :: Lorg/joda/time/Chronology :: v8 = p0 $null .selectChronology(v6)::CL,40335
52777 :: CALL :: call :: J :: v16 = v9.doParseMillis(v5, p1 $null )::JM,52783:CL,57173
52783 :: NORM :: compound :: J :: return v16::DD,52743
52799 :: ENTR :: entry :: null :: org.joda.time.format.FormatUtils.appendPaddedInteger(java.lang.StringBuffer,int,int)::CD,52805
52805 :: CALL :: call :: V :: appendPaddedInteger(p1 $null , p2 $null , p3 $null )::CL,57228
52964 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.Composite.addArrayToList(java.util.List,java.lang.Object[])::CD,52970:JM,52971
52970 :: PRED :: IF :: Z :: if (p2 $null  == #(null)) goto 28::CD,52971:CD,52972:CD,52985
52971 :: EXPR :: assign :: I :: v7 = p2 $null .length::CF,52972
52972 :: PRED :: IF :: Z :: if (v13 >= v7) goto 28::CD,52971:CD,52977:CD,52982:CD,52985
52973 :: EXPR :: reference :: Ljava/lang/Object :: v8 = p2 $null [v13]::
52977 :: CALL :: call :: Z :: v10 = p1 $null .add(v8)::JM,52970:JM,52971
52982 :: EXPR :: assign :: Ljava/lang/Object :: v12 = v13 + #(1)::DD,52985
52985 :: EXPR :: assign :: null :: PHI v13 = v12, #(0)::DD,52972:DD,52982:CF,52971
53474 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap(java.io.DataInputStream,java.util.Map)::CD,53479:CD,53484:CD,53499:CD,53503:CD,53537:CD,53538
53479 :: CALL :: call :: I :: v5 = p1 $null .readUnsignedShort()::JM,53484:JM,53503
53484 :: PRED :: IF :: Z :: if (v14 >= v5) goto 37::CD,53485:CD,53497:CD,53537:JM,53484:JM,53503
53485 :: CALL :: call :: Ljava/lang/String :: v9 = p1 $null .readUTF()::JM,53484:JM,53503
53497 :: EXPR :: assign :: Ljava/lang/Object :: v13 = v14 + #(1)::DD,53537
53499 :: CALL :: call :: I :: v16 = p1 $null .readUnsignedShort()::JM,53484:JM,53503
53503 :: PRED :: IF :: Z :: if (v26 >= v16) goto 90::CD,53520:CD,53533:CD,53538
53520 :: CALL :: call :: Ljava/lang/Object :: v24 = p2 $null .put(v19, v22)::
53533 :: EXPR :: assign :: Ljava/lang/Object :: v25 = v26 + #(1)::DD,53538
53537 :: EXPR :: assign :: null :: PHI v14 = v13, #(0)::DD,53484:DD,53497
53538 :: EXPR :: assign :: null :: PHI v26 = v25, #(0)::DD,53503:DD,53533
53655 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserBucket.compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)::CE,53656:CD,53660:JM,53666:JM,53674
53656 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeParserBucket.compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)::JM,48266:JM,48267:JM,48284:JM,50154:JM,50160
53660 :: PRED :: IF :: Z :: if (p1 $null  == #(null)) goto 12::CD,53661:CD,53665:CD,53666
53661 :: CALL :: call :: Z :: v6 = p1 $null .isSupported()::JM,53665:CL,51397:CL,51403:CL,51409
53665 :: PRED :: IF :: Z :: if (v6 != #(0)) goto 27::CD,53666:CD,53674
53666 :: PRED :: IF :: Z :: if (p2 $null  == #(null)) goto 23::CD,53667:CD,53671:CD,53672
53667 :: CALL :: call :: Z :: v15 = p2 $null .isSupported()::JM,53671:CL,51397:CL,51403:CL,51409
53671 :: PRED :: IF :: Z :: if (v15 != #(0)) goto 25::CD,53672:CD,53673
53672 :: NORM :: compound :: I :: return #(0)::CF,53656
53673 :: NORM :: compound :: I :: return #(-1)::CF,53656
53674 :: PRED :: IF :: Z :: if (p2 $null  == #(null)) goto 38::CD,53675:CD,53679:CD,53680
53675 :: CALL :: call :: Z :: v9 = p2 $null .isSupported()::JM,53679:CL,51397:CL,51403:CL,51409
53679 :: PRED :: IF :: Z :: if (v9 != #(0)) goto 41::CD,53680:CD,53681:CD,53686:CD,53687
53680 :: NORM :: compound :: I :: return #(1)::CF,53656
53681 :: CALL :: call :: I :: v11 = p1 $null .compareTo(p2 $null )::JM,53686:CL,39890:CL,39918:CL,39904
53686 :: EXPR :: assign :: Ljava/lang/Object :: v12 = -(v11)::CF,53687
53687 :: NORM :: compound :: I :: return v12::CF,53656
53713 :: CALL :: call :: Ljava/text/DateFormatSymbols :: v6 = getDateFormatSymbols(p1 $null )::CL,58142
53728 :: CALL :: call :: [Ljava/lang/String :: v12 = realignDaysOfWeek(v10)::CL,58190
53739 :: CALL :: call :: [Ljava/lang/String :: v16 = realignDaysOfWeek(v14)::CL,58190
53750 :: CALL :: call :: [Ljava/lang/String :: v20 = realignMonths(v18)::CL,58229
53761 :: CALL :: call :: [Ljava/lang/String :: v24 = realignMonths(v22)::CL,58229
53879 :: CALL :: call :: V :: addNumerals(v65, #(1), #(7), v28)::CL,58305
53920 :: CALL :: call :: V :: addNumerals(v77, #(1), #(12), v28)::CL,58305
54079 :: CALL :: call :: Ljava/lang/String :: v8 = createMessage(v6, p2 $null )::CL,58388
54140 :: ENTR :: entry :: null :: org.joda.time.chrono.GJLocaleSymbols.dayOfWeekTextToValue(java.lang.String)::JM,54079
54176 :: ENTR :: entry :: null :: org.joda.time.chrono.GJLocaleSymbols.monthOfYearTextToValue(java.lang.String)::JM,54079
54221 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.localToUTC(long)::CD,54226:CD,54227:JM,26827:JM,54242:JM,54243:JM,54229:JM,54248
54226 :: EXPR :: assign :: Z :: v5 = p1 $null  == #(9223372036854775807 l)::DD,54227
54227 :: PRED :: IF :: Z :: if (v5 != #(0)) goto 16::CD,54229:CD,54230
54229 :: EXPR :: assign :: Z :: v8 = p1 $null  == #(-9223372036854775808 l)::DD,54230
54230 :: PRED :: IF :: Z :: if (v8 != #(0)) goto 25::CD,54236:CD,54241:CD,54242:CD,54243:CD,54244
54236 :: CALL :: call :: I :: v12 = v10.getOffsetFromLocal(p1 $null )::JM,54241:CL,50741:CL,50620:CL,50751
54241 :: EXPR :: assign :: J :: v13 = CONVERT I to J v12::CF,54242
54242 :: EXPR :: assign :: Ljava/lang/Object :: v14 = p1 $null  - v13::DD,54245:DD,54250:CF,54243
54243 :: EXPR :: assign :: Z :: v16 = p1 $null  == #(604800000 l)::DD,54244
54244 :: PRED :: IF :: Z :: if (v16 <= #(0)) goto 66::CD,54245:CD,54246:CD,54248:CD,54249
54245 :: EXPR :: assign :: Z :: v18 = v14 == #(0 l)::DD,54246
54246 :: PRED :: IF :: Z :: if (v18 >= #(0)) goto 66::CD,54248:CD,54249
54248 :: EXPR :: assign :: Z :: v20 = p1 $null  == #(-604800000 l)::DD,54249
54249 :: PRED :: IF :: Z :: if (v20 >= #(0)) goto 84::CD,54250:CD,54251:CD,54253
54250 :: EXPR :: assign :: Z :: v21 = v14 == #(0 l)::DD,54251
54251 :: PRED :: IF :: Z :: if (v21 <= #(0)) goto 84::CD,54253
54253 :: CALL :: call :: I :: v23 = v10.getOffset(v14)::CL,18682:CL,18565:CL,18672:CL,18689
54307 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getDateTimeMillis(int,int,int,int)::CD,54315:CD,54319
54315 :: CALL :: call :: Lorg/joda/time/Chronology :: v8 = p0 $null .getBase()::JM,54319:CL,32840
54319 :: PRED :: IF :: Z :: if (v8 == #(null)) goto 21::CD,54320:CD,54332:CD,54338
54320 :: CALL :: call :: J :: v18 = v8.getDateTimeMillis(p1 $null , p2 $null , p3 $null , p4 $null )::CL,48572:CL,48720:CL,48624
54332 :: CALL :: call :: V :: verifyValueBounds(v11, p4 $null , #(0), #(86399999))::CL,58473
54338 :: CALL :: call :: J :: v16 = p0 $null .getDateTimeMillis0(p1 $null , p2 $null , p3 $null , p4 $null )::CL,58508
54364 :: ENTR :: entry :: null :: org.joda.time.chrono.ISOYearOfEraDateTimeField.roundFloor(long)::CE,54365:CD,54373:CD,54378
54365 :: EXIT :: exit :: J :: org.joda.time.chrono.ISOYearOfEraDateTimeField.roundFloor(long)::JM,48756:JM,48961:JM,49024:JM,49056:JM,49138:JM,54378:JM,62640
54373 :: CALL :: call :: J :: v7 = v5.roundFloor(p1 $null )::JM,54378:CL,48947:CL,49087:CL,49010:CL,48742:CL,48892:CL,48759:CL,48876:CL,48993:CL,54364:CL,49065:CL,49027:CL,48964:CL,49124:CL,48902:CL,48834
54378 :: NORM :: compound :: J :: return v7::DD,54365
54381 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getYearMonthMillis(int,int)::CE,54382:CD,54387:CD,54392:CD,54398:CD,54399
54382 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicChronology.getYearMonthMillis(int,int)::JM,48865
54387 :: CALL :: call :: J :: v6 = p0 $null .getYearMillis(p1 $null )::JM,54398:CL,28013
54392 :: CALL :: call :: J :: v8 = p0 $null .getTotalMillisByYearMonth(p1 $null , p2 $null )::JM,54398:CL,34241
54398 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v6 + v8::DD,54399
54399 :: NORM :: compound :: J :: return v9::DD,54382
54409 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.getMillisKeepLocal(org.joda.time.DateTimeZone,long)::CD,54415:CD,54419:CD,54434
54415 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 10::CF,54434:CD,54416
54416 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v7 = getDefault()::JM,54434:CL,29153
54419 :: PRED :: IF :: Z :: if (v8 != p0 $null ) goto 17::CD,54421:CD,54426
54421 :: CALL :: call :: J :: v10 = p0 $null .convertUTCToLocal(p2 $null )::CL,20087
54426 :: CALL :: call :: J :: v13 = v8.convertLocalToUTC(v10, #(0), p2 $null )::CL,26477
54434 :: EXPR :: assign :: null :: PHI v8 = p1 $null , v7::DD,54419
54447 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserBucket.obtainSaveField()::CD,54457:CD,54458:CD,54489:CD,54504
54451 :: EXPR :: reference :: [Lorg/joda/time/format/DateTimeParserBucket$SavedField :: v3 = p0 $null .iSavedFields::DD,54457:DD,54463:DD,54467:DD,54504
54454 :: EXPR :: reference :: I :: v4 = p0 $null .iSavedFieldsCount::DD,54458:DD,54464:DD,54465
54457 :: EXPR :: assign :: I :: v5 = v3.length::CF,54458
54458 :: PRED :: IF :: Z :: if (v4 == v5) goto 25::CD,54462:CD,54463:CD,54464:CD,54468:CD,54503:CD,54504
54459 :: EXPR :: reference :: Z :: v6 = p0 $null .iSavedFieldsShared::DD,54462
54462 :: PRED :: IF :: Z :: if (v6 == #(0)) goto 63::CF,54504:CD,54463:CD,54464:CD,54468:CD,54503
54463 :: EXPR :: assign :: I :: v8 = v3.length::CF,54464
54464 :: PRED :: IF :: Z :: if (v4 != v8) goto 36::CD,54465:CD,54467:CD,54503
54465 :: EXPR :: assign :: Ljava/lang/Object :: v11 = v4 * #(2)::DD,54503
54467 :: EXPR :: assign :: I :: v9 = v3.length::CF,54503
54468 :: NORM :: declaration :: [Lorg/joda/time/format/DateTimeParserBucket$SavedField :: v13 = new org.joda.time.format.DateTimeParserBucket$SavedField[]::DD,54504
54485 :: EXPR :: reference :: Ljava/lang/Object :: v17 = v15[v4]::DD,54489
54489 :: PRED :: IF :: Z :: if (v17 != #(null)) goto 89::CD,54490
54490 :: NORM :: declaration :: Lorg/joda/time/format/DateTimeParserBucket$SavedField :: v18 = new org.joda.time.format.DateTimeParserBucket$SavedField::DD,54494
54494 :: EXPR :: modify :: Ljava/lang/Object :: v15[v4] = v18::
54503 :: EXPR :: assign :: null :: PHI v12 = v11, v9::CF,54468
54504 :: EXPR :: assign :: null :: PHI v15 = v3, v13::
54572 :: ENTR :: entry :: null :: org.joda.time.DateTimeUtils.buildDefaultTimeZoneNames()::CE,54573:CD,54575:CD,54581:CD,54589:CD,54597:CD,54603:CD,54608:CD,54613:CD,54618:CD,54623:CD,54628:CD,54633:CD,54638:CD,54643:CD,54647
54573 :: EXIT :: exit :: Ljava/util/Map :: org.joda.time.DateTimeUtils.buildDefaultTimeZoneNames()::JM,49588:JM,49573:JM,49579
54575 :: NORM :: declaration :: Ljava/util/LinkedHashMap :: v2 = new java.util.LinkedHashMap::JM,54643:JM,54647
54581 :: CALL :: call :: Ljava/lang/Object :: v7 = v2.put(#(UT), v5)::
54589 :: CALL :: call :: Ljava/lang/Object :: v11 = v2.put(#(UTC), v9)::
54597 :: CALL :: call :: Ljava/lang/Object :: v15 = v2.put(#(GMT), v13)::
54603 :: CALL :: call :: V :: put(v2, #(EST), #(America/New_York))::CL,58592
54608 :: CALL :: call :: V :: put(v2, #(EDT), #(America/New_York))::CL,58592
54613 :: CALL :: call :: V :: put(v2, #(CST), #(America/Chicago))::CL,58592
54618 :: CALL :: call :: V :: put(v2, #(CDT), #(America/Chicago))::CL,58592
54623 :: CALL :: call :: V :: put(v2, #(MST), #(America/Denver))::CL,58592
54628 :: CALL :: call :: V :: put(v2, #(MDT), #(America/Denver))::CL,58592
54633 :: CALL :: call :: V :: put(v2, #(PST), #(America/Los_Angeles))::CL,58592
54638 :: CALL :: call :: V :: put(v2, #(PDT), #(America/Los_Angeles))::CL,58592
54643 :: CALL :: call :: Ljava/util/Map :: v37 = unmodifiableMap(v2)::JM,54643:JM,54647
54647 :: NORM :: compound :: Ljava/util/Map :: return v37::DD,54573
54720 :: EXPR :: modify :: Lorg/joda/time/format/DateTimeParserBucket :: p0 $null .this$0 = p1 $null ::
54726 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v6 = access$000(p1 $null )::JM,54730:CL,58687
54730 :: EXPR :: modify :: Lorg/joda/time/DateTimeZone :: p0 $null .iZone = v6::
54733 :: CALL :: call :: Ljava/lang/Integer :: v8 = access$100(p1 $null )::JM,54737:CL,58696
54737 :: EXPR :: modify :: Ljava/lang/Integer :: p0 $null .iOffset = v8::
54740 :: CALL :: call :: [Lorg/joda/time/format/DateTimeParserBucket$SavedField :: v10 = access$200(p1 $null )::JM,54744:CL,58705
54744 :: EXPR :: modify :: [Lorg/joda/time/format/DateTimeParserBucket$SavedField :: p0 $null .iSavedFields = v10::
54747 :: CALL :: call :: I :: v12 = access$300(p1 $null )::JM,54751:CL,58714
54751 :: EXPR :: modify :: I :: p0 $null .iSavedFieldsCount = v12::
54849 :: CALL :: call :: Lorg/joda/time/chrono/ISOChronology :: v6 = getInstance(p2 $null )::CL,46472
54892 :: ENTR :: entry :: null :: org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue()::CF,54893:CD,54896
54893 :: EXIT :: exit :: I :: org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue()::JM,49905:JM,54945:JM,54971:JM,56829:JM,56835
54896 :: NORM :: compound :: I :: return #(1)::CF,54893
54898 :: ENTR :: entry :: null :: org.joda.time.chrono.GJYearOfEraDateTimeField.getMinimumValue()::CF,54899:CD,54902
54899 :: EXIT :: exit :: I :: org.joda.time.chrono.GJYearOfEraDateTimeField.getMinimumValue()::JM,49905:JM,54945:JM,54971:JM,56829:JM,56835
54902 :: NORM :: compound :: I :: return #(1)::CF,54899
54904 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMinimumValue()::CF,54905:CD,54908
54905 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMinimumValue()::JM,49905:JM,54945:JM,54971:JM,56829:JM,56835
54908 :: NORM :: compound :: I :: return #(1)::CF,54905
54910 :: ENTR :: entry :: null :: org.joda.time.field.OffsetDateTimeField.getMinimumValue()::CE,54911:CD,54917
54911 :: EXIT :: exit :: I :: org.joda.time.field.OffsetDateTimeField.getMinimumValue()::JM,49905:JM,51841:JM,51842:JM,51844:JM,54945:JM,54971:JM,56829:JM,56835
54914 :: EXPR :: reference :: I :: v3 = p0 $null .iMin::DD,54917
54917 :: NORM :: compound :: I :: return v3::CF,54911
54919 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.getMinimumValue()::CE,54920:CD,54923
54920 :: EXIT :: exit :: I :: org.joda.time.field.UnsupportedDateTimeField.getMinimumValue()::JM,49905:JM,54945:JM,54971:JM,56829:JM,56835
54923 :: CALL :: call :: Ljava/lang/UnsupportedOperationException :: v4 = p0 $null .unsupported()::CL,20439
54928 :: ENTR :: entry :: null :: org.joda.time.field.RemainderDateTimeField.getMinimumValue()::CF,54929:CD,54932
54929 :: EXIT :: exit :: I :: org.joda.time.field.RemainderDateTimeField.getMinimumValue()::JM,49905:JM,54945:JM,54971:JM,56829:JM,56835
54932 :: NORM :: compound :: I :: return #(0)::CF,54929
54934 :: ENTR :: entry :: null :: org.joda.time.field.DelegatedDateTimeField.getMinimumValue()::CE,54935:CD,54941:CD,54945
54935 :: EXIT :: exit :: I :: org.joda.time.field.DelegatedDateTimeField.getMinimumValue()::JM,49905:JM,54945:JM,54971:JM,56829:JM,56835
54941 :: CALL :: call :: I :: v5 = v3.getMinimumValue()::JM,54945:CL,26710:CL,54982:CL,54910:CL,54898:CL,54947:CL,54973:CL,54919:CL,26716:CL,54960:CL,54988:CL,54892:CL,54904:CL,26722:CL,26728:CL,54928:CL,54934:CL,21222
54945 :: NORM :: compound :: I :: return v5::DD,54935
54947 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicWeekyearDateTimeField.getMinimumValue()::CE,54948:CD,54954:CD,54958
54948 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicWeekyearDateTimeField.getMinimumValue()::JM,49905:JM,54945:JM,54971:JM,56829:JM,56835
54954 :: CALL :: call :: I :: v5 = v3.getMinYear()::JM,54958:CL,25377
54958 :: NORM :: compound :: I :: return v5::CF,54948
54960 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.getMinimumValue()::CE,54961:CD,54967:CD,54971
54961 :: EXIT :: exit :: I :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.getMinimumValue()::JM,49905:JM,54945:JM,54971:JM,56829:JM,56835
54967 :: CALL :: call :: I :: v5 = v3.getMinimumValue()::JM,54971:CL,26710:CL,54982:CL,54910:CL,54898:CL,54947:CL,54973:CL,54919:CL,26716:CL,54960:CL,54988:CL,54892:CL,54904:CL,26722:CL,26728:CL,54928:CL,54934:CL,21222
54971 :: NORM :: compound :: I :: return v5::DD,54961
54973 :: ENTR :: entry :: null :: org.joda.time.field.DividedDateTimeField.getMinimumValue()::CE,54974:CD,54980
54974 :: EXIT :: exit :: I :: org.joda.time.field.DividedDateTimeField.getMinimumValue()::JM,49905:JM,54945:JM,54971:JM,56829:JM,56835
54977 :: EXPR :: reference :: I :: v3 = p0 $null .iMin::DD,54980
54980 :: NORM :: compound :: I :: return v3::CF,54974
54982 :: ENTR :: entry :: null :: org.joda.time.chrono.GJEraDateTimeField.getMinimumValue()::CF,54983:CD,54986
54983 :: EXIT :: exit :: I :: org.joda.time.chrono.GJEraDateTimeField.getMinimumValue()::JM,49905:JM,54945:JM,54971:JM,56829:JM,56835
54986 :: NORM :: compound :: I :: return #(0)::CF,54983
54988 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue()::CE,54989:CD,54995:CD,54999
54989 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue()::JM,49905:JM,54945:JM,54971:JM,56829:JM,56835
54995 :: CALL :: call :: I :: v5 = v3.getMinYear()::JM,54999:CL,25377
54999 :: NORM :: compound :: I :: return v5::CF,54989
55001 :: ENTR :: entry :: null :: org.joda.time.field.BaseDateTimeField.getMaximumTextLength(java.util.Locale)::CE,55002:CD,55006:CD,55010
55002 :: EXIT :: exit :: I :: org.joda.time.field.BaseDateTimeField.getMaximumTextLength(java.util.Locale)::JM,49935:JM,55113:JM,55129
55006 :: CALL :: call :: I :: v5 = p0 $null .getMaximumValue()::JM,55025:JM,55010:JM,55011:JM,55013:JM,55015:CL,27834:CL,25595:CL,25628:CL,27881:CL,27840:CL,27894:CL,27875:CL,27821:CL,27923:CL,27849:CL,27914:CL,20279:CL,27936:CL,27862:CL,27960
55010 :: PRED :: IF :: Z :: if (v5 < #(0)) goto 35::CD,55011:CD,55017:CD,55021:CD,55025
55011 :: PRED :: IF :: Z :: if (v5 >= #(10)) goto 20::CD,55012:CD,55013
55012 :: NORM :: compound :: I :: return #(1)::DD,55002
55013 :: PRED :: IF :: Z :: if (v5 >= #(100)) goto 29::CD,55014:CD,55015
55014 :: NORM :: compound :: I :: return #(2)::DD,55002
55015 :: PRED :: IF :: Z :: if (v5 >= #(1000)) goto 35::CD,55016:CD,55017:CD,55021:CD,55025
55016 :: NORM :: compound :: I :: return #(3)::DD,55002
55017 :: CALL :: call :: Ljava/lang/String :: v11 = toString(v5)::JM,55025
55021 :: CALL :: call :: I :: v13 = v11.length()::JM,55025
55025 :: NORM :: compound :: I :: return v13::DD,55002
55040 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.HalfdayField.getMaximumTextLength(java.util.Locale)::CE,55041:CD,55045:CD,55049:CD,55053
55041 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicChronology.HalfdayField.getMaximumTextLength(java.util.Locale)::JM,49935:JM,55113:JM,55129
55045 :: CALL :: call :: Lorg/joda/time/chrono/GJLocaleSymbols :: v5 = forLocale(p1 $null )::CL,48368
55049 :: CALL :: call :: I :: v7 = v5.getHalfdayMaxTextLength()::JM,55053:CL,58792
55053 :: NORM :: compound :: I :: return v7::DD,55041
55055 :: ENTR :: entry :: null :: org.joda.time.chrono.GJMonthOfYearDateTimeField.getMaximumTextLength(java.util.Locale)::CE,55056:CD,55060:CD,55064:CD,55068
55056 :: EXIT :: exit :: I :: org.joda.time.chrono.GJMonthOfYearDateTimeField.getMaximumTextLength(java.util.Locale)::JM,49935:JM,55113:JM,55129
55060 :: CALL :: call :: Lorg/joda/time/chrono/GJLocaleSymbols :: v5 = forLocale(p1 $null )::CL,48368
55064 :: CALL :: call :: I :: v7 = v5.getMonthMaxTextLength()::JM,55068:CL,58801
55068 :: NORM :: compound :: I :: return v7::DD,55056
55070 :: ENTR :: entry :: null :: org.joda.time.chrono.GJDayOfWeekDateTimeField.getMaximumTextLength(java.util.Locale)::CE,55071:CD,55075:CD,55079:CD,55083
55071 :: EXIT :: exit :: I :: org.joda.time.chrono.GJDayOfWeekDateTimeField.getMaximumTextLength(java.util.Locale)::JM,49935:JM,55113:JM,55129
55075 :: CALL :: call :: Lorg/joda/time/chrono/GJLocaleSymbols :: v5 = forLocale(p1 $null )::CL,48368
55079 :: CALL :: call :: I :: v7 = v5.getDayOfWeekMaxTextLength()::JM,55083:CL,58810
55083 :: NORM :: compound :: I :: return v7::DD,55071
55085 :: ENTR :: entry :: null :: org.joda.time.chrono.GJEraDateTimeField.getMaximumTextLength(java.util.Locale)::CE,55086:CD,55090:CD,55094:CD,55098
55086 :: EXIT :: exit :: I :: org.joda.time.chrono.GJEraDateTimeField.getMaximumTextLength(java.util.Locale)::JM,49935:JM,55113:JM,55129
55090 :: CALL :: call :: Lorg/joda/time/chrono/GJLocaleSymbols :: v5 = forLocale(p1 $null )::CL,48368
55094 :: CALL :: call :: I :: v7 = v5.getEraMaxTextLength()::JM,55098:CL,58819
55098 :: NORM :: compound :: I :: return v7::DD,55086
55100 :: ENTR :: entry :: null :: org.joda.time.field.DelegatedDateTimeField.getMaximumTextLength(java.util.Locale)::CE,55101:CD,55108:CD,55113
55101 :: EXIT :: exit :: I :: org.joda.time.field.DelegatedDateTimeField.getMaximumTextLength(java.util.Locale)::JM,49935:JM,55113:JM,55129
55108 :: CALL :: call :: I :: v6 = v4.getMaximumTextLength(p1 $null )::JM,55113:CL,55070:CL,55085:CL,55132:CL,55100:CL,55040:CL,55001:CL,55116:CL,55055
55113 :: NORM :: compound :: I :: return v6::DD,55101
55116 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.getMaximumTextLength(java.util.Locale)::CE,55117:CD,55124:CD,55129
55117 :: EXIT :: exit :: I :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.getMaximumTextLength(java.util.Locale)::JM,49935:JM,55113:JM,55129
55124 :: CALL :: call :: I :: v6 = v4.getMaximumTextLength(p1 $null )::JM,55129:CL,55070:CL,55085:CL,55132:CL,55100:CL,55040:CL,55001:CL,55116:CL,55055
55129 :: NORM :: compound :: I :: return v6::DD,55117
55132 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.getMaximumTextLength(java.util.Locale)::CE,55133:CD,55137
55133 :: EXIT :: exit :: I :: org.joda.time.field.UnsupportedDateTimeField.getMaximumTextLength(java.util.Locale)::JM,49935:JM,55113:JM,55129
55137 :: CALL :: call :: Ljava/lang/UnsupportedOperationException :: v5 = p0 $null .unsupported()::CL,20439
55155 :: ENTR :: entry :: null :: org.joda.time.field.BaseDateTimeField.getAsShortText(long,java.util.Locale)::CE,55156:CD,55161:CD,55166:CD,55172
55156 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.field.BaseDateTimeField.getAsShortText(long,java.util.Locale)::JM,49995:JM,55211:JM,55233:JM,62121
55161 :: CALL :: call :: I :: v6 = p0 $null .get(p1 $null )::CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11188:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,11332
55166 :: CALL :: call :: Ljava/lang/String :: v8 = p0 $null .getAsShortText(v6, p2 $null )::JM,55172:CL,58863:CL,58881:CL,58828:CL,58844
55172 :: NORM :: compound :: Ljava/lang/String :: return v8::DD,55156
55177 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.getAsShortText(long,java.util.Locale)::CE,55178:CD,55183
55178 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.field.UnsupportedDateTimeField.getAsShortText(long,java.util.Locale)::JM,49995:JM,55211:JM,55233:JM,62121
55183 :: CALL :: call :: Ljava/lang/UnsupportedOperationException :: v6 = p0 $null .unsupported()::CL,20439
55188 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.getAsShortText(long,java.util.Locale)::CE,55189:CD,55197:CD,55205:CD,55211
55189 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.getAsShortText(long,java.util.Locale)::JM,49995:JM,55211:JM,55233:JM,62121
55197 :: CALL :: call :: J :: v7 = v5.convertUTCToLocal(p1 $null )::CL,20087
55205 :: CALL :: call :: Ljava/lang/String :: v10 = v8.getAsShortText(v7, p2 $null )::JM,55211:CL,55177:CL,55218:CL,55155:CL,55188
55211 :: NORM :: compound :: Ljava/lang/String :: return v10::DD,55189
55218 :: ENTR :: entry :: null :: org.joda.time.field.DelegatedDateTimeField.getAsShortText(long,java.util.Locale)::CE,55219:CD,55227:CD,55233
55219 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.field.DelegatedDateTimeField.getAsShortText(long,java.util.Locale)::JM,49995:JM,55211:JM,55233:JM,62121
55227 :: CALL :: call :: Ljava/lang/String :: v7 = v5.getAsShortText(p1 $null , p2 $null )::JM,55233:CL,55177:CL,55218:CL,55155:CL,55188
55233 :: NORM :: compound :: Ljava/lang/String :: return v7::DD,55219
55237 :: ENTR :: entry :: null :: org.joda.time.field.DelegatedDateTimeField.getAsText(long,java.util.Locale)::CE,55238:CD,55246:CD,55252
55238 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.field.DelegatedDateTimeField.getAsText(long,java.util.Locale)::JM,50018:JM,55252:JM,55301:JM,62128
55246 :: CALL :: call :: Ljava/lang/String :: v7 = v5.getAsText(p1 $null , p2 $null )::JM,55252:CL,55256:CL,55278:CL,55308:CL,55237
55252 :: NORM :: compound :: Ljava/lang/String :: return v7::DD,55238
55256 :: ENTR :: entry :: null :: org.joda.time.field.BaseDateTimeField.getAsText(long,java.util.Locale)::CE,55257:CD,55262:CD,55267:CD,55273
55257 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.field.BaseDateTimeField.getAsText(long,java.util.Locale)::JM,50018:JM,55252:JM,55301:JM,62128
55262 :: CALL :: call :: I :: v6 = p0 $null .get(p1 $null )::CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11188:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,11332
55267 :: CALL :: call :: Ljava/lang/String :: v8 = p0 $null .getAsText(v6, p2 $null )::JM,55273:CL,58972:CL,58954:CL,58984:CL,58918:CL,58899:CL,58936
55273 :: NORM :: compound :: Ljava/lang/String :: return v8::DD,55257
55278 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.getAsText(long,java.util.Locale)::CE,55279:CD,55287:CD,55295:CD,55301
55279 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.getAsText(long,java.util.Locale)::JM,50018:JM,55252:JM,55301:JM,62128
55287 :: CALL :: call :: J :: v7 = v5.convertUTCToLocal(p1 $null )::CL,20087
55295 :: CALL :: call :: Ljava/lang/String :: v10 = v8.getAsText(v7, p2 $null )::JM,55301:CL,55256:CL,55278:CL,55308:CL,55237
55301 :: NORM :: compound :: Ljava/lang/String :: return v10::DD,55279
55308 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.getAsText(long,java.util.Locale)::CE,55309:CD,55314
55309 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.field.UnsupportedDateTimeField.getAsText(long,java.util.Locale)::JM,50018:JM,55252:JM,55301:JM,62128
55314 :: CALL :: call :: Ljava/lang/UnsupportedOperationException :: v6 = p0 $null .unsupported()::CL,20439
55347 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserBucket.sort(org.joda.time.format.DateTimeParserBucket.SavedField[],int)::CD,55352:JM,55359
55352 :: PRED :: IF :: Z :: if (p2 $null  <= #(10)) goto 19::CD,55353:CD,55359:CD,55399
55353 :: CALL :: call :: V :: sort(p1 $null , #(0), p2 $null )::
55359 :: PRED :: IF :: Z :: if (v20 >= p2 $null ) goto 74::CD,55360:CD,55396:CD,55399:CD,55400:CD,55401
55360 :: PRED :: IF :: Z :: if (v18 <= #(0)) goto 68::CD,55370:CD,55375:CF,55396
55370 :: CALL :: call :: I :: v11 = v8.compareTo(v9)::JM,55375:CL,48242
55375 :: PRED :: IF :: Z :: if (v11 <= #(0)) goto 68::CD,55360:CD,55380:CD,55389:CD,55394:CD,55400:CD,55401:CF,55396
55376 :: EXPR :: reference :: Ljava/lang/Object :: v12 = p1 $null [v18]::DD,55390
55380 :: EXPR :: assign :: Ljava/lang/Object :: v13 = v18 - #(1)::
55381 :: EXPR :: reference :: Ljava/lang/Object :: v14 = p1 $null [v13]::DD,55385
55385 :: EXPR :: modify :: Ljava/lang/Object :: p1 $null [v18] = v14::
55389 :: EXPR :: assign :: Ljava/lang/Object :: v15 = v18 - #(1)::
55390 :: EXPR :: modify :: Ljava/lang/Object :: p1 $null [v15] = v12::
55394 :: EXPR :: assign :: Ljava/lang/Object :: v17 = v18 + #(-1)::DD,55401
55396 :: EXPR :: assign :: Ljava/lang/Object :: v19 = v21 + #(1)::DD,55399
55399 :: EXPR :: assign :: null :: PHI v20 = v19, #(0)::DD,55359:DD,55400:DD,55401
55400 :: EXPR :: assign :: null :: PHI v21 = v21, v20::CF,55401:DD,55396:DD,55400
55401 :: EXPR :: assign :: null :: PHI v18 = v17, v20::DD,55360:DD,55380:DD,55389:DD,55394
55437 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserBucket.SavedField.set(long,boolean)::CE,55438:CD,55446:CD,55476:CD,55485:CD,55486:CD,55487
55438 :: EXIT :: exit :: J :: org.joda.time.format.DateTimeParserBucket.SavedField.set(long,boolean)::JM,50343:JM,50345
55443 :: EXPR :: reference :: Ljava/lang/String :: v5 = p0 $null .iText::DD,55446
55446 :: PRED :: IF :: Z :: if (v5 != #(null)) goto 24::CD,55453:CD,55469:CD,55486
55453 :: CALL :: call :: J :: v15 = v12.setExtended(p1 $null , v13)::JM,55486:CL,59057:CL,59041
55469 :: CALL :: call :: J :: v11 = v7.set(p1 $null , v8, v9)::JM,55486:CL,39980:CL,40056:CL,40068:CL,40007:CL,40095:CL,40034
55476 :: PRED :: IF :: Z :: if (p2 $null  == #(0)) goto 54::CF,55487:CD,55480
55480 :: CALL :: call :: J :: v20 = v18.roundFloor(v16)::JM,55487:CL,48947:CL,49087:CL,49010:CL,48742:CL,48892:CL,48759:CL,48876:CL,48993:CL,49065:CL,49027:CL,48964:CL,49124:CL,48902:CL,48834
55485 :: NORM :: compound :: J :: return v21::DD,55438
55486 :: EXPR :: assign :: null :: PHI v16 = v15, v11::DD,55487:CF,55476
55487 :: EXPR :: assign :: null :: PHI v21 = v16, v20::CF,55485
55503 :: ENTR :: entry :: null :: org.joda.time.IllegalFieldValueException.prependMessage(java.lang.String)::CD,55511:JM,55516
55508 :: EXPR :: reference :: Ljava/lang/String :: v4 = p0 $null .iMessage::DD,55511
55511 :: PRED :: IF :: Z :: if (v4 != #(null)) goto 16::CD,55516
55516 :: PRED :: IF :: Z :: if (p1 $null  == #(null)) goto 49::CD,55517:CD,55521:CD,55526:CD,55534:CD,55539
55517 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v6 = new java.lang.StringBuilder::
55521 :: CALL :: call :: Ljava/lang/StringBuilder :: v9 = v6.append(p1 $null )::
55526 :: CALL :: call :: Ljava/lang/StringBuilder :: v12 = v9.append(#(: ))::
55531 :: EXPR :: reference :: Ljava/lang/String :: v13 = p0 $null .iMessage::
55534 :: CALL :: call :: Ljava/lang/StringBuilder :: v15 = v12.append(v13)::
55539 :: CALL :: call :: Ljava/lang/String :: v17 = v15.toString()::
55597 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.RuleSet.addRule(org.joda.time.tz.DateTimeZoneBuilder.Rule)::CD,55605:CD,55610
55602 :: EXPR :: reference :: Ljava/util/ArrayList :: v4 = p0 $null .iRules::JM,55610
55605 :: CALL :: call :: Z :: v6 = v4.contains(p1 $null )::JM,55610
55610 :: PRED :: IF :: Z :: if (v6 != #(0)) goto 20::CD,55614
55611 :: EXPR :: reference :: Ljava/util/ArrayList :: v8 = p0 $null .iRules::
55614 :: CALL :: call :: Z :: v10 = v8.add(p1 $null )::JM,55610
55626 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormat.parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)::CD,55631:CD,55635:CD,55636:CD,55963:CD,55967:CD,55972:CD,55977:CD,55989:JM,55739:JM,55676
55631 :: CALL :: call :: I :: v5 = p2 $null .length()::JM,55636:JM,55739:JM,55676
55635 :: NORM :: declaration :: [I :: v7 = new []::CF,55989
55636 :: PRED :: IF :: Z :: if (v126 >= v5) goto 1005::CD,55641:CD,55650:CD,55654
55637 :: EXPR :: modify :: I :: v7[#(0)] = v126::
55641 :: CALL :: call :: Ljava/lang/String :: v10 = parseToken(p2 $null , v7)::JM,55939:JM,55654:JM,55914:JM,55661:JM,55790:JM,55791:JM,55951:JM,55891:JM,55768:JM,55705:JM,55674:JM,55868:JM,55903:CL,59104
55646 :: EXPR :: reference :: I :: v11 = v7[#(0)]::DD,55675:DD,55738:DD,55986
55650 :: CALL :: call :: I :: v13 = v10.length()::JM,55939:JM,55654:JM,55914:JM,55661:JM,55790:JM,55791:JM,55951:JM,55891:JM,55768:JM,55705:JM,55674:JM,55868:JM,55903
55654 :: PRED :: IF :: Z :: if (v13 != #(0)) goto 53::CD,55636:CD,55656:CD,55661:CD,55986:CD,55989:JM,55939:JM,55654:JM,55914:JM,55790:JM,55791:JM,55951:JM,55891:JM,55768:JM,55705:JM,55674:JM,55868:JM,55903
55656 :: CALL :: call :: C :: v15 = v10.charAt(#(0))::JM,55939:JM,55654:JM,55914:JM,55661:JM,55790:JM,55791:JM,55951:JM,55891:JM,55768:JM,55705:JM,55674:JM,55868:JM,55903
55661 :: PRED :: IF :: null :: switch v15::CD,55662:CD,55667:CD,55674:CD,55790:CD,55808:CD,55814:CD,55819:CD,55825:CD,55831:CD,55837:CD,55843:CD,55849:CD,55855:CD,55862:CD,55868:CD,55879:CD,55885:CD,55891:CD,55903:CD,55930:CD,55935:CD,55939:JM,55654:JM,55914:JM,55661:JM,55791:JM,55951:JM,55768:JM,55705
55662 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v17 = p1 $null .appendEraText()::CL,59296
55667 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v19 = p1 $null .appendCenturyOfEra(v13, v13)::CL,59310
55674 :: PRED :: IF :: Z :: if (v13 != #(2)) goto 565::CD,55675:CD,55676:CD,55705:CD,55738:CD,55739:CD,55768
55675 :: EXPR :: assign :: Ljava/lang/Object :: v21 = v11 + #(1)::DD,55676
55676 :: PRED :: IF :: Z :: if (v21 >= v5) goto 479::CD,55686:CD,55691
55686 :: CALL :: call :: Ljava/lang/String :: v25 = parseToken(p2 $null , v7)::CL,59104
55691 :: CALL :: call :: Z :: v27 = isNumericToken(v25)::CL,59330
55705 :: PRED :: IF :: null :: switch v15::JM,61601:JM,27297:JM,27277:CD,55710:CD,55715:CD,55726:CD,55731
55710 :: CALL :: call :: I :: v35 = v32.getWeekyear()::CL,59371
55715 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v39 = p1 $null .appendTwoDigitWeekyear(v37, v31)::CL,59395
55726 :: CALL :: call :: I :: v43 = v40.getYear()::CL,59421
55731 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v46 = p1 $null .appendTwoDigitYear(v44, v31)::CL,59445
55738 :: EXPR :: assign :: Ljava/lang/Object :: v48 = v11 + #(1)::DD,55739
55739 :: PRED :: IF :: Z :: if (v48 >= v5) goto 601::CD,55749:CD,55754
55749 :: CALL :: call :: Ljava/lang/String :: v52 = parseToken(p2 $null , v7)::CL,59104
55754 :: CALL :: call :: Z :: v54 = isNumericToken(v52)::CL,59330
55768 :: PRED :: IF :: null :: switch v15::CD,55769:CD,55776:CD,55783
55769 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v60 = p1 $null .appendWeekyear(v13, v58)::CL,21443
55776 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v62 = p1 $null .appendYear(v13, v58)::CL,21306
55783 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v64 = p1 $null .appendYearOfEra(v13, v58)::CL,59471
55790 :: PRED :: IF :: Z :: if (v13 < #(3)) goto 703::CD,55791:CD,55802
55791 :: PRED :: IF :: Z :: if (v13 < #(4)) goto 693::CD,55792:CD,55797
55792 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v68 = p1 $null .appendMonthOfYearText()::CL,59491
55797 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v70 = p1 $null .appendMonthOfYearShortText()::CL,59505
55802 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v72 = p1 $null .appendMonthOfYear(v13)::CL,21405
55808 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v74 = p1 $null .appendDayOfMonth(v13)::CL,21424
55814 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v76 = p1 $null .appendHalfdayOfDayText()::CL,59519
55819 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v78 = p1 $null .appendClockhourOfHalfday(v13)::CL,59533
55825 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v80 = p1 $null .appendHourOfDay(v13)::CL,21576
55831 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v82 = p1 $null .appendClockhourOfDay(v13)::CL,59552
55837 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v84 = p1 $null .appendHourOfHalfday(v13)::CL,59571
55843 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v86 = p1 $null .appendMinuteOfHour(v13)::CL,21595
55849 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v88 = p1 $null .appendSecondOfMinute(v13)::CL,21614
55855 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v90 = p1 $null .appendFractionOfSecond(v13, v13)::CL,21633
55862 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v92 = p1 $null .appendDayOfWeek(v13)::CL,21538
55868 :: PRED :: IF :: Z :: if (v13 < #(4)) goto 825::CD,55869:CD,55874
55869 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v94 = p1 $null .appendDayOfWeekText()::CL,59590
55874 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v96 = p1 $null .appendDayOfWeekShortText()::CL,59604
55879 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v98 = p1 $null .appendDayOfYear(v13)::CL,21557
55885 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v100 = p1 $null .appendWeekOfWeekyear(v13)::CL,21519
55891 :: PRED :: IF :: Z :: if (v13 < #(4)) goto 868::CD,55892:CD,55897
55892 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v102 = p1 $null .appendTimeZoneName()::CL,59618
55897 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v105 = p1 $null .appendTimeZoneShortName(#(null))::CL,59640
55903 :: PRED :: IF :: Z :: if (v13 != #(1)) goto 898::CD,55904:CD,55914
55904 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v108 = p1 $null .appendTimeZoneOffset(#(null), #(Z), #(0), #(2), #(2))::CL,59665
55914 :: PRED :: IF :: Z :: if (v13 != #(2)) goto 916::CD,55915:CD,55925
55915 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v110 = p1 $null .appendTimeZoneOffset(#(null), #(Z), #(1), #(2), #(2))::CL,59665
55925 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v112 = p1 $null .appendTimeZoneId()::CL,59696
55930 :: CALL :: call :: Ljava/lang/String :: v114 = v10.substring(#(1))::JM,55939:JM,55654:JM,55914:JM,55661:JM,55790:JM,55791:JM,55951:JM,55891:JM,55768:JM,55705:JM,55674:JM,55868:JM,55903
55935 :: CALL :: call :: I :: v116 = v114.length()::JM,55939:JM,55951
55939 :: PRED :: IF :: Z :: if (v116 != #(1)) goto 955::CD,55940:CD,55945:CD,55951:CD,55956:JM,55939
55940 :: CALL :: call :: C :: v118 = v114.charAt(#(0))::JM,55939:JM,55951
55945 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v120 = p1 $null .appendLiteral(v118)::CL,21386
55951 :: NORM :: declaration :: Ljava/lang/String :: v121 = new java.lang.String::JM,55951
55956 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v124 = p1 $null .appendLiteral(v121)::CL,21463
55963 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v128 = new java.lang.StringBuilder::
55967 :: CALL :: call :: Ljava/lang/StringBuilder :: v132 = v128.append(#(Illegal pattern compo...))::
55972 :: CALL :: call :: Ljava/lang/StringBuilder :: v134 = v132.append(v10)::JM,55939:JM,55654:JM,55914:JM,55661:JM,55790:JM,55791:JM,55951:JM,55891:JM,55768:JM,55705:JM,55674:JM,55868:JM,55903
55977 :: CALL :: call :: Ljava/lang/String :: v136 = v134.toString()::JM,55939:JM,55951
55986 :: EXPR :: assign :: Ljava/lang/Object :: v125 = v11 + #(1)::DD,55989
55989 :: EXPR :: assign :: null :: PHI v126 = v125, #(0)::DD,55636:DD,55637
56414 :: ENTR :: entry :: null :: org.joda.time.DateTimeUtils.getInstantChronology(org.joda.time.ReadableInstant)::CD,56418
56418 :: PRED :: IF :: Z :: if (p1 $null  != #(null)) goto 9::CD,56419:CD,56423:CD,56427
56419 :: CALL :: call :: Lorg/joda/time/chrono/ISOChronology :: v9 = getInstance()::CL,37956
56423 :: CALL :: call :: Lorg/joda/time/Chronology :: v5 = p1 $null .getChronology()::JM,56427:CL,40320:CL,59722
56427 :: PRED :: IF :: Z :: if (v5 != #(null)) goto 24::CD,56428
56428 :: CALL :: call :: Lorg/joda/time/chrono/ISOChronology :: v7 = getInstance()::CL,37956
56440 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatter.printTo(java.lang.Appendable,long,org.joda.time.Chronology)::CD,56451:CD,56460:CD,56476:CD,56483
56451 :: CALL :: call :: Lorg/joda/time/Chronology :: v9 = p0 $null .selectChronology(p3 $null )::CL,40335
56460 :: CALL :: call :: I :: v13 = v11.getOffset(p2 $null )::CL,18682:CL,18565:CL,18672:CL,18689
56476 :: CALL :: call :: Lorg/joda/time/Chronology :: v28 = v9.withUTC()::CL,45183
56483 :: CALL :: call :: V :: v7.printTo(p1 $null , v26, v28, v25, v24, v29)::CL,60377:CL,60068:CL,60017:CL,60122:CL,59931:CL,60336:CL,59827:CL,59996:CL,60046:CL,59730:CL,59779:CL,60100
56529 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicGJChronology.isLeapDay(long)::CD,56538:CD,56543
56538 :: CALL :: call :: I :: v7 = v5.get(p1 $null )::JM,56543:CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,11332
56543 :: PRED :: IF :: Z :: if (v7 != #(29)) goto 29::CD,56548
56548 :: CALL :: call :: Z :: v12 = v10.isLeap(p1 $null )::CL,50998:CL,50886:CL,50930:CL,51063:CL,50913:CL,50946:CL,51014:CL,51036:CL,51053:CL,51101
56565 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.OfYear.writeTo(java.io.DataOutput)::CD,56573:CD,56580:CD,56587:CD,56594:CD,56601:CD,56609
56570 :: EXPR :: reference :: C :: v4 = p0 $null .iMode::
56573 :: CALL :: call :: V :: p1 $null .writeByte(v4)::
56577 :: EXPR :: reference :: I :: v6 = p0 $null .iMonthOfYear::
56580 :: CALL :: call :: V :: p1 $null .writeByte(v6)::
56584 :: EXPR :: reference :: I :: v8 = p0 $null .iDayOfMonth::
56587 :: CALL :: call :: V :: p1 $null .writeByte(v8)::
56591 :: EXPR :: reference :: I :: v10 = p0 $null .iDayOfWeek::
56594 :: CALL :: call :: V :: p1 $null .writeByte(v10)::
56598 :: EXPR :: reference :: Z :: v12 = p0 $null .iAdvance::
56601 :: CALL :: call :: V :: p1 $null .writeBoolean(v12)::
56609 :: CALL :: call :: V :: writeMillis(p1 $null , v15)::CL,35169
56626 :: ENTR :: entry :: null :: org.joda.time.tz.DateTimeZoneBuilder.OfYear.readFrom(java.io.DataInput)::CD,56631:CD,56636:CD,56640:CD,56644:CD,56648:CD,56652:JM,43808:JM,43809:JM,43841:JM,43844:JM,43813:JM,43847:JM,43832:JM,43818:JM,43835:JM,43838:JM,43823
56631 :: CALL :: call :: I :: v5 = p1 $null .readUnsignedByte()::
56636 :: CALL :: call :: I :: v8 = p1 $null .readUnsignedByte()::
56640 :: CALL :: call :: B :: v10 = p1 $null .readByte()::
56644 :: CALL :: call :: I :: v12 = p1 $null .readUnsignedByte()::
56648 :: CALL :: call :: Z :: v14 = p1 $null .readBoolean()::
56652 :: CALL :: call :: J :: v16 = readMillis(p1 $null )::CL,35572
56674 :: ENTR :: entry :: null :: org.joda.time.chrono.GJEraDateTimeField.isLenient()::CF,56675:CD,56678
56675 :: EXIT :: exit :: Z :: org.joda.time.chrono.GJEraDateTimeField.isLenient()::JM,51433:JM,56697:JM,56710
56678 :: NORM :: compound :: Z :: return #(0)::CF,56675
56680 :: ENTR :: entry :: null :: org.joda.time.field.LenientDateTimeField.isLenient()::CF,56681:CD,56684
56681 :: EXIT :: exit :: Z :: org.joda.time.field.LenientDateTimeField.isLenient()::JM,51433:JM,56697:JM,56710
56684 :: NORM :: compound :: Z :: return #(1)::CF,56681
56686 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.isLenient()::CE,56687:CD,56693:CD,56697
56687 :: EXIT :: exit :: Z :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.isLenient()::JM,51433:JM,56697:JM,56710
56693 :: CALL :: call :: Z :: v5 = v3.isLenient()::JM,56697:CL,56686:CL,56712:CL,56718:CL,56736:CL,56680:CL,56730:CL,56674:CL,56724:CL,56699
56697 :: NORM :: compound :: Z :: return v5::CF,56687
56699 :: ENTR :: entry :: null :: org.joda.time.field.DecoratedDateTimeField.isLenient()::CE,56700:CD,56706:CD,56710
56700 :: EXIT :: exit :: Z :: org.joda.time.field.DecoratedDateTimeField.isLenient()::JM,51433:JM,56697:JM,56710
56706 :: CALL :: call :: Z :: v5 = v3.isLenient()::JM,56710:CL,56686:CL,56712:CL,56718:CL,56736:CL,56680:CL,56730:CL,56674:CL,56724:CL,56699
56710 :: NORM :: compound :: Z :: return v5::CF,56700
56712 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicYearDateTimeField.isLenient()::CF,56713:CD,56716
56713 :: EXIT :: exit :: Z :: org.joda.time.chrono.BasicYearDateTimeField.isLenient()::JM,51433:JM,56697:JM,56710
56716 :: NORM :: compound :: Z :: return #(0)::CF,56713
56718 :: ENTR :: entry :: null :: org.joda.time.field.PreciseDurationDateTimeField.isLenient()::CF,56719:CD,56722
56719 :: EXIT :: exit :: Z :: org.joda.time.field.PreciseDurationDateTimeField.isLenient()::JM,51433:JM,56697:JM,56710
56722 :: NORM :: compound :: Z :: return #(0)::CF,56719
56724 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.isLenient()::CF,56725:CD,56728
56725 :: EXIT :: exit :: Z :: org.joda.time.field.UnsupportedDateTimeField.isLenient()::JM,51433:JM,56697:JM,56710
56728 :: NORM :: compound :: Z :: return #(0)::CF,56725
56730 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicMonthOfYearDateTimeField.isLenient()::CF,56731:CD,56734
56731 :: EXIT :: exit :: Z :: org.joda.time.chrono.BasicMonthOfYearDateTimeField.isLenient()::JM,51433:JM,56697:JM,56710
56734 :: NORM :: compound :: Z :: return #(0)::CF,56731
56736 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicWeekyearDateTimeField.isLenient()::CF,56737:CD,56740
56737 :: EXIT :: exit :: Z :: org.joda.time.chrono.BasicWeekyearDateTimeField.isLenient()::JM,51433:JM,56697:JM,56710
56740 :: NORM :: compound :: Z :: return #(0)::CF,56737
56752 :: EXPR :: modify :: Lorg/joda/time/Chronology :: p0 $null .iBase = p2 $null ::
56776 :: EXPR :: modify :: J :: p0 $null .iUnitMillis = p2 $null ::
56779 :: NORM :: declaration :: Lorg/joda/time/field/ImpreciseDateTimeField$LinkedDurationField :: v6 = new org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField::DD,56789
56789 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iDurationField = v6::
56822 :: EXPR :: modify :: I :: p0 $null .iOffset = p3 $null ::
56825 :: CALL :: call :: I :: v11 = p1 $null .getMinimumValue()::JM,56829:CL,26710:CL,54982:CL,54910:CL,54898:CL,54947:CL,54973:CL,54919:CL,26716:CL,54960:CL,54988:CL,54892:CL,54904:CL,26722:CL,26728:CL,54928:CL,54934:CL,21222
56829 :: EXPR :: assign :: Ljava/lang/Object :: v12 = v11 + p3 $null ::CF,56830
56830 :: PRED :: IF :: Z :: if (p4 $null  >= v12) goto 52::CD,56831:CD,56835
56831 :: CALL :: call :: I :: v14 = p1 $null .getMinimumValue()::JM,56835:CL,26710:CL,54982:CL,54910:CL,54898:CL,54947:CL,54973:CL,54919:CL,26716:CL,54960:CL,54988:CL,54892:CL,54904:CL,26722:CL,26728:CL,54928:CL,54934:CL,21222
56835 :: EXPR :: assign :: Ljava/lang/Object :: v15 = v14 + p3 $null ::DD,56836
56836 :: EXPR :: modify :: I :: p0 $null .iMin = v15::
56840 :: EXPR :: modify :: I :: p0 $null .iMin = p4 $null ::
56843 :: CALL :: call :: I :: v17 = p1 $null .getMaximumValue()::JM,56847:CL,27834:CL,25595:CL,25628:CL,27881:CL,27840:CL,27894:CL,27875:CL,27947:CL,27821:CL,27969:CL,27923:CL,27849:CL,27914:CL,20279:CL,27936:CL,27862:CL,27960
56847 :: EXPR :: assign :: Ljava/lang/Object :: v18 = v17 + p3 $null ::CF,56848
56848 :: PRED :: IF :: Z :: if (p5 $null  <= v18) goto 82::CD,56849:CD,56853
56849 :: CALL :: call :: I :: v20 = p1 $null .getMaximumValue()::JM,56853:CL,27834:CL,25595:CL,25628:CL,27881:CL,27840:CL,27894:CL,27875:CL,27947:CL,27821:CL,27969:CL,27923:CL,27849:CL,27914:CL,20279:CL,27936:CL,27862:CL,27960
56853 :: EXPR :: assign :: Ljava/lang/Object :: v21 = v20 + p3 $null ::DD,56854
56854 :: EXPR :: modify :: I :: p0 $null .iMax = v21::
56858 :: EXPR :: modify :: I :: p0 $null .iMax = p5 $null ::
56903 :: EXPR :: modify :: Lorg/joda/time/chrono/BasicChronology :: p0 $null .iChronology = p1 $null ::
56909 :: CALL :: call :: I :: v12 = v10.getMaxMonth()::JM,56913:CL,60451
56913 :: EXPR :: modify :: I :: p0 $null .iMax = v12::
56916 :: EXPR :: modify :: I :: p0 $null .iLeapMonth = p2 $null ::
56957 :: EXPR :: modify :: I :: p0 $null .iScalar = p3 $null ::
56970 :: ENTR :: entry :: null :: org.joda.time.chrono.ISOYearOfEraDateTimeField.getMinimumValue()::CF,56971:CD,56974
56971 :: EXIT :: exit :: I :: org.joda.time.chrono.ISOYearOfEraDateTimeField.getMinimumValue()::JM,51841:JM,51842:JM,51844
56974 :: NORM :: compound :: I :: return #(0)::CF,56971
56993 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.useTimeArithmetic(org.joda.time.DurationField)::CE,56994:CD,56997:CD,57005:CD,57006
56994 :: EXIT :: exit :: Z :: org.joda.time.chrono.ZonedChronology.useTimeArithmetic(org.joda.time.DurationField)::JM,51941:JM,52273
56997 :: PRED :: IF :: Z :: if (p1 $null  == #(null)) goto 20::CD,56998:CD,57002:CD,57003:CD,57006
56998 :: CALL :: call :: J :: v5 = p1 $null .getUnitMillis()::JM,57002:CL,21151:CL,21164:CL,21125:CL,21116:CL,21131:CL,21170
57002 :: EXPR :: assign :: Z :: v7 = v5 == #(43200000 l)::DD,57003
57003 :: PRED :: IF :: Z :: if (v7 >= #(0)) goto 20::CD,57006
57005 :: NORM :: compound :: Z :: return v10::CF,56994
57006 :: EXPR :: assign :: null :: PHI v10 = #(1), #(0)::CF,57005
57014 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicGJChronology.getYearDifference(long,long)::CD,57020:CD,57025:CD,57030:CD,57036
57020 :: CALL :: call :: I :: v6 = p0 $null .getYear(p1 $null )::CL,20337
57025 :: CALL :: call :: I :: v8 = p0 $null .getYear(p2 $null )::CL,20337
57030 :: CALL :: call :: J :: v10 = p0 $null .getYearMillis(v6)::CL,28013
57036 :: CALL :: call :: J :: v13 = p0 $null .getYearMillis(v8)::CL,28013
57119 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicWeekyearDateTimeField.remainder(long)::CE,57120:CD,57124:CD,57129:CD,57130
57120 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicWeekyearDateTimeField.remainder(long)::JM,52409:JM,61777:JM,62705:JM,62755:JM,62772:JM,62796:JM,62830:JM,62847:JM,63704
57124 :: CALL :: call :: J :: v5 = p0 $null .roundFloor(p1 $null )::JM,57129:CL,48902
57129 :: EXPR :: assign :: Ljava/lang/Object :: v6 = p1 $null  - v5::CF,57130
57130 :: NORM :: compound :: J :: return v6::DD,57120
57134 :: ENTR :: entry :: null :: org.joda.time.tz.ZoneInfoProvider.uncaughtException(java.lang.Exception)::CD,57139
57139 :: CALL :: call :: V :: p1 $null .printStackTrace()::
57173 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserBucket.doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)::CE,57174:CD,57179:CD,57192:CD,57198:CD,57205
57174 :: EXIT :: exit :: J :: org.joda.time.format.DateTimeParserBucket.doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)::JM,52783
57179 :: CALL :: call :: I :: v7 = p1 $null .parseInto(p0 $null , p2 $null , #(0))::CL,40953:CL,41103:CL,41377:CL,41413:CL,42459:CL,41179:CL,41201:CL,41273:CL,40464:CL,41495:CL,42002:CL,42734:CL,41654:CL,41469
57192 :: CALL :: call :: J :: v21 = p0 $null .computeMillis(#(1), p2 $null )::JM,57198:CL,50080
57198 :: NORM :: compound :: J :: return v21::DD,57174
57205 :: CALL :: call :: Ljava/lang/String :: v17 = createErrorMessage(v15, v12)::CL,60662
57228 :: ENTR :: entry :: null :: org.joda.time.format.FormatUtils.appendPaddedInteger(java.lang.Appendable,int,int)::CD,57234:JM,57240:JM,57241:JM,57337:JM,57339:JM,57340:JM,57341:CD,57338
57234 :: PRED :: IF :: Z :: if (p2 $null  >= #(0)) goto 59::CF,57338:CD,57235:CD,57240:CD,57257:CD,57337:CD,57339:JM,57234:JM,57241:JM,57340:JM,57341
57235 :: CALL :: call :: Ljava/lang/Appendable :: v8 = p1 $null .append(#(45))::JM,57234:JM,57240:JM,57241:JM,57337:JM,57338:JM,57339:JM,57340:JM,57341
57240 :: PRED :: IF :: Z :: if (p2 $null  == #(-2147483648)) goto 28::CF,57337:CD,57241:CD,57243:CD,57251:CD,57257:CD,57338:CD,57339
57241 :: EXPR :: assign :: Ljava/lang/Object :: v20 = -(p2 $null )::DD,57338
57243 :: PRED :: IF :: Z :: if (v16 <= #(10)) goto 49::CD,57244:CD,57249:CD,57337:JM,57234:JM,57240:JM,57241:JM,57338:JM,57339:JM,57340:JM,57341
57244 :: CALL :: call :: Ljava/lang/Appendable :: v13 = p1 $null .append(#(48))::JM,57234:JM,57240:JM,57241:JM,57337:JM,57338:JM,57339:JM,57340:JM,57341
57249 :: EXPR :: assign :: Ljava/lang/Object :: v15 = v16 + #(-1)::DD,57337
57251 :: CALL :: call :: Ljava/lang/Appendable :: v19 = p1 $null .append(#(2147483648))::JM,57234:JM,57240:JM,57241:JM,57337:JM,57338:JM,57339:JM,57340:JM,57341
57257 :: PRED :: IF :: Z :: if (v21 >= #(10)) goto 100::CF,57339:CD,57258:CD,57266:CD,57267:CD,57268:CD,57274:CD,57340
57258 :: PRED :: IF :: Z :: if (v69 <= #(1)) goto 86::CD,57259:CD,57264:CD,57339:JM,57234:JM,57240:JM,57241:JM,57337:JM,57338:JM,57340:JM,57341:CF,57266
57259 :: CALL :: call :: Ljava/lang/Appendable :: v67 = p1 $null .append(#(48))::JM,57234:JM,57240:JM,57241:JM,57337:JM,57338:JM,57339:JM,57340:JM,57341
57264 :: EXPR :: assign :: Ljava/lang/Object :: v68 = v69 + #(-1)::DD,57339
57266 :: EXPR :: assign :: Ljava/lang/Object :: v70 = v21 + #(48)::CF,57267
57267 :: EXPR :: assign :: C :: v71 = CONVERT I to C v70::JM,57234:JM,57240:JM,57241:JM,57337:JM,57338:JM,57339:JM,57340:JM,57341
57268 :: CALL :: call :: Ljava/lang/Appendable :: v73 = p1 $null .append(v71)::JM,57234:JM,57240:JM,57241:JM,57337:JM,57338:JM,57339:JM,57340:JM,57341
57274 :: PRED :: IF :: Z :: if (v21 >= #(100)) goto 172::CF,57340:CD,57275:CD,57283:CD,57284:CD,57285:CD,57286:CD,57287:CD,57288:CD,57293:CD,57294:CD,57295:CD,57296:CD,57297:CD,57298:CD,57299:CD,57305:CD,57319:CD,57327:CD,57331:CD,57341:CD,57342
57275 :: PRED :: IF :: Z :: if (v48 <= #(2)) goto 125::CD,57276:CD,57281:CD,57340:JM,57234:JM,57240:JM,57241:JM,57337:JM,57338:JM,57339:JM,57341:CF,57283
57276 :: CALL :: call :: Ljava/lang/Appendable :: v46 = p1 $null .append(#(48))::JM,57234:JM,57240:JM,57241:JM,57337:JM,57338:JM,57339:JM,57340:JM,57341
57281 :: EXPR :: assign :: Ljava/lang/Object :: v47 = v48 + #(-1)::DD,57340
57283 :: EXPR :: assign :: Ljava/lang/Object :: v49 = v21 + #(1)::DD,57284
57284 :: EXPR :: assign :: Ljava/lang/Object :: v51 = v49 * #(13421772)::DD,57285
57285 :: EXPR :: assign :: Ljava/lang/Object :: v53 = v51 ? #(27)::DD,57286:DD,57293:DD,57295
57286 :: EXPR :: assign :: Ljava/lang/Object :: v54 = v53 + #(48)::CF,57287
57287 :: EXPR :: assign :: C :: v55 = CONVERT I to C v54::JM,57234:JM,57240:JM,57241:JM,57337:JM,57338:JM,57339:JM,57340:JM,57341
57288 :: CALL :: call :: Ljava/lang/Appendable :: v57 = p1 $null .append(v55)::JM,57234:JM,57240:JM,57241:JM,57337:JM,57338:JM,57339:JM,57340:JM,57341
57293 :: EXPR :: assign :: Ljava/lang/Object :: v58 = v53 ? #(3)::CF,57294
57294 :: EXPR :: assign :: Ljava/lang/Object :: v59 = v21 - v58::DD,57296:CF,57295
57295 :: EXPR :: assign :: Ljava/lang/Object :: v60 = v53 ? #(1)::CF,57296
57296 :: EXPR :: assign :: Ljava/lang/Object :: v61 = v59 - v60::DD,57297
57297 :: EXPR :: assign :: Ljava/lang/Object :: v62 = v61 + #(48)::CF,57298
57298 :: EXPR :: assign :: C :: v63 = CONVERT I to C v62::JM,57234:JM,57240:JM,57241:JM,57337:JM,57338:JM,57339:JM,57340:JM,57341
57299 :: CALL :: call :: Ljava/lang/Appendable :: v65 = p1 $null .append(v63)::JM,57234:JM,57240:JM,57241:JM,57337:JM,57338:JM,57339:JM,57340:JM,57341
57305 :: PRED :: IF :: Z :: if (v21 >= #(1000)) goto 184::CD,57307:CD,57341:CD,57342
57307 :: PRED :: IF :: Z :: if (v21 >= #(10000)) goto 193::CD,57309:CD,57310:CD,57314:CD,57316:CD,57317:CD,57318:CD,57341:CD,57342
57309 :: EXPR :: assign :: D :: v25 = CONVERT I to D v21::JM,57316:JM,57310
57310 :: CALL :: call :: D :: v27 = log(v25)::JM,57316:JM,57310
57314 :: EXPR :: reference :: D :: v28 = org.joda.time.format.FormatUtils.LOG_10::CF,57316
57316 :: EXPR :: assign :: Ljava/lang/Object :: v29 = v27 / v28::CF,57317
57317 :: EXPR :: assign :: I :: v30 = CONVERT D to I v29::DD,57318
57318 :: EXPR :: assign :: Ljava/lang/Object :: v32 = v30 + #(1)::DD,57342:CF,57341
57319 :: PRED :: IF :: Z :: if (v39 <= v35) goto 227::CD,57320:CD,57325:CD,57341:CD,57342:JM,57234:JM,57240:JM,57241:JM,57337:JM,57338:JM,57339:JM,57340
57320 :: CALL :: call :: Ljava/lang/Appendable :: v37 = p1 $null .append(#(48))::JM,57234:JM,57240:JM,57241:JM,57337:JM,57338:JM,57339:JM,57340:JM,57341
57325 :: EXPR :: assign :: Ljava/lang/Object :: v38 = v39 + #(-1)::DD,57341
57327 :: CALL :: call :: Ljava/lang/String :: v41 = toString(v21)::
57331 :: CALL :: call :: Ljava/lang/Appendable :: v43 = p1 $null .append(v41)::JM,57234:JM,57240:JM,57241:JM,57337:JM,57338:JM,57339:JM,57340:JM,57341
57337 :: EXPR :: assign :: null :: PHI v16 = p3 $null , v15::DD,57243:DD,57249
57338 :: EXPR :: assign :: null :: PHI v21 = p2 $null , v20::DD,57257:DD,57266:DD,57274:DD,57283:DD,57294:DD,57305:DD,57307:DD,57309
57339 :: EXPR :: assign :: null :: PHI v69 = v68, p3 $null ::DD,57258:DD,57264
57340 :: EXPR :: assign :: null :: PHI v48 = v47, p3 $null ::DD,57275:DD,57281
57341 :: EXPR :: assign :: null :: PHI v39 = p3 $null , p3 $null , v38, p3 $null ::CF,57342:DD,57319:DD,57325
57342 :: EXPR :: assign :: null :: PHI v35 = #(3), #(4), v35, v32::DD,57319:DD,57342
57609 :: PRED :: IF :: Z :: if (p3 $handler  == #(null)) goto 50::CF,57610:CD,57613:JM,57664:JM,57889:JM,57891:JM,57831:JM,57640:JM,57832:JM,57609:JM,57706:JM,57680:JM,57650:JM,57656:JM,57882:JM,57691:JM,57662:JM,57631
57610 :: CALL :: call :: Ljava/lang/SecurityManager :: v11 = getSecurityManager()::JM,57613
57613 :: PRED :: IF :: Z :: if (v11 == #(null)) goto 50::CD,57614:JM,57664:JM,57889:JM,57891:JM,57831:JM,57640:JM,57832:JM,57609:JM,57706:JM,57680:JM,57650:JM,57656:JM,57882:JM,57691:JM,57662:JM,57631
57614 :: CALL :: call :: V :: p0 $this .checkSpecifyHandler(v11)::
57618 :: CALL :: call :: I :: v14 = p2 $spec .length()::JM,57664:JM,57889:JM,57891:JM,57831:JM,57640:JM,57832:JM,57609:JM,57706:JM,57680:JM,57650:JM,57656:JM,57882:JM,57691:JM,57662:JM,57631
57623 :: EXPR :: assign :: Ljava/lang/Object :: v20 = v21 + #(-1)::DD,57882
57624 :: PRED :: IF :: Z :: if (v21 <= #(0)) goto 89::CF,57883:CD,57625:CD,57626:CD,57631
57625 :: EXPR :: assign :: Ljava/lang/Object :: v16 = v21 - #(1)::JM,57664:JM,57889:JM,57891:JM,57831:JM,57640:JM,57832:JM,57609:JM,57706:JM,57680:JM,57650:JM,57656:JM,57882:JM,57691:JM,57662:JM,57631
57626 :: CALL :: call :: C :: v18 = p2 $spec .charAt(v16)::JM,57664:JM,57889:JM,57891:JM,57831:JM,57640:JM,57832:JM,57609:JM,57706:JM,57680:JM,57650:JM,57656:JM,57882:JM,57691:JM,57662:JM,57631
57631 :: PRED :: IF :: Z :: if (v18 <= #(32)) goto 58::CD,57623:CD,57624:CD,57882:CD,57883
57633 :: EXPR :: assign :: Ljava/lang/Object :: v24 = v25 + #(1)::DD,57883
57634 :: PRED :: IF :: Z :: if (v25 >= v21) goto 111::CD,57635:CD,57640:JM,57664:JM,57889:JM,57891:JM,57831:JM,57832:JM,57609:JM,57706:JM,57680:JM,57650:JM,57656:JM,57882:JM,57691:JM,57662:JM,57631
57635 :: CALL :: call :: C :: v23 = p2 $spec .charAt(v25)::JM,57664:JM,57889:JM,57891:JM,57831:JM,57640:JM,57832:JM,57609:JM,57706:JM,57680:JM,57650:JM,57656:JM,57882:JM,57691:JM,57662:JM,57631
57640 :: PRED :: IF :: Z :: if (v23 <= #(32)) goto 82::CD,57633:CD,57634:CD,57883:JM,57664:JM,57889:JM,57891:JM,57831:JM,57640:JM,57832:JM,57609:JM,57706:JM,57680:JM,57650:JM,57656:JM,57882:JM,57691:JM,57662:JM,57631
57641 :: CALL :: call :: Z :: v29 = p2 $spec .regionMatches(#(1), v25, #(url:), #(0), #(4))::JM,57664:JM,57889:JM,57891:JM,57831:JM,57640:JM,57832:JM,57609:JM,57706:JM,57680:JM,57650:JM,57656:JM,57882:JM,57691:JM,57662:JM,57631
57650 :: PRED :: IF :: Z :: if (v29 == #(0)) goto 123::CF,57884:CD,57651
57651 :: EXPR :: assign :: Ljava/lang/Object :: v30 = v25 + #(4)::DD,57884
57652 :: CALL :: call :: I :: v33 = p2 $spec .length()::JM,57664:JM,57889:JM,57891:JM,57831:JM,57640:JM,57832:JM,57609:JM,57706:JM,57680:JM,57650:JM,57656:JM,57882:JM,57691:JM,57662:JM,57631
57656 :: PRED :: IF :: Z :: if (v31 >= v33) goto 147::CF,57885:CD,57657:CD,57662:JM,57664:JM,57889:JM,57891:JM,57831:JM,57640:JM,57832:JM,57609:JM,57706:JM,57680:JM,57650:JM,57656:JM,57882:JM,57691:JM,57631
57657 :: CALL :: call :: C :: v35 = p2 $spec .charAt(v31)::JM,57664:JM,57889:JM,57891:JM,57831:JM,57640:JM,57832:JM,57609:JM,57706:JM,57680:JM,57650:JM,57656:JM,57882:JM,57691:JM,57662:JM,57631
57662 :: PRED :: IF :: Z :: if (v35 != #(35)) goto 147::CF,57885
57664 :: PRED :: IF :: Z :: if (v39 != #(58)) goto 192::CD,57665:CD,57671:CD,57675:CD,57680:CD,57683:CD,57684:CD,57886:CD,57887:CD,57888:JM,57664:JM,57889:JM,57891:JM,57831:JM,57640:JM,57832:JM,57609:JM,57706:JM,57650:JM,57656:JM,57882:JM,57691:JM,57662:JM,57631
57665 :: CALL :: call :: Ljava/lang/String :: v45 = p2 $spec .substring(v31, v43)::JM,57664:JM,57889:JM,57891:JM,57831:JM,57640:JM,57832:JM,57609:JM,57706:JM,57680:JM,57650:JM,57656:JM,57882:JM,57691:JM,57662:JM,57631
57671 :: CALL :: call :: Ljava/lang/String :: v47 = v45.toLowerCase()::JM,57888:JM,57680
57675 :: CALL :: call :: Z :: v49 = p0 $this .isValidProtocol(v47)::JM,57664:JM,57889:JM,57891:JM,57831:JM,57640:JM,57832:JM,57609:JM,57706:JM,57680:JM,57650:JM,57656:JM,57882:JM,57691:JM,57662:JM,57695:JM,57631:JM,57888
57680 :: PRED :: IF :: Z :: if (v49 == #(0)) goto 224::CF,57887:CD,57681:CD,57888
57681 :: EXPR :: assign :: Ljava/lang/Object :: v50 = v43 + #(1)::DD,57887
57683 :: EXPR :: assign :: Ljava/lang/Object :: v42 = v43 + #(1)::DD,57886
57684 :: PRED :: IF :: Z :: if (v37 != #(0)) goto 224::CF,57887:CD,57685:CD,57888
57685 :: PRED :: IF :: Z :: if (v43 >= v21) goto 224::CF,57887:CD,57686:CD,57691:CD,57888:JM,57664:JM,57889:JM,57891:JM,57831:JM,57640:JM,57832:JM,57609:JM,57706:JM,57680:JM,57650:JM,57656:JM,57882:JM,57662:JM,57631
57686 :: CALL :: call :: C :: v39 = p2 $spec .charAt(v43)::JM,57664:JM,57889:JM,57891:JM,57831:JM,57640:JM,57832:JM,57609:JM,57706:JM,57680:JM,57650:JM,57656:JM,57882:JM,57691:JM,57662:JM,57631
57691 :: PRED :: IF :: Z :: if (v39 != #(47)) goto 154::CF,57887:CD,57664
57695 :: PRED :: IF :: Z :: if (p1 $context  == #(null)) goto 344::CF,57891:CD,57696
57696 :: PRED :: IF :: Z :: if (v52 == #(null)) goto 249::CD,57700:CD,57705:CD,57706:CD,57713:CD,57723:CD,57889:CD,57890:CD,57891
57697 :: EXPR :: reference :: Ljava/lang/String :: v53 = p1 $context .protocol::JM,57705
57700 :: CALL :: call :: Z :: v55 = v52.equalsIgnoreCase(v53)::JM,57705
57705 :: PRED :: IF :: Z :: if (v55 == #(0)) goto 344::CF,57891:CD,57706:CD,57713:CD,57723:CD,57889:CD,57890
57706 :: PRED :: IF :: Z :: if (p3 $handler  != #(null)) goto 258::CF,57889
57707 :: EXPR :: reference :: Ljava/net/URLStreamHandler :: v56 = p1 $context .handler::DD,57889
57710 :: EXPR :: reference :: Ljava/lang/String :: v58 = p1 $context .path::DD,57713
57713 :: PRED :: IF :: Z :: if (v58 == #(null)) goto 281::CF,57890:CD,57717:CD,57722
57714 :: EXPR :: reference :: Ljava/lang/String :: v59 = p1 $context .path::JM,57717:JM,57722
57717 :: CALL :: call :: Z :: v62 = v59.startsWith(#(/))::JM,57717:JM,57722
57722 :: PRED :: IF :: Z :: if (v62 == #(0)) goto 281::CF,57890
57723 :: PRED :: IF :: Z :: if (v63 != #(null)) goto 344::CF,57891
57771 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v100 = new java.lang.StringBuilder::
57776 :: CALL :: call :: Ljava/lang/StringBuilder :: v104 = v100.append(p2 $spec )::JM,57664:JM,57889:JM,57891:JM,57831:JM,57640:JM,57832:JM,57609:JM,57706:JM,57680:JM,57650:JM,57656:JM,57882:JM,57691:JM,57662:JM,57631
57781 :: CALL :: call :: Ljava/lang/String :: v106 = v104.toString()::JM,57831:JM,57832
57790 :: PRED :: IF :: Z :: if (v71 != #(null)) goto 420::CD,57794
57794 :: CALL :: call :: Ljava/net/URLStreamHandler :: v77 = getURLStreamHandler(v75)::
57800 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v90 = new java.lang.StringBuilder::
57805 :: EXPR :: reference :: Ljava/lang/String :: v93 = p0 $this .protocol::
57808 :: CALL :: call :: Ljava/lang/StringBuilder :: v95 = v90.append(v93)::
57813 :: CALL :: call :: Ljava/lang/String :: v97 = v95.toString()::
57825 :: CALL :: call :: I :: v80 = p2 $spec .indexOf(#(35), v51)::JM,57664:JM,57889:JM,57891:JM,57831:JM,57640:JM,57832:JM,57609:JM,57706:JM,57680:JM,57650:JM,57656:JM,57882:JM,57691:JM,57662:JM,57631
57831 :: PRED :: IF :: Z :: if (v80 < #(0)) goto 458::CD,57832:CD,57833
57832 :: EXPR :: assign :: Ljava/lang/Object :: v81 = v80 + #(1)::JM,57680:JM,57664:JM,57650:JM,57831:JM,57640:JM,57656:JM,57832:JM,57882:JM,57691:JM,57662:JM,57631:JM,57889:JM,57891:JM,57609:JM,57706
57833 :: CALL :: call :: Ljava/lang/String :: v83 = p2 $spec .substring(v81, v21)::JM,57664:JM,57889:JM,57891:JM,57831:JM,57640:JM,57832:JM,57609:JM,57706:JM,57680:JM,57650:JM,57656:JM,57882:JM,57691:JM,57662:JM,57631
57882 :: EXPR :: assign :: null :: PHI v21 = v14, v20::DD,57623:DD,57624:DD,57625:DD,57634:DD,57685:JM,57664:JM,57650:JM,57831:JM,57640:JM,57656:JM,57832:JM,57882:JM,57691:JM,57662:JM,57631
57883 :: EXPR :: assign :: null :: PHI v25 = #(0), #(0), v24::DD,57633:DD,57634:JM,57680:JM,57664:JM,57650:JM,57831:JM,57640:JM,57656:JM,57832:JM,57882:JM,57691:JM,57662:JM,57631:DD,57651:DD,57884
57884 :: EXPR :: assign :: null :: PHI v31 = v25, v30::DD,57656:JM,57680:JM,57664:JM,57650:JM,57831:JM,57640:JM,57832:JM,57882:JM,57691:JM,57662:JM,57631:DD,57886:DD,57887:JM,57889:JM,57891:JM,57609:JM,57706
57885 :: EXPR :: assign :: null :: PHI v37 = #(0), #(0), #(1)::DD,57684
57886 :: EXPR :: assign :: null :: PHI v43 = v31, v42::JM,57664:JM,57650:JM,57831:JM,57640:JM,57656:JM,57832:JM,57882:JM,57691:JM,57662:JM,57631:DD,57681:DD,57683:DD,57685:JM,57680:CF,57684
57887 :: EXPR :: assign :: null :: PHI v51 = v31, v50, v31, v31, v31::CF,57888:JM,57664:JM,57650:JM,57831:JM,57640:JM,57656:JM,57832:JM,57882:JM,57691:JM,57662:JM,57631
57888 :: EXPR :: assign :: null :: PHI v52 = #(null), v47, #(null), #(null), #(null)::DD,57696:JM,57705:DD,57890
57889 :: EXPR :: assign :: null :: PHI v57 = p3 $handler , v56::DD,57891
57890 :: EXPR :: assign :: null :: PHI v63 = v52, v52, #(null)::DD,57723
57891 :: EXPR :: assign :: null :: PHI v71 = p3 $handler , p3 $handler , v57, v57::DD,57790
58142 :: ENTR :: entry :: null :: org.joda.time.DateTimeUtils.getDateFormatSymbols(java.util.Locale)::CE,58143:CD,58153:CD,58159:CD,58164:CD,58170:CD,58171:CD,58172:CD,58177
58143 :: EXIT :: exit :: Ljava/text/DateFormatSymbols :: org.joda.time.DateTimeUtils.getDateFormatSymbols(java.util.Locale)::JM,64023:JM,64027:JM,64053:JM,64057:JM,64321:JM,64325:JM,64355:JM,64351
58153 :: CALL :: call :: Ljava/lang/reflect/Method :: v10 = v3.getMethod(#(getInstance), v6)::JM,58170
58159 :: NORM :: declaration :: [Ljava/lang/Object :: v12 = new java.lang.Object[]::JM,58170
58164 :: CALL :: call :: Ljava/lang/Object :: v14 = v10.invoke(#(null), v12)::JM,58170
58170 :: EXPR :: assign :: Ljava/lang/Object :: v15 = CHECKCAST v14::CF,58171
58171 :: NORM :: compound :: Ljava/text/DateFormatSymbols :: return v15::DD,58143
58172 :: NORM :: declaration :: Ljava/text/DateFormatSymbols :: v17 = new java.text.DateFormatSymbols::DD,58177
58177 :: NORM :: compound :: Ljava/text/DateFormatSymbols :: return v17::DD,58143
58190 :: ENTR :: entry :: null :: org.joda.time.chrono.GJLocaleSymbols.realignDaysOfWeek(java.lang.String[])::CD,58194:CD,58195:CD,58210
58194 :: NORM :: declaration :: [Ljava/lang/String :: v4 = new java.lang.String[]::CF,58210
58195 :: PRED :: IF :: Z :: if (v11 >= #(8)) goto 39::CD,58196:CD,58207:CD,58210:CD,58211
58196 :: PRED :: IF :: Z :: if (v11 >= #(7)) goto 30::CD,58197:CD,58211
58197 :: EXPR :: assign :: Ljava/lang/Object :: v7 = v11 + #(1)::DD,58211
58199 :: EXPR :: reference :: Ljava/lang/Object :: v9 = p1 $null [v8]::DD,58203
58203 :: EXPR :: modify :: Ljava/lang/Object :: v4[v11] = v9::
58207 :: EXPR :: assign :: Ljava/lang/Object :: v10 = v11 + #(1)::DD,58210
58210 :: EXPR :: assign :: null :: PHI v11 = v10, #(1)::DD,58195:DD,58196:DD,58197:DD,58207
58211 :: EXPR :: assign :: null :: PHI v8 = v7, #(1)::
58229 :: ENTR :: entry :: null :: org.joda.time.chrono.GJLocaleSymbols.realignMonths(java.lang.String[])::CD,58233:CD,58234:CD,58247
58233 :: NORM :: declaration :: [Ljava/lang/String :: v4 = new java.lang.String[]::CF,58247
58234 :: PRED :: IF :: Z :: if (v9 >= #(13)) goto 29::CD,58235:CD,58244:CD,58247
58235 :: EXPR :: assign :: Ljava/lang/Object :: v6 = v9 - #(1)::
58236 :: EXPR :: reference :: Ljava/lang/Object :: v7 = p1 $null [v6]::DD,58240
58240 :: EXPR :: modify :: Ljava/lang/Object :: v4[v9] = v7::
58244 :: EXPR :: assign :: Ljava/lang/Object :: v8 = v9 + #(1)::DD,58247
58247 :: EXPR :: assign :: null :: PHI v9 = v8, #(1)::DD,58234:DD,58235:DD,58244
58305 :: ENTR :: entry :: null :: org.joda.time.chrono.GJLocaleSymbols.addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])::CD,58312:CD,58334
58312 :: PRED :: IF :: Z :: if (v15 > p3 $null ) goto 32::CD,58313:CD,58317:CD,58325:CD,58331:CD,58334
58313 :: CALL :: call :: Ljava/lang/String :: v7 = valueOf(v15)::JM,58317
58317 :: CALL :: call :: Ljava/lang/String :: v9 = v7.intern()::JM,58317
58321 :: EXPR :: reference :: Ljava/lang/Object :: v10 = p4 $null [v15]::JM,58334
58325 :: CALL :: call :: Ljava/lang/Object :: v12 = p1 $null .put(v9, v10)::JM,58312:JM,58334
58331 :: EXPR :: assign :: Ljava/lang/Object :: v14 = v15 + #(1)::DD,58334
58334 :: EXPR :: assign :: null :: PHI v15 = v14, p2 $null ::DD,58312:JM,58317:DD,58331
58388 :: ENTR :: entry :: null :: org.joda.time.IllegalFieldValueException.createMessage(java.lang.String,java.lang.String)::CD,58393:CD,58397:CD,58402:CD,58424:CD,58429:CD,58434:CD,58439:CD,58444
58393 :: NORM :: declaration :: Ljava/lang/StringBuffer :: v4 = new java.lang.StringBuffer::
58397 :: CALL :: call :: Ljava/lang/StringBuffer :: v8 = v4.append(#(Value ))::
58402 :: PRED :: IF :: Z :: if (p2 $null  != #(null)) goto 30::CD,58403:CD,58409:CD,58414:CD,58419
58403 :: CALL :: call :: Ljava/lang/StringBuffer :: v19 = v8.append(#(null))::
58409 :: CALL :: call :: Ljava/lang/StringBuffer :: v12 = v8.append(#(34))::
58414 :: CALL :: call :: Ljava/lang/StringBuffer :: v14 = v8.append(p2 $null )::
58419 :: CALL :: call :: Ljava/lang/StringBuffer :: v16 = v8.append(#(34))::
58424 :: CALL :: call :: Ljava/lang/StringBuffer :: v22 = v8.append(#( for ))::
58429 :: CALL :: call :: Ljava/lang/StringBuffer :: v24 = v22.append(p1 $null )::JM,58402:JM,58393
58434 :: CALL :: call :: Ljava/lang/StringBuffer :: v27 = v24.append(#(32))::
58439 :: CALL :: call :: Ljava/lang/StringBuffer :: v30 = v27.append(#(is not supported))::
58444 :: CALL :: call :: Ljava/lang/String :: v32 = v8.toString()::
58473 :: ENTR :: entry :: null :: org.joda.time.field.FieldUtils.verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)::JM,32741
58508 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getDateTimeMillis0(int,int,int,int)::CD,58516:CD,58523:CD,58524
58516 :: CALL :: call :: J :: v8 = p0 $null .getDateMidnightMillis(p1 $null , p2 $null , p3 $null )::JM,58523:CL,61299
58523 :: EXPR :: assign :: Z :: v10 = v8 == #(-9223372036854775808 l)::DD,58524
58524 :: PRED :: IF :: Z :: if (v10 != #(0)) goto 40::CD,58526
58526 :: CALL :: call :: J :: v15 = p0 $null .getDateMidnightMillis(p1 $null , p2 $null , v13)::CL,61299
58592 :: ENTR :: entry :: null :: org.joda.time.DateTimeUtils.put(java.util.Map,java.lang.String,java.lang.String)::CD,58598:CD,58602
58598 :: CALL :: call :: Lorg/joda/time/DateTimeZone :: v6 = forID(p3 $null )::CL,38378
58602 :: CALL :: call :: Ljava/lang/Object :: v8 = p1 $null .put(p2 $null , v6)::
58687 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserBucket.access$000(org.joda.time.format.DateTimeParserBucket)::CE,58688:CD,58694
58688 :: EXIT :: exit :: Lorg/joda/time/DateTimeZone :: org.joda.time.format.DateTimeParserBucket.access$000(org.joda.time.format.DateTimeParserBucket)::JM,54730
58691 :: EXPR :: reference :: Lorg/joda/time/DateTimeZone :: v3 = p1 $null .iZone::DD,58694
58694 :: NORM :: compound :: Lorg/joda/time/DateTimeZone :: return v3::CF,58688
58696 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserBucket.access$100(org.joda.time.format.DateTimeParserBucket)::CE,58697:CD,58703
58697 :: EXIT :: exit :: Ljava/lang/Integer :: org.joda.time.format.DateTimeParserBucket.access$100(org.joda.time.format.DateTimeParserBucket)::JM,54737
58700 :: EXPR :: reference :: Ljava/lang/Integer :: v3 = p1 $null .iOffset::DD,58703
58703 :: NORM :: compound :: Ljava/lang/Integer :: return v3::CF,58697
58705 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserBucket.access$200(org.joda.time.format.DateTimeParserBucket)::CE,58706:CD,58712
58706 :: EXIT :: exit :: [Lorg/joda/time/format/DateTimeParserBucket$SavedField :: org.joda.time.format.DateTimeParserBucket.access$200(org.joda.time.format.DateTimeParserBucket)::JM,54744
58709 :: EXPR :: reference :: [Lorg/joda/time/format/DateTimeParserBucket$SavedField :: v3 = p1 $null .iSavedFields::DD,58712
58712 :: NORM :: compound :: [Lorg/joda/time/format/DateTimeParserBucket$SavedField :: return v3::CF,58706
58714 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeParserBucket.access$300(org.joda.time.format.DateTimeParserBucket)::CE,58715:CD,58721
58715 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeParserBucket.access$300(org.joda.time.format.DateTimeParserBucket)::JM,54751
58718 :: EXPR :: reference :: I :: v3 = p1 $null .iSavedFieldsCount::DD,58721
58721 :: NORM :: compound :: I :: return v3::CF,58715
58792 :: ENTR :: entry :: null :: org.joda.time.chrono.GJLocaleSymbols.getHalfdayMaxTextLength()::CE,58793:CD,58799
58793 :: EXIT :: exit :: I :: org.joda.time.chrono.GJLocaleSymbols.getHalfdayMaxTextLength()::JM,55053
58796 :: EXPR :: reference :: I :: v3 = p0 $null .iMaxHalfdayLength::DD,58799
58799 :: NORM :: compound :: I :: return v3::CF,58793
58801 :: ENTR :: entry :: null :: org.joda.time.chrono.GJLocaleSymbols.getMonthMaxTextLength()::CE,58802:CD,58808
58802 :: EXIT :: exit :: I :: org.joda.time.chrono.GJLocaleSymbols.getMonthMaxTextLength()::JM,55068
58805 :: EXPR :: reference :: I :: v3 = p0 $null .iMaxMonthLength::DD,58808
58808 :: NORM :: compound :: I :: return v3::CF,58802
58810 :: ENTR :: entry :: null :: org.joda.time.chrono.GJLocaleSymbols.getDayOfWeekMaxTextLength()::CE,58811:CD,58817
58811 :: EXIT :: exit :: I :: org.joda.time.chrono.GJLocaleSymbols.getDayOfWeekMaxTextLength()::JM,55083
58814 :: EXPR :: reference :: I :: v3 = p0 $null .iMaxDayOfWeekLength::DD,58817
58817 :: NORM :: compound :: I :: return v3::CF,58811
58819 :: ENTR :: entry :: null :: org.joda.time.chrono.GJLocaleSymbols.getEraMaxTextLength()::CE,58820:CD,58826
58820 :: EXIT :: exit :: I :: org.joda.time.chrono.GJLocaleSymbols.getEraMaxTextLength()::JM,55098
58823 :: EXPR :: reference :: I :: v3 = p0 $null .iMaxEraLength::DD,58826
58826 :: NORM :: compound :: I :: return v3::CF,58820
58828 :: ENTR :: entry :: null :: org.joda.time.field.BaseDateTimeField.getAsShortText(int,java.util.Locale)::CE,58829:CD,58834:CD,58840
58829 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.field.BaseDateTimeField.getAsShortText(int,java.util.Locale)::JM,55172:JM,58859:JM,61429
58834 :: CALL :: call :: Ljava/lang/String :: v6 = p0 $null .getAsText(p1 $null , p2 $null )::JM,58840:CL,58972:CL,58954:CL,58984:CL,58918:CL,58899:CL,58936
58840 :: NORM :: compound :: Ljava/lang/String :: return v6::DD,58829
58844 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.getAsShortText(int,java.util.Locale)::CE,58845:CD,58853:CD,58859
58845 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.getAsShortText(int,java.util.Locale)::JM,55172:JM,58859:JM,61429
58853 :: CALL :: call :: Ljava/lang/String :: v7 = v5.getAsShortText(p1 $null , p2 $null )::JM,58859:CL,58863:CL,58881:CL,58828:CL,58844:CL,61433:CL,61414
58859 :: NORM :: compound :: Ljava/lang/String :: return v7::DD,58845
58863 :: ENTR :: entry :: null :: org.joda.time.chrono.GJDayOfWeekDateTimeField.getAsShortText(int,java.util.Locale)::CE,58864:CD,58869:CD,58873:CD,58878
58864 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.chrono.GJDayOfWeekDateTimeField.getAsShortText(int,java.util.Locale)::JM,55172:JM,58859:JM,61429
58869 :: CALL :: call :: Lorg/joda/time/chrono/GJLocaleSymbols :: v6 = forLocale(p2 $null )::CL,48368
58873 :: CALL :: call :: Ljava/lang/String :: v8 = v6.dayOfWeekValueToShortText(p1 $null )::JM,58878:CL,61444
58878 :: NORM :: compound :: Ljava/lang/String :: return v8::DD,58864
58881 :: ENTR :: entry :: null :: org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsShortText(int,java.util.Locale)::CE,58882:CD,58887:CD,58891:CD,58896
58882 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsShortText(int,java.util.Locale)::JM,55172:JM,58859:JM,61429
58887 :: CALL :: call :: Lorg/joda/time/chrono/GJLocaleSymbols :: v6 = forLocale(p2 $null )::CL,48368
58891 :: CALL :: call :: Ljava/lang/String :: v8 = v6.monthOfYearValueToShortText(p1 $null )::JM,58896:CL,61459
58896 :: NORM :: compound :: Ljava/lang/String :: return v8::DD,58882
58899 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.getAsText(int,java.util.Locale)::CE,58900:CD,58908:CD,58914
58900 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.getAsText(int,java.util.Locale)::JM,55273:JM,58840:JM,58914:JM,61500
58908 :: CALL :: call :: Ljava/lang/String :: v7 = v5.getAsText(p1 $null , p2 $null )::JM,58914:CL,58972:CL,61485:CL,58954:CL,58984:CL,61474:CL,58918:CL,58899:CL,58936
58914 :: NORM :: compound :: Ljava/lang/String :: return v7::DD,58900
58918 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.HalfdayField.getAsText(int,java.util.Locale)::CE,58919:CD,58924:CD,58928:CD,58933
58919 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.chrono.BasicChronology.HalfdayField.getAsText(int,java.util.Locale)::JM,55273:JM,58840:JM,58914:JM,61500
58924 :: CALL :: call :: Lorg/joda/time/chrono/GJLocaleSymbols :: v6 = forLocale(p2 $null )::CL,48368
58928 :: CALL :: call :: Ljava/lang/String :: v8 = v6.halfdayValueToText(p1 $null )::JM,58933:CL,61504
58933 :: NORM :: compound :: Ljava/lang/String :: return v8::DD,58919
58936 :: ENTR :: entry :: null :: org.joda.time.chrono.GJEraDateTimeField.getAsText(int,java.util.Locale)::CE,58937:CD,58942:CD,58946:CD,58951
58937 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.chrono.GJEraDateTimeField.getAsText(int,java.util.Locale)::JM,55273:JM,58840:JM,58914:JM,61500
58942 :: CALL :: call :: Lorg/joda/time/chrono/GJLocaleSymbols :: v6 = forLocale(p2 $null )::CL,48368
58946 :: CALL :: call :: Ljava/lang/String :: v8 = v6.eraValueToText(p1 $null )::JM,58951:CL,61519
58951 :: NORM :: compound :: Ljava/lang/String :: return v8::DD,58937
58954 :: ENTR :: entry :: null :: org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsText(int,java.util.Locale)::CE,58955:CD,58960:CD,58964:CD,58969
58955 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsText(int,java.util.Locale)::JM,55273:JM,58840:JM,58914:JM,61500
58960 :: CALL :: call :: Lorg/joda/time/chrono/GJLocaleSymbols :: v6 = forLocale(p2 $null )::CL,48368
58964 :: CALL :: call :: Ljava/lang/String :: v8 = v6.monthOfYearValueToText(p1 $null )::JM,58969:CL,61534
58969 :: NORM :: compound :: Ljava/lang/String :: return v8::DD,58955
58972 :: ENTR :: entry :: null :: org.joda.time.field.BaseDateTimeField.getAsText(int,java.util.Locale)::CE,58973:CD,58978:CD,58982
58973 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.field.BaseDateTimeField.getAsText(int,java.util.Locale)::JM,55273:JM,58840:JM,58914:JM,61500
58978 :: CALL :: call :: Ljava/lang/String :: v6 = toString(p1 $null )::JM,58982
58982 :: NORM :: compound :: Ljava/lang/String :: return v6::DD,58973
58984 :: ENTR :: entry :: null :: org.joda.time.chrono.GJDayOfWeekDateTimeField.getAsText(int,java.util.Locale)::CE,58985:CD,58990:CD,58994:CD,58999
58985 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.chrono.GJDayOfWeekDateTimeField.getAsText(int,java.util.Locale)::JM,55273:JM,58840:JM,58914:JM,61500
58990 :: CALL :: call :: Lorg/joda/time/chrono/GJLocaleSymbols :: v6 = forLocale(p2 $null )::CL,48368
58994 :: CALL :: call :: Ljava/lang/String :: v8 = v6.dayOfWeekValueToText(p1 $null )::JM,58999:CL,61549
58999 :: NORM :: compound :: Ljava/lang/String :: return v8::DD,58985
59041 :: ENTR :: entry :: null :: org.joda.time.DateTimeField.setExtended(long,int)::CE,59042:CD,59047:CD,59053
59042 :: EXIT :: exit :: J :: org.joda.time.DateTimeField.setExtended(long,int)::JM,55486
59047 :: CALL :: call :: J :: v6 = p0 $null .set(p1 $null , p2 $null )::JM,59053:CL,17916:CL,17780:CL,18373:CL,18470:CL,18511:CL,18327:CL,18059:CL,18239:CL,17868:CL,17676:CL,17905:CL,17719:CL,17999:CL,17826
59053 :: NORM :: compound :: J :: return v6::DD,59042
59057 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicYearDateTimeField.setExtended(long,int)::CE,59058:CD,59079:CD,59088:CD,59094
59058 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicYearDateTimeField.setExtended(long,int)::JM,55486
59079 :: CALL :: call :: V :: verifyValueBounds(p0 $null , p2 $null , v9, v13)::CL,25389
59088 :: CALL :: call :: J :: v17 = v15.setYear(p1 $null , p2 $null )::JM,59094:CL,25428
59094 :: NORM :: compound :: J :: return v17::DD,59058
59104 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormat.parseToken(java.lang.String,[])::CE,59105:CD,59109:CD,59117:CD,59121:CD,59126:CD,59200:CD,59204:CD,59211:JM,59136:JM,59171:JM,59143:JM,59183:JM,59184:JM,59185:JM,59186:JM,59156:JM,59127:JM,59128:JM,59129:JM,59162:JM,59164
59105 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.format.DateTimeFormat.parseToken(java.lang.String,[])::JM,55939:JM,55654:JM,55914:JM,55661:JM,55790:JM,55791:JM,55951:JM,55891:JM,55768:JM,55705:JM,55674:JM,55868:JM,55903
59109 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v4 = new java.lang.StringBuilder::JM,59204
59113 :: EXPR :: reference :: I :: v7 = p2 $null [#(0)]::JM,59136:JM,59171:JM,59143:JM,59183:JM,59184:JM,59185:JM,59186:JM,59156:JM,59126:JM,59127:JM,59128:JM,59129:JM,59162:JM,59164:DD,59205:DD,59206
59117 :: CALL :: call :: I :: v9 = p1 $null .length()::JM,59136:JM,59171:JM,59109:JM,59143:JM,59183:JM,59184:JM,59185:JM,59186:JM,59156:JM,59126:JM,59127:JM,59128:JM,59129:JM,59162:JM,59164
59121 :: CALL :: call :: C :: v11 = p1 $null .charAt(v7)::JM,59136:JM,59171:JM,59109:JM,59143:JM,59183:JM,59184:JM,59185:JM,59186:JM,59156:JM,59126:JM,59127:JM,59128:JM,59129:JM,59162:JM,59164
59126 :: PRED :: IF :: Z :: if (v11 < #(65)) goto 43::CD,59127:CD,59128
59127 :: PRED :: IF :: Z :: if (v11 <= #(90)) goto 56::CD,59128:CD,59130:CD,59135:CD,59136:CD,59205:CD,59211
59128 :: PRED :: IF :: Z :: if (v11 < #(97)) goto 100::CD,59129:CD,59151:CD,59156:CD,59206:CD,59207:CD,59211
59129 :: PRED :: IF :: Z :: if (v11 > #(122)) goto 100::CD,59130:CD,59135:CD,59136:CD,59151:CD,59156:CD,59205:CD,59206:CD,59207:CD,59211
59130 :: CALL :: call :: Ljava/lang/StringBuilder :: v41 = v4.append(v11)::JM,59184:JM,59185:JM,59186:JM,59171:JM,59143:JM,59162:JM,59183
59135 :: EXPR :: assign :: Ljava/lang/Object :: v42 = v49 + #(1)::DD,59136
59136 :: PRED :: IF :: Z :: if (v42 >= v9) goto 230::CF,59211:CD,59137:CD,59138:CD,59143
59137 :: EXPR :: assign :: Ljava/lang/Object :: v43 = v49 + #(1)::JM,59136:JM,59171:JM,59109:JM,59143:JM,59183:JM,59184:JM,59185:JM,59186:JM,59156:JM,59126:JM,59127:JM,59128:JM,59129:JM,59162:JM,59164
59138 :: CALL :: call :: C :: v45 = p1 $null .charAt(v43)::JM,59136:JM,59171:JM,59109:JM,59143:JM,59183:JM,59184:JM,59185:JM,59186:JM,59156:JM,59126:JM,59127:JM,59128:JM,59129:JM,59162:JM,59164
59143 :: PRED :: IF :: Z :: if (v45 != v11) goto 230::CF,59211:CD,59135:CD,59136:CD,59144:CD,59149:CD,59205
59144 :: CALL :: call :: Ljava/lang/StringBuilder :: v47 = v4.append(v11)::JM,59184:JM,59185:JM,59186:JM,59171:JM,59143:JM,59162:JM,59183
59149 :: EXPR :: assign :: Ljava/lang/Object :: v48 = v49 + #(1)::DD,59205
59151 :: CALL :: call :: Ljava/lang/StringBuilder :: v18 = v4.append(#(39))::
59156 :: PRED :: IF :: Z :: if (v35 >= v9) goto 230::CF,59211:CD,59157:CD,59162:JM,59136:JM,59171:JM,59109:JM,59143:JM,59183:JM,59184:JM,59185:JM,59186:JM,59156:JM,59126:JM,59127:JM,59128:JM,59129:JM,59164
59157 :: CALL :: call :: C :: v20 = p1 $null .charAt(v35)::JM,59136:JM,59171:JM,59109:JM,59143:JM,59183:JM,59184:JM,59185:JM,59186:JM,59156:JM,59126:JM,59127:JM,59128:JM,59129:JM,59162:JM,59164
59162 :: PRED :: IF :: Z :: if (v20 != #(39)) goto 177::CD,59156:CD,59163:CD,59164:CD,59182:CD,59194:CD,59206:CD,59207:CD,59209:CD,59210:CD,59211
59163 :: EXPR :: assign :: Ljava/lang/Object :: v22 = v35 + #(1)::DD,59164
59164 :: PRED :: IF :: Z :: if (v22 >= v9) goto 162::CD,59165:CD,59166:CD,59171:CD,59179:CD,59208:CD,59209:CD,59210
59165 :: EXPR :: assign :: Ljava/lang/Object :: v23 = v35 + #(1)::JM,59136:JM,59171:JM,59109:JM,59143:JM,59183:JM,59184:JM,59185:JM,59186:JM,59156:JM,59126:JM,59127:JM,59128:JM,59129:JM,59162:JM,59164
59166 :: CALL :: call :: C :: v25 = p1 $null .charAt(v23)::JM,59136:JM,59171:JM,59109:JM,59143:JM,59183:JM,59184:JM,59185:JM,59186:JM,59156:JM,59126:JM,59127:JM,59128:JM,59129:JM,59162:JM,59164
59171 :: PRED :: IF :: Z :: if (v25 != #(39)) goto 162::CD,59172:CD,59173:CD,59179:CD,59208:CD,59209:CD,59210
59172 :: EXPR :: assign :: Ljava/lang/Object :: v26 = v35 + #(1)::DD,59209
59173 :: CALL :: call :: Ljava/lang/StringBuilder :: v28 = v4.append(v20)::JM,59184:JM,59185:JM,59186:JM,59171:JM,59183
59179 :: PRED :: IF :: Z :: if (v37 != #(0)) goto 172::CD,59208
59182 :: PRED :: IF :: Z :: if (v37 != #(0)) goto 217::CD,59156:CD,59183:CD,59189:CD,59194:CD,59206:CD,59207:CD,59209:CD,59210:CD,59211
59183 :: PRED :: IF :: Z :: if (v20 < #(65)) goto 198::CD,59184:CD,59185
59184 :: PRED :: IF :: Z :: if (v20 <= #(90)) goto 208::CD,59185:CD,59187:CD,59211
59185 :: PRED :: IF :: Z :: if (v20 < #(97)) goto 217::CD,59156:CD,59186:CD,59189:CD,59194:CD,59206:CD,59207:CD,59209:CD,59210:CD,59211
59186 :: PRED :: IF :: Z :: if (v20 > #(122)) goto 217::CD,59156:CD,59187:CD,59189:CD,59194:CD,59206:CD,59207:CD,59209:CD,59210:CD,59211
59187 :: EXPR :: assign :: Ljava/lang/Object :: v39 = v35 + #(-1)::DD,59211
59189 :: CALL :: call :: Ljava/lang/StringBuilder :: v31 = v4.append(v20)::JM,59171
59194 :: EXPR :: assign :: Ljava/lang/Object :: v34 = v32 + #(1)::DD,59206
59196 :: EXPR :: modify :: I :: p2 $null [#(0)] = v50::
59200 :: CALL :: call :: Ljava/lang/String :: v54 = v4.toString()::JM,59204
59204 :: NORM :: compound :: Ljava/lang/String :: return v54::DD,59105
59205 :: EXPR :: assign :: null :: PHI v49 = v48, v7::DD,59135:DD,59137:DD,59149:DD,59211
59206 :: EXPR :: assign :: null :: PHI v35 = v34, v7::CF,59207:DD,59156:JM,59136:JM,59171:JM,59143:JM,59183:JM,59184:JM,59185:JM,59186:JM,59126:JM,59127:JM,59128:JM,59129:JM,59162:JM,59164:DD,59163:DD,59165:DD,59172:DD,59187:DD,59209:DD,59211
59207 :: EXPR :: assign :: null :: PHI v37 = v33, #(0)::DD,59179:DD,59182:DD,59210:CF,59156
59208 :: EXPR :: assign :: null :: PHI v29 = #(1), #(0)::DD,59210
59209 :: EXPR :: assign :: null :: PHI v32 = v26, v35, v35::CF,59210:DD,59194
59210 :: EXPR :: assign :: null :: PHI v33 = v37, v29, v37::DD,59207:CF,59194
59211 :: EXPR :: assign :: null :: PHI v50 = v49, v49, v35, v39::DD,59196
59296 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendEraText()::CD,59303
59303 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v6 = p0 $null .appendText(v4)::CL,61564
59310 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendCenturyOfEra(int,int)::CD,59319
59319 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v8 = p0 $null .appendSignedDecimal(v6, p1 $null , p2 $null )::CL,29459
59330 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormat.isNumericToken(java.lang.String)::CD,59334:CD,59338
59334 :: CALL :: call :: I :: v4 = p1 $null .length()::JM,59338
59338 :: PRED :: IF :: Z :: if (v4 <= #(0)) goto 262::CD,59339:JM,59338
59339 :: CALL :: call :: C :: v7 = p1 $null .charAt(#(0))::JM,59338
59371 :: ENTR :: entry :: null :: org.joda.time.base.AbstractDateTime.getWeekyear()::CD,59379:CD,59387
59379 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v6 = v4.weekyear()::CL,33092:CL,33074
59387 :: CALL :: call :: I :: v10 = v6.get(v8)::CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,11332
59395 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendTwoDigitWeekyear(int,boolean)::JM,61621:JM,61624:JM,61627:CD,59411
59411 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = p0 $null .append0(v5)::CL,29725
59421 :: ENTR :: entry :: null :: org.joda.time.base.AbstractDateTime.getYear()::CD,59429:CD,59437
59429 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v6 = v4.year()::CL,10978:CL,32957
59437 :: CALL :: call :: I :: v10 = v6.get(v8)::CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,11332
59445 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendTwoDigitYear(int,boolean)::JM,61621:JM,61624:JM,61627:CD,59461
59461 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v10 = p0 $null .append0(v5)::CL,29725
59471 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendYearOfEra(int,int)::CD,59480
59480 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v8 = p0 $null .appendDecimal(v6, p1 $null , p2 $null )::CL,29759
59491 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendMonthOfYearText()::CD,59498
59498 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v6 = p0 $null .appendText(v4)::CL,61564
59505 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendMonthOfYearShortText()::CD,59512
59512 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v6 = p0 $null .appendShortText(v4)::CL,61638
59519 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendHalfdayOfDayText()::CD,59526
59526 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v6 = p0 $null .appendText(v4)::CL,61564
59533 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendClockhourOfHalfday(int)::CD,59541
59541 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v8 = p0 $null .appendDecimal(v5, p1 $null , #(2))::CL,29759
59552 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendClockhourOfDay(int)::CD,59560
59560 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v8 = p0 $null .appendDecimal(v5, p1 $null , #(2))::CL,29759
59571 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendHourOfHalfday(int)::CD,59579
59579 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v8 = p0 $null .appendDecimal(v5, p1 $null , #(2))::CL,29759
59590 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendDayOfWeekText()::CD,59597
59597 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v6 = p0 $null .appendText(v4)::CL,61564
59604 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendDayOfWeekShortText()::CD,59611
59611 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v6 = p0 $null .appendShortText(v4)::CL,61638
59618 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneName()::JM,61680:JM,61677:CD,59628
59628 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v8 = p0 $null .append0(v3, #(null))::CL,29980
59640 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneShortName(java.util.Map)::JM,61680:JM,61677:CD,59651
59651 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v8 = p0 $null .append0(v4, v4)::CL,29980
59665 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)::JM,29922:JM,29940:JM,29941:JM,29927:JM,29932:JM,29916:JM,29919:CD,59683
59683 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v11 = p0 $null .append0(v8)::CL,29725
59696 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneId()::CD,59704
59704 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v6 = p0 $null .append0(v3, v4)::CL,29980
59722 :: ENTR :: entry :: null :: org.joda.time.Instant.getChronology()::CF,59723:CD,59726:CD,59729
59723 :: EXIT :: exit :: Lorg/joda/time/Chronology :: org.joda.time.Instant.getChronology()::JM,56427
59726 :: CALL :: call :: Lorg/joda/time/chrono/ISOChronology :: v4 = getInstanceUTC()::JM,59729:CL,10971
59729 :: NORM :: compound :: Lorg/joda/time/Chronology :: return v4::CF,59723
59730 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear.printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)::CD,59740:CD,59746
59740 :: CALL :: call :: I :: v10 = p0 $null .getTwoDigitYear(p2 $null , p3 $null )::JM,59746:CL,61689
59746 :: PRED :: IF :: Z :: if (v10 >= #(0)) goto 39::CD,59747:CD,59752:CD,59758
59747 :: CALL :: call :: Ljava/lang/Appendable :: v16 = p1 $null .append(#(65533))::
59752 :: CALL :: call :: Ljava/lang/Appendable :: v18 = p1 $null .append(#(65533))::
59758 :: CALL :: call :: V :: appendPaddedInteger(p1 $null , v10, #(2))::CL,57228
59779 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber.printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)::CD,59792:CD,59797:CD,59805:CD,59814
59792 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v11 = v9.getField(p3 $null )::CL,25774
59797 :: CALL :: call :: I :: v13 = v11.get(p2 $null )::CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,11332
59805 :: CALL :: call :: V :: appendPaddedInteger(p1 $null , v13, v14)::CL,57228
59814 :: CALL :: call :: V :: appendUnknownString(p1 $null , v17)::CL,61724
59827 :: ENTR :: entry :: null :: org.joda.time.format.DateTimePrinterInternalPrinter.printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)::CD,59837:CD,59838:JM,59853
59837 :: EXPR :: assign :: Z :: v9=p1 $null  INSTANCEOF java.lang.StringBuffer::DD,59838
59838 :: PRED :: IF :: Z :: if (v9 == #(0)) goto 37::CD,59853:CD,59854
59853 :: EXPR :: assign :: Z :: v11=p1 $null  INSTANCEOF java.io.Writer::DD,59854
59854 :: PRED :: IF :: Z :: if (v11 == #(0)) goto 72::CF,59869:CD,59870:CD,59890
59869 :: NORM :: declaration :: Ljava/lang/StringBuffer :: v12 = new java.lang.StringBuffer::
59870 :: CALL :: call :: I :: v14 = p0 $null .estimatePrintedLength()::CL,47301
59890 :: CALL :: call :: Ljava/lang/Appendable :: v19 = p1 $null .append(v12)::
59931 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.Composite.printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)::CD,59950:CD,59954:CD,59955:CD,59973
59941 :: EXPR :: reference :: [Lorg/joda/time/format/InternalPrinter :: v9 = p0 $null .iPrinters::DD,59954
59950 :: PRED :: IF :: Z :: if (p6 $null  != #(null)) goto 31::CD,59951
59951 :: CALL :: call :: Ljava/util/Locale :: v12 = getDefault()::
59954 :: EXPR :: assign :: I :: v14 = v9.length::DD,59955:CF,59973
59955 :: PRED :: IF :: Z :: if (v20 >= v14) goto 70::CD,59960:CD,59969:CD,59973
59960 :: CALL :: call :: V :: v16.printTo(p1 $null , p2 $null , p3 $null , p4 $null , p5 $null , v13)::CL,60377:CL,60068:CL,60017:CL,60122:CL,59931:CL,60336:CL,59827:CL,59996:CL,60046:CL,59730:CL,59779:CL,60100
59969 :: EXPR :: assign :: Ljava/lang/Object :: v19 = v20 + #(1)::DD,59973
59973 :: EXPR :: assign :: null :: PHI v20 = v19, #(0)::DD,59955:DD,59969
59996 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.Fraction.printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)::CD,60006
60006 :: CALL :: call :: V :: p0 $null .printTo(p1 $null , p2 $null , p3 $null )::CL,61748
60017 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId.printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)::CD,60027:CD,60033:CD,60039
60027 :: PRED :: IF :: Z :: if (p5 $null  == #(null)) goto 16::CD,60028:CD,60039
60028 :: CALL :: call :: Ljava/lang/String :: v12 = p5 $null .getID()::JM,60039:CL,9866
60033 :: CALL :: call :: Ljava/lang/Appendable :: v15 = p1 $null .append(v13)::
60039 :: EXPR :: assign :: null :: PHI v13 = v12, #()::
60046 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral.printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)::CD,60059
60056 :: EXPR :: reference :: C :: v9 = p0 $null .iValue::
60059 :: CALL :: call :: Ljava/lang/Appendable :: v11 = p1 $null .append(v9)::
60068 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName.printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)::CD,60080:CD,60087
60080 :: CALL :: call :: Ljava/lang/String :: v12 = p0 $null .print(v10, p5 $null , p6 $null )::CL,61955
60087 :: CALL :: call :: Ljava/lang/Appendable :: v14 = p1 $null .append(v12)::
60100 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.StringLiteral.printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)::CD,60113
60110 :: EXPR :: reference :: Ljava/lang/String :: v9 = p0 $null .iValue::
60113 :: CALL :: call :: Ljava/lang/Appendable :: v11 = p1 $null .append(v9)::
60122 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset.printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)::CD,60132:JM,60160:JM,60148:JM,60134:JM,60251
60132 :: PRED :: IF :: Z :: if (p5 $null  != #(null)) goto 8::CD,60134
60134 :: PRED :: IF :: Z :: if (p4 $null  != #(0)) goto 32::CD,60138:CD,60148:CD,60161:CD,60162:CD,60170:CD,60251
60135 :: EXPR :: reference :: Ljava/lang/String :: v11 = p0 $null .iZeroOffsetPrintText::DD,60138
60138 :: PRED :: IF :: Z :: if (v11 == #(null)) goto 32::CD,60142:CD,60148:CD,60161:CD,60162:CD,60170:CD,60251
60139 :: EXPR :: reference :: Ljava/lang/String :: v56 = p0 $null .iZeroOffsetPrintText::
60142 :: CALL :: call :: Ljava/lang/Appendable :: v58 = p1 $null .append(v56)::
60148 :: PRED :: IF :: Z :: if (p4 $null  < #(0)) goto 50::CD,60149:CD,60155:CD,60160:CD,60251
60149 :: CALL :: call :: Ljava/lang/Appendable :: v18 = p1 $null .append(#(43))::
60155 :: CALL :: call :: Ljava/lang/Appendable :: v14 = p1 $null .append(#(45))::
60160 :: EXPR :: assign :: Ljava/lang/Object :: v15 = -(p4 $null )::DD,60251
60161 :: EXPR :: assign :: Ljava/lang/Object :: v21 = v19 / #(3600000)::DD,60172
60162 :: CALL :: call :: V :: appendPaddedInteger(p1 $null , v21, #(2))::CL,57228
60167 :: EXPR :: reference :: I :: v24 = p0 $null .iMaxFields::DD,60170
60170 :: PRED :: IF :: Z :: if (v24 != #(1)) goto 90::CD,60172:CD,60173:CD,60174
60172 :: EXPR :: assign :: Ljava/lang/Object :: v26 = v21 * #(3600000)::CF,60173
60173 :: EXPR :: assign :: Ljava/lang/Object :: v27 = v19 - v26::DD,60174:DD,60180:DD,60201
60174 :: PRED :: IF :: Z :: if (v27 != #(0)) goto 112::CD,60178:CD,60180:CD,60184:CD,60190:CD,60198
60175 :: EXPR :: reference :: I :: v28 = p0 $null .iMinFields::DD,60178
60178 :: PRED :: IF :: Z :: if (v28 > #(1)) goto 112::CD,60180:CD,60184:CD,60190:CD,60198
60180 :: EXPR :: assign :: Ljava/lang/Object :: v30 = v27 / #(60000)::DD,60200
60181 :: EXPR :: reference :: Z :: v31 = p0 $null .iShowSeparators::DD,60184
60184 :: PRED :: IF :: Z :: if (v31 == #(0)) goto 135::CD,60185
60185 :: CALL :: call :: Ljava/lang/Appendable :: v34 = p1 $null .append(#(58))::
60190 :: CALL :: call :: V :: appendPaddedInteger(p1 $null , v30, #(2))::CL,57228
60195 :: EXPR :: reference :: I :: v36 = p0 $null .iMaxFields::DD,60198
60198 :: PRED :: IF :: Z :: if (v36 != #(2)) goto 153::CD,60200:CD,60201:CD,60202
60200 :: EXPR :: assign :: Ljava/lang/Object :: v37 = v30 * #(60000)::CF,60201
60201 :: EXPR :: assign :: Ljava/lang/Object :: v38 = v27 - v37::DD,60202:DD,60208:DD,60229
60202 :: PRED :: IF :: Z :: if (v38 != #(0)) goto 176::CD,60206:CD,60208:CD,60212:CD,60218:CD,60226
60203 :: EXPR :: reference :: I :: v39 = p0 $null .iMinFields::DD,60206
60206 :: PRED :: IF :: Z :: if (v39 > #(2)) goto 176::CD,60208:CD,60212:CD,60218:CD,60226
60208 :: EXPR :: assign :: Ljava/lang/Object :: v41 = v38 / #(1000)::DD,60228
60209 :: EXPR :: reference :: Z :: v42 = p0 $null .iShowSeparators::DD,60212
60212 :: PRED :: IF :: Z :: if (v42 == #(0)) goto 199::CD,60213
60213 :: CALL :: call :: Ljava/lang/Appendable :: v44 = p1 $null .append(#(58))::
60218 :: CALL :: call :: V :: appendPaddedInteger(p1 $null , v41, #(2))::CL,57228
60223 :: EXPR :: reference :: I :: v46 = p0 $null .iMaxFields::DD,60226
60226 :: PRED :: IF :: Z :: if (v46 != #(3)) goto 218::CD,60228:CD,60229:CD,60230
60228 :: EXPR :: assign :: Ljava/lang/Object :: v48 = v41 * #(1000)::CF,60229
60229 :: EXPR :: assign :: Ljava/lang/Object :: v49 = v38 - v48::DD,60230
60230 :: PRED :: IF :: Z :: if (v49 != #(0)) goto 237::CD,60234:CD,60239:CD,60245
60231 :: EXPR :: reference :: I :: v50 = p0 $null .iMinFields::DD,60234
60234 :: PRED :: IF :: Z :: if (v50 > #(3)) goto 237::CD,60239:CD,60245
60236 :: EXPR :: reference :: Z :: v51 = p0 $null .iShowSeparators::DD,60239
60239 :: PRED :: IF :: Z :: if (v51 == #(0)) goto 256::CD,60240
60240 :: CALL :: call :: Ljava/lang/Appendable :: v54 = p1 $null .append(#(46))::
60245 :: CALL :: call :: V :: appendPaddedInteger(p1 $null , v49, #(3))::CL,57228
60251 :: EXPR :: assign :: null :: PHI v19 = p4 $null , v15::DD,60161:DD,60173
60336 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber.printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)::CD,60349:CD,60354:CD,60359:CD,60364
60349 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v11 = v9.getField(p3 $null )::CL,25774
60354 :: CALL :: call :: I :: v13 = v11.get(p2 $null )::CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,11332
60359 :: CALL :: call :: V :: appendUnpaddedInteger(p1 $null , v13)::CL,61994
60364 :: CALL :: call :: Ljava/lang/Appendable :: v18 = p1 $null .append(#(65533))::
60377 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TextField.printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)::CD,60387:CD,60394:CD,60400
60387 :: CALL :: call :: Ljava/lang/String :: v10 = p0 $null .print(p2 $null , p3 $null , p6 $null )::CL,62096
60394 :: CALL :: call :: Ljava/lang/Appendable :: v12 = p1 $null .append(v10)::
60400 :: CALL :: call :: Ljava/lang/Appendable :: v16 = p1 $null .append(#(65533))::
60433 :: EXPR :: modify :: Lorg/joda/time/field/ImpreciseDateTimeField :: p0 $null .this$0 = p1 $null ::
60451 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getMaxMonth()::CF,60452:CD,60455
60452 :: EXIT :: exit :: I :: org.joda.time.chrono.BasicChronology.getMaxMonth()::JM,56913
60455 :: NORM :: compound :: I :: return #(12)::CF,60452
60485 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iField = p1 $null ::
60662 :: ENTR :: entry :: null :: org.joda.time.format.FormatUtils.createErrorMessage(java.lang.String,int)::CD,60667:CD,60668:CD,60672:CD,60673:CD,60686:CD,60779:JM,60715
60667 :: EXPR :: assign :: Ljava/lang/Object :: v5 = p2 $null  + #(32)::DD,60672:JM,60673:JM,60715:JM,60779:JM,60667:JM,60686
60668 :: CALL :: call :: I :: v7 = p1 $null .length()::JM,60673:JM,60779:JM,60667:JM,60715:JM,60686
60672 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v5 + #(3)::CF,60673
60673 :: PRED :: IF :: Z :: if (v7 > v9) goto 23::CD,60675:CD,60681:CD,60779:JM,60673:JM,60667:JM,60715:JM,60686
60675 :: CALL :: call :: Ljava/lang/String :: v12 = p1 $null .substring(#(0), v5)::JM,60673:JM,60779:JM,60667:JM,60715:JM,60686
60681 :: CALL :: call :: Ljava/lang/String :: v15 = v12.concat(#(...))::JM,60715:JM,60779
60686 :: PRED :: IF :: Z :: if (p2 $null  > #(0)) goto 63::CF,60687:CD,60691:CD,60696:CD,60701:CD,60706:CD,60711:CD,60715:JM,60673:JM,60779:JM,60667:JM,60686
60687 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v49 = new java.lang.StringBuilder::
60691 :: CALL :: call :: Ljava/lang/StringBuilder :: v52 = v49.append(#(Invalid format: '))::
60696 :: CALL :: call :: Ljava/lang/StringBuilder :: v54 = v52.append(v16)::
60701 :: CALL :: call :: Ljava/lang/StringBuilder :: v56 = v54.append(#(34))::
60706 :: CALL :: call :: Ljava/lang/String :: v58 = v56.toString()::
60711 :: CALL :: call :: I :: v18 = p1 $null .length()::JM,60673:JM,60779:JM,60667:JM,60715:JM,60686
60715 :: PRED :: IF :: Z :: if (p2 $null  < v18) goto 94::CF,60740:CF,60716:CD,60720:CD,60725:CD,60730:CD,60735:CD,60744:CD,60749:CD,60754:CD,60759:CD,60764:CD,60769:CD,60774
60716 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v38 = new java.lang.StringBuilder::
60720 :: CALL :: call :: Ljava/lang/StringBuilder :: v41 = v38.append(#(Invalid format: '))::
60725 :: CALL :: call :: Ljava/lang/StringBuilder :: v43 = v41.append(v16)::
60730 :: CALL :: call :: Ljava/lang/StringBuilder :: v46 = v43.append(#(' is too short))::
60735 :: CALL :: call :: Ljava/lang/String :: v48 = v46.toString()::
60740 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v19 = new java.lang.StringBuilder::
60744 :: CALL :: call :: Ljava/lang/StringBuilder :: v23 = v19.append(#(Invalid format: '))::
60749 :: CALL :: call :: Ljava/lang/StringBuilder :: v25 = v23.append(v16)::
60754 :: CALL :: call :: Ljava/lang/StringBuilder :: v28 = v25.append(#(' is malformed at '))::
60759 :: CALL :: call :: Ljava/lang/String :: v30 = v16.substring(p2 $null )::JM,60673:JM,60667:JM,60715:JM,60779
60764 :: CALL :: call :: Ljava/lang/StringBuilder :: v32 = v28.append(v30)::JM,60779
60769 :: CALL :: call :: Ljava/lang/StringBuilder :: v35 = v32.append(#(34))::
60774 :: CALL :: call :: Ljava/lang/String :: v37 = v35.toString()::
60779 :: EXPR :: assign :: null :: PHI v16 = p1 $null , v15::CF,60686
60926 :: CALL :: call :: V :: p1 $sm .checkPermission(v4)::
60940 :: EXPR :: reference :: Ljava/util/Hashtable :: v3 = java.net.URL.handlers::JM,60947
60942 :: CALL :: call :: Ljava/lang/Object :: v5 = v3.get(p1 $protocol )::JM,60947:JM,61121:JM,61124:JM,60954:JM,61051
60947 :: EXPR :: assign :: Ljava/lang/Object :: v6 = CHECKCAST v5::DD,60948:DD,61121
60948 :: PRED :: IF :: Z :: if (v6 != #(null)) goto 315::CD,60949:CD,60951:CD,60959:CD,61121
60949 :: EXPR :: reference :: Ljava/net/URLStreamHandlerFactory :: v9 = java.net.URL.factory::DD,60951
60951 :: PRED :: IF :: Z :: if (v9 == #(null)) goto 36::CF,61121:CD,60952:CD,60954
60952 :: EXPR :: reference :: Ljava/net/URLStreamHandlerFactory :: v10 = java.net.URL.factory::JM,61121:JM,60954
60954 :: CALL :: call :: Ljava/net/URLStreamHandler :: v12 = v10.createURLStreamHandler(p1 $protocol )::JM,61121:JM,60954:JM,60947:JM,61124:JM,61051
60959 :: PRED :: IF :: Z :: if (v14 != #(null)) goto 233::CD,60966:CD,60970:CD,60971:CD,60990:CD,60991:CD,60999:CD,61004:CD,61008:CD,61072:CD,61125
60966 :: CALL :: call :: Ljava/lang/Object :: v21 = doPrivileged(v16)::JM,60970
60970 :: EXPR :: assign :: Ljava/lang/Object :: v22 = CHECKCAST v21::DD,60971
60971 :: PRED :: IF :: Z :: if (v22 == #()) goto 88::CF,60972:CD,60973:CD,60981:CD,60986
60972 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v23 = new java.lang.StringBuilder::
60973 :: CALL :: call :: Ljava/lang/String :: v25 = valueOf(v22)::
60981 :: CALL :: call :: Ljava/lang/StringBuilder :: v29 = v23.append(#(|))::
60986 :: CALL :: call :: Ljava/lang/String :: v31 = v29.toString()::
60990 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v33 = new java.lang.StringBuilder::
60991 :: CALL :: call :: Ljava/lang/String :: v35 = valueOf(v32)::
60999 :: CALL :: call :: Ljava/lang/StringBuilder :: v39 = v33.append(#(sun.net.www.protocol))::
61004 :: CALL :: call :: Ljava/lang/String :: v41 = v39.toString()::
61008 :: NORM :: declaration :: Ljava/util/StringTokenizer :: v42 = new java.util.StringTokenizer::JM,61077
61015 :: CALL :: call :: Ljava/lang/String :: v47 = v42.nextToken()::
61019 :: CALL :: call :: Ljava/lang/String :: v49 = v47.trim()::
61023 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v50 = new java.lang.StringBuilder::JM,61124:JM,61051
61024 :: CALL :: call :: Ljava/lang/String :: v52 = valueOf(v49)::
61032 :: CALL :: call :: Ljava/lang/StringBuilder :: v56 = v50.append(#(.))::JM,61124:JM,61051
61037 :: CALL :: call :: Ljava/lang/StringBuilder :: v58 = v56.append(p1 $protocol )::JM,61124:JM,61051:JM,61121:JM,60947:JM,60954
61042 :: CALL :: call :: Ljava/lang/StringBuilder :: v61 = v58.append(#(.Handler))::JM,61124:JM,61051
61047 :: CALL :: call :: Ljava/lang/String :: v63 = v61.toString()::JM,61124:JM,61051
61051 :: CALL :: call :: Ljava/lang/Class :: v65 = forName(v63)::JM,61124:JM,61051
61056 :: CALL :: call :: Ljava/lang/ClassLoader :: v68 = getSystemClassLoader()::JM,61124
61060 :: CALL :: call :: Ljava/lang/Class :: v70 = v68.loadClass(v63)::JM,61124:JM,61051
61065 :: PRED :: IF :: Z :: if (v72 == #(null)) goto 222::CF,61125:CD,61066:CD,61070
61066 :: CALL :: call :: Ljava/lang/Object :: v75 = v72.newInstance()::JM,61066:JM,61070
61070 :: EXPR :: assign :: Ljava/lang/Object :: v76 = CHECKCAST v75::DD,61125
61072 :: PRED :: IF :: Z :: if (v77 != #(null)) goto 233::CD,61073:CD,61077
61073 :: CALL :: call :: Z :: v45 = v42.hasMoreTokens()::JM,61077
61077 :: PRED :: IF :: Z :: if (v45 != #(0)) goto 127::CD,61015:CD,61019:CD,61023:CD,61024:CD,61032:CD,61037:CD,61042:CD,61047:CD,61051:CD,61065:CD,61072:CD,61124:CD,61125
61121 :: EXPR :: assign :: null :: PHI v14 = v6, v12::DD,60959:DD,61125
61124 :: EXPR :: assign :: null :: PHI v72 = v65, #(null), v70::DD,61065:JM,61066:JM,61070
61125 :: EXPR :: assign :: null :: PHI v77 = v14, v77, v76, v77::DD,61072:DD,61125
61299 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicChronology.getDateMidnightMillis(int,int,int)::CE,61300:CD,61319:CD,61333:CD,61348:CD,61354:CD,61361:CD,61362:JM,61377:JM,61368
61300 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicChronology.getDateMidnightMillis(int,int,int)::JM,58523
61319 :: CALL :: call :: V :: verifyValueBounds(v7, p1 $null , v11, v14)::CL,58473
61333 :: CALL :: call :: V :: verifyValueBounds(v17, p2 $null , #(1), v19)::CL,58473
61348 :: CALL :: call :: V :: verifyValueBounds(v22, p3 $null , #(1), v24)::CL,58473
61354 :: CALL :: call :: J :: v27 = p0 $null .getYearMonthDayMillis(p1 $null , p2 $null , p3 $null )::JM,61361:JM,61379:JM,61370:CL,26650
61361 :: EXPR :: assign :: Z :: v29 = v27 == #(0 l)::DD,61362
61362 :: PRED :: IF :: Z :: if (v29 >= #(0)) goto 79::CD,61363:CD,61367:CD,61368:CD,61370:CD,61371
61363 :: CALL :: call :: I :: v32 = p0 $null .getMaxYear()::JM,61367:CL,25383
61367 :: EXPR :: assign :: Ljava/lang/Object :: v33 = v32 + #(1)::CF,61368
61368 :: PRED :: IF :: Z :: if (p1 $null  != v33) goto 79::CD,61369:CD,61370:CD,61371
61369 :: NORM :: compound :: J :: return #(9223372036854775807 l)::DD,61300
61370 :: EXPR :: assign :: Z :: v34 = v27 == #(0 l)::DD,61371
61371 :: PRED :: IF :: Z :: if (v34 <= #(0)) goto 99::CD,61372:CD,61376:CD,61377:CD,61379
61372 :: CALL :: call :: I :: v36 = p0 $null .getMinYear()::JM,61376:CL,25377
61376 :: EXPR :: assign :: Ljava/lang/Object :: v37 = v36 - #(1)::CF,61377
61377 :: PRED :: IF :: Z :: if (p1 $null  != v37) goto 99::CD,61378:CD,61379
61378 :: NORM :: compound :: J :: return #(-9223372036854775808 l)::DD,61300
61379 :: NORM :: compound :: J :: return v27::DD,61300
61414 :: ENTR :: entry :: null :: org.joda.time.field.DelegatedDateTimeField.getAsShortText(int,java.util.Locale)::CE,61415:CD,61423:CD,61429
61415 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.field.DelegatedDateTimeField.getAsShortText(int,java.util.Locale)::JM,58859:JM,61429
61423 :: CALL :: call :: Ljava/lang/String :: v7 = v5.getAsShortText(p1 $null , p2 $null )::JM,61429:CL,58863:CL,58881:CL,58828:CL,58844:CL,61433:CL,61414
61429 :: NORM :: compound :: Ljava/lang/String :: return v7::DD,61415
61433 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.getAsShortText(int,java.util.Locale)::CE,61434:CD,61439
61434 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.field.UnsupportedDateTimeField.getAsShortText(int,java.util.Locale)::JM,58859:JM,61429
61439 :: CALL :: call :: Ljava/lang/UnsupportedOperationException :: v6 = p0 $null .unsupported()::CL,20439
61444 :: ENTR :: entry :: null :: org.joda.time.chrono.GJLocaleSymbols.dayOfWeekValueToShortText(int)::CE,61445:CD,61456
61445 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.chrono.GJLocaleSymbols.dayOfWeekValueToShortText(int)::JM,58878
61449 :: EXPR :: reference :: [Ljava/lang/String :: v4 = p0 $null .iShortDaysOfWeek::
61452 :: EXPR :: reference :: Ljava/lang/Object :: v5 = v4[p1 $null ]::DD,61456
61456 :: NORM :: compound :: Ljava/lang/String :: return v5::CF,61445
61459 :: ENTR :: entry :: null :: org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToShortText(int)::CE,61460:CD,61471
61460 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToShortText(int)::JM,58896
61464 :: EXPR :: reference :: [Ljava/lang/String :: v4 = p0 $null .iShortMonths::
61467 :: EXPR :: reference :: Ljava/lang/Object :: v5 = v4[p1 $null ]::DD,61471
61471 :: NORM :: compound :: Ljava/lang/String :: return v5::CF,61460
61474 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.getAsText(int,java.util.Locale)::CE,61475:CD,61480
61475 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.field.UnsupportedDateTimeField.getAsText(int,java.util.Locale)::JM,58914:JM,61500
61480 :: CALL :: call :: Ljava/lang/UnsupportedOperationException :: v6 = p0 $null .unsupported()::CL,20439
61485 :: ENTR :: entry :: null :: org.joda.time.field.DelegatedDateTimeField.getAsText(int,java.util.Locale)::CE,61486:CD,61494:CD,61500
61486 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.field.DelegatedDateTimeField.getAsText(int,java.util.Locale)::JM,58914:JM,61500
61494 :: CALL :: call :: Ljava/lang/String :: v7 = v5.getAsText(p1 $null , p2 $null )::JM,61500:CL,58972:CL,61485:CL,58954:CL,58984:CL,61474:CL,58918:CL,58899:CL,58936
61500 :: NORM :: compound :: Ljava/lang/String :: return v7::DD,61486
61504 :: ENTR :: entry :: null :: org.joda.time.chrono.GJLocaleSymbols.halfdayValueToText(int)::CE,61505:CD,61516
61505 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.chrono.GJLocaleSymbols.halfdayValueToText(int)::JM,58933
61509 :: EXPR :: reference :: [Ljava/lang/String :: v4 = p0 $null .iHalfday::
61512 :: EXPR :: reference :: Ljava/lang/Object :: v5 = v4[p1 $null ]::DD,61516
61516 :: NORM :: compound :: Ljava/lang/String :: return v5::CF,61505
61519 :: ENTR :: entry :: null :: org.joda.time.chrono.GJLocaleSymbols.eraValueToText(int)::CE,61520:CD,61531
61520 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.chrono.GJLocaleSymbols.eraValueToText(int)::JM,58951
61524 :: EXPR :: reference :: [Ljava/lang/String :: v4 = p0 $null .iEras::
61527 :: EXPR :: reference :: Ljava/lang/Object :: v5 = v4[p1 $null ]::DD,61531
61531 :: NORM :: compound :: Ljava/lang/String :: return v5::CF,61520
61534 :: ENTR :: entry :: null :: org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToText(int)::CE,61535:CD,61546
61535 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToText(int)::JM,58969
61539 :: EXPR :: reference :: [Ljava/lang/String :: v4 = p0 $null .iMonths::
61542 :: EXPR :: reference :: Ljava/lang/Object :: v5 = v4[p1 $null ]::DD,61546
61546 :: NORM :: compound :: Ljava/lang/String :: return v5::CF,61535
61549 :: ENTR :: entry :: null :: org.joda.time.chrono.GJLocaleSymbols.dayOfWeekValueToText(int)::CE,61550:CD,61561
61550 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.chrono.GJLocaleSymbols.dayOfWeekValueToText(int)::JM,58999
61554 :: EXPR :: reference :: [Ljava/lang/String :: v4 = p0 $null .iDaysOfWeek::
61557 :: EXPR :: reference :: Ljava/lang/Object :: v5 = v4[p1 $null ]::DD,61561
61561 :: NORM :: compound :: Ljava/lang/String :: return v5::CF,61550
61564 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendText(org.joda.time.DateTimeFieldType)::CD,61570:JM,62603:JM,62606:CD,61582
61570 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v10 = new java.lang.IllegalArgumentException::
61582 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v9 = p0 $null .append0(v5)::CL,29725
61601 :: CALL :: call :: Lorg/joda/time/chrono/ISOChronology :: v6 = getInstance()::CL,37956
61621 :: EXPR :: modify :: Lorg/joda/time/DateTimeFieldType :: p0 $null .iType = p1 $null ::
61624 :: EXPR :: modify :: I :: p0 $null .iPivot = p2 $null ::
61627 :: EXPR :: modify :: Z :: p0 $null .iLenientParse = p3 $null ::
61638 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendShortText(org.joda.time.DateTimeFieldType)::CD,61644:JM,62603:JM,62606:CD,61656
61644 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v10 = new java.lang.IllegalArgumentException::
61656 :: CALL :: call :: Lorg/joda/time/format/DateTimeFormatterBuilder :: v9 = p0 $null .append0(v5)::CL,29725
61677 :: EXPR :: modify :: I :: p0 $null .iType = p1 $null ::
61680 :: EXPR :: modify :: Ljava/util/Map :: p0 $null .iParseLookup = p2 $null ::
61689 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear.getTwoDigitYear(long,org.joda.time.Chronology)::CE,61690:CD,61698:CD,61703:CD,61708:CD,61710:CD,61711:CD,61712:CD,61714
61690 :: EXIT :: exit :: I :: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear.getTwoDigitYear(long,org.joda.time.Chronology)::JM,59746
61698 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v7 = v5.getField(p2 $null )::CL,25774
61703 :: CALL :: call :: I :: v9 = v7.get(p1 $null )::JM,61714:JM,61708:JM,61709:CL,11080:CL,11124:CL,11257:CL,11220:CL,11096:CL,11064:CL,11188:CL,11306:CL,11316:CL,11048:CL,11005:CL,11032:CL,11150:CL,11204:CL,10987:CL,11241:CL,11332
61708 :: PRED :: IF :: Z :: if (v9 >= #(0)) goto 28::CF,61714:CD,61709
61709 :: EXPR :: assign :: Ljava/lang/Object :: v11 = -(v9)::DD,61714
61710 :: EXPR :: assign :: Ljava/lang/Object :: v14 = v12 % #(100)::CF,61711
61711 :: NORM :: compound :: I :: return v14::DD,61690
61712 :: NORM :: compound :: I :: return #(-1)::DD,61690
61714 :: EXPR :: assign :: null :: PHI v12 = v9, v11::DD,61710
61724 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.appendUnknownString(java.lang.Appendable,int)::CD,61729:CD,61730:CD,61738
61729 :: EXPR :: assign :: Ljava/lang/Object :: v5 = v10 + #(-1)::DD,61730:DD,61738
61730 :: PRED :: IF :: Z :: if (v5 < #(0)) goto 21::CD,61729:CD,61731:CD,61738
61731 :: CALL :: call :: Ljava/lang/Appendable :: v9 = p1 $null .append(#(65533))::JM,61738
61738 :: EXPR :: assign :: null :: PHI v10 = v5, p2 $null ::DD,61729
61748 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.Fraction.printTo(java.lang.Appendable,long,org.joda.time.Chronology)::CD,61758:CD,61766:CD,61772:CD,61777:CD,61778:CD,61869
61758 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v8 = v6.getField(p3 $null )::CL,25774
61763 :: EXPR :: reference :: I :: v9 = p0 $null .iMinDigits::DD,61869:DD,61871
61766 :: CALL :: call :: J :: v11 = v8.remainder(p2 $null )::JM,61777:CL,62660:CL,62817:CL,62741:CL,62833:CL,62615:CL,62691:CL,62850:CL,62775:CL,57119:CL,62708:CL,62802:CL,62630:CL,62645:CL,62758
61772 :: CALL :: call :: V :: appendUnknownString(p1 $null , v9)::CL,61724
61777 :: EXPR :: assign :: Z :: v15 = v11 == #(0 l)::DD,61778
61778 :: PRED :: IF :: Z :: if (v15 != #(0)) goto 70::CF,61869:CD,61779:CD,61780:CD,61788:CD,61802:CD,61803:CD,61804:CD,61805:CD,61816:CD,61820:CD,61829:CD,61870:CD,61871:CD,61872:CD,61873:CD,61874
61779 :: EXPR :: assign :: Ljava/lang/Object :: v61 = v64 + #(-1)::DD,61780:DD,61869
61780 :: PRED :: IF :: Z :: if (v61 < #(0)) goto 64::CD,61779:CD,61781:CD,61869
61781 :: CALL :: call :: Ljava/lang/Appendable :: v63 = p1 $null .append(#(48))::
61788 :: CALL :: call :: [J :: v18 = p0 $null .getFractionData(v11, v8)::CL,62860
61794 :: EXPR :: reference :: J :: v19 = v18[#(0)]::DD,61803:DD,61804:DD,61806:JM,61870
61798 :: EXPR :: reference :: J :: v21 = v18[#(1)]::DD,61802
61802 :: EXPR :: assign :: I :: v22 = CONVERT J to I v21::DD,61872:CF,61803
61803 :: EXPR :: assign :: Ljava/lang/Object :: v24 = v19 && #(2147483647 l)::DD,61804
61804 :: EXPR :: assign :: Z :: v25 = v24 == v19::DD,61805
61805 :: PRED :: IF :: Z :: if (v25 != #(0)) goto 113::CD,61806:CD,61807:CD,61812:CD,61870
61806 :: EXPR :: assign :: I :: v28 = CONVERT J to I v19::JM,61870
61807 :: CALL :: call :: Ljava/lang/String :: v30 = toString(v28)::JM,61870
61812 :: CALL :: call :: Ljava/lang/String :: v27 = toString(v19)::JM,61870
61816 :: CALL :: call :: I :: v33 = v31.length()::JM,61873:JM,61820
61820 :: PRED :: IF :: Z :: if (v33 >= v41) goto 158::CD,61821:CD,61826:CD,61827:CD,61871:CD,61872:CF,61829
61821 :: CALL :: call :: Ljava/lang/Appendable :: v36 = p1 $null .append(#(48))::
61826 :: EXPR :: assign :: Ljava/lang/Object :: v38 = v40 + #(-1)::DD,61871:CF,61827
61827 :: EXPR :: assign :: Ljava/lang/Object :: v39 = v41 + #(-1)::DD,61872
61829 :: PRED :: IF :: Z :: if (v40 >= v41) goto 244::CF,61873:CD,61830:CD,61843:CD,61847:CD,61862:CD,61874
61830 :: PRED :: IF :: Z :: if (v40 >= v48) goto 204::CD,61831:JM,61847
61831 :: PRED :: IF :: Z :: if (v47 <= #(1)) goto 204::CD,61832:CD,61833:CD,61838:JM,61847
61832 :: EXPR :: assign :: Ljava/lang/Object :: v42 = v47 - #(1)::JM,61838
61833 :: CALL :: call :: C :: v44 = v31.charAt(v42)::JM,61838
61838 :: PRED :: IF :: Z :: if (v44 == #(48)) goto 191::CD,61830:CD,61840:CD,61841:CD,61873:CD,61874
61840 :: EXPR :: assign :: Ljava/lang/Object :: v45 = v48 + #(-1)::DD,61874:CF,61841
61841 :: EXPR :: assign :: Ljava/lang/Object :: v46 = v47 + #(-1)::DD,61873
61843 :: CALL :: call :: I :: v50 = v31.length()::JM,61847
61847 :: PRED :: IF :: Z :: if (v47 >= v50) goto 244::CD,61848:CD,61862:CD,61875
61848 :: PRED :: IF :: Z :: if (v60 >= v47) goto 240::CD,61849:CD,61854:CD,61859:CD,61875
61849 :: CALL :: call :: C :: v56 = v31.charAt(v60)::
61854 :: CALL :: call :: Ljava/lang/Appendable :: v58 = p1 $null .append(v56)::
61859 :: EXPR :: assign :: Ljava/lang/Object :: v59 = v60 + #(1)::DD,61875
61862 :: CALL :: call :: Ljava/lang/Appendable :: v54 = p1 $null .append(v31)::
61869 :: EXPR :: assign :: null :: PHI v64 = v61, v9::DD,61779
61870 :: EXPR :: assign :: null :: PHI v31 = v30, v27::JM,61873:JM,61820:JM,61838:JM,61847
61871 :: EXPR :: assign :: null :: PHI v40 = v38, v9::CF,61872:DD,61826:DD,61829:DD,61830
61872 :: EXPR :: assign :: null :: PHI v41 = v39, v22::DD,61820:DD,61827:DD,61829:DD,61874
61873 :: EXPR :: assign :: null :: PHI v47 = v46, v33::CF,61874:DD,61831:DD,61832:DD,61841:DD,61847:DD,61848
61874 :: EXPR :: assign :: null :: PHI v48 = v45, v41::DD,61830:DD,61840
61875 :: EXPR :: assign :: null :: PHI v60 = v59, #(0)::DD,61848:DD,61859
61955 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName.print(long,org.joda.time.DateTimeZone,java.util.Locale)::CE,61956:CD,61962
61956 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName.print(long,org.joda.time.DateTimeZone,java.util.Locale)::
61962 :: PRED :: IF :: Z :: if (p2 $null  != #(null)) goto 8::CD,61963:CD,61967
61963 :: NORM :: compound :: Ljava/lang/String :: return #()::DD,61956
61964 :: EXPR :: reference :: I :: v7 = p0 $null .iType::DD,61967
61967 :: PRED :: IF :: null :: switch v7::CD,61968:CD,61974:CD,61975:CD,61981:CD,61982
61968 :: CALL :: call :: Ljava/lang/String :: v12 = p2 $null .getName(p1 $null , p3 $null )::JM,61974:CL,62976
61974 :: NORM :: compound :: Ljava/lang/String :: return v12::DD,61956
61975 :: CALL :: call :: Ljava/lang/String :: v10 = p2 $null .getShortName(p1 $null , p3 $null )::JM,61981:CL,63070
61981 :: NORM :: compound :: Ljava/lang/String :: return v10::DD,61956
61982 :: NORM :: compound :: Ljava/lang/String :: return #()::DD,61956
61994 :: ENTR :: entry :: null :: org.joda.time.format.FormatUtils.appendUnpaddedInteger(java.lang.Appendable,int)::CD,61999:JM,62005:JM,62006:CD,62056
61999 :: PRED :: IF :: Z :: if (p2 $null  >= #(0)) goto 38::CF,62056:CD,62000:CD,62005:CD,62014:JM,62006:JM,61999
62000 :: CALL :: call :: Ljava/lang/Appendable :: v7 = p1 $null .append(#(45))::JM,62005:JM,62006:JM,62056:JM,61999
62005 :: PRED :: IF :: Z :: if (p2 $null  == #(-2147483648)) goto 28::CD,62006:CD,62008:CD,62014:CD,62056:JM,62005:JM,61999
62006 :: EXPR :: assign :: Ljava/lang/Object :: v12 = -(p2 $null )::DD,62056
62008 :: CALL :: call :: Ljava/lang/Appendable :: v11 = p1 $null .append(#(2147483648))::JM,62005:JM,62006:JM,62056:JM,61999
62014 :: PRED :: IF :: Z :: if (v13 >= #(10)) goto 59::CD,62015:CD,62016:CD,62017:CD,62023
62015 :: EXPR :: assign :: Ljava/lang/Object :: v40 = v13 + #(48)::CF,62016
62016 :: EXPR :: assign :: C :: v41 = CONVERT I to C v40::JM,62005:JM,62006:JM,62056:JM,61999
62017 :: CALL :: call :: Ljava/lang/Appendable :: v43 = p1 $null .append(v41)::JM,62005:JM,62006:JM,62056:JM,61999
62023 :: PRED :: IF :: Z :: if (v13 >= #(100)) goto 109::CD,62024:CD,62025:CD,62026:CD,62027:CD,62028:CD,62029:CD,62034:CD,62035:CD,62036:CD,62037:CD,62038:CD,62039:CD,62040:CD,62046:CD,62050
62024 :: EXPR :: assign :: Ljava/lang/Object :: v21 = v13 + #(1)::DD,62025
62025 :: EXPR :: assign :: Ljava/lang/Object :: v23 = v21 * #(13421772)::DD,62026
62026 :: EXPR :: assign :: Ljava/lang/Object :: v25 = v23 ? #(27)::DD,62027:DD,62034:DD,62036
62027 :: EXPR :: assign :: Ljava/lang/Object :: v27 = v25 + #(48)::CF,62028
62028 :: EXPR :: assign :: C :: v28 = CONVERT I to C v27::JM,62005:JM,62006:JM,62056:JM,61999
62029 :: CALL :: call :: Ljava/lang/Appendable :: v30 = p1 $null .append(v28)::JM,62005:JM,62006:JM,62056:JM,61999
62034 :: EXPR :: assign :: Ljava/lang/Object :: v32 = v25 ? #(3)::CF,62035
62035 :: EXPR :: assign :: Ljava/lang/Object :: v33 = v13 - v32::DD,62037:CF,62036
62036 :: EXPR :: assign :: Ljava/lang/Object :: v34 = v25 ? #(1)::CF,62037
62037 :: EXPR :: assign :: Ljava/lang/Object :: v35 = v33 - v34::DD,62038
62038 :: EXPR :: assign :: Ljava/lang/Object :: v36 = v35 + #(48)::CF,62039
62039 :: EXPR :: assign :: C :: v37 = CONVERT I to C v36::JM,62005:JM,62006:JM,62056:JM,61999
62040 :: CALL :: call :: Ljava/lang/Appendable :: v39 = p1 $null .append(v37)::JM,62005:JM,62006:JM,62056:JM,61999
62046 :: CALL :: call :: Ljava/lang/String :: v17 = toString(v13)::
62050 :: CALL :: call :: Ljava/lang/Appendable :: v19 = p1 $null .append(v17)::JM,62005:JM,62006:JM,62056:JM,61999
62056 :: EXPR :: assign :: null :: PHI v13 = p2 $null , v12::DD,62014:DD,62015:DD,62023:DD,62024:DD,62035
62096 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.TextField.print(long,org.joda.time.Chronology,java.util.Locale)::CE,62097:CD,62106:CD,62114
62097 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.format.DateTimeFormatterBuilder.TextField.print(long,org.joda.time.Chronology,java.util.Locale)::
62106 :: CALL :: call :: Lorg/joda/time/DateTimeField :: v8 = v6.getField(p2 $null )::CL,25774
62111 :: EXPR :: reference :: Z :: v9 = p0 $null .iShort::DD,62114
62114 :: PRED :: IF :: Z :: if (v9 == #(0)) goto 31::CD,62115:CD,62121:CD,62122:CD,62128
62115 :: CALL :: call :: Ljava/lang/String :: v14 = v8.getAsShortText(p1 $null , p3 $null )::JM,62121:CL,55177:CL,55218:CL,55155:CL,55188
62121 :: NORM :: compound :: Ljava/lang/String :: return v14::DD,62097
62122 :: CALL :: call :: Ljava/lang/String :: v12 = v8.getAsText(p1 $null , p3 $null )::JM,62128:CL,55256:CL,55278:CL,55308:CL,55237
62128 :: NORM :: compound :: Ljava/lang/String :: return v12::DD,62097
62603 :: EXPR :: modify :: Lorg/joda/time/DateTimeFieldType :: p0 $null .iFieldType = p1 $null ::
62606 :: EXPR :: modify :: Z :: p0 $null .iShort = p2 $null ::
62615 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.remainder(long)::CE,62616:CD,62621:CD,62626
62616 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.remainder(long)::JM,61777:JM,62705:JM,62755:JM,62772:JM,62796:JM,62830:JM,62847:JM,63704
62621 :: CALL :: call :: J :: v7 = p0 $null .remainder(v5)::JM,62626:CL,62708
62626 :: NORM :: compound :: J :: return v7::CF,62616
62630 :: ENTR :: entry :: null :: org.joda.time.field.BaseDateTimeField.remainder(long)::CE,62631:CD,62635:CD,62640:CD,62641
62631 :: EXIT :: exit :: J :: org.joda.time.field.BaseDateTimeField.remainder(long)::JM,61777:JM,62705:JM,62755:JM,62772:JM,62796:JM,62830:JM,62847:JM,63704
62635 :: CALL :: call :: J :: v5 = p0 $null .roundFloor(p1 $null )::JM,62640:CL,48947:CL,49087:CL,49010:CL,48742:CL,48993:CL,48759:CL,54364:CL,49065:CL,49027:CL,48964:CL,49124:CL,48902:CL,48834
62640 :: EXPR :: assign :: Ljava/lang/Object :: v6 = p1 $null  - v5::CF,62641
62641 :: NORM :: compound :: J :: return v6::DD,62631
62645 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicYearDateTimeField.remainder(long)::CE,62646:CD,62650:CD,62655:CD,62656
62646 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicYearDateTimeField.remainder(long)::JM,61777:JM,62705:JM,62755:JM,62772:JM,62796:JM,62830:JM,62847:JM,63704
62650 :: CALL :: call :: J :: v5 = p0 $null .roundFloor(p1 $null )::JM,62655:CL,49065
62655 :: EXPR :: assign :: Ljava/lang/Object :: v6 = p1 $null  - v5::CF,62656
62656 :: NORM :: compound :: J :: return v6::DD,62646
62660 :: ENTR :: entry :: null :: org.joda.time.field.DividedDateTimeField.remainder(long)::CE,62661:CD,62669:CD,62674:CD,62679:CD,62685
62661 :: EXIT :: exit :: J :: org.joda.time.field.DividedDateTimeField.remainder(long)::JM,61777:JM,62705:JM,62755:JM,62772:JM,62796:JM,62830:JM,62847:JM,63704
62669 :: CALL :: call :: J :: v7 = v5.remainder(p1 $null )::CL,62660:CL,62817:CL,62741:CL,62833:CL,62615:CL,62691:CL,62850:CL,62775:CL,57119:CL,62708:CL,63690:CL,62802:CL,62630:CL,62645:CL,62758
62674 :: CALL :: call :: I :: v9 = p0 $null .get(v7)::CL,11150
62679 :: CALL :: call :: J :: v11 = p0 $null .set(p1 $null , v9)::JM,62685:CL,17719
62685 :: NORM :: compound :: J :: return v11::DD,62661
62691 :: ENTR :: entry :: null :: org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long)::CE,62692:CD,62700:CD,62705
62692 :: EXIT :: exit :: J :: org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long)::JM,61777:JM,62705:JM,62755:JM,62772:JM,62796:JM,62830:JM,62847:JM,63704
62700 :: CALL :: call :: J :: v7 = v5.remainder(p1 $null )::JM,62705:CL,62660:CL,62817:CL,62741:CL,62833:CL,62615:CL,62691:CL,62850:CL,62775:CL,57119:CL,62708:CL,63690:CL,62802:CL,62630:CL,62645:CL,62758
62705 :: NORM :: compound :: J :: return v7::DD,62692
62708 :: ENTR :: entry :: null :: org.joda.time.field.PreciseDurationDateTimeField.remainder(long)::CE,62709:CD,62713:CD,62714:JM,62720:JM,62718
62709 :: EXIT :: exit :: J :: org.joda.time.field.PreciseDurationDateTimeField.remainder(long)::JM,61777:JM,62626:JM,62705:JM,62755:JM,62772:JM,62796:JM,62830:JM,62847:JM,63704
62713 :: EXPR :: assign :: Z :: v5 = p1 $null  == #(0 l)::DD,62714
62714 :: PRED :: IF :: Z :: if (v5 < #(0)) goto 15::CD,62718:CD,62719:CD,62720:CD,62724:CD,62728:CD,62729:CD,62730
62715 :: EXPR :: reference :: J :: v14 = p0 $null .iUnitMillis::DD,62718
62718 :: EXPR :: assign :: Ljava/lang/Object :: v15 = p1 $null  % v14::CF,62719
62719 :: NORM :: compound :: J :: return v15::CF,62709
62720 :: EXPR :: assign :: Ljava/lang/Object :: v8 = p1 $null  + #(1 l)::DD,62724
62721 :: EXPR :: reference :: J :: v9 = p0 $null .iUnitMillis::DD,62724
62724 :: EXPR :: assign :: Ljava/lang/Object :: v10 = v8 % v9::DD,62728
62725 :: EXPR :: reference :: J :: v11 = p0 $null .iUnitMillis::DD,62728
62728 :: EXPR :: assign :: Ljava/lang/Object :: v12 = v10 + v11::DD,62729
62729 :: EXPR :: assign :: Ljava/lang/Object :: v13 = v12 - #(1 l)::CF,62730
62730 :: NORM :: compound :: J :: return v13::CF,62709
62741 :: ENTR :: entry :: null :: org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long)::CE,62742:CD,62750:CD,62755
62742 :: EXIT :: exit :: J :: org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long)::JM,61777:JM,62705:JM,62755:JM,62772:JM,62796:JM,62830:JM,62847:JM,63704
62750 :: CALL :: call :: J :: v7 = v5.remainder(p1 $null )::JM,62755:CL,62660:CL,62817:CL,62741:CL,62833:CL,62615:CL,62691:CL,62850:CL,62775:CL,57119:CL,62708:CL,63690:CL,62802:CL,62630:CL,62645:CL,62758
62755 :: NORM :: compound :: J :: return v7::DD,62742
62758 :: ENTR :: entry :: null :: org.joda.time.field.OffsetDateTimeField.remainder(long)::CE,62759:CD,62767:CD,62772
62759 :: EXIT :: exit :: J :: org.joda.time.field.OffsetDateTimeField.remainder(long)::JM,61777:JM,62705:JM,62755:JM,62772:JM,62796:JM,62830:JM,62847:JM,63704
62767 :: CALL :: call :: J :: v7 = v5.remainder(p1 $null )::JM,62772:CL,62660:CL,62817:CL,62741:CL,62833:CL,62615:CL,62691:CL,62850:CL,62775:CL,57119:CL,62708:CL,63690:CL,62802:CL,62630:CL,62645:CL,62758
62772 :: NORM :: compound :: J :: return v7::DD,62759
62775 :: ENTR :: entry :: null :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.remainder(long)::CE,62776:CD,62783:CD,62791:CD,62796
62776 :: EXIT :: exit :: J :: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.remainder(long)::JM,61777:JM,62705:JM,62755:JM,62772:JM,62796:JM,62830:JM,62847:JM,63704
62783 :: CALL :: call :: J :: v6 = v4.convertUTCToLocal(p1 $null )::CL,20087
62791 :: CALL :: call :: J :: v9 = v7.remainder(v6)::JM,62796:CL,62660:CL,62817:CL,62741:CL,62833:CL,62615:CL,62691:CL,62850:CL,62775:CL,57119:CL,62708:CL,62802:CL,62630:CL,62645:CL,62758
62796 :: NORM :: compound :: J :: return v9::DD,62776
62802 :: ENTR :: entry :: null :: org.joda.time.chrono.BasicMonthOfYearDateTimeField.remainder(long)::CE,62803:CD,62807:CD,62812:CD,62813
62803 :: EXIT :: exit :: J :: org.joda.time.chrono.BasicMonthOfYearDateTimeField.remainder(long)::JM,61777:JM,62705:JM,62755:JM,62772:JM,62796:JM,62830:JM,62847:JM,63704
62807 :: CALL :: call :: J :: v5 = p0 $null .roundFloor(p1 $null )::JM,62812:CL,48834
62812 :: EXPR :: assign :: Ljava/lang/Object :: v6 = p1 $null  - v5::CF,62813
62813 :: NORM :: compound :: J :: return v6::DD,62803
62817 :: ENTR :: entry :: null :: org.joda.time.field.DelegatedDateTimeField.remainder(long)::CE,62818:CD,62825:CD,62830
62818 :: EXIT :: exit :: J :: org.joda.time.field.DelegatedDateTimeField.remainder(long)::JM,61777:JM,62705:JM,62755:JM,62772:JM,62796:JM,62830:JM,62847:JM,63704
62825 :: CALL :: call :: J :: v6 = v4.remainder(p1 $null )::JM,62830:CL,62660:CL,62817:CL,62741:CL,62833:CL,62615:CL,62691:CL,62850:CL,62775:CL,57119:CL,62708:CL,62802:CL,62630:CL,62645:CL,62758
62830 :: NORM :: compound :: J :: return v6::DD,62818
62833 :: ENTR :: entry :: null :: org.joda.time.field.RemainderDateTimeField.remainder(long)::CE,62834:CD,62842:CD,62847
62834 :: EXIT :: exit :: J :: org.joda.time.field.RemainderDateTimeField.remainder(long)::JM,61777:JM,62705:JM,62755:JM,62772:JM,62796:JM,62830:JM,62847:JM,63704
62842 :: CALL :: call :: J :: v7 = v5.remainder(p1 $null )::JM,62847:CL,62660:CL,62817:CL,62741:CL,62833:CL,62615:CL,62691:CL,62850:CL,62775:CL,57119:CL,62708:CL,63690:CL,62802:CL,62630:CL,62645:CL,62758
62847 :: NORM :: compound :: J :: return v7::DD,62834
62850 :: ENTR :: entry :: null :: org.joda.time.field.UnsupportedDateTimeField.remainder(long)::CE,62851:CD,62855
62851 :: EXIT :: exit :: J :: org.joda.time.field.UnsupportedDateTimeField.remainder(long)::JM,61777:JM,62705:JM,62755:JM,62772:JM,62796:JM,62830:JM,62847:JM,63704
62855 :: CALL :: call :: Ljava/lang/UnsupportedOperationException :: v5 = p0 $null .unsupported()::CL,20439
62860 :: ENTR :: entry :: null :: org.joda.time.format.DateTimeFormatterBuilder.Fraction.getFractionData(long,org.joda.time.DateTimeField)::CE,62861:CD,62866:CD,62870:CD,62877:CD,62896:CD,62897:CD,62898:CD,62899:CD,62903:CD,62904:CD,62905:CD,62910:CD,62915:CD,62916:CD,62917
62861 :: EXIT :: exit :: [J :: org.joda.time.format.DateTimeFormatterBuilder.Fraction.getFractionData(long,org.joda.time.DateTimeField)::
62866 :: CALL :: call :: Lorg/joda/time/DurationField :: v6 = p2 $null .getDurationField()::CL,33678:CL,33687:CL,44465:CL,33709:CL,33730:CL,33718:CL,33933:CL,33669:CL,33700
62870 :: CALL :: call :: J :: v8 = v6.getUnitMillis()::JM,62896:JM,62898:JM,62905:CL,21151:CL,21164:CL,21125:CL,21116:CL,21131:CL,21170
62874 :: EXPR :: reference :: I :: v9 = p0 $null .iMaxDigits::DD,62916
62877 :: PRED :: IF :: null :: switch v36::CD,62917
62896 :: EXPR :: assign :: Ljava/lang/Object :: v30 = v8 * v29::DD,62897
62897 :: EXPR :: assign :: Ljava/lang/Object :: v31 = v30 / v29::DD,62898
62898 :: EXPR :: assign :: Z :: v32 = v31 == v8::DD,62899
62899 :: PRED :: IF :: Z :: if (v32 != #(0)) goto 268::CD,62877:CD,62896:CD,62897:CD,62898:CD,62901:CD,62916:CD,62917
62901 :: EXPR :: assign :: Ljava/lang/Object :: v35 = v36 + #(-1)::DD,62916
62903 :: NORM :: declaration :: [J :: v38 = new []::DD,62915:CF,62904
62904 :: EXPR :: assign :: Ljava/lang/Object :: v39 = p1 $null  * v29::DD,62905
62905 :: EXPR :: assign :: Ljava/lang/Object :: v40 = v39 / v8::DD,62906
62906 :: EXPR :: modify :: J :: v38[#(0)] = v40::
62910 :: EXPR :: assign :: J :: v42 = CONVERT I to J v36::DD,62911
62911 :: EXPR :: modify :: J :: v38[#(1)] = v42::
62915 :: NORM :: compound :: [J :: return v38::DD,62861
62916 :: EXPR :: assign :: null :: PHI v36 = v35, v9::CF,62877:DD,62901:DD,62910
62917 :: EXPR :: assign :: null :: PHI v29 = #(1 l), #(10 l), #(100 l), #(1000 l), #(10000 l), #(100000 l), #(1000000 l), #(10000000 l), #(100000000 l), #(1000000000 l), #(10000000000 l), #(100000000000 l), #(1000000000000 l), #(10000000000000 l), #(100000000000000 l), #(1000000000000000 l), #(10000000000000000 l), #(100000000000000000 l), #(1000000000000000000 l)::DD,62896:DD,62897:DD,62904
62976 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.getName(long,java.util.Locale)::CE,62977:CD,62982:CD,62986:CD,62991
62977 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.DateTimeZone.getName(long,java.util.Locale)::JM,61974
62982 :: PRED :: IF :: Z :: if (p2 $null  != #(null)) goto 10::CD,62983
62983 :: CALL :: call :: Ljava/util/Locale :: v7 = getDefault()::
62986 :: CALL :: call :: Ljava/lang/String :: v10 = p0 $null .getNameKey(p1 $null )::JM,62991:CL,18924:CL,18943:CL,18839:CL,18950
62991 :: PRED :: IF :: Z :: if (v10 != #(null)) goto 25::CD,62995:CD,62996:CD,62999:CD,63000:CD,63029:CD,63042
62992 :: EXPR :: reference :: Ljava/lang/String :: v29 = p0 $null .iID::DD,62995
62995 :: NORM :: compound :: Ljava/lang/String :: return v29::DD,62977
62996 :: CALL :: call :: Lorg/joda/time/tz/NameProvider :: v12 = getNameProvider()::JM,62999:CL,63707
62999 :: EXPR :: assign :: Z :: v13=v12 INSTANCEOF org.joda.time.tz.DefaultNameProvider::DD,63000
63000 :: PRED :: IF :: Z :: if (v13 == #(0)) goto 67::CD,63005:CD,63010:CD,63022:CD,63042
63005 :: CALL :: call :: Z :: v21 = p0 $null .isStandardOffset(p1 $null )::CL,63748
63010 :: CALL :: call :: Ljava/lang/String :: v23 = v18.getName(v8, v19, v10, v21)::JM,63042:CL,63773
63022 :: CALL :: call :: Ljava/lang/String :: v17 = v12.getName(v8, v15, v10)::JM,63042:CL,63808
63029 :: PRED :: IF :: Z :: if (v24 == #(null)) goto 89::CD,63030:CD,63031:CD,63036:CD,63040
63030 :: NORM :: compound :: Ljava/lang/String :: return v24::DD,62977
63031 :: CALL :: call :: I :: v26 = p0 $null .getOffset(p1 $null )::CL,18682:CL,18565:CL,18672:CL,18689
63036 :: CALL :: call :: Ljava/lang/String :: v28 = printOffset(v26)::JM,63040:CL,46807
63040 :: NORM :: compound :: Ljava/lang/String :: return v28::DD,62977
63042 :: EXPR :: assign :: null :: PHI v24 = v23, v17::DD,63029:DD,63030
63070 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.getShortName(long,java.util.Locale)::CE,63071:CD,63076:CD,63080:CD,63085
63071 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.DateTimeZone.getShortName(long,java.util.Locale)::JM,61981
63076 :: PRED :: IF :: Z :: if (p2 $null  != #(null)) goto 10::CD,63077
63077 :: CALL :: call :: Ljava/util/Locale :: v7 = getDefault()::
63080 :: CALL :: call :: Ljava/lang/String :: v10 = p0 $null .getNameKey(p1 $null )::JM,63085:CL,18924:CL,18943:CL,18839:CL,18950
63085 :: PRED :: IF :: Z :: if (v10 != #(null)) goto 25::CD,63089:CD,63090:CD,63093:CD,63094:CD,63123:CD,63136
63086 :: EXPR :: reference :: Ljava/lang/String :: v29 = p0 $null .iID::DD,63089
63089 :: NORM :: compound :: Ljava/lang/String :: return v29::DD,63071
63090 :: CALL :: call :: Lorg/joda/time/tz/NameProvider :: v12 = getNameProvider()::JM,63093:CL,63707
63093 :: EXPR :: assign :: Z :: v13=v12 INSTANCEOF org.joda.time.tz.DefaultNameProvider::DD,63094
63094 :: PRED :: IF :: Z :: if (v13 == #(0)) goto 67::CD,63099:CD,63104:CD,63116:CD,63136
63099 :: CALL :: call :: Z :: v21 = p0 $null .isStandardOffset(p1 $null )::CL,63748
63104 :: CALL :: call :: Ljava/lang/String :: v23 = v18.getShortName(v8, v19, v10, v21)::JM,63136:CL,63840
63116 :: CALL :: call :: Ljava/lang/String :: v17 = v12.getShortName(v8, v15, v10)::JM,63136:CL,63875
63123 :: PRED :: IF :: Z :: if (v24 == #(null)) goto 89::CD,63124:CD,63125:CD,63130:CD,63134
63124 :: NORM :: compound :: Ljava/lang/String :: return v24::DD,63071
63125 :: CALL :: call :: I :: v26 = p0 $null .getOffset(p1 $null )::CL,18682:CL,18565:CL,18672:CL,18689
63130 :: CALL :: call :: Ljava/lang/String :: v28 = printOffset(v26)::JM,63134:CL,46807
63134 :: NORM :: compound :: Ljava/lang/String :: return v28::DD,63071
63136 :: EXPR :: assign :: null :: PHI v24 = v23, v17::DD,63123:DD,63124
63181 :: EXPR :: modify :: Lorg/joda/time/DateTimeField :: p0 $null .iField = p1 $null ::
63184 :: EXPR :: modify :: Lorg/joda/time/DurationField :: p0 $null .iRangeDurationField = p2 $null ::
63187 :: PRED :: IF :: Z :: if (p3 $null  != #(null)) goto 41::CD,63188:CD,63197
63188 :: CALL :: call :: Lorg/joda/time/DateTimeFieldType :: v9 = p1 $null .getType()::JM,63197:CL,25739:CL,26840:CL,26849
63193 :: EXPR :: modify :: Lorg/joda/time/DateTimeFieldType :: p0 $null .iType = v10::
63197 :: EXPR :: assign :: null :: PHI v10 = v9, p3 $null ::DD,63193
63690 :: ENTR :: entry :: null :: org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long)::CE,63691:CD,63699:CD,63704
63691 :: EXIT :: exit :: J :: org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long)::JM,62705:JM,62755:JM,62772:JM,62847:JM,63704
63699 :: CALL :: call :: J :: v7 = v5.remainder(p1 $null )::JM,63704:CL,62660:CL,62817:CL,62741:CL,62833:CL,62615:CL,62691:CL,62850:CL,62775:CL,57119:CL,62708:CL,63690:CL,62802:CL,62630:CL,62645:CL,62758
63704 :: NORM :: compound :: J :: return v7::DD,63691
63707 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.getNameProvider()::CE,63708:CD,63710:CD,63712:CD,63716:CD,63717:CD,63737:CD,63738
63708 :: EXIT :: exit :: Lorg/joda/time/tz/NameProvider :: org.joda.time.DateTimeZone.getNameProvider()::JM,62999:JM,63093
63710 :: EXPR :: reference :: Ljava/util/concurrent/atomic/AtomicReference :: v2 = org.joda.time.DateTimeZone.cNameProvider::JM,63712:JM,63716
63712 :: CALL :: call :: Ljava/lang/Object :: v4 = v2.get()::JM,63712:JM,63716
63716 :: EXPR :: assign :: Ljava/lang/Object :: v5 = CHECKCAST v4::DD,63717:DD,63738
63717 :: PRED :: IF :: Z :: if (v5 != #(null)) goto 40::CF,63738:CD,63718:CD,63721:CD,63723:CD,63729
63718 :: CALL :: call :: Lorg/joda/time/tz/NameProvider :: v8 = getDefaultNameProvider()::JM,63729:JM,63738:JM,63723:CL,63907
63721 :: EXPR :: reference :: Ljava/util/concurrent/atomic/AtomicReference :: v9 = org.joda.time.DateTimeZone.cNameProvider::JM,63729:JM,63723
63723 :: CALL :: call :: Z :: v11 = v9.compareAndSet(#(null), v8)::JM,63729:JM,63723:JM,63738
63729 :: PRED :: IF :: Z :: if (v11 != #(0)) goto 40::CF,63738:CD,63730:CD,63732:CD,63736
63730 :: EXPR :: reference :: Ljava/util/concurrent/atomic/AtomicReference :: v13 = org.joda.time.DateTimeZone.cNameProvider::JM,63732:JM,63736
63732 :: CALL :: call :: Ljava/lang/Object :: v15 = v13.get()::JM,63732:JM,63736
63736 :: EXPR :: assign :: Ljava/lang/Object :: v16 = CHECKCAST v15::DD,63738
63737 :: NORM :: compound :: Lorg/joda/time/tz/NameProvider :: return v17::DD,63708
63738 :: EXPR :: assign :: null :: PHI v17 = v5, v8, v16::CF,63737
63748 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.isStandardOffset(long)::CD,63753:CD,63758
63753 :: CALL :: call :: I :: v5 = p0 $null .getOffset(p1 $null )::CL,18682:CL,18565:CL,18672:CL,18689
63758 :: CALL :: call :: I :: v7 = p0 $null .getStandardOffset(p1 $null )::CL,18793:CL,18803:CL,18832:CL,18708
63773 :: ENTR :: entry :: null :: org.joda.time.tz.DefaultNameProvider.getName(java.util.Locale,java.lang.String,java.lang.String,boolean)::CE,63774:CD,63781:CD,63789:CD,63795:CD,63796
63774 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.tz.DefaultNameProvider.getName(java.util.Locale,java.lang.String,java.lang.String,boolean)::JM,63042
63781 :: CALL :: call :: [Ljava/lang/String :: v8 = p0 $null .getNameSet(p1 $null , p2 $null , p3 $null , p4 $null )::JM,63789:CL,63954
63789 :: PRED :: IF :: Z :: if (v8 != #(null)) goto 23::CD,63796
63791 :: EXPR :: reference :: Ljava/lang/Object :: v11 = v8[#(1)]::DD,63796
63795 :: NORM :: compound :: Ljava/lang/String :: return v12::DD,63774
63796 :: EXPR :: assign :: null :: PHI v12 = #(null), v11::CF,63795
63808 :: ENTR :: entry :: null :: org.joda.time.tz.DefaultNameProvider.getName(java.util.Locale,java.lang.String,java.lang.String)::CE,63809:CD,63815:CD,63822:CD,63828:CD,63829
63809 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.tz.DefaultNameProvider.getName(java.util.Locale,java.lang.String,java.lang.String)::JM,63042
63815 :: CALL :: call :: [Ljava/lang/String :: v7 = p0 $null .getNameSet(p1 $null , p2 $null , p3 $null )::JM,63822:CL,64264
63822 :: PRED :: IF :: Z :: if (v7 != #(null)) goto 21::CD,63829
63824 :: EXPR :: reference :: Ljava/lang/Object :: v10 = v7[#(1)]::DD,63829
63828 :: NORM :: compound :: Ljava/lang/String :: return v11::DD,63809
63829 :: EXPR :: assign :: null :: PHI v11 = #(null), v10::CF,63828
63840 :: ENTR :: entry :: null :: org.joda.time.tz.DefaultNameProvider.getShortName(java.util.Locale,java.lang.String,java.lang.String,boolean)::CE,63841:CD,63848:CD,63856:CD,63862:CD,63863
63841 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.tz.DefaultNameProvider.getShortName(java.util.Locale,java.lang.String,java.lang.String,boolean)::JM,63136
63848 :: CALL :: call :: [Ljava/lang/String :: v8 = p0 $null .getNameSet(p1 $null , p2 $null , p3 $null , p4 $null )::JM,63856:CL,63954
63856 :: PRED :: IF :: Z :: if (v8 != #(null)) goto 23::CD,63863
63858 :: EXPR :: reference :: Ljava/lang/Object :: v11 = v8[#(0)]::DD,63863
63862 :: NORM :: compound :: Ljava/lang/String :: return v12::DD,63841
63863 :: EXPR :: assign :: null :: PHI v12 = #(null), v11::CF,63862
63875 :: ENTR :: entry :: null :: org.joda.time.tz.DefaultNameProvider.getShortName(java.util.Locale,java.lang.String,java.lang.String)::CE,63876:CD,63882:CD,63889:CD,63895:CD,63896
63876 :: EXIT :: exit :: Ljava/lang/String :: org.joda.time.tz.DefaultNameProvider.getShortName(java.util.Locale,java.lang.String,java.lang.String)::JM,63136
63882 :: CALL :: call :: [Ljava/lang/String :: v7 = p0 $null .getNameSet(p1 $null , p2 $null , p3 $null )::JM,63889:CL,64264
63889 :: PRED :: IF :: Z :: if (v7 != #(null)) goto 21::CD,63896
63891 :: EXPR :: reference :: Ljava/lang/Object :: v10 = v7[#(0)]::DD,63896
63895 :: NORM :: compound :: Ljava/lang/String :: return v11::DD,63876
63896 :: EXPR :: assign :: null :: PHI v11 = #(null), v10::CF,63895
63907 :: ENTR :: entry :: null :: org.joda.time.DateTimeZone.getDefaultNameProvider()::CE,63908:CD,63910:CD,63914:CD,63932:CD,63937:CD,63940:CD,63941:CD,63942
63908 :: EXIT :: exit :: Lorg/joda/time/tz/NameProvider :: org.joda.time.DateTimeZone.getDefaultNameProvider()::JM,63729:JM,63738:JM,63723
63910 :: CALL :: call :: Ljava/lang/String :: v5 = getProperty(#(org.joda.time.DateTim...))::JM,63923:JM,63910:JM,63914:JM,63915:JM,63919
63914 :: PRED :: IF :: Z :: if (v5 == #(null)) goto 36::CF,63940:CD,63915:CD,63919:CD,63923
63915 :: CALL :: call :: Ljava/lang/Class :: v7 = forName(v5)::JM,63923:JM,63915:JM,63919
63919 :: CALL :: call :: Ljava/lang/Object :: v9 = v7.newInstance()::JM,63923:JM,63919
63923 :: EXPR :: assign :: Ljava/lang/Object :: v10 = CHECKCAST v9::DD,63940
63932 :: PRED :: IF :: Z :: if (v17 != #(null)) goto 53::CF,63942:CF,63933:JM,64645:JM,64652
63933 :: NORM :: declaration :: Lorg/joda/time/tz/DefaultNameProvider :: v19 = new org.joda.time.tz.DefaultNameProvider::DD,63942
63937 :: NORM :: compound :: Lorg/joda/time/tz/NameProvider :: return v21::DD,63908
63940 :: EXPR :: assign :: null :: PHI v15 = #(null), v10::DD,63941
63941 :: EXPR :: assign :: null :: PHI v17 = v15, #(null)::DD,63932:DD,63942
63942 :: EXPR :: assign :: null :: PHI v21 = v17, v19::CF,63937
63954 :: ENTR :: entry :: null :: org.joda.time.tz.DefaultNameProvider.getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)::CE,63955:CD,63962:JM,63971:JM,63963:JM,63964:JM,64143
63955 :: EXIT :: exit :: [Ljava/lang/String :: org.joda.time.tz.DefaultNameProvider.getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)::JM,63789:JM,63856
63962 :: PRED :: IF :: Z :: if (p1 $null  == #(null)) goto 13::CD,63963:CD,63965
63963 :: PRED :: IF :: Z :: if (p2 $null  == #(null)) goto 13::CD,63964:CD,63965
63964 :: PRED :: IF :: Z :: if (p3 $null  != #(null)) goto 17::CD,63965:CD,63966:CD,63971:CD,63980:CD,63985:CD,63986:CD,64000:CD,64005:CD,64006:CD,64135:CD,64140:CD,64141:CD,64142:CD,64143:JM,63964
63965 :: NORM :: compound :: [Ljava/lang/String :: return #(null)::DD,63955
63966 :: CALL :: call :: Z :: v10 = p2 $null .startsWith(#(Etc/))::JM,63971:JM,63964:JM,64143
63971 :: PRED :: IF :: Z :: if (v10 == #(0)) goto 30::CF,64143:CD,63972:JM,63971:JM,63964
63972 :: CALL :: call :: Ljava/lang/String :: v14 = p2 $null .substring(#(4))::JM,63971:JM,63964:JM,64143
63980 :: CALL :: call :: Ljava/lang/Object :: v18 = v16.get(p1 $null )::JM,63985
63985 :: EXPR :: assign :: Ljava/lang/Object :: v19 = CHECKCAST v18::DD,63986
63986 :: PRED :: IF :: Z :: if (v19 != #(null)) goto 66::CD,63990:CD,63994
63990 :: CALL :: call :: Ljava/util/HashMap :: v22 = p0 $null .createCache()::CL,64665
63994 :: CALL :: call :: Ljava/lang/Object :: v24 = v20.put(p1 $null , v22)::
64000 :: CALL :: call :: Ljava/lang/Object :: v27 = v25.get(v15)::JM,64005
64005 :: EXPR :: assign :: Ljava/lang/Object :: v28 = CHECKCAST v27::DD,64006
64006 :: PRED :: IF :: Z :: if (v28 != #(null)) goto 319::CD,64007:CD,64011:CD,64019:CD,64023:CD,64027:CD,64028:CD,64049:CD,64053:CD,64057:CD,64058:CD,64079:CD,64145:CD,64146:CD,64147:CD,64148
64007 :: CALL :: call :: Ljava/util/HashMap :: v30 = p0 $null .createCache()::CL,64665
64011 :: CALL :: call :: Ljava/lang/Object :: v32 = v25.put(v15, v30)::
64019 :: CALL :: call :: Ljava/text/DateFormatSymbols :: v35 = getDateFormatSymbols(v33)::JM,64023:JM,64027:CL,58142
64023 :: CALL :: call :: [[Ljava/lang/String :: v37 = v35.getZoneStrings()::JM,64023:JM,64027
64027 :: EXPR :: assign :: I :: v38 = v37.length::DD,64028:CF,64145
64028 :: PRED :: IF :: Z :: if (v47 >= v38) goto 174::CF,64146:CD,64033
64029 :: EXPR :: reference :: Ljava/lang/Object :: v39 = v37[v47]::DD,64033:DD,64034:DD,64146
64033 :: PRED :: IF :: Z :: if (v39 == #(null)) goto 167::CD,64028:CD,64034:CD,64035:CD,64047:CD,64145:CD,64146
64034 :: EXPR :: assign :: I :: v40 = v39.length::DD,64035
64035 :: PRED :: IF :: Z :: if (v40 < #(5)) goto 167::CD,64028:CD,64040:CD,64045:CD,64047:CD,64145:CD,64146
64036 :: EXPR :: reference :: Ljava/lang/Object :: v42 = v39[#(0)]::JM,64045
64040 :: CALL :: call :: Z :: v44 = v15.equals(v42)::JM,64045
64045 :: PRED :: IF :: Z :: if (v44 == #(0)) goto 167::CD,64028:CD,64047:CD,64145:CD,64146
64047 :: EXPR :: assign :: Ljava/lang/Object :: v46 = v47 + #(1)::DD,64145
64049 :: CALL :: call :: Ljava/text/DateFormatSymbols :: v50 = getDateFormatSymbols(p1 $null )::JM,64053:JM,64057:CL,58142
64053 :: CALL :: call :: [[Ljava/lang/String :: v52 = v50.getZoneStrings()::JM,64053:JM,64057
64057 :: EXPR :: assign :: I :: v53 = v52.length::DD,64058:CF,64147
64058 :: PRED :: IF :: Z :: if (v60 >= v53) goto 249::CF,64148:CD,64063
64059 :: EXPR :: reference :: Ljava/lang/Object :: v54 = v52[v60]::DD,64063:DD,64064:DD,64148
64063 :: PRED :: IF :: Z :: if (v54 == #(null)) goto 241::CD,64058:CD,64064:CD,64065:CD,64077:CD,64147:CD,64148
64064 :: EXPR :: assign :: I :: v55 = v54.length::DD,64065
64065 :: PRED :: IF :: Z :: if (v55 < #(5)) goto 241::CD,64058:CD,64070:CD,64075:CD,64077:CD,64147:CD,64148
64066 :: EXPR :: reference :: Ljava/lang/Object :: v56 = v54[#(0)]::JM,64075
64070 :: CALL :: call :: Z :: v58 = v15.equals(v56)::JM,64075
64075 :: PRED :: IF :: Z :: if (v58 == #(0)) goto 241::CD,64058:CD,64077:CD,64147:CD,64148
64077 :: EXPR :: assign :: Ljava/lang/Object :: v59 = v60 + #(1)::DD,64147
64079 :: PRED :: IF :: Z :: if (v48 == #(null)) goto 319::CD,64080
64080 :: PRED :: IF :: Z :: if (v61 == #(null)) goto 319::CD,64083:CD,64100:CD,64108:CD,64125
64083 :: NORM :: declaration :: [Ljava/lang/String :: v64 = new java.lang.String[]::
64084 :: EXPR :: reference :: Ljava/lang/Object :: v65 = v61[#(2)]::DD,64088
64088 :: EXPR :: modify :: Ljava/lang/Object :: v64[#(0)] = v65::
64092 :: EXPR :: reference :: Ljava/lang/Object :: v66 = v61[#(1)]::DD,64096
64096 :: EXPR :: modify :: Ljava/lang/Object :: v64[#(1)] = v66::
64100 :: CALL :: call :: Ljava/lang/Object :: v68 = v30.put(v62, v64)::
64108 :: NORM :: declaration :: [Ljava/lang/String :: v70 = new java.lang.String[]::
64109 :: EXPR :: reference :: Ljava/lang/Object :: v71 = v61[#(4)]::DD,64113
64113 :: EXPR :: modify :: Ljava/lang/Object :: v70[#(0)] = v71::
64117 :: EXPR :: reference :: Ljava/lang/Object :: v73 = v61[#(3)]::DD,64121
64121 :: EXPR :: modify :: Ljava/lang/Object :: v70[#(1)] = v73::
64125 :: CALL :: call :: Ljava/lang/Object :: v75 = v30.put(v69, v70)::
64135 :: CALL :: call :: Ljava/lang/Object :: v80 = v76.get(v78)::JM,64140
64140 :: EXPR :: assign :: Ljava/lang/Object :: v81 = CHECKCAST v80::CF,64141
64141 :: EXPR :: assign :: Ljava/lang/Object :: v82 = CHECKCAST v81::CF,64142
64142 :: NORM :: compound :: [Ljava/lang/String :: return v82::DD,63955
64143 :: EXPR :: assign :: null :: PHI v15 = p2 $null , v14::JM,64045:JM,64075
64145 :: EXPR :: assign :: null :: PHI v47 = v46, #(0)::DD,64028:DD,64047
64146 :: EXPR :: assign :: null :: PHI v48 = #(null), v39::DD,64079
64147 :: EXPR :: assign :: null :: PHI v60 = v59, #(0)::DD,64058:DD,64077
64148 :: EXPR :: assign :: null :: PHI v61 = #(null), v54::DD,64080:CF,64079
64264 :: ENTR :: entry :: null :: org.joda.time.tz.DefaultNameProvider.getNameSet(java.util.Locale,java.lang.String,java.lang.String)::CE,64265:CD,64271:JM,64272:JM,64273:JM,64373:JM,64343
64265 :: EXIT :: exit :: [Ljava/lang/String :: org.joda.time.tz.DefaultNameProvider.getNameSet(java.util.Locale,java.lang.String,java.lang.String)::JM,63822:JM,63889
64271 :: PRED :: IF :: Z :: if (p1 $null  == #(null)) goto 13::CD,64272:CD,64274
64272 :: PRED :: IF :: Z :: if (p2 $null  == #(null)) goto 13::CD,64273:CD,64274
64273 :: PRED :: IF :: Z :: if (p3 $null  != #(null)) goto 15::CD,64274:CD,64278:CD,64283:CD,64284:CD,64298:CD,64303:CD,64304:CD,64493:CD,64498:CD,64499:CD,64500
64274 :: NORM :: compound :: [Ljava/lang/String :: return #(null)::DD,64265
64278 :: CALL :: call :: Ljava/lang/Object :: v9 = v7.get(p1 $null )::JM,64283
64283 :: EXPR :: assign :: Ljava/lang/Object :: v10 = CHECKCAST v9::DD,64284
64284 :: PRED :: IF :: Z :: if (v10 != #(null)) goto 51::CD,64288:CD,64292
64288 :: CALL :: call :: Ljava/util/HashMap :: v13 = p0 $null .createCache()::CL,64665
64292 :: CALL :: call :: Ljava/lang/Object :: v15 = v11.put(p1 $null , v13)::
64298 :: CALL :: call :: Ljava/lang/Object :: v18 = v16.get(p2 $null )::JM,64303
64303 :: EXPR :: assign :: Ljava/lang/Object :: v19 = CHECKCAST v18::DD,64304
64304 :: PRED :: IF :: Z :: if (v19 != #(null)) goto 370::CD,64305:CD,64309:CD,64317:CD,64321:CD,64325:CD,64326:CD,64347:CD,64351:CD,64355:CD,64356:CD,64377:CD,64502:CD,64503:CD,64504:CD,64505
64305 :: CALL :: call :: Ljava/util/HashMap :: v21 = p0 $null .createCache()::CL,64665
64309 :: CALL :: call :: Ljava/lang/Object :: v23 = v16.put(p2 $null , v21)::
64317 :: CALL :: call :: Ljava/text/DateFormatSymbols :: v26 = getDateFormatSymbols(v24)::JM,64321:JM,64325:CL,58142
64321 :: CALL :: call :: [[Ljava/lang/String :: v28 = v26.getZoneStrings()::JM,64321:JM,64325
64325 :: EXPR :: assign :: I :: v29 = v28.length::DD,64326:CF,64502
64326 :: PRED :: IF :: Z :: if (v39 >= v29) goto 159::CF,64503:CD,64331
64327 :: EXPR :: reference :: Ljava/lang/Object :: v31 = v28[v39]::DD,64331:DD,64332:DD,64503
64331 :: PRED :: IF :: Z :: if (v31 == #(null)) goto 152::CD,64326:CD,64332:CD,64333:CD,64345:CD,64502:CD,64503
64332 :: EXPR :: assign :: I :: v32 = v31.length::DD,64333
64333 :: PRED :: IF :: Z :: if (v32 < #(5)) goto 152::CD,64326:CD,64338:CD,64343:CD,64345:CD,64502:CD,64503
64334 :: EXPR :: reference :: Ljava/lang/Object :: v34 = v31[#(0)]::JM,64373:JM,64343
64338 :: CALL :: call :: Z :: v36 = p2 $null .equals(v34)::JM,64273:JM,64373:JM,64343
64343 :: PRED :: IF :: Z :: if (v36 == #(0)) goto 152::CD,64326:CD,64345:CD,64502:CD,64503
64345 :: EXPR :: assign :: Ljava/lang/Object :: v38 = v39 + #(1)::DD,64502
64347 :: CALL :: call :: Ljava/text/DateFormatSymbols :: v42 = getDateFormatSymbols(p1 $null )::JM,64355:JM,64351:CL,58142
64351 :: CALL :: call :: [[Ljava/lang/String :: v44 = v42.getZoneStrings()::JM,64355:JM,64351
64355 :: EXPR :: assign :: I :: v45 = v44.length::DD,64356:CF,64504
64356 :: PRED :: IF :: Z :: if (v52 >= v45) goto 234::CF,64505:CD,64361
64357 :: EXPR :: reference :: Ljava/lang/Object :: v46 = v44[v52]::DD,64361:DD,64362:DD,64505
64361 :: PRED :: IF :: Z :: if (v46 == #(null)) goto 226::CD,64356:CD,64362:CD,64363:CD,64375:CD,64504:CD,64505
64362 :: EXPR :: assign :: I :: v47 = v46.length::DD,64363
64363 :: PRED :: IF :: Z :: if (v47 < #(5)) goto 226::CD,64356:CD,64368:CD,64373:CD,64375:CD,64504:CD,64505
64364 :: EXPR :: reference :: Ljava/lang/Object :: v48 = v46[#(0)]::JM,64373:JM,64343
64368 :: CALL :: call :: Z :: v50 = p2 $null .equals(v48)::JM,64273:JM,64373:JM,64343
64373 :: PRED :: IF :: Z :: if (v50 == #(0)) goto 226::CD,64356:CD,64375:CD,64504:CD,64505
64375 :: EXPR :: assign :: Ljava/lang/Object :: v51 = v52 + #(1)::DD,64504
64377 :: PRED :: IF :: Z :: if (v40 == #(null)) goto 370::CD,64378
64378 :: PRED :: IF :: Z :: if (v53 == #(null)) goto 370::CD,64383:CD,64400:CD,64414:CD,64419
64383 :: NORM :: declaration :: [Ljava/lang/String :: v56 = new java.lang.String[]::
64384 :: EXPR :: reference :: Ljava/lang/Object :: v57 = v53[#(2)]::DD,64388
64388 :: EXPR :: modify :: Ljava/lang/Object :: v56[#(0)] = v57::
64392 :: EXPR :: reference :: Ljava/lang/Object :: v58 = v53[#(1)]::DD,64396
64396 :: EXPR :: modify :: Ljava/lang/Object :: v56[#(1)] = v58::
64400 :: CALL :: call :: Ljava/lang/Object :: v60 = v21.put(v55, v56)::
64406 :: EXPR :: reference :: Ljava/lang/Object :: v61 = v40[#(2)]::JM,64419:JM,64414
64410 :: EXPR :: reference :: Ljava/lang/Object :: v63 = v40[#(4)]::JM,64419:JM,64414
64414 :: CALL :: call :: Z :: v65 = v61.equals(v63)::JM,64419:JM,64414
64419 :: PRED :: IF :: Z :: if (v65 == #(0)) goto 342::CD,64420:CD,64428:CD,64433:CD,64438:CD,64442:CD,64459:CD,64470:CD,64487
64420 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v73 = new java.lang.StringBuilder::
64424 :: EXPR :: reference :: Ljava/lang/Object :: v75 = v40[#(4)]::
64428 :: CALL :: call :: Ljava/lang/StringBuilder :: v77 = v73.append(v75)::
64433 :: CALL :: call :: Ljava/lang/StringBuilder :: v80 = v77.append(#(-Summer))::
64438 :: CALL :: call :: Ljava/lang/String :: v82 = v80.toString()::
64442 :: NORM :: declaration :: [Ljava/lang/String :: v83 = new java.lang.String[]::
64443 :: EXPR :: reference :: Ljava/lang/Object :: v84 = v53[#(4)]::DD,64447
64447 :: EXPR :: modify :: Ljava/lang/Object :: v83[#(0)] = v84::
64451 :: EXPR :: reference :: Ljava/lang/Object :: v85 = v53[#(3)]::DD,64455
64455 :: EXPR :: modify :: Ljava/lang/Object :: v83[#(1)] = v85::
64459 :: CALL :: call :: Ljava/lang/Object :: v87 = v21.put(v82, v83)::
64470 :: NORM :: declaration :: [Ljava/lang/String :: v67 = new java.lang.String[]::
64471 :: EXPR :: reference :: Ljava/lang/Object :: v68 = v53[#(4)]::DD,64475
64475 :: EXPR :: modify :: Ljava/lang/Object :: v67[#(0)] = v68::
64479 :: EXPR :: reference :: Ljava/lang/Object :: v70 = v53[#(3)]::DD,64483
64483 :: EXPR :: modify :: Ljava/lang/Object :: v67[#(1)] = v70::
64487 :: CALL :: call :: Ljava/lang/Object :: v72 = v21.put(v66, v67)::
64493 :: CALL :: call :: Ljava/lang/Object :: v90 = v88.get(p3 $null )::JM,64498
64498 :: EXPR :: assign :: Ljava/lang/Object :: v91 = CHECKCAST v90::CF,64499
64499 :: EXPR :: assign :: Ljava/lang/Object :: v92 = CHECKCAST v91::CF,64500
64500 :: NORM :: compound :: [Ljava/lang/String :: return v92::DD,64265
64502 :: EXPR :: assign :: null :: PHI v39 = v38, #(0)::DD,64326:DD,64345
64503 :: EXPR :: assign :: null :: PHI v40 = #(null), v31::DD,64377
64504 :: EXPR :: assign :: null :: PHI v52 = v51, #(0)::DD,64356:DD,64375
64505 :: EXPR :: assign :: null :: PHI v53 = #(null), v46::DD,64378:CF,64377
64645 :: CALL :: call :: Ljava/util/HashMap :: v5 = p0 $null .createCache()::CL,64665
64652 :: CALL :: call :: Ljava/util/HashMap :: v7 = p0 $null .createCache()::CL,64665
64665 :: ENTR :: entry :: null :: org.joda.time.tz.DefaultNameProvider.createCache()::CD,64669
64669 :: NORM :: declaration :: Ljava/util/HashMap :: v3 = new java.util.HashMap::

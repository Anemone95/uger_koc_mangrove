[37, 38]
8192 :: ENTR :: entry :: null :: com._17od.upm.database.PasswordDatabasePersistence.save(com._17od.upm.database.PasswordDatabase)::CD,8197:CD,8213:CD,8221:CD,8225:CD,8229:CD,8233:CD,8247:CD,8251:CD,8255:CD,8262:CD,8267:CD,8268:CD,8276
1 :: ENTR :: entry :: null :: com._17od.upm.database.TestPasswordDatabase.testOpenNonExistantFile()::CD,8:CD,13:JM,8151:JM,8406:JM,8392:CD,33:CD,37
8197 :: NORM :: declaration :: Ljava/io/ByteArrayOutputStream :: v4 = new java.io.ByteArrayOutputStream::
8 :: CALL :: call :: V :: p0 $this .deleteFile(v3)::CL,8095
13 :: NORM :: declaration :: Ljava/io/File :: v6 = new java.io.File::
14 :: EXPR :: reference :: Ljava/lang/String :: v7 = p0 $this .databaseFileName::
8213 :: CALL :: call :: V :: v11.flatPack(v4)::CL,8442
8221 :: CALL :: call :: V :: v14.flatPack(v4)::CL,8476
33 :: CALL :: call :: V :: v10.save(v5)::CL,8192
8225 :: CALL :: call :: Ljava/util/HashMap :: v17 = p1 $database .getAccountsHash()::JM,8251:CL,8512
37 :: NORM :: declaration :: Ljava/io/File :: v14 = new java.io.File::
8229 :: CALL :: call :: Ljava/util/Collection :: v19 = v17.values()::JM,8251
38 :: EXPR :: reference :: Ljava/lang/String :: v15 = p0 $this .databaseFileName::
8233 :: CALL :: call :: Ljava/util/Iterator :: v21 = v19.iterator()::JM,8251
8238 :: CALL :: call :: Ljava/lang/Object :: v26 = v21.next()::JM,8251
8247 :: CALL :: call :: Z :: v23 = v21.hasNext()::JM,8251
8251 :: PRED :: IF :: Z :: if (v23 != #(0)) goto 49::CD,8238:CD,8247:JM,8251
8255 :: CALL :: call :: [B :: v31 = v4.toByteArray()::
8262 :: CALL :: call :: [B :: v34 = v32.encrypt(v31)::CL,8521
8267 :: NORM :: declaration :: Ljava/io/FileOutputStream :: v35 = new java.io.FileOutputStream::
8268 :: CALL :: call :: Ljava/io/File :: v37 = p1 $database .getDatabaseFile()::CL,8599
8276 :: CALL :: call :: [B :: v41 = #(UPM).getBytes()::
8392 :: CALL :: call :: [B :: v6 = p0 $this .generateSalt()::CL,8638
8406 :: CALL :: call :: V :: p0 $this .initCipher(p1 $password )::CL,8671
8442 :: ENTR :: entry :: null :: com._17od.upm.database.Revision.flatPack(java.io.OutputStream)::CD,8450:CD,8454:CD,8459
8447 :: EXPR :: reference :: I :: v4 = p0 $this .revision::
8450 :: CALL :: call :: Ljava/lang/String :: v6 = valueOf(v4)::
8454 :: CALL :: call :: [B :: v8 = p0 $this .flatPack(v6)::CL,8792
8459 :: CALL :: call :: V :: p1 $os .write(v8)::
8476 :: ENTR :: entry :: null :: com._17od.upm.database.DatabaseOptions.flatPack(java.io.OutputStream)::CD,8484:CD,8489:CD,8496:CD,8501
8484 :: CALL :: call :: [B :: v6 = p0 $this .flatPack(v4)::CL,8792
8489 :: CALL :: call :: V :: p1 $os .write(v6)::
8496 :: CALL :: call :: [B :: v10 = p0 $this .flatPack(v8)::CL,8792
8501 :: CALL :: call :: V :: p1 $os .write(v10)::
8512 :: ENTR :: entry :: null :: com._17od.upm.database.PasswordDatabase.getAccountsHash()::CE,8513:CD,8519
8513 :: EXIT :: exit :: Ljava/util/HashMap :: com._17od.upm.database.PasswordDatabase.getAccountsHash()::JM,8251
8516 :: EXPR :: reference :: Ljava/util/HashMap :: v3 = p0 $this .accounts::DD,8519
8519 :: NORM :: compound :: Ljava/util/HashMap :: return v3::CF,8513
8521 :: ENTR :: entry :: null :: com._17od.upm.crypto.EncryptionService.encrypt([])::CD,8540:CD,8552
8540 :: CALL :: call :: I :: v13 = v9.processBytes(p1 $plainText , #(0), v11, v8, #(0))::CL,8860
8552 :: CALL :: call :: I :: v16 = v14.doFinal(v8, v13)::CL,9047
10628 :: ENTR :: entry :: null :: org.bouncycastle.crypto.engines.AESEngine.getBlockSize()::CF,10629:CD,10632
10629 :: EXIT :: exit :: I :: org.bouncycastle.crypto.engines.AESEngine.getBlockSize()::JM,9855
10632 :: NORM :: compound :: I :: return #(16)::CF,10629
8599 :: ENTR :: entry :: null :: com._17od.upm.database.PasswordDatabase.getDatabaseFile()::CE,8600:CD,8606
8600 :: EXIT :: exit :: Ljava/io/File :: com._17od.upm.database.PasswordDatabase.getDatabaseFile()::
10649 :: ENTR :: entry :: null :: org.bouncycastle.crypto.modes.CBCBlockCipher.init(boolean,org.bouncycastle.crypto.CipherParameters)::CD,10658:CD,10659:CD,10670
8603 :: EXPR :: reference :: Ljava/io/File :: v3 = p0 $this .databaseFile::DD,8606
8606 :: NORM :: compound :: Ljava/io/File :: return v3::CF,8600
10658 :: EXPR :: assign :: Z :: v5=p2 $null  INSTANCEOF org.bouncycastle.crypto.params.ParametersWithIV::DD,10659
10659 :: PRED :: IF :: Z :: if (v5 == #(0)) goto 79::CD,10697:CD,10709
10670 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v23 = new java.lang.IllegalArgumentException::
8638 :: ENTR :: entry :: null :: com._17od.upm.crypto.EncryptionService.generateSalt()::CD,8642
8642 :: CALL :: call :: Ljava/security/SecureRandom :: v5 = getInstance(#(SHA1PRNG))::
10697 :: CALL :: call :: V :: v19.init(p1 $null , v21)::CL,11451
10709 :: CALL :: call :: V :: v8.init(p1 $null , p2 $null )::CL,11451
8671 :: ENTR :: entry :: null :: com._17od.upm.crypto.EncryptionService.initCipher([])::JM,9315:JM,9301:JM,9302:JM,9320:JM,9306:JM,9325:JM,9311:CD,8698:CD,8729:CD,8759
10738 :: ENTR :: entry :: null :: com._17od.upm.util.Util.lpad(int,int,char)::CE,10739:CD,10744:CD,10745:CD,10760:CD,10764:CD,10765:CD,10769
10739 :: EXIT :: exit :: Ljava/lang/String :: com._17od.upm.util.Util.lpad(int,int,char)::JM,9698
10744 :: NORM :: declaration :: Ljava/lang/StringBuffer :: v5 = new java.lang.StringBuffer::JM,10764:JM,10769:JM,10744
10745 :: CALL :: call :: Ljava/lang/String :: v7 = valueOf(p1 $i )::JM,10744:JM,10764
8698 :: CALL :: call :: Lorg/bouncycastle/crypto/CipherParameters :: v16 = v4.generateDerivedParameters(#(256), #(128))::CL,9433
10754 :: CALL :: call :: Ljava/lang/StringBuffer :: v13 = v5.insert(#(0), p3 $c )::
10760 :: CALL :: call :: I :: v10 = v5.length()::JM,10764
10764 :: PRED :: IF :: Z :: if (v10 < p2 $length ) goto 18::CD,10754:CD,10760:JM,10769
10765 :: CALL :: call :: Ljava/lang/String :: v15 = v5.toString()::JM,10769
10769 :: NORM :: compound :: Ljava/lang/String :: return v15::DD,10739
8729 :: CALL :: call :: V :: v25.init(#(1), v16)::CL,9607
10792 :: ENTR :: entry :: null :: org.bouncycastle.crypto.modes.CBCBlockCipher.encryptBlock([],int,[],int)::CD,10815:CD,10842:CD,10865:JM,10823
8759 :: CALL :: call :: V :: v36.init(#(0), v16)::CL,9607
10812 :: EXPR :: reference :: I :: v11 = p0 $null .blockSize::DD,10815
10815 :: PRED :: IF :: Z :: if (v20 >= v11) goto 57::CD,10823:CD,10828:CD,10829:CD,10834:CD,10865
10816 :: EXPR :: reference :: [B :: v12 = p0 $null .cbcV::
10819 :: EXPR :: reference :: B :: v13 = v12[v20]::DD,10828
10823 :: EXPR :: assign :: Ljava/lang/Object :: v14 = p2 $null  + v20::
10824 :: EXPR :: reference :: B :: v15 = p1 $null [v14]::DD,10828
10828 :: EXPR :: assign :: Ljava/lang/Object :: v16 = v13 ^ v15::CF,10829
10829 :: EXPR :: assign :: B :: v17 = CONVERT I to B v16::DD,10830
10830 :: EXPR :: modify :: B :: v12[v20] = v17::
10834 :: EXPR :: assign :: Ljava/lang/Object :: v19 = v20 + #(1)::DD,10865
8792 :: ENTR :: entry :: null :: com._17od.upm.database.FlatPackObject.flatPack(java.lang.String)::CE,8793:CD,8797:CD,8802:CD,8807
8793 :: EXIT :: exit :: [B :: com._17od.upm.database.FlatPackObject.flatPack(java.lang.String)::
10842 :: CALL :: call :: I :: v24 = v21.processBlock(v22, #(0), p3 $null , p4 $null )::CL,11517
8797 :: CALL :: call :: [B :: v6 = p1 $s .getBytes(#(UTF-8))::
8802 :: CALL :: call :: [B :: v8 = p0 $this .flatPack(v6)::JM,8807:CL,9679
8807 :: NORM :: compound :: [B :: return v8::DD,8793
10865 :: EXPR :: assign :: null :: PHI v20 = v19, #(0)::DD,10815:DD,10823:DD,10834
10893 :: ENTR :: entry :: null :: org.bouncycastle.crypto.modes.CBCBlockCipher.decryptBlock([],int,[],int)::CD,10929:CD,10940:CD,10974:JM,10941
8860 :: ENTR :: entry :: null :: org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher.processBytes([],int,int,[],int)::CD,8870:CD,8876:CD,8898:CD,8902:CD,8903:JM,8935
8870 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v52 = new java.lang.IllegalArgumentException::
8876 :: CALL :: call :: I :: v10 = p0 $null .getBlockSize()::JM,8955:CL,9741
10929 :: CALL :: call :: I :: v16 = v14.processBlock(p1 $null , p2 $null , p3 $null , p4 $null )::CL,11517
10937 :: EXPR :: reference :: I :: v17 = p0 $null .blockSize::DD,10940
10940 :: PRED :: IF :: Z :: if (v26 >= v17) goto 88::CD,10941:CD,10953:CD,10954:CD,10959:CD,10974
10941 :: EXPR :: assign :: Ljava/lang/Object :: v18 = p4 $null  + v26::
10942 :: EXPR :: reference :: B :: v19 = p3 $null [v18]::DD,10953
8895 :: EXPR :: reference :: [B :: v15 = p0 $null .buf::DD,8898
8898 :: EXPR :: assign :: I :: v16 = v15.length::DD,8902
10946 :: EXPR :: reference :: [B :: v20 = p0 $null .cbcV::
8899 :: EXPR :: reference :: I :: v17 = p0 $null .bufOff::DD,8902
10949 :: EXPR :: reference :: B :: v21 = v20[v26]::DD,10953
8902 :: EXPR :: assign :: Ljava/lang/Object :: v18 = v16 - v17::DD,8903:DD,8935
8903 :: PRED :: IF :: Z :: if (p3 $null  <= v18) goto 175::CD,8923:CD,8935:CD,8940:CD,8941:CD,8980
10953 :: EXPR :: assign :: Ljava/lang/Object :: v22 = v19 ^ v21::CF,10954
10954 :: EXPR :: assign :: B :: v23 = CONVERT I to B v22::DD,10955
10955 :: EXPR :: modify :: B :: p3 $null [v18] = v23::
10959 :: EXPR :: assign :: Ljava/lang/Object :: v25 = v26 + #(1)::DD,10974
8923 :: CALL :: call :: I :: v25 = v22.processBlock(v23, #(0), p4 $null , p5 $null )::CL,9801
10974 :: EXPR :: assign :: null :: PHI v26 = v25, #(0)::DD,10940:DD,10941:DD,10959
8935 :: EXPR :: assign :: Ljava/lang/Object :: v27 = p3 $null  - v18::DD,8980
8937 :: EXPR :: reference :: [B :: v29 = p0 $null .buf::DD,8940
8940 :: EXPR :: assign :: I :: v30 = v29.length::CF,8941
8941 :: PRED :: IF :: Z :: if (v39 <= v30) goto 175::CD,8940:CD,8946:CD,8955:CD,8980
8946 :: CALL :: call :: I :: v34 = v31.processBlock(p1 $null , v38, p4 $null , v32)::CL,9801
8955 :: EXPR :: assign :: Ljava/lang/Object :: v36 = v39 - v10::DD,8980
11008 :: ENTR :: entry :: null :: org.bouncycastle.crypto.modes.CBCBlockCipher.reset()::CD,11032
8980 :: EXPR :: assign :: null :: PHI v39 = v36, v27::DD,8941:DD,8955
11032 :: CALL :: call :: V :: fill(v9, #(0))::CL,11620
9047 :: ENTR :: entry :: null :: org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher.doFinal([],int)::CD,9056:CD,9063:CD,9072:CD,9158:CD,9193
9056 :: CALL :: call :: I :: v7 = v5.getBlockSize()::JM,9067:CL,9844
9060 :: EXPR :: reference :: Z :: v9 = p0 $null .forEncryption::DD,9063
9063 :: PRED :: IF :: Z :: if (v9 == #(0)) goto 125::CD,9067:CD,9107:CD,9120:CD,9129:CD,9146:CD,9173:CD,9189
9064 :: EXPR :: reference :: I :: v31 = p0 $null .bufOff::DD,9067
9067 :: PRED :: IF :: Z :: if (v31 != v7) goto 76::CD,9087
9072 :: CALL :: call :: V :: p0 $null .reset()::CL,9857
9087 :: CALL :: call :: I :: v39 = v36.processBlock(v37, #(0), p1 $null , p2 $null )::CL,9801
9107 :: CALL :: call :: I :: v45 = v41.addPadding(v42, v43)::CL,9898
9120 :: CALL :: call :: I :: v50 = v46.processBlock(v47, #(0), p1 $null , v48)::CL,9801
9129 :: CALL :: call :: V :: p0 $null .reset()::CL,9857
9146 :: CALL :: call :: I :: v19 = v15.processBlock(v16, #(0), v17, #(0))::CL,9801
9158 :: CALL :: call :: V :: p0 $null .reset()::CL,9857
9173 :: CALL :: call :: I :: v23 = v20.padCount(v21)::CL,9928
9189 :: CALL :: call :: V :: p0 $null .reset()::CL,9857
9193 :: CALL :: call :: V :: p0 $null .reset()::CL,9857
9301 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v7 = new java.lang.IllegalArgumentException::
9302 :: NORM :: declaration :: Ljava/lang/StringBuffer :: v8 = new java.lang.StringBuffer::
9306 :: CALL :: call :: Ljava/lang/StringBuffer :: v12 = v8.append(#(Digest ))::
9311 :: CALL :: call :: Ljava/lang/String :: v14 = p1 $null .getAlgorithmName()::CL,10106
9315 :: CALL :: call :: Ljava/lang/StringBuffer :: v16 = v12.append(v14)::
9320 :: CALL :: call :: Ljava/lang/StringBuffer :: v19 = v16.append(#( unsupported))::
9325 :: CALL :: call :: Ljava/lang/String :: v21 = v19.toString()::
11451 :: ENTR :: entry :: null :: org.bouncycastle.crypto.engines.AESEngine.init(boolean,org.bouncycastle.crypto.CipherParameters)::CD,11464:CD,11477:CD,11478:CD,11482:CD,11487:CD,11491:CD,11495:CD,11500
11464 :: CALL :: call :: [[I :: v26 = p0 $null .generateWorkingKey(v24, p1 $null )::CL,11925
11477 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v7 = new java.lang.IllegalArgumentException::
11478 :: NORM :: declaration :: Ljava/lang/StringBuffer :: v8 = new java.lang.StringBuffer::
9433 :: ENTR :: entry :: null :: org.bouncycastle.crypto.generators.PKCS12ParametersGenerator.generateDerivedParameters(int,int)::
11482 :: CALL :: call :: Ljava/lang/StringBuffer :: v12 = v8.append(#(invalid parameter pas...))::
11487 :: CALL :: call :: Ljava/lang/Class :: v14 = p2 $null .getClass()::
11491 :: CALL :: call :: Ljava/lang/String :: v16 = v14.getName()::
11495 :: CALL :: call :: Ljava/lang/StringBuffer :: v18 = v12.append(v16)::
11500 :: CALL :: call :: Ljava/lang/String :: v20 = v18.toString()::
11517 :: ENTR :: entry :: null :: org.bouncycastle.crypto.engines.AESEngine.processBlock([],int,[],int)::CD,11529:CD,11556
11529 :: NORM :: declaration :: Ljava/lang/IllegalStateException :: v30 = new java.lang.IllegalStateException::
11553 :: EXPR :: reference :: Z :: v14 = p0 $null .forEncryption::DD,11556
11556 :: PRED :: IF :: Z :: if (v14 == #(0)) goto 90::CD,11569:CD,11587
11569 :: CALL :: call :: V :: p0 $null .packBlock(p3 $null , p4 $null )::CL,14070
11587 :: CALL :: call :: V :: p0 $null .packBlock(p3 $null , p4 $null )::CL,14070
11620 :: ENTR :: entry :: null :: org.bouncycastle.util.Arrays.fill([],byte)::JM,11627:CD,11625:CD,11626:CD,11634
11625 :: EXPR :: assign :: I :: v5 = p1 $null .length::CF,11626
11626 :: PRED :: IF :: Z :: if (v8 >= v5) goto 18::CD,11625:CD,11631:CD,11634
11627 :: EXPR :: modify :: B :: p1 $null [v8] = p2 $null ::
11631 :: EXPR :: assign :: Ljava/lang/Object :: v7 = v8 + #(1)::DD,11634
11634 :: EXPR :: assign :: null :: PHI v8 = v7, #(0)::DD,11626:DD,11631:CF,11625
9607 :: ENTR :: entry :: null :: org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher.init(boolean,org.bouncycastle.crypto.CipherParameters)::CD,9619:CD,9620
9619 :: EXPR :: assign :: Z :: v6=p2 $null  INSTANCEOF org.bouncycastle.crypto.params.ParametersWithRandom::DD,9620
9620 :: PRED :: IF :: Z :: if (v6 == #(0)) goto 52::CD,9640:CD,9656
9640 :: CALL :: call :: V :: v18.init(p1 $null , v20)::CL,10649
9656 :: CALL :: call :: V :: v11.init(p1 $null , p2 $null )::CL,10649
9679 :: ENTR :: entry :: null :: com._17od.upm.database.FlatPackObject.flatPack([])::CE,9680:CD,9687:CD,9693:CD,9698:CD,9699:CD,9700:CD,9701:CD,9719
9680 :: EXIT :: exit :: [B :: com._17od.upm.database.FlatPackObject.flatPack([])::JM,8807
9687 :: CALL :: call :: Ljava/lang/String :: v8 = lpad(v4, v5, #(48))::JM,9698:CL,10738
9693 :: CALL :: call :: [B :: v11 = v8.getBytes(#(UTF-8))::JM,9698
9698 :: EXPR :: assign :: I :: v12 = v11.length::DD,9700:CF,9699
9699 :: EXPR :: assign :: I :: v13 = p1 $bytesToFlatPack .length::CF,9700
9700 :: EXPR :: assign :: Ljava/lang/Object :: v14 = v12 + v13::CF,9701
9701 :: NORM :: declaration :: [B :: v15 = new []::DD,9719
9719 :: NORM :: compound :: [B :: return v15::DD,9680
9741 :: ENTR :: entry :: null :: org.bouncycastle.crypto.BufferedBlockCipher.getBlockSize()::CE,9742:CD,9748:CD,9752
9742 :: EXIT :: exit :: I :: org.bouncycastle.crypto.BufferedBlockCipher.getBlockSize()::JM,8955
9748 :: CALL :: call :: I :: v5 = v3.getBlockSize()::JM,9752:CL,9844
9752 :: NORM :: compound :: I :: return v5::CF,9742
9801 :: ENTR :: entry :: null :: org.bouncycastle.crypto.modes.CBCBlockCipher.processBlock([],int,[],int)::CD,9812
9809 :: EXPR :: reference :: Z :: v7 = p0 $null .encrypting::DD,9812
9812 :: PRED :: IF :: Z :: if (v7 == #(0)) goto 25::CD,9813:CD,9822
9813 :: CALL :: call :: I :: v12 = p0 $null .encryptBlock(p1 $null , p2 $null , p3 $null , p4 $null )::CL,10792
9822 :: CALL :: call :: I :: v10 = p0 $null .decryptBlock(p1 $null , p2 $null , p3 $null , p4 $null )::CL,10893
9844 :: ENTR :: entry :: null :: org.bouncycastle.crypto.modes.CBCBlockCipher.getBlockSize()::CE,9845:CD,9851:CD,9855
9845 :: EXIT :: exit :: I :: org.bouncycastle.crypto.modes.CBCBlockCipher.getBlockSize()::JM,9067:JM,9752
9851 :: CALL :: call :: I :: v5 = v3.getBlockSize()::JM,9855:CL,10628
9855 :: NORM :: compound :: I :: return v5::CF,9845
9857 :: ENTR :: entry :: null :: org.bouncycastle.crypto.BufferedBlockCipher.reset()::CD,9864:CD,9865:CD,9881:CD,9885
9861 :: EXPR :: reference :: [B :: v4 = p0 $null .buf::DD,9864
9864 :: EXPR :: assign :: I :: v5 = v4.length::CF,9865
9865 :: PRED :: IF :: Z :: if (v9 >= v5) goto 26::CD,9864:CD,9873:CD,9885
9866 :: EXPR :: reference :: [B :: v6 = p0 $null .buf::
9869 :: EXPR :: modify :: B :: v6[v9] = #(0)::
9873 :: EXPR :: assign :: Ljava/lang/Object :: v8 = v9 + #(1)::DD,9885
11925 :: ENTR :: entry :: null :: org.bouncycastle.crypto.engines.AESEngine.generateWorkingKey([],boolean)::CD,11939
9881 :: CALL :: call :: V :: v10.reset()::CL,11008
9885 :: EXPR :: assign :: null :: PHI v9 = v8, #(0)::DD,9865:DD,9873
11939 :: NORM :: declaration :: Ljava/lang/IllegalArgumentException :: v96 = new java.lang.IllegalArgumentException::
9898 :: ENTR :: entry :: null :: org.bouncycastle.crypto.paddings.PKCS7Padding.addPadding([],int)::CD,9904:CD,9905:CD,9906:CD,9907:CD,9908:CD,9916
9904 :: EXPR :: assign :: I :: v5 = p1 $null .length::DD,9905
9905 :: EXPR :: assign :: Ljava/lang/Object :: v6 = v5 - p2 $null ::CF,9906
9906 :: EXPR :: assign :: B :: v7 = CONVERT I to B v6::DD,9909:CF,9916
9907 :: EXPR :: assign :: I :: v8 = p1 $null .length::CF,9908
9908 :: PRED :: IF :: Z :: if (v11 >= v8) goto 23::CD,9907:CD,9913:CD,9916
9909 :: EXPR :: modify :: B :: p1 $null [v11] = v7::
9913 :: EXPR :: assign :: Ljava/lang/Object :: v10 = v11 + #(1)::DD,9916
9916 :: EXPR :: assign :: null :: PHI v11 = v10, p2 $null ::DD,9908:DD,9913:CF,9907
9928 :: ENTR :: entry :: null :: org.bouncycastle.crypto.paddings.PKCS7Padding.padCount([])::
14070 :: ENTR :: entry :: null :: org.bouncycastle.crypto.engines.AESEngine.packBlock([],int)::CD,14076:CD,14080:CD,14085:CD,14089:CD,14090:CD,14095:CD,14099:CD,14100:CD,14105:CD,14109:CD,14110:CD,14115:CD,14119:CD,14124:CD,14128:CD,14129:CD,14134:CD,14138:CD,14139:CD,14144:CD,14148:CD,14149:CD,14154:CD,14158:CD,14163:CD,14167:CD,14168:CD,14173:CD,14177:CD,14178:CD,14183:CD,14187:CD,14188:CD,14193:CD,14197:CD,14202:CD,14206:CD,14207:CD,14212:CD,14216:CD,14217:CD,14226:CD,14227
14076 :: EXPR :: assign :: Ljava/lang/Object :: v6 = p2 $null  + #(1)::DD,14085
14077 :: EXPR :: reference :: I :: v7 = p0 $null .C0::DD,14080
14080 :: EXPR :: assign :: B :: v8 = CONVERT I to B v7::DD,14081
14081 :: EXPR :: modify :: B :: p1 $null [p2 $null ] = v8::
14085 :: EXPR :: assign :: Ljava/lang/Object :: v9 = v6 + #(1)::DD,14095
14086 :: EXPR :: reference :: I :: v10 = p0 $null .C0::DD,14089
14089 :: EXPR :: assign :: Ljava/lang/Object :: v12 = v10 ? #(8)::CF,14090
14090 :: EXPR :: assign :: B :: v13 = CONVERT I to B v12::DD,14091
14091 :: EXPR :: modify :: B :: p1 $null [v6] = v13::
14095 :: EXPR :: assign :: Ljava/lang/Object :: v14 = v9 + #(1)::DD,14105
14096 :: EXPR :: reference :: I :: v15 = p0 $null .C0::DD,14099
14099 :: EXPR :: assign :: Ljava/lang/Object :: v17 = v15 ? #(16)::CF,14100
14100 :: EXPR :: assign :: B :: v18 = CONVERT I to B v17::DD,14101
14101 :: EXPR :: modify :: B :: p1 $null [v9] = v18::
14105 :: EXPR :: assign :: Ljava/lang/Object :: v19 = v14 + #(1)::DD,14115
14106 :: EXPR :: reference :: I :: v20 = p0 $null .C0::DD,14109
14109 :: EXPR :: assign :: Ljava/lang/Object :: v22 = v20 ? #(24)::CF,14110
14110 :: EXPR :: assign :: B :: v23 = CONVERT I to B v22::DD,14111
14111 :: EXPR :: modify :: B :: p1 $null [v14] = v23::
14115 :: EXPR :: assign :: Ljava/lang/Object :: v24 = v19 + #(1)::DD,14124
14116 :: EXPR :: reference :: I :: v25 = p0 $null .C1::DD,14119
14119 :: EXPR :: assign :: B :: v26 = CONVERT I to B v25::DD,14120
14120 :: EXPR :: modify :: B :: p1 $null [v19] = v26::
14124 :: EXPR :: assign :: Ljava/lang/Object :: v27 = v24 + #(1)::DD,14134
14125 :: EXPR :: reference :: I :: v28 = p0 $null .C1::DD,14128
14128 :: EXPR :: assign :: Ljava/lang/Object :: v29 = v28 ? #(8)::CF,14129
14129 :: EXPR :: assign :: B :: v30 = CONVERT I to B v29::DD,14130
14130 :: EXPR :: modify :: B :: p1 $null [v24] = v30::
14134 :: EXPR :: assign :: Ljava/lang/Object :: v31 = v27 + #(1)::DD,14144
14135 :: EXPR :: reference :: I :: v32 = p0 $null .C1::DD,14138
14138 :: EXPR :: assign :: Ljava/lang/Object :: v33 = v32 ? #(16)::CF,14139
14139 :: EXPR :: assign :: B :: v34 = CONVERT I to B v33::DD,14140
14140 :: EXPR :: modify :: B :: p1 $null [v27] = v34::
14144 :: EXPR :: assign :: Ljava/lang/Object :: v35 = v31 + #(1)::DD,14154
14145 :: EXPR :: reference :: I :: v36 = p0 $null .C1::DD,14148
14148 :: EXPR :: assign :: Ljava/lang/Object :: v37 = v36 ? #(24)::CF,14149
14149 :: EXPR :: assign :: B :: v38 = CONVERT I to B v37::DD,14150
14150 :: EXPR :: modify :: B :: p1 $null [v31] = v38::
14154 :: EXPR :: assign :: Ljava/lang/Object :: v39 = v35 + #(1)::DD,14163
14155 :: EXPR :: reference :: I :: v40 = p0 $null .C2::DD,14158
14158 :: EXPR :: assign :: B :: v41 = CONVERT I to B v40::DD,14159
14159 :: EXPR :: modify :: B :: p1 $null [v35] = v41::
14163 :: EXPR :: assign :: Ljava/lang/Object :: v42 = v39 + #(1)::DD,14173
14164 :: EXPR :: reference :: I :: v43 = p0 $null .C2::DD,14167
14167 :: EXPR :: assign :: Ljava/lang/Object :: v44 = v43 ? #(8)::CF,14168
14168 :: EXPR :: assign :: B :: v45 = CONVERT I to B v44::DD,14169
14169 :: EXPR :: modify :: B :: p1 $null [v39] = v45::
14173 :: EXPR :: assign :: Ljava/lang/Object :: v46 = v42 + #(1)::DD,14183
14174 :: EXPR :: reference :: I :: v47 = p0 $null .C2::DD,14177
14177 :: EXPR :: assign :: Ljava/lang/Object :: v48 = v47 ? #(16)::CF,14178
14178 :: EXPR :: assign :: B :: v49 = CONVERT I to B v48::DD,14179
14179 :: EXPR :: modify :: B :: p1 $null [v42] = v49::
14183 :: EXPR :: assign :: Ljava/lang/Object :: v50 = v46 + #(1)::DD,14193
14184 :: EXPR :: reference :: I :: v51 = p0 $null .C2::DD,14187
14187 :: EXPR :: assign :: Ljava/lang/Object :: v52 = v51 ? #(24)::CF,14188
14188 :: EXPR :: assign :: B :: v53 = CONVERT I to B v52::DD,14189
14189 :: EXPR :: modify :: B :: p1 $null [v46] = v53::
14193 :: EXPR :: assign :: Ljava/lang/Object :: v54 = v50 + #(1)::DD,14202
14194 :: EXPR :: reference :: I :: v55 = p0 $null .C3::DD,14197
14197 :: EXPR :: assign :: B :: v56 = CONVERT I to B v55::DD,14198
14198 :: EXPR :: modify :: B :: p1 $null [v50] = v56::
10106 :: ENTR :: entry :: null :: org.bouncycastle.crypto.digests.SHA256Digest.getAlgorithmName()::CF,10107:CD,10110
14202 :: EXPR :: assign :: Ljava/lang/Object :: v57 = v54 + #(1)::DD,14212
10107 :: EXIT :: exit :: Ljava/lang/String :: org.bouncycastle.crypto.digests.SHA256Digest.getAlgorithmName()::
14203 :: EXPR :: reference :: I :: v58 = p0 $null .C3::DD,14206
10110 :: NORM :: compound :: Ljava/lang/String :: return #(SHA-256)::CF,10107
14206 :: EXPR :: assign :: Ljava/lang/Object :: v59 = v58 ? #(8)::CF,14207
14207 :: EXPR :: assign :: B :: v60 = CONVERT I to B v59::DD,14208
14208 :: EXPR :: modify :: B :: p1 $null [v54] = v60::
14212 :: EXPR :: assign :: Ljava/lang/Object :: v61 = v57 + #(1)::
14213 :: EXPR :: reference :: I :: v62 = p0 $null .C3::DD,14216
14216 :: EXPR :: assign :: Ljava/lang/Object :: v63 = v62 ? #(16)::CF,14217
14217 :: EXPR :: assign :: B :: v64 = CONVERT I to B v63::DD,14218
14218 :: EXPR :: modify :: B :: p1 $null [v57] = v64::
14223 :: EXPR :: reference :: I :: v66 = p0 $null .C3::DD,14226
14226 :: EXPR :: assign :: Ljava/lang/Object :: v67 = v66 ? #(24)::CF,14227
14227 :: EXPR :: assign :: B :: v68 = CONVERT I to B v67::DD,14228
14228 :: EXPR :: modify :: B :: p1 $null [v61] = v68::
8095 :: ENTR :: entry :: null :: com._17od.upm.database.TestPasswordDatabase.deleteFile(java.lang.String)::CD,8100:CD,8105:CD,8109
8100 :: NORM :: declaration :: Ljava/io/File :: v4 = new java.io.File::JM,8109
8105 :: CALL :: call :: Z :: v7 = v4.exists()::JM,8109
8109 :: PRED :: IF :: Z :: if (v7 == #(0)) goto 30::CD,8110
8110 :: CALL :: call :: Z :: v10 = v4.delete()::
8151 :: NORM :: declaration :: Ljava/util/HashMap :: v9 = new java.util.HashMap::

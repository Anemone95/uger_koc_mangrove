[14003, 14004, 14008, 14009]
1 :: ENTR :: entry :: null :: ai.susi.mind.SusiSkill.main(java.lang.String[])::CD,5:CD,8:CD,9:CD,15:CD,19
16387 :: NORM :: compound :: Ljava/lang/Object :: return v37::DD,16374
5 :: CALL :: call :: Ljava/nio/file/FileSystem :: v4 = getDefault()::JM,10753:JM,13923:JM,7413:JM,9:JM,7417:JM,8108:JM,8125:JM,7421:JM,10845:JM,10750
16391 :: NORM :: declaration :: Lorg/json/JSONObject :: v34 = new org.json.JSONObject::DD,16396
8 :: NORM :: declaration :: [Ljava/lang/String :: v7 = new java.lang.String[]::JM,10753:JM,13923:JM,7413:JM,9:JM,7417:JM,8108:JM,8125:JM,7421:JM,10845:JM,10750
9 :: CALL :: call :: Ljava/nio/file/Path :: v9 = v4.getPath(#(data), v7)::JM,10753:JM,13923:JM,7413:JM,9:JM,7417:JM,8108:JM,8125:JM,7421:JM,10845:JM,10750
16396 :: NORM :: compound :: Ljava/lang/Object :: return v34::DD,16374
15 :: CALL :: call :: Ljava/util/Map :: v11 = readConfig(v9)::CL,7161
16400 :: NORM :: declaration :: Lorg/json/JSONArray :: v31 = new org.json.JSONArray::DD,16405
19 :: CALL :: call :: V :: init(v11, v9)::JM,10753:JM,13923:JM,7413:JM,7417:JM,8108:JM,8125:JM,7421:JM,10845:JM,10750:CL,7382
16405 :: NORM :: compound :: Ljava/lang/Object :: return v31::DD,16374
16406 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v5 = new java.lang.StringBuilder::
16411 :: CALL :: call :: Ljava/lang/StringBuilder :: v13 = v5.append(v16)::
16416 :: CALL :: call :: C :: v15 = p0 $this .next()::JM,16455:CL,18112
16420 :: PRED :: IF :: Z :: if (v16 < #(32)) goto 118::CD,16421:CD,16426
16421 :: CALL :: call :: I :: v10 = #(,:]}/\'[{;=#).indexOf(v16)::JM,16426
16426 :: PRED :: IF :: Z :: if (v10 < #(0)) goto 93::CD,16411:CD,16416:CD,16420:CD,16455
16427 :: CALL :: call :: V :: p0 $this .back()::CL,16318
16430 :: CALL :: call :: Ljava/lang/String :: v19 = v5.toString()::
16434 :: CALL :: call :: Ljava/lang/String :: v21 = v19.trim()::
16444 :: CALL :: call :: Lorg/json/JSONException :: v29 = p0 $this .syntaxError(#(Missing value))::CL,16281
16450 :: CALL :: call :: Ljava/lang/Object :: v26 = stringToValue(v21)::JM,16454:CL,18537
16454 :: NORM :: compound :: Ljava/lang/Object :: return v26::DD,16374
16455 :: EXPR :: assign :: null :: PHI v16 = v4, v15::DD,16420:JM,16426
16485 :: ENTR :: entry :: null :: org.json.JSONArray.toString()::CE,16486:CD,16489:CD,16494:CD,16495
16486 :: EXIT :: exit :: Ljava/lang/String :: org.json.JSONArray.toString()::
16489 :: CALL :: call :: Ljava/lang/String :: v5 = p0 $this .toString(#(0))::JM,16494:CL,18716
16494 :: NORM :: compound :: Ljava/lang/String :: return v5::DD,16486
16495 :: NORM :: compound :: Ljava/lang/String :: return #(null)::DD,16486
16499 :: ENTR :: entry :: null :: org.json.JSONObject.toString()::CE,16500:CD,16503:CD,16508:CD,16509
16500 :: EXIT :: exit :: Ljava/lang/String :: org.json.JSONObject.toString()::
16503 :: CALL :: call :: Ljava/lang/String :: v5 = p0 $this .toString(#(0))::JM,16508:CL,16223
16508 :: NORM :: compound :: Ljava/lang/String :: return v5::DD,16500
16509 :: NORM :: compound :: Ljava/lang/String :: return #(null)::DD,16500
16513 :: ENTR :: entry :: null :: org.json.JSONObject.Null.toString()::CF,16514:CD,16517
16514 :: EXIT :: exit :: Ljava/lang/String :: org.json.JSONObject.Null.toString()::
16517 :: NORM :: compound :: Ljava/lang/String :: return #(null)::CF,16514
16519 :: ENTR :: entry :: null :: org.json.JSONObject.putOnce(java.lang.String,java.lang.Object)::CD,16525:CD,16534:CD,16539:CD,16544:CD,16549:JM,16526
16525 :: PRED :: IF :: Z :: if (p1 $key  == #(null)) goto 55::CD,16526
16526 :: PRED :: IF :: Z :: if (p2 $value  == #(null)) goto 55::CD,16527:CD,16558
16527 :: CALL :: call :: Ljava/lang/Object :: v7 = p0 $this .opt(p1 $key )::CL,15914
16534 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v11 = new java.lang.StringBuilder::
16539 :: CALL :: call :: Ljava/lang/StringBuilder :: v15 = v11.append(p1 $key )::JM,16525:JM,16526
16544 :: CALL :: call :: Ljava/lang/StringBuilder :: v18 = v15.append(#('))::
16549 :: CALL :: call :: Ljava/lang/String :: v20 = v18.toString()::
16558 :: CALL :: call :: Lorg/json/JSONObject :: v9 = p0 $this .put(p1 $key , p2 $value )::CL,13370
16577 :: ENTR :: entry :: null :: ai.susi.json.JsonRepository.dateSuffix(boolean,java.util.Date)::CF,16578:CD,16582:CD,16588:CD,16593:CD,16594
16578 :: EXIT :: exit :: Ljava/lang/String :: ai.susi.json.JsonRepository.dateSuffix(boolean,java.util.Date)::JM,13908:JM,13913
16582 :: PRED :: IF :: Z :: if (p1 $dailyDump  == #(0)) goto 10::CD,16583:CD,16586:CD,16594
16583 :: EXPR :: reference :: Ljava/text/SimpleDateFormat :: v6 = ai.susi.json.JsonRepository.dateFomatDaily::DD,16594
16586 :: EXPR :: reference :: Ljava/text/SimpleDateFormat :: v5 = ai.susi.json.JsonRepository.dateFomatMonthly::CF,16594
16588 :: CALL :: call :: Ljava/lang/String :: v9 = v7.format(p2 $d )::JM,16593:JM,16588
16593 :: NORM :: compound :: Ljava/lang/String :: return v9::CF,16578
16594 :: EXPR :: assign :: null :: PHI v7 = v6, v5::JM,16593:JM,16588
16620 :: ENTR :: entry :: null :: ai.susi.tools.Compression.gunzip(java.io.File,java.io.File,boolean)::CD,16627:CD,16633:CD,16634:CD,16666:JM,16671
16627 :: NORM :: declaration :: Ljava/io/FileOutputStream :: v7 = new java.io.FileOutputStream::
16633 :: NORM :: declaration :: Ljava/io/BufferedInputStream :: v10 = new java.io.BufferedInputStream::CF,16634
16634 :: NORM :: declaration :: Ljava/io/FileInputStream :: v11 = new java.io.FileInputStream::
16666 :: PRED :: IF :: Z :: if (p3 $deleteSource  == #(0)) goto 89::CD,16667:CD,16671:JM,16666
16667 :: CALL :: call :: Z :: v22 = p2 $dest .exists()::JM,16666:JM,16671
16671 :: PRED :: IF :: Z :: if (v22 == #(0)) goto 89::CD,16672:JM,16666:JM,16671
16672 :: CALL :: call :: Z :: v24 = p1 $source .delete()::JM,16666:JM,16671
304 :: ENTR :: entry :: null :: ai.susi.DAO.<clinit>()::CD,307:CD,308:CD,318:CD,372:CD,373
307 :: EXPR :: assign :: Ljava/lang/Class :: v2 = metadata <Application,Lai/susi/DAO>-><Primordial,Ljava/lang/Class>::
308 :: CALL :: call :: Z :: v4 = v2.desiredAssertionStatus()::
318 :: NORM :: declaration :: Ljava/util/HashMap :: v9 = new java.util.HashMap::
16704 :: ENTR :: entry :: null :: ai.susi.mind.SusiInference.simpleMemoryProcess(java.lang.String)::JM,10656:CD,16719:CD,16725
16719 :: CALL :: call :: Lorg/json/JSONObject :: v11 = v3.put(#(type), v9)::CL,13370
16725 :: CALL :: call :: Lorg/json/JSONObject :: v14 = v3.put(#(expression), p1 $expression )::CL,13370
16744 :: ENTR :: entry :: null :: org.json.JSONObject.Null.equals(java.lang.Object)::JM,16750:CF,16745:CD,16749
16745 :: EXIT :: exit :: Z :: org.json.JSONObject.Null.equals(java.lang.Object)::JM,19327:JM,20339
16749 :: PRED :: IF :: Z :: if (p1 $object  == #(null)) goto 12::CD,16750:CD,16752
16750 :: PRED :: IF :: Z :: if (p1 $object  == p0 $this ) goto 12::CD,16751:CD,16752
16751 :: NORM :: compound :: Z :: return #(0)::CF,16745
16752 :: NORM :: compound :: Z :: return #(1)::CF,16745
372 :: NORM :: declaration :: Ljava/util/Random :: v30 = new java.util.Random::CF,373
373 :: CALL :: call :: J :: v32 = currentTimeMillis()::
408 :: ENTR :: entry :: null :: ai.susi.tools.OS.<clinit>()::CD,411:CD,412:CD,422:CD,428:CD,434:CD,438:CD,445:CD,566:CD,568:CD,569:CD,574:CD,576:CD,577:CD,582:CD,584:CD,585
411 :: EXPR :: assign :: Ljava/lang/Class :: v2 = metadata <Application,Lai/susi/tools/OS>-><Primordial,Ljava/lang/Class>::
412 :: CALL :: call :: Z :: v4 = v2.desiredAssertionStatus()::
422 :: NORM :: declaration :: Ljava/util/HashMap :: v9 = new java.util.HashMap::
428 :: NORM :: declaration :: Ljava/util/HashMap :: v11 = new java.util.HashMap::
434 :: NORM :: declaration :: Ljava/util/HashSet :: v13 = new java.util.HashSet::DD,438
438 :: EXPR :: modify :: Ljava/util/Set :: ai.susi.tools.OS.securePerm = v13::
445 :: CALL :: call :: Ljava/util/Properties :: v18 = getProperties()::
566 :: EXPR :: reference :: Ljava/util/Set :: v66 = ai.susi.tools.OS.securePerm::CF,568
568 :: EXPR :: assign :: Ljava/nio/file/attribute/PosixFilePermission :: v67 = OWNER_READ::
569 :: CALL :: call :: Z :: v69 = v66.add(v67)::
574 :: EXPR :: reference :: Ljava/util/Set :: v70 = ai.susi.tools.OS.securePerm::CF,576
576 :: EXPR :: assign :: Ljava/nio/file/attribute/PosixFilePermission :: v71 = OWNER_WRITE::
577 :: CALL :: call :: Z :: v73 = v70.add(v71)::
582 :: EXPR :: reference :: Ljava/util/Set :: v74 = ai.susi.tools.OS.securePerm::CF,584
584 :: EXPR :: assign :: Ljava/nio/file/attribute/PosixFilePermission :: v75 = OWNER_EXECUTE::
585 :: CALL :: call :: Z :: v77 = v74.add(v75)::
687 :: ENTR :: entry :: null :: ai.susi.server.HttpsMode.<clinit>()::JM,8553
788 :: ENTR :: entry :: null :: org.json.JSONObject.<clinit>()::
802 :: ENTR :: entry :: null :: ai.susi.tools.OS.System.<clinit>()::
17250 :: ENTR :: entry :: null :: ai.susi.tools.AIML2Susi.readAIMLCategory(org.w3c.dom.Node)::CE,17251:CD,17254:CD,17310:CD,17314:CD,17315:CD,17330:CD,17331:CD,17332:JM,17264:JM,17299:JM,17268:JM,17272:JM,17288:JM,17259:JM,17277:JM,17293:JM,17294
17251 :: EXIT :: exit :: Lorg/json/JSONObject :: ai.susi.tools.AIML2Susi.readAIMLCategory(org.w3c.dom.Node)::JM,15674
17254 :: CALL :: call :: Lorg/w3c/dom/NodeList :: v4 = p1 $category .getChildNodes()::JM,17264:JM,17314:JM,17299:JM,17268:JM,17254:JM,17272:JM,17288:JM,17259:JM,17277:JM,17293:JM,17310:JM,17294
17259 :: CALL :: call :: Lorg/w3c/dom/Node :: v10 = v4.item(v38)::JM,17264:JM,17314:JM,17299:JM,17268:JM,17272:JM,17288:JM,17259:JM,17277:JM,17293:JM,17310:JM,17294
17264 :: CALL :: call :: Ljava/lang/String :: v12 = v10.getNodeName()::JM,17264:JM,17314:JM,17299:JM,17268:JM,17272:JM,17288:JM,17277:JM,17293:JM,17294
17268 :: CALL :: call :: Ljava/lang/String :: v14 = v12.toLowerCase()::JM,17299:JM,17268:JM,17272:JM,17288:JM,17277:JM,17293:JM,17294
17272 :: CALL :: call :: Z :: v17 = v14.equals(#(pattern))::JM,17299:JM,17272:JM,17288:JM,17277:JM,17293:JM,17294
17277 :: PRED :: IF :: Z :: if (v17 == #(0)) goto 64::CD,17283:CD,17288:CD,17293:CD,17328:CD,17329:JM,17299:JM,17272:JM,17277:JM,17294
895 :: ENTR :: entry :: null :: ai.susi.mind.SusiMemory.<clinit>()::CD,898:CD,919:CD,921:CD,950:CD,952:CD,956:CD,958:CD,962:CD,964:CD,966:CD,980:CD,981:CD,983:CD,997:CD,999:CD,1000
898 :: NORM :: declaration :: [Ljava/lang/String :: v3 = new java.lang.String[]::DD,919
899 :: EXPR :: modify :: Ljava/lang/Object :: v3[#(0)] = #(I don't know how to a...)::
17283 :: CALL :: call :: [Ljava/lang/String :: v27 = readAIMLSentences(v25)::JM,17328:CL,19190
903 :: EXPR :: modify :: Ljava/lang/Object :: v3[#(1)] = #(You can ask me anythi...)::
17288 :: CALL :: call :: Z :: v20 = v14.equals(#(that))::JM,17299:JM,17272:JM,17288:JM,17277:JM,17293:JM,17294
907 :: EXPR :: modify :: Ljava/lang/Object :: v3[#(2)] = #(Oh sorry, I don't und...)::
17293 :: PRED :: IF :: Z :: if (v20 != #(0)) goto 92::CF,17328:CD,17294:CD,17299:CD,17329:JM,17272:JM,17288:JM,17277:JM,17293
17294 :: CALL :: call :: Z :: v23 = v14.equals(#(template))::JM,17299:JM,17272:JM,17288:JM,17277:JM,17293:JM,17294
911 :: EXPR :: modify :: Ljava/lang/Object :: v3[#(3)] = #(Das weiss ich leider ...)::
915 :: EXPR :: modify :: Ljava/lang/Object :: v3[#(4)] = #(I don't know.)::
17299 :: PRED :: IF :: Z :: if (v23 == #(0)) goto 92::CF,17328:CD,17305:CD,17329
919 :: EXPR :: modify :: [Ljava/lang/String :: ai.susi.mind.SusiMemory.failterms = v3::
921 :: NORM :: declaration :: [Ljava/lang/String :: v15 = new java.lang.String[]::DD,950
17305 :: CALL :: call :: [Ljava/lang/String :: v31 = readAIMLSentences(v29)::JM,17329:CL,19190
922 :: EXPR :: modify :: Ljava/lang/Object :: v15[#(0)] = #(was ?(.*))::
17309 :: EXPR :: assign :: Ljava/lang/Object :: v35 = v38 + #(1)::DD,17332:CF,17330
926 :: EXPR :: modify :: Ljava/lang/Object :: v15[#(1)] = #(.+ (?:.+ )+(.+))::
17310 :: CALL :: call :: I :: v8 = v4.getLength()::JM,17264:JM,17314:JM,17299:JM,17268:JM,17272:JM,17288:JM,17259:JM,17277:JM,17293:JM,17310:JM,17294
930 :: EXPR :: modify :: Ljava/lang/Object :: v15[#(2)] = #((.*))::
17314 :: PRED :: IF :: Z :: if (v38 < v8) goto 20::CD,17259:CD,17264:CD,17268:CD,17272:CD,17277:CD,17309:CD,17310:CD,17328:CD,17329:CD,17330:CD,17331:CD,17332:JM,17314:JM,17299:JM,17288:JM,17293:JM,17294:CF,17315
17315 :: PRED :: IF :: Z :: if (v36 == #(null)) goto 125::CD,17316:CD,17327
17316 :: PRED :: IF :: Z :: if (v37 == #(null)) goto 125::CD,17317:CD,17326:CD,17327
17317 :: CALL :: call :: Lorg/json/JSONObject :: v40 = answerIntent(v36, #(null), v37, #(0), #(null), #(null))::JM,17326:CL,14823
934 :: EXPR :: modify :: Ljava/lang/Object :: v15[#(3)] = #((.*) ?sorry ?(.*))::
938 :: EXPR :: modify :: Ljava/lang/Object :: v15[#(4)] = #((.*) ?you ?(.*))::
942 :: EXPR :: modify :: Ljava/lang/Object :: v15[#(5)] = #(what ?(.*))::
17326 :: NORM :: compound :: Lorg/json/JSONObject :: return v40::DD,17251
17327 :: NORM :: compound :: Lorg/json/JSONObject :: return #(null)::DD,17251
17328 :: EXPR :: assign :: null :: PHI v32 = v27, v36, v36, v36::CF,17329:DD,17330
17329 :: EXPR :: assign :: null :: PHI v33 = v37, v37, v37, v31::DD,17331:CF,17309
946 :: EXPR :: modify :: Ljava/lang/Object :: v15[#(6)] = #(you ?(.*))::
17330 :: EXPR :: assign :: null :: PHI v36 = #(null), v32::CF,17331:DD,17315:DD,17328
17331 :: EXPR :: assign :: null :: PHI v37 = #(null), v33::CF,17332:DD,17316:DD,17329
17332 :: EXPR :: assign :: null :: PHI v38 = #(0), v35::JM,17264:JM,17299:JM,17268:JM,17272:JM,17288:JM,17259:JM,17277:JM,17293:JM,17310:JM,17294:DD,17309:DD,17314
950 :: EXPR :: modify :: [Ljava/lang/String :: ai.susi.mind.SusiMemory.donotremoveunanswered = v15::
952 :: NORM :: declaration :: Ljava/util/HashSet :: v24 = new java.util.HashSet::DD,956
956 :: EXPR :: modify :: Ljava/util/Set :: ai.susi.mind.SusiMemory.failset = v24::
958 :: NORM :: declaration :: Ljava/util/HashSet :: v26 = new java.util.HashSet::DD,962
962 :: EXPR :: modify :: Ljava/util/Set :: ai.susi.mind.SusiMemory.dnruset = v26::
964 :: EXPR :: reference :: [Ljava/lang/String :: v28 = ai.susi.mind.SusiMemory.failterms::DD,966
966 :: EXPR :: assign :: I :: v29 = v28.length::DD,980
968 :: EXPR :: reference :: Ljava/lang/Object :: v30 = v28[v35]::
972 :: EXPR :: reference :: Ljava/util/Set :: v31 = ai.susi.mind.SusiMemory.failset::
974 :: CALL :: call :: Z :: v33 = v31.add(v30)::
979 :: EXPR :: assign :: Ljava/lang/Object :: v34 = v35 + #(1)::DD,999
980 :: PRED :: IF :: Z :: if (v35 < v29) goto 110::CD,972:CD,974:CD,979:CD,999
981 :: EXPR :: reference :: [Ljava/lang/String :: v36 = ai.susi.mind.SusiMemory.donotremoveunanswered::DD,983
983 :: EXPR :: assign :: I :: v37 = v36.length::DD,997
985 :: EXPR :: reference :: Ljava/lang/Object :: v38 = v36[v44]::
989 :: EXPR :: reference :: Ljava/util/Set :: v39 = ai.susi.mind.SusiMemory.dnruset::
17373 :: ENTR :: entry :: null :: org.json.JSONObject.length()::CE,17374:CD,17380:CD,17384
17374 :: EXIT :: exit :: I :: org.json.JSONObject.length()::JM,15679:JM,17769:JM,17959:JM,17917
991 :: CALL :: call :: Z :: v41 = v39.add(v38)::
17377 :: EXPR :: reference :: Ljava/util/Map :: v3 = p0 $this .map::JM,17384
996 :: EXPR :: assign :: Ljava/lang/Object :: v42 = v44 + #(1)::DD,1000
17380 :: CALL :: call :: I :: v5 = v3.size()::JM,17384
997 :: PRED :: IF :: Z :: if (v44 < v37) goto 144::CD,989:CD,991:CD,996:CD,1000
999 :: EXPR :: assign :: null :: PHI v35 = #(0), v34::DD,979:DD,980
1000 :: EXPR :: assign :: null :: PHI v44 = #(0), v42::DD,996:DD,997
17384 :: NORM :: compound :: I :: return v5::CF,17374
17419 :: NORM :: declaration :: Ljava/lang/UnsupportedOperationException :: v32 = new java.lang.UnsupportedOperationException::
17420 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v33 = new java.lang.StringBuilder::
17425 :: CALL :: call :: Ljava/lang/String :: v37 = p1 $origin .getAbsolutePath()::
17429 :: CALL :: call :: Ljava/lang/StringBuilder :: v39 = v33.append(v37)::
17434 :: CALL :: call :: Ljava/lang/String :: v41 = v39.toString()::
1085 :: ENTR :: entry :: null :: ai.susi.json.JsonRepository.<clinit>()::CD,1088:CD,1094:CD,1100:CD,1127:CD,1129:CD,1177:CD,1187:CD,1197:CD,1207
1088 :: CALL :: call :: [B :: v4 = #($P).getBytes()::
1094 :: CALL :: call :: [B :: v7 = #($D).getBytes()::
1100 :: CALL :: call :: [B :: v10 = #($U).getBytes()::
17509 :: ENTR :: entry :: null :: ai.susi.mind.SusiSkill.ID.language()::CD,17518:CD,17523
1127 :: EXPR :: reference :: Lai/susi/json/JsonRepository$Mode :: v19 = ai.susi.json.JsonRepository$Mode.COMPRESSED::CF,1129
1129 :: EXPR :: modify :: Lai/susi/json/JsonRepository$Mode :: ai.susi.json.JsonRepository.COMPRESSED_MODE = v19::
17515 :: EXPR :: reference :: Ljava/lang/String :: v4 = p0 $this .skillpath::JM,17523:JM,17518
17518 :: CALL :: call :: Z :: v7 = v4.startsWith(#(/susi_server/conf/susi/))::JM,17523:JM,17518
17523 :: PRED :: IF :: Z :: if (v7 == #(0)) goto 35::CD,17533:CD,17541:CD,17546
17533 :: CALL :: call :: Lai/susi/mind/SusiLanguage :: v28 = parse(v26)::CL,19264
17538 :: EXPR :: reference :: Ljava/lang/String :: v9 = p0 $this .skillpath::JM,17541:JM,17546
17541 :: CALL :: call :: Z :: v12 = v9.startsWith(#(/susi_skill_data))::JM,17541:JM,17546
17546 :: PRED :: IF :: Z :: if (v12 == #(0)) goto 70::CD,17550:CD,17555:CD,17556
17547 :: EXPR :: reference :: Ljava/lang/String :: v13 = p0 $this .skillpath::JM,17555:JM,17550
17550 :: CALL :: call :: [Ljava/lang/String :: v16 = v13.split(#(/))::JM,17555:JM,17550
17555 :: EXPR :: assign :: I :: v17 = v16.length::DD,17556
17556 :: PRED :: IF :: Z :: if (v17 <= #(5)) goto 70::CD,17561
1177 :: CALL :: call :: Ljava/util/TimeZone :: v40 = getTimeZone(#(GMT))::
17561 :: CALL :: call :: Lai/susi/mind/SusiLanguage :: v21 = parse(v19)::CL,19264
1187 :: CALL :: call :: Ljava/util/TimeZone :: v44 = getTimeZone(#(GMT))::
1197 :: CALL :: call :: Ljava/util/TimeZone :: v48 = getTimeZone(#(GMT))::
17587 :: ENTR :: entry :: null :: ai.susi.mind.SusiLinguistics.learn(ai.susi.mind.SusiLanguage,org.json.JSONObject)::CD,17592:CD,17597:CD,17608:CD,17613:CD,17624:CD,17629:CD,17640:CD,17642:CD,17647:CD,17660:CD,17662:CD,17668:CD,17672:CD,17696:CD,17700:CD,17701:CD,17703:CD,17708:CD,17721:CD,17723:CD,17737:CD,17739:CD,17744:CD,17757:CD,17759:CD,17765:CD,17769
1207 :: CALL :: call :: Ljava/util/TimeZone :: v52 = getTimeZone(#(GMT))::
17592 :: CALL :: call :: Z :: v6 = p2 $json .has(#(synonyms))::JM,17597:CL,10233
17597 :: PRED :: IF :: Z :: if (v6 == #(0)) goto 18::CD,17598:JM,14332
17598 :: CALL :: call :: Lorg/json/JSONObject :: v11 = p2 $json .getJSONObject(#(synonyms))::CL,10550
17608 :: CALL :: call :: Z :: v15 = p2 $json .has(#(filler))::JM,17613:CL,10233
17613 :: PRED :: IF :: Z :: if (v15 == #(0)) goto 44::CD,17614:JM,14350
17614 :: CALL :: call :: Lorg/json/JSONArray :: v19 = p2 $json .getJSONArray(#(filler))::CL,14746
17624 :: CALL :: call :: Z :: v23 = p2 $json .has(#(categories))::JM,17629:CL,10233
17629 :: PRED :: IF :: Z :: if (v23 == #(0)) goto 70::CD,17630:JM,14332
17630 :: CALL :: call :: Lorg/json/JSONObject :: v27 = p2 $json .getJSONObject(#(categories))::CL,10550
17640 :: EXPR :: reference :: Ljava/util/Map :: v29 = ai.susi.mind.SusiLinguistics.synonyms::JM,17647
1258 :: ENTR :: entry :: null :: ai.susi.json.JsonRepository.Mode.<clinit>()::CD,1261:CD,1267
17642 :: CALL :: call :: Z :: v31 = v29.containsKey(p1 $language )::JM,17647:JM,17744:JM,17708
1261 :: NORM :: declaration :: Lai/susi/json/JsonRepository$Mode :: v2 = new ai.susi.json.JsonRepository$Mode::DD,1267
17647 :: PRED :: IF :: Z :: if (v31 != #(0)) goto 108::CD,17648:CD,17650:CD,17654
17648 :: EXPR :: reference :: Ljava/util/Map :: v32 = ai.susi.mind.SusiLinguistics.synonyms::CF,17650
17650 :: NORM :: declaration :: Ljava/util/concurrent/ConcurrentHashMap :: v33 = new java.util.concurrent.ConcurrentHashMap::JM,17744:JM,17708:JM,17647
1267 :: EXPR :: modify :: Lai/susi/json/JsonRepository$Mode :: ai.susi.json.JsonRepository$Mode.COMPRESSED = v2::
17654 :: CALL :: call :: Ljava/lang/Object :: v36 = v32.put(p1 $language , v33)::JM,17744:JM,17708:JM,17647
17660 :: EXPR :: reference :: Ljava/util/Map :: v37 = ai.susi.mind.SusiLinguistics.synonyms::
17662 :: CALL :: call :: Ljava/lang/Object :: v39 = v37.get(p1 $language )::JM,17744:JM,17708:JM,17647
17668 :: CALL :: call :: Ljava/util/Set :: v42 = v12.keySet()::JM,17700:CL,10537
17672 :: CALL :: call :: Ljava/util/Iterator :: v44 = v42.iterator()::JM,17700
17677 :: CALL :: call :: Ljava/lang/Object :: v48 = v44.next()::JM,17700
17682 :: CALL :: call :: Lorg/json/JSONArray :: v51 = v12.getJSONArray(v49)::CL,14746
1309 :: ENTR :: entry :: null :: ai.susi.mind.SusiUtterance.<clinit>()::CD,1312:CD,1316:CD,1322:CD,1326:CD,1332:CD,1338
1312 :: CALL :: call :: Ljava/lang/String :: v4 = quote(#((^\S+)))::
17696 :: CALL :: call :: Z :: v46 = v44.hasNext()::JM,17700
1316 :: CALL :: call :: Ljava/util/regex/Pattern :: v6 = compile(v4)::
17700 :: PRED :: IF :: Z :: if (v46 != #(0)) goto 138::CD,17677:CD,17682:CD,17696:JM,17700
17701 :: EXPR :: reference :: Ljava/util/Map :: v55 = ai.susi.mind.SusiLinguistics.filler::JM,17708
17703 :: CALL :: call :: Z :: v57 = v55.containsKey(p1 $language )::JM,17708:JM,17744:JM,17647
1322 :: CALL :: call :: Ljava/lang/String :: v9 = quote(#((.*)))::
17708 :: PRED :: IF :: Z :: if (v57 != #(0)) goto 209::CD,17709:CD,17711:CD,17715
17709 :: EXPR :: reference :: Ljava/util/Map :: v58 = ai.susi.mind.SusiLinguistics.filler::CF,17711
1326 :: CALL :: call :: Ljava/util/regex/Pattern :: v11 = compile(v9)::
17711 :: NORM :: declaration :: Ljava/util/HashSet :: v59 = new java.util.HashSet::JM,17744:JM,17708:JM,17647
17715 :: CALL :: call :: Ljava/lang/Object :: v62 = v58.put(p1 $language , v59)::JM,17744:JM,17708:JM,17647
1332 :: CALL :: call :: Ljava/util/regex/Pattern :: v14 = compile(#(  ))::
17721 :: EXPR :: reference :: Ljava/util/Map :: v63 = ai.susi.mind.SusiLinguistics.filler::
1338 :: CALL :: call :: Ljava/util/regex/Pattern :: v17 = compile(#(,|;:))::
17723 :: CALL :: call :: Ljava/lang/Object :: v65 = v63.get(p1 $language )::JM,17744:JM,17708:JM,17647
1353 :: ENTR :: entry :: null :: ai.susi.mind.SusiInference.Type.<clinit>()::
17737 :: EXPR :: reference :: Ljava/util/Map :: v70 = ai.susi.mind.SusiLinguistics.categories::JM,17744
17739 :: CALL :: call :: Z :: v72 = v70.containsKey(p1 $language )::JM,17744:JM,17708:JM,17647
17744 :: PRED :: IF :: Z :: if (v72 != #(0)) goto 263::CD,17745:CD,17747:CD,17751
17745 :: EXPR :: reference :: Ljava/util/Map :: v73 = ai.susi.mind.SusiLinguistics.categories::CF,17747
17747 :: NORM :: declaration :: Ljava/util/concurrent/ConcurrentHashMap :: v74 = new java.util.concurrent.ConcurrentHashMap::JM,17744:JM,17708:JM,17647
17751 :: CALL :: call :: Ljava/lang/Object :: v77 = v73.put(p1 $language , v74)::JM,17744:JM,17708:JM,17647
17757 :: EXPR :: reference :: Ljava/util/Map :: v78 = ai.susi.mind.SusiLinguistics.categories::
17759 :: CALL :: call :: Ljava/lang/Object :: v80 = v78.get(p1 $language )::JM,17744:JM,17708:JM,17647
17765 :: CALL :: call :: I :: v83 = v28.length()::JM,17769:CL,17373
17769 :: PRED :: IF :: Z :: if (v83 <= #(0)) goto 345::CD,17770:CD,17774:CD,17798:CD,17802
17770 :: CALL :: call :: Ljava/util/Set :: v85 = v28.keySet()::JM,17802:CL,10537
17774 :: CALL :: call :: Ljava/util/Iterator :: v87 = v85.iterator()::JM,17802
17779 :: CALL :: call :: Ljava/lang/Object :: v91 = v87.next()::JM,17802
17784 :: CALL :: call :: Lorg/json/JSONArray :: v94 = v28.getJSONArray(v92)::CL,14746
17798 :: CALL :: call :: Z :: v89 = v87.hasNext()::JM,17802
17802 :: PRED :: IF :: Z :: if (v89 != #(0)) goto 302::CD,17779:CD,17784:CD,17798:JM,17802
1467 :: ENTR :: entry :: null :: ai.susi.mind.SusiAction.<clinit>()::CD,1470:CD,1471:CD,1480:CD,1486:CD,1492
1470 :: NORM :: declaration :: Ljava/util/Random :: v2 = new java.util.Random::CF,1471
1471 :: CALL :: call :: J :: v4 = currentTimeMillis()::
1480 :: CALL :: call :: Ljava/util/regex/Pattern :: v8 = compile(#((?:(?:.*)[\?\!\s,\.;-...))::
1486 :: CALL :: call :: Ljava/util/regex/Pattern :: v11 = compile(#((?:.*?)\^(.*?)\^>([_a...))::
1492 :: CALL :: call :: Ljava/util/regex/Pattern :: v14 = compile(#(.*?`([^`]*?)`.*?))::
1507 :: ENTR :: entry :: null :: ai.susi.mind.SusiIntent.<clinit>()::CD,1510
1510 :: CALL :: call :: Ljava/util/regex/Pattern :: v4 = compile(#( ))::
17898 :: ENTR :: entry :: null :: org.json.JSONObject.write(java.io.Writer,int,int)::CE,17899:CD,17905:CD,17909:CD,17913:CD,17917:CD,18030:CD,18034:JM,17938:JM,17971:JM,18021:JM,17996
17899 :: EXIT :: exit :: Ljava/io/Writer :: org.json.JSONObject.write(java.io.Writer,int,int)::JM,16249
1519 :: ENTR :: entry :: null :: ai.susi.mind.SusiUtterance.Type.<clinit>()::
17905 :: CALL :: call :: I :: v8 = p0 $this .length()::JM,17959:JM,17917:CL,17373
17909 :: CALL :: call :: Ljava/util/Iterator :: v10 = p0 $this .keys()::JM,18020:CL,19300
17913 :: CALL :: call :: V :: p1 $writer .write(#(123))::JM,18034:JM,17938:JM,17971:JM,18021:JM,17996
17917 :: PRED :: IF :: Z :: if (v8 != #(1)) goto 87::CD,17918:CD,17922:CD,17926:CD,17930:CD,17934:CD,17938:CD,17946:CD,17951:CD,17959:JM,18020
17918 :: CALL :: call :: Ljava/lang/Object :: v42 = v10.next()::JM,18020
17922 :: CALL :: call :: Ljava/lang/String :: v44 = v42.toString()::JM,18020
17926 :: CALL :: call :: Ljava/lang/String :: v46 = quote(v44)::CL,13280
17930 :: CALL :: call :: V :: p1 $writer .write(v46)::JM,18034:JM,17938:JM,17971:JM,18021:JM,17996
17934 :: CALL :: call :: V :: p1 $writer .write(#(58))::JM,18034:JM,17938:JM,17971:JM,18021:JM,17996
17938 :: PRED :: IF :: Z :: if (p2 $indentFactor  <= #(0)) goto 66::CD,17939:JM,18034:JM,17938:JM,17971:JM,18021:JM,17996
17939 :: CALL :: call :: V :: p1 $writer .write(#(32))::JM,18034:JM,17938:JM,17971:JM,18021:JM,17996
17943 :: EXPR :: reference :: Ljava/util/Map :: v50 = p0 $this .map::
17946 :: CALL :: call :: Ljava/lang/Object :: v52 = v50.get(v42)::JM,18020
17951 :: CALL :: call :: Ljava/io/Writer :: v54 = writeValue(p1 $writer , v52, p2 $indentFactor , p3 $indent )::CL,19314
17959 :: PRED :: IF :: Z :: if (v8 == #(0)) goto 212::CD,18016:CD,18020:CD,18021:CD,18026:CD,18042:JM,18034:JM,17938:JM,17971:JM,17996
17962 :: CALL :: call :: Ljava/lang/Object :: v18 = v10.next()::JM,18020
17966 :: PRED :: IF :: Z :: if (v38 == #(0)) goto 119::CD,17967:JM,18034:JM,17938:JM,18021:JM,17996:CF,17971
17967 :: CALL :: call :: V :: p1 $writer .write(#(44))::JM,18034:JM,17938:JM,17971:JM,18021:JM,17996
17971 :: PRED :: IF :: Z :: if (p2 $indentFactor  <= #(0)) goto 131::CD,17972:JM,18034:JM,17938:JM,17971:JM,18021:JM,17996
17972 :: CALL :: call :: V :: p1 $writer .write(#(10))::JM,18034:JM,17938:JM,17971:JM,18021:JM,17996
17976 :: CALL :: call :: V :: indent(p1 $writer , v14)::CL,19547
17980 :: CALL :: call :: Ljava/lang/String :: v25 = v18.toString()::JM,18020
17984 :: CALL :: call :: Ljava/lang/String :: v27 = quote(v25)::CL,13280
17988 :: CALL :: call :: V :: p1 $writer .write(v27)::JM,18034:JM,17938:JM,17971:JM,18021:JM,17996
17992 :: CALL :: call :: V :: p1 $writer .write(#(58))::JM,18034:JM,17938:JM,17971:JM,18021:JM,17996
17996 :: PRED :: IF :: Z :: if (p2 $indentFactor  <= #(0)) goto 164::CD,17997:JM,18034:JM,17938:JM,17971:JM,18021:JM,17996
17997 :: CALL :: call :: V :: p1 $writer .write(#(32))::JM,18034:JM,17938:JM,17971:JM,18021:JM,17996
18001 :: EXPR :: reference :: Ljava/util/Map :: v33 = p0 $this .map::
1620 :: ENTR :: entry :: null :: ai.susi.mind.SusiAction.RenderType.<clinit>()::
18004 :: CALL :: call :: Ljava/lang/Object :: v35 = v33.get(v18)::JM,18020
18009 :: CALL :: call :: Ljava/io/Writer :: v37 = writeValue(p1 $writer , v35, p2 $indentFactor , v14)::CL,19314
18016 :: CALL :: call :: Z :: v16 = v10.hasNext()::JM,18020
18020 :: PRED :: IF :: Z :: if (v16 != #(0)) goto 100::CD,17962:CD,17966:CD,17971:CD,17976:CD,17980:CD,17984:CD,17988:CD,17992:CD,17996:CD,18004:CD,18009:CD,18016:CD,18042:JM,18020:CF,18021
18021 :: PRED :: IF :: Z :: if (p2 $indentFactor  <= #(0)) goto 206::CD,18022:JM,18034:JM,17938:JM,17971:JM,18021:JM,17996
18022 :: CALL :: call :: V :: p1 $writer .write(#(10))::JM,18034:JM,17938:JM,17971:JM,18021:JM,17996
18026 :: CALL :: call :: V :: indent(p1 $writer , p3 $indent )::CL,19547
18030 :: CALL :: call :: V :: p1 $writer .write(#(125))::JM,18034:JM,17938:JM,17971:JM,18021:JM,17996
18034 :: NORM :: compound :: Ljava/io/Writer :: return p1 $writer ::DD,17899
18042 :: EXPR :: assign :: null :: PHI v38 = #(0), #(1)::JM,18020:DD,17966
18112 :: ENTR :: entry :: null :: org.json.JSONTokener.next()::CE,18113:CD,18119:CD,18189:CD,18196:CD,18198
18113 :: EXIT :: exit :: C :: org.json.JSONTokener.next()::JM,16272:JM,16273:JM,16271:JM,16455:JM,18384:JM,18313:JM,18324:JM,19600
18116 :: EXPR :: reference :: Z :: v3 = p0 $this .usePrevious::DD,18119
18119 :: PRED :: IF :: Z :: if (v3 == #(0)) goto 21::CD,18130:CD,18141:CD,18198
18123 :: EXPR :: reference :: C :: v12 = p0 $this .previous::DD,18198
18127 :: EXPR :: reference :: Ljava/io/Reader :: v5 = p0 $this .reader::JM,18198:JM,18141
18130 :: CALL :: call :: I :: v7 = v5.read()::JM,18198:JM,18141
18141 :: PRED :: IF :: Z :: if (v7 > #(0)) goto 54::CF,18198
18189 :: EXPR :: assign :: C :: v29 = CONVERT I to C v13::DD,18190
18190 :: EXPR :: modify :: C :: p0 $this .previous = v29::
18193 :: EXPR :: reference :: C :: v30 = p0 $this .previous::DD,18196
18196 :: NORM :: compound :: C :: return v30::DD,18113
18198 :: EXPR :: assign :: null :: PHI v13 = v12, v7, #(0)::DD,18189
18239 :: ENTR :: entry :: null :: org.json.JSONTokener.toString()::CE,18240:CD,18243:CD,18251:CD,18256:CD,18264:CD,18269:CD,18277:CD,18282:CD,18287:CD,18291
18240 :: EXIT :: exit :: Ljava/lang/String :: org.json.JSONTokener.toString()::
18243 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v3 = new java.lang.StringBuilder::JM,18291
18248 :: EXPR :: reference :: J :: v6 = p0 $this .index::JM,18291
18251 :: CALL :: call :: Ljava/lang/StringBuilder :: v8 = v3.append(v6)::JM,18291
18256 :: CALL :: call :: Ljava/lang/StringBuilder :: v11 = v8.append(#( [character ))::JM,18291
18261 :: EXPR :: reference :: J :: v12 = p0 $this .character::JM,18291
18264 :: CALL :: call :: Ljava/lang/StringBuilder :: v14 = v11.append(v12)::JM,18291
18269 :: CALL :: call :: Ljava/lang/StringBuilder :: v17 = v14.append(#( line ))::JM,18291
18274 :: EXPR :: reference :: J :: v18 = p0 $this .line::JM,18291
18277 :: CALL :: call :: Ljava/lang/StringBuilder :: v20 = v17.append(v18)::JM,18291
18282 :: CALL :: call :: Ljava/lang/StringBuilder :: v23 = v20.append(#(]))::JM,18291
18287 :: CALL :: call :: Ljava/lang/String :: v25 = v23.toString()::JM,18291
18291 :: NORM :: compound :: Ljava/lang/String :: return v25::DD,18240
18300 :: ENTR :: entry :: null :: org.json.JSONTokener.nextString(char)::CE,18301:CD,18305:CD,18309:CD,18313:CD,18314:CD,18378:CD,18384:CD,18385:CD,18389
18301 :: EXIT :: exit :: Ljava/lang/String :: org.json.JSONTokener.nextString(char)::JM,16387
18305 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v4 = new java.lang.StringBuilder::JM,18389
18309 :: CALL :: call :: C :: v7 = p0 $this .next()::JM,18384:JM,18313:CL,18112
18313 :: PRED :: IF :: null :: switch v7::CD,18309:CD,18320:CD,18324:CF,18384
18314 :: CALL :: call :: Lorg/json/JSONException :: v46 = p0 $this .syntaxError(#(Unterminated string))::CL,16281
18320 :: CALL :: call :: C :: v9 = p0 $this .next()::JM,18324:CL,18112
18324 :: PRED :: IF :: null :: switch v9::CD,18325:CD,18331:CD,18337:CD,18343:CD,18349:CD,18355:CD,18360:CD,18365:CD,18366:CD,18372
18325 :: CALL :: call :: Ljava/lang/StringBuilder :: v12 = v4.append(#(8))::
18331 :: CALL :: call :: Ljava/lang/StringBuilder :: v15 = v4.append(#(9))::
18337 :: CALL :: call :: Ljava/lang/StringBuilder :: v18 = v4.append(#(10))::
18343 :: CALL :: call :: Ljava/lang/StringBuilder :: v21 = v4.append(#(12))::
18349 :: CALL :: call :: Ljava/lang/StringBuilder :: v24 = v4.append(#(13))::
18355 :: CALL :: call :: Ljava/lang/String :: v27 = p0 $this .next(#(4))::JM,18365:CL,19587
18360 :: CALL :: call :: I :: v30 = parseInt(v27, #(16))::JM,18365
18365 :: EXPR :: assign :: C :: v31 = CONVERT I to C v30::
18366 :: CALL :: call :: Ljava/lang/StringBuilder :: v33 = v4.append(v31)::
18372 :: CALL :: call :: Ljava/lang/StringBuilder :: v35 = v4.append(v9)::
18378 :: CALL :: call :: Lorg/json/JSONException :: v43 = p0 $this .syntaxError(#(Illegal escape.))::CL,16281
18384 :: PRED :: IF :: Z :: if (v7 != p1 $quote ) goto 257::CD,18309:CD,18313:CD,18390:JM,18389
18385 :: CALL :: call :: Ljava/lang/String :: v40 = v4.toString()::JM,18389
18389 :: NORM :: compound :: Ljava/lang/String :: return v40::DD,18301
18390 :: CALL :: call :: Ljava/lang/StringBuilder :: v37 = v4.append(v7)::
18446 :: CALL :: call :: Lorg/json/JSONException :: v36 = p1 $x .syntaxError(#(A JSONArray text must...))::CL,16281
18452 :: CALL :: call :: C :: v9 = p1 $x .nextClean()::JM,18456:CL,16263
2070 :: ENTR :: entry :: null :: ai.susi.mind.SusiAction.SelectionType.<clinit>()::
18456 :: PRED :: IF :: Z :: if (v9 == #(93)) goto 133::CD,18460:CD,18464:CD,18494:CD,18498
18460 :: CALL :: call :: C :: v13 = p1 $x .nextClean()::JM,18464:CL,16263
18464 :: PRED :: IF :: Z :: if (v13 != #(44)) goto 61::CD,18471:CD,18473:CD,18485:CD,18489
18468 :: EXPR :: reference :: Ljava/util/ArrayList :: v16 = p0 $this .myArrayList::
18471 :: EXPR :: reference :: Ljava/lang/Object :: v17 = org.json.JSONObject.NULL::
18473 :: CALL :: call :: Z :: v19 = v16.add(v17)::
18482 :: EXPR :: reference :: Ljava/util/ArrayList :: v21 = p0 $this .myArrayList::
18485 :: CALL :: call :: Ljava/lang/Object :: v23 = p1 $x .nextValue()::CL,16373
18489 :: CALL :: call :: Z :: v25 = v21.add(v23)::
18494 :: CALL :: call :: C :: v27 = p1 $x .nextClean()::JM,18498:CL,16263
18498 :: PRED :: IF :: null :: switch v27::CD,18499:CD,18503
18499 :: CALL :: call :: C :: v29 = p1 $x .nextClean()::JM,18503:CL,16263
18503 :: PRED :: IF :: Z :: if (v29 != #(93)) goto 119::CD,18460:CD,18464:CD,18494:CD,18498
2121 :: ENTR :: entry :: null :: ai.susi.mind.SusiInference.<clinit>()::CD,2135:CD,2139:CD,2141:CD,2145:CD,2147:CD,2151:CD,2153:CD,2157:CD,2159:CD,2161:CD,2165:CD,2168:CD,2174:CD,2176:CD,2180:CD,2183:CD,2189:CD,2191:CD,2195:CD,2198:CD,2204:CD,2206:CD,2210:CD,2213:CD,2219:CD,2221:CD,2225:CD,2228:CD,2234:CD,2236:CD,2240:CD,2243:CD,2249:CD,2251:CD,2255:CD,2258:CD,2264:CD,2266:CD,2270:CD,2273:CD,2279:CD,2281:CD,2285:CD,2288:CD,2294:CD,2296:CD,2300:CD,2303:CD,2309:CD,2311:CD,2315:CD,2318:CD,2324:CD,2326:CD,2330:CD,2333:CD,2339:CD,2341:CD,2345:CD,2348
18510 :: CALL :: call :: Lorg/json/JSONException :: v33 = p1 $x .syntaxError(#(Expected a ',' or ']'))::CL,16281
2135 :: NORM :: declaration :: Lai/susi/mind/SusiProcedures :: v7 = new ai.susi.mind.SusiProcedures::DD,2139
2139 :: EXPR :: modify :: Lai/susi/mind/SusiProcedures :: ai.susi.mind.SusiInference.flowProcedures = v7::
2141 :: NORM :: declaration :: Lai/susi/mind/SusiProcedures :: v9 = new ai.susi.mind.SusiProcedures::DD,2145
2145 :: EXPR :: modify :: Lai/susi/mind/SusiProcedures :: ai.susi.mind.SusiInference.memoryProcedures = v9::
2147 :: NORM :: declaration :: Lai/susi/mind/SusiProcedures :: v11 = new ai.susi.mind.SusiProcedures::DD,2151
2151 :: EXPR :: modify :: Lai/susi/mind/SusiProcedures :: ai.susi.mind.SusiInference.javascriptProcedures = v11::
18537 :: ENTR :: entry :: null :: org.json.JSONObject.stringToValue(java.lang.String)::CE,18538:CD,18541:CD,18546:JM,18658:JM,18562:JM,18594:JM,18600:JM,18571:JM,18636:JM,18606:JM,18607:JM,18547:JM,18580:JM,18581:JM,18582:JM,18615:JM,18553:JM,18588:JM,18620:JM,18621:JM,18622
2153 :: NORM :: declaration :: Lai/susi/mind/SusiProcedures :: v13 = new ai.susi.mind.SusiProcedures::DD,2157
18538 :: EXIT :: exit :: Ljava/lang/Object :: org.json.JSONObject.stringToValue(java.lang.String)::JM,16454
2157 :: EXPR :: modify :: Lai/susi/mind/SusiProcedures :: ai.susi.mind.SusiInference.prologProcedures = v13::
18541 :: CALL :: call :: Z :: v5 = p1 $string .equals(#())::JM,18658:JM,18562:JM,18594:JM,18600:JM,18571:JM,18636:JM,18606:JM,18607:JM,18546:JM,18547:JM,18580:JM,18581:JM,18582:JM,18615:JM,18553:JM,18588:JM,18620:JM,18621:JM,18622
2159 :: EXPR :: reference :: Lai/susi/mind/SusiProcedures :: v15 = ai.susi.mind.SusiInference.flowProcedures::
2161 :: CALL :: call :: Ljava/util/regex/Pattern :: v18 = compile(#(SQUASH))::
18546 :: PRED :: IF :: Z :: if (v5 == #(0)) goto 16::CD,18547:CD,18548:CD,18553:JM,18658:JM,18562:JM,18594:JM,18600:JM,18571:JM,18636:JM,18606:JM,18607:JM,18546:JM,18580:JM,18581:JM,18582:JM,18615:JM,18588:JM,18620:JM,18621:JM,18622
18547 :: NORM :: compound :: Ljava/lang/Object :: return p1 $string ::DD,18538
18548 :: CALL :: call :: Z :: v9 = p1 $string .equalsIgnoreCase(#(true))::JM,18658:JM,18562:JM,18594:JM,18600:JM,18571:JM,18636:JM,18606:JM,18607:JM,18546:JM,18580:JM,18581:JM,18582:JM,18615:JM,18553:JM,18588:JM,18620:JM,18621:JM,18622
2165 :: CALL :: call :: Ljava/util/function/BiFunction :: v20 = apply()::
2168 :: CALL :: call :: Ljava/lang/Object :: v22 = v15.put(v18, v20)::
18553 :: PRED :: IF :: Z :: if (v9 == #(0)) goto 30::CD,18554:CD,18556:CD,18557:CD,18562:JM,18658:JM,18594:JM,18600:JM,18571:JM,18636:JM,18606:JM,18607:JM,18546:JM,18580:JM,18581:JM,18582:JM,18615:JM,18553:JM,18588:JM,18620:JM,18621:JM,18622
18554 :: EXPR :: reference :: Ljava/lang/Boolean :: v60 = java.lang.Boolean.TRUE::CF,18556
18556 :: NORM :: compound :: Ljava/lang/Object :: return v60::DD,18538
18557 :: CALL :: call :: Z :: v12 = p1 $string .equalsIgnoreCase(#(false))::JM,18658:JM,18562:JM,18594:JM,18600:JM,18571:JM,18636:JM,18606:JM,18607:JM,18546:JM,18580:JM,18581:JM,18582:JM,18615:JM,18553:JM,18588:JM,18620:JM,18621:JM,18622
2174 :: EXPR :: reference :: Lai/susi/mind/SusiProcedures :: v23 = ai.susi.mind.SusiInference.flowProcedures::
2176 :: CALL :: call :: Ljava/util/regex/Pattern :: v26 = compile(#(FIRST))::
18562 :: PRED :: IF :: Z :: if (v12 == #(0)) goto 44::CD,18563:CD,18565:CD,18566:CD,18571:JM,18658:JM,18562:JM,18594:JM,18600:JM,18636:JM,18606:JM,18607:JM,18546:JM,18580:JM,18581:JM,18582:JM,18615:JM,18553:JM,18588:JM,18620:JM,18621:JM,18622
18563 :: EXPR :: reference :: Ljava/lang/Boolean :: v59 = java.lang.Boolean.FALSE::CF,18565
2180 :: CALL :: call :: Ljava/util/function/BiFunction :: v28 = apply()::
18565 :: NORM :: compound :: Ljava/lang/Object :: return v59::DD,18538
18566 :: CALL :: call :: Z :: v15 = p1 $string .equalsIgnoreCase(#(null))::JM,18658:JM,18562:JM,18594:JM,18600:JM,18571:JM,18636:JM,18606:JM,18607:JM,18546:JM,18580:JM,18581:JM,18582:JM,18615:JM,18553:JM,18588:JM,18620:JM,18621:JM,18622
2183 :: CALL :: call :: Ljava/lang/Object :: v30 = v23.put(v26, v28)::
18571 :: PRED :: IF :: Z :: if (v15 == #(0)) goto 56::CD,18572:CD,18574:CD,18575:CD,18580:JM,18658:JM,18562:JM,18594:JM,18600:JM,18571:JM,18636:JM,18606:JM,18607:JM,18546:JM,18581:JM,18582:JM,18615:JM,18553:JM,18588:JM,18620:JM,18621:JM,18622
18572 :: EXPR :: reference :: Ljava/lang/Object :: v58 = org.json.JSONObject.NULL::CF,18574
2189 :: EXPR :: reference :: Lai/susi/mind/SusiProcedures :: v31 = ai.susi.mind.SusiInference.flowProcedures::
18574 :: NORM :: compound :: Ljava/lang/Object :: return v58::DD,18538
2191 :: CALL :: call :: Ljava/util/regex/Pattern :: v34 = compile(#(REST))::
18575 :: CALL :: call :: C :: v17 = p1 $string .charAt(#(0))::JM,18658:JM,18562:JM,18594:JM,18600:JM,18571:JM,18636:JM,18606:JM,18607:JM,18546:JM,18580:JM,18581:JM,18582:JM,18615:JM,18553:JM,18588:JM,18620:JM,18621:JM,18622
2195 :: CALL :: call :: Ljava/util/function/BiFunction :: v36 = apply()::
18580 :: PRED :: IF :: Z :: if (v17 < #(48)) goto 75::CD,18581:CD,18582
18581 :: PRED :: IF :: Z :: if (v17 <= #(57)) goto 81::CD,18582:CD,18583:CD,18588:JM,18658:JM,18562:JM,18594:JM,18600:JM,18571:JM,18636:JM,18606:JM,18607:JM,18546:JM,18580:JM,18581:JM,18615:JM,18553:JM,18620:JM,18621:JM,18622
2198 :: CALL :: call :: Ljava/lang/Object :: v38 = v31.put(v34, v36)::
18582 :: PRED :: IF :: Z :: if (v17 != #(45)) goto 184::CD,18583:CD,18588:CD,18658:JM,18562:JM,18594:JM,18600:JM,18571:JM,18636:JM,18606:JM,18607:JM,18546:JM,18580:JM,18581:JM,18582:JM,18615:JM,18553:JM,18620:JM,18621:JM,18622
18583 :: CALL :: call :: I :: v23 = p1 $string .indexOf(#(46))::JM,18658:JM,18562:JM,18594:JM,18600:JM,18571:JM,18636:JM,18606:JM,18607:JM,18546:JM,18580:JM,18581:JM,18582:JM,18615:JM,18553:JM,18588:JM,18620:JM,18621:JM,18622
2204 :: EXPR :: reference :: Lai/susi/mind/SusiProcedures :: v39 = ai.susi.mind.SusiInference.memoryProcedures::
18588 :: PRED :: IF :: Z :: if (v23 > #(-1)) goto 119::CD,18589:CD,18594:CD,18607:CD,18611:CD,18615:JM,18658:JM,18562:JM,18600:JM,18571:JM,18636:JM,18606:JM,18546:JM,18580:JM,18581:JM,18582:JM,18553:JM,18588:JM,18620:JM,18621:JM,18622
18589 :: CALL :: call :: I :: v27 = p1 $string .indexOf(#(101))::JM,18658:JM,18562:JM,18594:JM,18600:JM,18571:JM,18636:JM,18606:JM,18607:JM,18546:JM,18580:JM,18581:JM,18582:JM,18615:JM,18553:JM,18588:JM,18620:JM,18621:JM,18622
2206 :: CALL :: call :: Ljava/util/regex/Pattern :: v42 = compile(#(SET\h+?([^=]*?)\h+?=\...))::
2210 :: CALL :: call :: Ljava/util/function/BiFunction :: v44 = apply()::
18594 :: PRED :: IF :: Z :: if (v27 > #(-1)) goto 119::CD,18595:CD,18600:CD,18607:CD,18611:CD,18615:JM,18658:JM,18562:JM,18594:JM,18571:JM,18636:JM,18606:JM,18546:JM,18580:JM,18581:JM,18582:JM,18553:JM,18588:JM,18620:JM,18621:JM,18622
18595 :: CALL :: call :: I :: v30 = p1 $string .indexOf(#(69))::JM,18658:JM,18562:JM,18594:JM,18600:JM,18571:JM,18636:JM,18606:JM,18607:JM,18546:JM,18580:JM,18581:JM,18582:JM,18615:JM,18553:JM,18588:JM,18620:JM,18621:JM,18622
2213 :: CALL :: call :: Ljava/lang/Object :: v46 = v39.put(v42, v44)::
18600 :: PRED :: IF :: Z :: if (v30 > #(-1)) goto 119::CD,18601:CD,18606:CD,18607:CD,18611:CD,18615:JM,18658:JM,18562:JM,18594:JM,18600:JM,18571:JM,18636:JM,18546:JM,18580:JM,18581:JM,18582:JM,18553:JM,18588:JM,18620:JM,18621:JM,18622
18601 :: CALL :: call :: Z :: v33 = #(-0).equals(p1 $string )::JM,18606:JM,18658:JM,18562:JM,18594:JM,18600:JM,18571:JM,18636:JM,18607:JM,18546:JM,18580:JM,18581:JM,18582:JM,18615:JM,18553:JM,18588:JM,18620:JM,18621:JM,18622
2219 :: EXPR :: reference :: Lai/susi/mind/SusiProcedures :: v47 = ai.susi.mind.SusiInference.memoryProcedures::
2221 :: CALL :: call :: Ljava/util/regex/Pattern :: v50 = compile(#(SET\h+?([^=]*?)\h+?=\...))::
18606 :: PRED :: IF :: Z :: if (v33 == #(0)) goto 139::CF,18622:CD,18607:CD,18611:CD,18615:CD,18627:CD,18631:CD,18636:JM,18658:JM,18562:JM,18594:JM,18600:JM,18571:JM,18606:JM,18546:JM,18580:JM,18581:JM,18582:JM,18553:JM,18588:JM,18620:JM,18621
18607 :: CALL :: call :: Ljava/lang/Double :: v51 = valueOf(p1 $string )::JM,18658:JM,18562:JM,18594:JM,18600:JM,18571:JM,18636:JM,18606:JM,18607:JM,18546:JM,18580:JM,18581:JM,18582:JM,18615:JM,18553:JM,18588:JM,18620:JM,18621:JM,18622
2225 :: CALL :: call :: Ljava/util/function/BiFunction :: v52 = apply()::
18611 :: CALL :: call :: Z :: v53 = v51.isInfinite()::JM,18615:JM,18636:JM,18620:JM,18621:JM,18622
2228 :: CALL :: call :: Ljava/lang/Object :: v54 = v47.put(v50, v52)::
18615 :: PRED :: IF :: Z :: if (v53 != #(0)) goto 184::CD,18616:CD,18620:CD,18658:JM,18615:JM,18636:JM,18621:JM,18622
18616 :: CALL :: call :: Z :: v55 = v51.isNaN()::JM,18615:JM,18636:JM,18620:JM,18621:JM,18622
2234 :: EXPR :: reference :: Lai/susi/mind/SusiProcedures :: v55 = ai.susi.mind.SusiInference.memoryProcedures::
2236 :: CALL :: call :: Ljava/util/regex/Pattern :: v58 = compile(#(CLEAR\h+?(.*)\h*?))::
18620 :: PRED :: IF :: Z :: if (v55 != #(0)) goto 184::CD,18621:CD,18658
18621 :: NORM :: compound :: Ljava/lang/Object :: return v51::DD,18538
18622 :: NORM :: declaration :: Ljava/lang/Long :: v34 = new java.lang.Long::JM,18622:JM,18636:JM,18646:JM,18645:JM,18656:DD,18657
2240 :: CALL :: call :: Ljava/util/function/BiFunction :: v60 = apply()::
2243 :: CALL :: call :: Ljava/lang/Object :: v62 = v55.put(v58, v60)::
18627 :: CALL :: call :: Ljava/lang/String :: v37 = v34.toString()::JM,18636
18631 :: CALL :: call :: Z :: v39 = p1 $string .equals(v37)::JM,18658:JM,18562:JM,18594:JM,18600:JM,18571:JM,18636:JM,18606:JM,18607:JM,18546:JM,18580:JM,18581:JM,18582:JM,18615:JM,18553:JM,18588:JM,18620:JM,18621:JM,18622
2249 :: EXPR :: reference :: Lai/susi/mind/SusiProcedures :: v63 = ai.susi.mind.SusiInference.memoryProcedures::
2251 :: CALL :: call :: Ljava/util/regex/Pattern :: v66 = compile(#(IF\h+?([^=]*)\h*?))::
18636 :: PRED :: IF :: Z :: if (v39 == #(0)) goto 184::CD,18637:CD,18641:CD,18645:CD,18646:CD,18647:CD,18658
18637 :: CALL :: call :: J :: v41 = v34.longValue()::JM,18646
2255 :: CALL :: call :: Ljava/util/function/BiFunction :: v68 = apply()::
18641 :: CALL :: call :: I :: v43 = v34.intValue()::JM,18645
2258 :: CALL :: call :: Ljava/lang/Object :: v70 = v63.put(v66, v68)::
18645 :: EXPR :: assign :: J :: v44 = CONVERT I to J v43::CF,18646
18646 :: EXPR :: assign :: Z :: v45 = v41 == v44::DD,18647
18647 :: PRED :: IF :: Z :: if (v45 != #(0)) goto 181::CD,18648:CD,18652:CD,18656:CD,18657
2264 :: EXPR :: reference :: Lai/susi/mind/SusiProcedures :: v71 = ai.susi.mind.SusiInference.memoryProcedures::
18648 :: CALL :: call :: I :: v47 = v34.intValue()::JM,18656
2266 :: CALL :: call :: Ljava/util/regex/Pattern :: v74 = compile(#(IF\h+?([^=]*?)\h*=\h*...))::
18652 :: CALL :: call :: Ljava/lang/Integer :: v49 = valueOf(v47)::JM,18656
2270 :: CALL :: call :: Ljava/util/function/BiFunction :: v76 = apply()::
18656 :: NORM :: compound :: Ljava/lang/Object :: return v49::DD,18538
2273 :: CALL :: call :: Ljava/lang/Object :: v78 = v71.put(v74, v76)::
18657 :: NORM :: compound :: Ljava/lang/Object :: return v34::DD,18538
18658 :: NORM :: compound :: Ljava/lang/Object :: return p1 $string ::DD,18538
2279 :: EXPR :: reference :: Lai/susi/mind/SusiProcedures :: v79 = ai.susi.mind.SusiInference.memoryProcedures::
2281 :: CALL :: call :: Ljava/util/regex/Pattern :: v82 = compile(#(NOT\h*))::
2285 :: CALL :: call :: Ljava/util/function/BiFunction :: v84 = apply()::
2288 :: CALL :: call :: Ljava/lang/Object :: v86 = v79.put(v82, v84)::
2294 :: EXPR :: reference :: Lai/susi/mind/SusiProcedures :: v87 = ai.susi.mind.SusiInference.memoryProcedures::
2296 :: CALL :: call :: Ljava/util/regex/Pattern :: v90 = compile(#(NOT\h+?([^=]*)\h*?))::
2300 :: CALL :: call :: Ljava/util/function/BiFunction :: v92 = apply()::
2303 :: CALL :: call :: Ljava/lang/Object :: v94 = v87.put(v90, v92)::
2309 :: EXPR :: reference :: Lai/susi/mind/SusiProcedures :: v95 = ai.susi.mind.SusiInference.memoryProcedures::
2311 :: CALL :: call :: Ljava/util/regex/Pattern :: v98 = compile(#(NOT\h+?([^=]*?)\h*=\h...))::
2315 :: CALL :: call :: Ljava/util/function/BiFunction :: v100 = apply()::
2318 :: CALL :: call :: Ljava/lang/Object :: v102 = v95.put(v98, v100)::
2324 :: EXPR :: reference :: Lai/susi/mind/SusiProcedures :: v103 = ai.susi.mind.SusiInference.javascriptProcedures::
2326 :: CALL :: call :: Ljava/util/regex/Pattern :: v106 = compile(#((?s:(.*))))::
2330 :: CALL :: call :: Ljava/util/function/BiFunction :: v108 = apply()::
18716 :: ENTR :: entry :: null :: org.json.JSONArray.toString(int)::CE,18717:CD,18721:CD,18730:CD,18737:CD,18742
2333 :: CALL :: call :: Ljava/lang/Object :: v110 = v103.put(v106, v108)::
18717 :: EXIT :: exit :: Ljava/lang/String :: org.json.JSONArray.toString(int)::JM,16494
18721 :: NORM :: declaration :: Ljava/io/StringWriter :: v4 = new java.io.StringWriter::
2339 :: EXPR :: reference :: Lai/susi/mind/SusiProcedures :: v111 = ai.susi.mind.SusiInference.prologProcedures::
2341 :: CALL :: call :: Ljava/util/regex/Pattern :: v113 = compile(#((?s:(.*))))::
2345 :: CALL :: call :: Ljava/util/function/BiFunction :: v115 = apply()::
18730 :: CALL :: call :: Ljava/io/Writer :: v10 = p0 $this .write(v4, p1 $indentFactor , #(0))::JM,18742:CL,19642
2348 :: CALL :: call :: Ljava/lang/Object :: v117 = v111.put(v113, v115)::
18737 :: CALL :: call :: Ljava/lang/String :: v12 = v10.toString()::JM,18742
18742 :: NORM :: compound :: Ljava/lang/String :: return v12::DD,18717
2396 :: ENTR :: entry :: null :: ai.susi.mind.SusiLinguistics.<clinit>()::CD,2399:CD,2405:CD,2411
2399 :: NORM :: declaration :: Ljava/util/concurrent/ConcurrentHashMap :: v2 = new java.util.concurrent.ConcurrentHashMap::
2405 :: NORM :: declaration :: Ljava/util/concurrent/ConcurrentHashMap :: v4 = new java.util.concurrent.ConcurrentHashMap::
2411 :: NORM :: declaration :: Ljava/util/concurrent/ConcurrentHashMap :: v6 = new java.util.concurrent.ConcurrentHashMap::
2491 :: ENTR :: entry :: null :: ai.susi.mind.SusiLanguage.<clinit>()::
19190 :: ENTR :: entry :: null :: ai.susi.tools.AIML2Susi.readAIMLSentences(org.w3c.dom.Node)::CF,19191:CD,19239
19191 :: EXIT :: exit :: [Ljava/lang/String :: ai.susi.tools.AIML2Susi.readAIMLSentences(org.w3c.dom.Node)::JM,17328:JM,17329
19239 :: NORM :: compound :: [Ljava/lang/String :: return #(null)::CF,19191
19264 :: ENTR :: entry :: null :: ai.susi.mind.SusiLanguage.parse(java.lang.String)::
19300 :: ENTR :: entry :: null :: org.json.JSONObject.keys()::CE,19301:CD,19304:CD,19308:CD,19312
19301 :: EXIT :: exit :: Ljava/util/Iterator :: org.json.JSONObject.keys()::JM,18020
19304 :: CALL :: call :: Ljava/util/Set :: v4 = p0 $this .keySet()::JM,19312:CL,10537
19308 :: CALL :: call :: Ljava/util/Iterator :: v6 = v4.iterator()::JM,19312
19312 :: NORM :: compound :: Ljava/util/Iterator :: return v6::DD,19301
19314 :: ENTR :: entry :: null :: org.json.JSONObject.writeValue(java.io.Writer,java.lang.Object,int,int)::CD,19321:JM,19344:JM,19409:JM,19395:JM,19333:JM,19432:JM,19434:JM,19355:JM,19371:JM,19387:JM,19421:JM,19391
19321 :: PRED :: IF :: Z :: if (p2 $value  == #(null)) goto 16::CD,19322:CD,19327:CD,19328:JM,19344:JM,19409:JM,19395:JM,19333:JM,19432:JM,19321:JM,19434:JM,19355:JM,19371:JM,19387:JM,19421:JM,19391
19322 :: CALL :: call :: Z :: v8 = p2 $value .equals(#(null))::JM,19327:CL,16744
19327 :: PRED :: IF :: Z :: if (v8 == #(0)) goto 23::CD,19328:CD,19333:CD,19334:JM,19344:JM,19409:JM,19395:JM,19432:JM,19321:JM,19434:JM,19355:JM,19371:JM,19387:JM,19421:JM,19391
19328 :: CALL :: call :: V :: p1 $writer .write(#(null))::JM,19344:JM,19409:JM,19395:JM,19333:JM,19432:JM,19321:JM,19434:JM,19355:JM,19371:JM,19387:JM,19421:JM,19391
19333 :: EXPR :: assign :: Z :: v10=p2 $value  INSTANCEOF org.json.JSONObject::DD,19334
19334 :: PRED :: IF :: Z :: if (v10 == #(0)) goto 44::CD,19336:CD,19344:CD,19345
19336 :: CALL :: call :: Ljava/io/Writer :: v65 = v63.write(p1 $writer , p3 $indentFactor , p4 $indent )::CL,17898
19344 :: EXPR :: assign :: Z :: v11=p2 $value  INSTANCEOF org.json.JSONArray::DD,19345
19345 :: PRED :: IF :: Z :: if (v11 == #(0)) goto 65::CD,19347:CD,19355:CD,19356
19347 :: CALL :: call :: Ljava/io/Writer :: v62 = v60.write(p1 $writer , p3 $indentFactor , p4 $indent )::CL,19642
19355 :: EXPR :: assign :: Z :: v12=p2 $value  INSTANCEOF java.util.Map::DD,19356
19356 :: PRED :: IF :: Z :: if (v12 == #(0)) goto 97::JM,19987:JM,19956:JM,19925:JM,19926:JM,19991:JM,19960:JM,19993:JM,19946:JM,19947:JM,19932:JM,19951:CD,19363:CD,19371:CD,19372
19363 :: CALL :: call :: Ljava/io/Writer :: v59 = v56.write(p1 $writer , p3 $indentFactor , p4 $indent )::CL,17898
19371 :: EXPR :: assign :: Z :: v13=p2 $value  INSTANCEOF java.util.Collection::DD,19372
19372 :: PRED :: IF :: Z :: if (v13 == #(0)) goto 129::JM,20034:JM,20035:JM,20056:JM,20027:JM,20060:CD,19379:CD,19387:CD,19391:CD,19395:JM,19409:JM,19432:JM,19434:JM,19421
19379 :: CALL :: call :: Ljava/io/Writer :: v54 = v51.write(p1 $writer , p3 $indentFactor , p4 $indent )::CL,19642
19387 :: CALL :: call :: Ljava/lang/Class :: v15 = p2 $value .getClass()::JM,19409:JM,19395:JM,19432:JM,19434:JM,19387:JM,19421:JM,19391
19391 :: CALL :: call :: Z :: v17 = v15.isArray()::JM,19395:JM,19391
19395 :: PRED :: IF :: Z :: if (v17 == #(0)) goto 157::JM,20113:JM,20122:JM,20093:JM,14350:CD,19401:CD,19409:CD,19410
19401 :: CALL :: call :: Ljava/io/Writer :: v49 = v46.write(p1 $writer , p3 $indentFactor , p4 $indent )::CL,19642
19409 :: EXPR :: assign :: Z :: v18=p2 $value  INSTANCEOF java.lang.Number::DD,19410
19410 :: PRED :: IF :: Z :: if (v18 == #(0)) goto 178::CD,19412:CD,19416:CD,19421:CD,19422
19412 :: CALL :: call :: Ljava/lang/String :: v44 = numberToString(v42)::CL,20138
19416 :: CALL :: call :: V :: p1 $writer .write(v44)::JM,19344:JM,19409:JM,19395:JM,19333:JM,19432:JM,19321:JM,19434:JM,19355:JM,19371:JM,19387:JM,19421:JM,19391
19421 :: EXPR :: assign :: Z :: v19=p2 $value  INSTANCEOF java.lang.Boolean::DD,19422
19422 :: PRED :: IF :: Z :: if (v19 == #(0)) goto 196::CD,19423:CD,19427:CD,19432:CD,19433
19423 :: CALL :: call :: Ljava/lang/String :: v40 = p2 $value .toString()::CL,16499:CL,16485:CL,16513
19427 :: CALL :: call :: V :: p1 $writer .write(v40)::JM,19344:JM,19409:JM,19395:JM,19333:JM,19432:JM,19321:JM,19434:JM,19355:JM,19371:JM,19387:JM,19421:JM,19391
19432 :: EXPR :: assign :: Z :: v20=p2 $value  INSTANCEOF org.json.JSONString::DD,19433
19433 :: PRED :: IF :: Z :: if (v20 == #(0)) goto 256::CD,19434:CD,19435:CD,19446:CD,19460:CD,19465:CD,19469:CD,19476
19434 :: EXPR :: assign :: Ljava/lang/Object :: v25 = CHECKCAST p2 $value ::JM,19476:JM,19446:JM,19447:JM,19435
19435 :: CALL :: call :: Ljava/lang/String :: v27 = v25.toJSONString()::JM,19476:JM,19446:JM,19447:JM,19435
19446 :: PRED :: IF :: Z :: if (v27 == #(null)) goto 243::CD,19447:CD,19452:CD,19456:CD,19476
19447 :: CALL :: call :: Ljava/lang/String :: v36 = v27.toString()::JM,19476:JM,19447
19452 :: CALL :: call :: Ljava/lang/String :: v32 = p2 $value .toString()::CL,16499:CL,16485:CL,16513
19456 :: CALL :: call :: Ljava/lang/String :: v34 = quote(v32)::JM,19476:CL,13280
19460 :: CALL :: call :: V :: p1 $writer .write(v37)::JM,19344:JM,19409:JM,19395:JM,19333:JM,19432:JM,19321:JM,19434:JM,19355:JM,19371:JM,19387:JM,19421:JM,19391
19465 :: CALL :: call :: Ljava/lang/String :: v22 = p2 $value .toString()::CL,16499:CL,16485:CL,16513
19469 :: CALL :: call :: Ljava/io/Writer :: v24 = quote(v22, p1 $writer )::CL,15936
19476 :: EXPR :: assign :: null :: PHI v37 = v36, v34::JM,19344:JM,19409:JM,19395:JM,19333:JM,19432:JM,19321:JM,19434:JM,19355:JM,19371:JM,19387:JM,19421:JM,19391
19547 :: ENTR :: entry :: null :: org.json.JSONObject.indent(java.io.Writer,int)::CD,19558:CD,19560
19553 :: CALL :: call :: V :: p1 $writer .write(#(32))::JM,19558
19557 :: EXPR :: assign :: Ljava/lang/Object :: v8 = v9 + #(1)::DD,19560
19558 :: PRED :: IF :: Z :: if (v9 < p2 $indent ) goto 8::CD,19553:CD,19557:CD,19560:JM,19558
19560 :: EXPR :: assign :: null :: PHI v9 = #(0), v8::DD,19557:DD,19558
19587 :: ENTR :: entry :: null :: org.json.JSONTokener.next(int)::CE,19588:CD,19592:JM,19616:JM,19594
19588 :: EXIT :: exit :: Ljava/lang/String :: org.json.JSONTokener.next(int)::JM,18365
19592 :: PRED :: IF :: Z :: if (p1 $n  != #(0)) goto 8::CD,19593:CD,19594:CD,19616:CD,19617:CD,19622:CD,19623
19593 :: NORM :: compound :: Ljava/lang/String :: return #()::DD,19588
19594 :: NORM :: declaration :: [C :: v5 = new []::JM,19617
19596 :: CALL :: call :: C :: v7 = p0 $this .next()::JM,19600:CL,18112
19600 :: EXPR :: modify :: C :: v5[v12] = v7::
19615 :: EXPR :: assign :: Ljava/lang/Object :: v11 = v12 + #(1)::DD,19623
19616 :: PRED :: IF :: Z :: if (v12 < p1 $n ) goto 19::CF,19617:CD,19596:CD,19615:CD,19623
19617 :: NORM :: declaration :: Ljava/lang/String :: v13 = new java.lang.String::JM,19617:DD,19622
19622 :: NORM :: compound :: Ljava/lang/String :: return v13::DD,19588
19623 :: EXPR :: assign :: null :: PHI v12 = #(0), v11::DD,19615:DD,19616
19642 :: ENTR :: entry :: null :: org.json.JSONArray.write(java.io.Writer,int,int)::CE,19643:CD,19649:CD,19653:CD,19657:CD,19717:CD,19721:JM,19682:JM,19708
19643 :: EXIT :: exit :: Ljava/io/Writer :: org.json.JSONArray.write(java.io.Writer,int,int)::JM,18742
19649 :: CALL :: call :: I :: v8 = p0 $this .length()::JM,19657:JM,19674:JM,19707:CL,20261
19653 :: CALL :: call :: V :: p1 $writer .write(#(91))::JM,19682:JM,19721:JM,19708
19657 :: PRED :: IF :: Z :: if (v8 != #(1)) goto 41::CD,19661:CD,19666:CD,19674
19658 :: EXPR :: reference :: Ljava/util/ArrayList :: v28 = p0 $this .myArrayList::
19661 :: CALL :: call :: Ljava/lang/Object :: v30 = v28.get(#(0))::
19666 :: CALL :: call :: Ljava/io/Writer :: v32 = writeValue(p1 $writer , v30, p2 $indentFactor , p3 $indent )::CL,19314
19674 :: PRED :: IF :: Z :: if (v8 == #(0)) goto 130::CD,19707:CD,19708:CD,19713:CD,19729:CD,19730:JM,19682:JM,19721
19677 :: PRED :: IF :: Z :: if (v24 == #(0)) goto 67::CD,19678:JM,19721:JM,19708:CF,19682
19678 :: CALL :: call :: V :: p1 $writer .write(#(44))::JM,19682:JM,19721:JM,19708
19682 :: PRED :: IF :: Z :: if (p2 $indentFactor  <= #(0)) goto 79::CD,19683:JM,19682:JM,19721:JM,19708
19683 :: CALL :: call :: V :: p1 $writer .write(#(10))::JM,19682:JM,19721:JM,19708
19687 :: CALL :: call :: V :: indent(p1 $writer , v12)::CL,19547
19691 :: EXPR :: reference :: Ljava/util/ArrayList :: v18 = p0 $this .myArrayList::
19694 :: CALL :: call :: Ljava/lang/Object :: v20 = v18.get(v25)::
19699 :: CALL :: call :: Ljava/io/Writer :: v22 = writeValue(p1 $writer , v20, p2 $indentFactor , v12)::CL,19314
19706 :: EXPR :: assign :: Ljava/lang/Object :: v23 = v25 + #(1)::DD,19730:CF,19729
19707 :: PRED :: IF :: Z :: if (v25 < v8) goto 57::CD,19677:CD,19682:CD,19687:CD,19694:CD,19699:CD,19706:CD,19729:CD,19730:CF,19708
19708 :: PRED :: IF :: Z :: if (p2 $indentFactor  <= #(0)) goto 124::CD,19709:JM,19682:JM,19721:JM,19708
19709 :: CALL :: call :: V :: p1 $writer .write(#(10))::JM,19682:JM,19721:JM,19708
19713 :: CALL :: call :: V :: indent(p1 $writer , p3 $indent )::CL,19547
19717 :: CALL :: call :: V :: p1 $writer .write(#(93))::JM,19682:JM,19721:JM,19708
19721 :: NORM :: compound :: Ljava/io/Writer :: return p1 $writer ::DD,19643
19729 :: EXPR :: assign :: null :: PHI v24 = #(0), #(1)::CF,19730:DD,19677
19730 :: EXPR :: assign :: null :: PHI v25 = #(0), v23::DD,19706:DD,19707
19925 :: EXPR :: assign :: Z :: v5=p1 $map  INSTANCEOF java.util.LinkedHashMap::DD,19926
19926 :: PRED :: IF :: Z :: if (v5 == #(0)) goto 23::CF,19927:CD,19932:CD,19933:CD,19993
19927 :: NORM :: declaration :: Ljava/util/LinkedHashMap :: v12 = new java.util.LinkedHashMap::DD,19993
19932 :: EXPR :: assign :: Z :: v7=p1 $map  INSTANCEOF java.util.TreeMap::DD,19933
19933 :: PRED :: IF :: Z :: if (v7 == #(0)) goto 39::CF,19939:CF,19934:CD,19993
19934 :: NORM :: declaration :: Ljava/util/TreeMap :: v10 = new java.util.TreeMap::DD,19993
19939 :: NORM :: declaration :: Ljava/util/HashMap :: v8 = new java.util.HashMap::DD,19993
19943 :: EXPR :: modify :: Ljava/util/Map :: p0 $this .map = v14::
19946 :: PRED :: IF :: Z :: if (p1 $map  == #(null)) goto 124::CD,19947:CD,19951:CD,19987:CD,19991:JM,19956:JM,19960
19947 :: CALL :: call :: Ljava/util/Set :: v17 = p1 $map .entrySet()::JM,19987:JM,19956:JM,19991:JM,19960:JM,19947:JM,19951
19951 :: CALL :: call :: Ljava/util/Iterator :: v19 = v17.iterator()::JM,19987:JM,19956:JM,19991:JM,19960:JM,19951
19956 :: CALL :: call :: Ljava/lang/Object :: v23 = v19.next()::JM,19987:JM,19956:JM,19991:JM,19960
19960 :: EXPR :: assign :: Ljava/lang/Object :: v24 = CHECKCAST v23::JM,19961:JM,19965:JM,19969
19961 :: CALL :: call :: Ljava/lang/Object :: v26 = v24.getValue()::JM,19961:JM,19965
19965 :: PRED :: IF :: Z :: if (v26 == #(null)) goto 116::CD,19969:CD,19973:CD,19977:CD,19981:JM,19987:JM,19956:JM,19991:JM,19960
19966 :: EXPR :: reference :: Ljava/util/Map :: v27 = p0 $this .map::
19969 :: CALL :: call :: Ljava/lang/Object :: v29 = v24.getKey()::JM,19969
19973 :: CALL :: call :: Ljava/lang/String :: v31 = valueOf(v29)::
19977 :: CALL :: call :: Ljava/lang/Object :: v33 = wrap(v26)::CL,20320
19981 :: CALL :: call :: Ljava/lang/Object :: v35 = v27.put(v31, v33)::
19987 :: CALL :: call :: Z :: v21 = v19.hasNext()::JM,19987:JM,19956:JM,19991:JM,19960
19991 :: PRED :: IF :: Z :: if (v21 != #(0)) goto 69::CD,19956:CD,19960:CD,19961:CD,19965:CD,19987:JM,19991
19993 :: EXPR :: assign :: null :: PHI v14 = v12, v10, v8::DD,19943
20027 :: NORM :: declaration :: Ljava/util/ArrayList :: v5 = new java.util.ArrayList::JM,20034:JM,20035:JM,20056:JM,20060:DD,20031
20031 :: EXPR :: modify :: Ljava/util/ArrayList :: p0 $this .myArrayList = v5::
20034 :: PRED :: IF :: Z :: if (p1 $collection  == #(null)) goto 57::CD,20035:CD,20056:CD,20060
20035 :: CALL :: call :: Ljava/util/Iterator :: v9 = p1 $collection .iterator()::JM,20035:JM,20056:JM,20060
20044 :: EXPR :: reference :: Ljava/util/ArrayList :: v15 = p0 $this .myArrayList::
20047 :: CALL :: call :: Ljava/lang/Object :: v17 = wrap(v14)::CL,20320
20051 :: CALL :: call :: Z :: v19 = v15.add(v17)::
20056 :: CALL :: call :: Z :: v11 = v9.hasNext()::JM,20056:JM,20060
20060 :: PRED :: IF :: Z :: if (v11 != #(0)) goto 30::CD,20047:CD,20051:CD,20056
20093 :: CALL :: call :: I :: v14 = getLength(p1 $array )::JM,20113:JM,20093:JM,14350
20103 :: CALL :: call :: Ljava/lang/Object :: v18 = wrap(v16)::CL,20320
20107 :: CALL :: call :: Lorg/json/JSONArray :: v20 = p0 $this .put(v18)::CL,14622
20112 :: EXPR :: assign :: Ljava/lang/Object :: v22 = v23 + #(1)::DD,20122
20113 :: PRED :: IF :: Z :: if (v23 < v14) goto 27::CD,20103:CD,20107:CD,20112:CD,20122
20122 :: EXPR :: assign :: null :: PHI v23 = #(0), v22::DD,20112:DD,20113
20138 :: ENTR :: entry :: null :: org.json.JSONObject.numberToString(java.lang.Number)::CE,20139:CD,20149:CD,20152:CD,20156:CD,20161:CD,20209:CD,20211:JM,20210:JM,20167:JM,20173
20139 :: EXIT :: exit :: Ljava/lang/String :: org.json.JSONObject.numberToString(java.lang.Number)::
20149 :: CALL :: call :: V :: testValidity(p1 $number )::CL,16124
20152 :: CALL :: call :: Ljava/lang/String :: v6 = p1 $number .toString()::JM,20161:JM,20210:JM,20211:JM,20167:JM,20173
20156 :: CALL :: call :: I :: v9 = v6.indexOf(#(46))::JM,20161:JM,20210:JM,20211:JM,20167:JM,20173
20161 :: PRED :: IF :: Z :: if (v9 <= #(0)) goto 99::CF,20211:CD,20162:CD,20167:JM,20161:JM,20210:JM,20173
20162 :: CALL :: call :: I :: v13 = v6.indexOf(#(101))::JM,20161:JM,20210:JM,20211:JM,20167:JM,20173
20167 :: PRED :: IF :: Z :: if (v13 >= #(0)) goto 99::CF,20211:CD,20168:CD,20173:JM,20161:JM,20210:JM,20167
20168 :: CALL :: call :: I :: v16 = v6.indexOf(#(69))::JM,20161:JM,20210:JM,20211:JM,20167:JM,20173
20173 :: PRED :: IF :: Z :: if (v16 >= #(0)) goto 99::CF,20211:CD,20186:CD,20191:CD,20192:CD,20197:CD,20210
20175 :: CALL :: call :: I :: v21 = v26.length()::JM,20179
20179 :: EXPR :: assign :: Ljava/lang/Object :: v23 = v21 - #(1)::JM,20210
20180 :: CALL :: call :: Ljava/lang/String :: v25 = v26.substring(#(0), v23)::JM,20210
20186 :: CALL :: call :: Z :: v19 = v26.endsWith(#(0))::JM,20191
20191 :: PRED :: IF :: Z :: if (v19 != #(0)) goto 57::CD,20175:CD,20179:CD,20180:CD,20186:CD,20210:JM,20197
20192 :: CALL :: call :: Z :: v29 = v26.endsWith(#(.))::JM,20197
20197 :: PRED :: IF :: Z :: if (v29 == #(0)) goto 99::CF,20211:CD,20198:CD,20202:CD,20203
20198 :: CALL :: call :: I :: v31 = v26.length()::JM,20202
20202 :: EXPR :: assign :: Ljava/lang/Object :: v32 = v31 - #(1)::JM,20211
20203 :: CALL :: call :: Ljava/lang/String :: v34 = v26.substring(#(0), v32)::JM,20211
20209 :: NORM :: compound :: Ljava/lang/String :: return v35::DD,20139
20210 :: EXPR :: assign :: null :: PHI v26 = v6, v25::JM,20179:JM,20210:JM,20191:JM,20197:JM,20202:DD,20211
20211 :: EXPR :: assign :: null :: PHI v35 = v6, v6, v6, v26, v34::CF,20209
20261 :: ENTR :: entry :: null :: org.json.JSONArray.length()::CE,20262:CD,20268:CD,20272
20262 :: EXIT :: exit :: I :: org.json.JSONArray.length()::JM,19657:JM,19674:JM,19707
20265 :: EXPR :: reference :: Ljava/util/ArrayList :: v3 = p0 $this .myArrayList::JM,20272
20268 :: CALL :: call :: I :: v5 = v3.size()::JM,20272
20272 :: NORM :: compound :: I :: return v5::CF,20262
20320 :: ENTR :: entry :: null :: org.json.JSONObject.wrap(java.lang.Object)::CE,20321:CD,20324:CD,20444:JM,20352:JM,20354:JM,20356:JM,20358:JM,20360:JM,20424:JM,20362:JM,20364:JM,20428:JM,20365:JM,20432:JM,20433:JM,20437:JM,20374:JM,20378:JM,20382:JM,20446:JM,20389:JM,20328:JM,20330:JM,20398:JM,20402:JM,20340:JM,20342:JM,20406:JM,20407:JM,20344:JM,20346:JM,20348:JM,20350
20321 :: EXIT :: exit :: Ljava/lang/Object :: org.json.JSONObject.wrap(java.lang.Object)::
20324 :: PRED :: IF :: Z :: if (p1 $object  != #(null)) goto 9::CD,20325:CD,20327:CD,20328:CD,20329
20325 :: EXPR :: reference :: Ljava/lang/Object :: v59 = org.json.JSONObject.NULL::CF,20327
20327 :: NORM :: compound :: Ljava/lang/Object :: return v59::DD,20321
20328 :: EXPR :: assign :: Z :: v4=p1 $object  INSTANCEOF org.json.JSONObject::DD,20329
20329 :: PRED :: IF :: Z :: if (v4 != #(0)) goto 117::CD,20330:CD,20331:CD,20364
20330 :: EXPR :: assign :: Z :: v6=p1 $object  INSTANCEOF org.json.JSONArray::DD,20331
20331 :: PRED :: IF :: Z :: if (v6 != #(0)) goto 117::CD,20334:CD,20339:CD,20364
20334 :: CALL :: call :: Z :: v9 = v7.equals(p1 $object )::JM,20339:CL,16744
20339 :: PRED :: IF :: Z :: if (v9 != #(0)) goto 117::CD,20340:CD,20341:CD,20364
20340 :: EXPR :: assign :: Z :: v10=p1 $object  INSTANCEOF org.json.JSONString::DD,20341
20341 :: PRED :: IF :: Z :: if (v10 != #(0)) goto 117::CD,20342:CD,20343:CD,20364
20342 :: EXPR :: assign :: Z :: v11=p1 $object  INSTANCEOF java.lang.Byte::DD,20343
20343 :: PRED :: IF :: Z :: if (v11 != #(0)) goto 117::CD,20344:CD,20345:CD,20364
20344 :: EXPR :: assign :: Z :: v12=p1 $object  INSTANCEOF java.lang.Character::DD,20345
20345 :: PRED :: IF :: Z :: if (v12 != #(0)) goto 117::CD,20346:CD,20347:CD,20364
20346 :: EXPR :: assign :: Z :: v13=p1 $object  INSTANCEOF java.lang.Short::DD,20347
20347 :: PRED :: IF :: Z :: if (v13 != #(0)) goto 117::CD,20348:CD,20349:CD,20364
20348 :: EXPR :: assign :: Z :: v14=p1 $object  INSTANCEOF java.lang.Integer::DD,20349
20349 :: PRED :: IF :: Z :: if (v14 != #(0)) goto 117::CD,20350:CD,20351:CD,20364
20350 :: EXPR :: assign :: Z :: v15=p1 $object  INSTANCEOF java.lang.Long::DD,20351
20351 :: PRED :: IF :: Z :: if (v15 != #(0)) goto 117::CD,20352:CD,20353:CD,20364
20352 :: EXPR :: assign :: Z :: v16=p1 $object  INSTANCEOF java.lang.Boolean::DD,20353
20353 :: PRED :: IF :: Z :: if (v16 != #(0)) goto 117::CD,20354:CD,20355:CD,20364
20354 :: EXPR :: assign :: Z :: v17=p1 $object  INSTANCEOF java.lang.Float::DD,20355
20355 :: PRED :: IF :: Z :: if (v17 != #(0)) goto 117::CD,20356:CD,20357:CD,20364
20356 :: EXPR :: assign :: Z :: v18=p1 $object  INSTANCEOF java.lang.Double::DD,20357
20357 :: PRED :: IF :: Z :: if (v18 != #(0)) goto 117::CD,20358:CD,20359:CD,20364
20358 :: EXPR :: assign :: Z :: v19=p1 $object  INSTANCEOF java.lang.String::DD,20359
20359 :: PRED :: IF :: Z :: if (v19 != #(0)) goto 117::CD,20360:CD,20361:CD,20364
20360 :: EXPR :: assign :: Z :: v20=p1 $object  INSTANCEOF java.math.BigInteger::DD,20361
20361 :: PRED :: IF :: Z :: if (v20 != #(0)) goto 117::CD,20362:CD,20363:CD,20364
20362 :: EXPR :: assign :: Z :: v21=p1 $object  INSTANCEOF java.math.BigDecimal::DD,20363
20363 :: PRED :: IF :: Z :: if (v21 == #(0)) goto 119::CD,20364:CD,20365:CD,20366
20364 :: NORM :: compound :: Ljava/lang/Object :: return p1 $object ::DD,20321
20365 :: EXPR :: assign :: Z :: v22=p1 $object  INSTANCEOF java.util.Collection::DD,20366
20366 :: PRED :: IF :: Z :: if (v22 == #(0)) goto 140::CD,20368:JM,20034:JM,20035:JM,20056:JM,20027:JM,20060:CD,20373:CD,20374:CD,20378:CD,20382:JM,20389:JM,20424:JM,20428:JM,20398:JM,20432:JM,20433:JM,20402:JM,20437:JM,20406:JM,20407:JM,20446
20368 :: NORM :: declaration :: Lorg/json/JSONArray :: v56 = new org.json.JSONArray::DD,20373
20373 :: NORM :: compound :: Ljava/lang/Object :: return v56::DD,20321
20374 :: CALL :: call :: Ljava/lang/Class :: v24 = p1 $object .getClass()::JM,20389:JM,20424:JM,20428:JM,20398:JM,20432:JM,20433:JM,20402:JM,20437:JM,20374:JM,20406:JM,20407:JM,20378:JM,20382:JM,20446
20378 :: CALL :: call :: Z :: v26 = v24.isArray()::JM,20432:JM,20402:JM,20437:JM,20406:JM,20407:JM,20378:JM,20428:JM,20382:JM,20446
20382 :: PRED :: IF :: Z :: if (v26 == #(0)) goto 159::CF,20383:JM,20113:JM,20122:JM,20093:JM,14350:CD,20388:CD,20389:CD,20390
20383 :: NORM :: declaration :: Lorg/json/JSONArray :: v53 = new org.json.JSONArray::DD,20388
20388 :: NORM :: compound :: Ljava/lang/Object :: return v53::DD,20321
20389 :: EXPR :: assign :: Z :: v27=p1 $object  INSTANCEOF java.util.Map::DD,20390
20390 :: PRED :: IF :: Z :: if (v27 == #(0)) goto 180::CD,20392:JM,19987:JM,19956:JM,19925:JM,19926:JM,19991:JM,19960:JM,19993:JM,19946:JM,19947:JM,19932:JM,19951:CD,20397:CD,20398:CD,20402:CD,20406:CD,20412:CD,20417:CD,20446:JM,20424:JM,20428:JM,20432:JM,20433:JM,20437:JM,20374:JM,20407:JM,20378:JM,20382
20392 :: NORM :: declaration :: Lorg/json/JSONObject :: v51 = new org.json.JSONObject::DD,20397
20397 :: NORM :: compound :: Ljava/lang/Object :: return v51::DD,20321
20398 :: CALL :: call :: Ljava/lang/Class :: v29 = p1 $object .getClass()::JM,20424:JM,20428:JM,20398:JM,20432:JM,20433:JM,20402:JM,20437:JM,20374:JM,20406:JM,20407:JM,20378:JM,20382:JM,20446
20402 :: CALL :: call :: Ljava/lang/Package :: v31 = v29.getPackage()::JM,20432:JM,20402:JM,20437:JM,20406:JM,20407:JM,20378:JM,20428:JM,20382:JM,20446
20406 :: PRED :: IF :: Z :: if (v31 == #(null)) goto 206::CD,20407:CD,20446:JM,20432
20407 :: CALL :: call :: Ljava/lang/String :: v34 = v31.getName()::JM,20432:JM,20407:JM,20446
20412 :: CALL :: call :: Z :: v38 = v35.startsWith(#(java.))::JM,20417
20417 :: PRED :: IF :: Z :: if (v38 != #(0)) goto 233::CD,20418:CD,20423:CD,20433:CD,20437:JM,20424:JM,20428:JM,20398:JM,20432:JM,20402:JM,20374:JM,20406:JM,20407:JM,20378:JM,20382:JM,20446
20418 :: CALL :: call :: Z :: v41 = v35.startsWith(#(javax.))::JM,20423
20423 :: PRED :: IF :: Z :: if (v41 != #(0)) goto 233::CD,20424:CD,20428:CD,20432:CD,20433:CD,20437:JM,20398:JM,20402:JM,20374:JM,20406:JM,20407:JM,20378:JM,20382:JM,20446
20424 :: CALL :: call :: Ljava/lang/Class :: v43 = p1 $object .getClass()::JM,20424:JM,20428:JM,20398:JM,20432:JM,20433:JM,20402:JM,20437:JM,20374:JM,20406:JM,20407:JM,20378:JM,20382:JM,20446
20428 :: CALL :: call :: Ljava/lang/ClassLoader :: v45 = v43.getClassLoader()::JM,20432:JM,20402:JM,20437:JM,20406:JM,20407:JM,20378:JM,20428:JM,20382:JM,20446
20432 :: PRED :: IF :: Z :: if (v45 != #(null)) goto 237::CF,20438:CD,20433:CD,20437:JM,20522:JM,14332:CD,20443:JM,20424:JM,20428:JM,20398:JM,20432:JM,20402:JM,20374:JM,20406:JM,20407:JM,20378:JM,20382:JM,20446
20433 :: CALL :: call :: Ljava/lang/String :: v49 = p1 $object .toString()::JM,20424:JM,20428:JM,20398:JM,20432:JM,20433:JM,20402:JM,20437:JM,20374:JM,20406:JM,20407:JM,20378:JM,20382:JM,20446
20437 :: NORM :: compound :: Ljava/lang/Object :: return v49::DD,20321
20438 :: NORM :: declaration :: Lorg/json/JSONObject :: v46 = new org.json.JSONObject::DD,20443
20443 :: NORM :: compound :: Ljava/lang/Object :: return v46::DD,20321
20444 :: NORM :: compound :: Ljava/lang/Object :: return #(null)::DD,20321
20446 :: EXPR :: assign :: null :: PHI v35 = v34, #()::JM,20417:JM,20423
20522 :: CALL :: call :: V :: p0 $this .populateMap(p1 $bean )::CL,20530
20530 :: ENTR :: entry :: null :: org.json.JSONObject.populateMap(java.lang.Object)::CD,20535:CD,20539:CD,20543:CD,20545:CD,20705:CD,20706:CD,20709:CD,20710:CD,20713:JM,20689:JM,20546:JM,20551:JM,20683
20535 :: CALL :: call :: Ljava/lang/Class :: v5 = p1 $bean .getClass()::JM,20689:JM,20546:JM,20710:JM,20535:JM,20551:JM,20683:JM,20539:JM,20543
20539 :: CALL :: call :: Ljava/lang/ClassLoader :: v7 = v5.getClassLoader()::JM,20689:JM,20546:JM,20710:JM,20551:JM,20539:JM,20543
20543 :: PRED :: IF :: Z :: if (v7 == #(null)) goto 19::CD,20709
20545 :: PRED :: IF :: Z :: if (v11 == #(0)) goto 30::CD,20546:CD,20551:CD,20710:JM,20689:JM,20539:JM,20543
20546 :: CALL :: call :: [Ljava/lang/reflect/Method :: v15 = v5.getMethods()::JM,20689:JM,20546:JM,20710:JM,20551:JM,20539:JM,20543
20551 :: CALL :: call :: [Ljava/lang/reflect/Method :: v13 = v5.getDeclaredMethods()::JM,20689:JM,20546:JM,20710:JM,20551:JM,20539:JM,20543
20556 :: EXPR :: reference :: Ljava/lang/Object :: v18 = v16[v89]::JM,20560:JM,20564:JM,20568:JM,20592:JM,20578:JM,20598:JM,20711:JM,20584:JM,20569:JM,20603:JM,20604:JM,20573:JM,20590:JM,20624:JM,20628:JM,20689:JM,20683
20560 :: CALL :: call :: I :: v20 = v18.getModifiers()::JM,20560:JM,20564:JM,20568
20564 :: CALL :: call :: Z :: v22 = isPublic(v20)::JM,20564:JM,20568
20568 :: PRED :: IF :: Z :: if (v22 == #(0)) goto 272::CD,20569:CD,20573:CD,20578:CD,20609:CD,20613:CD,20711:JM,20592:JM,20598:JM,20584:JM,20603:JM,20604:JM,20590:CF,20704
20569 :: CALL :: call :: Ljava/lang/String :: v24 = v18.getName()::JM,20592:JM,20578:JM,20598:JM,20711:JM,20584:JM,20569:JM,20603:JM,20604:JM,20573:JM,20590
20573 :: CALL :: call :: Z :: v28 = v24.startsWith(#(get))::JM,20592:JM,20578:JM,20598:JM,20711:JM,20584:JM,20603:JM,20604:JM,20573:JM,20590
20578 :: PRED :: IF :: Z :: if (v28 == #(0)) goto 128::CD,20579:CD,20584:CD,20598:CD,20603:CD,20711:JM,20592:JM,20578:JM,20604:JM,20573:JM,20590
20579 :: CALL :: call :: Z :: v34 = #(getClass).equals(v24)::JM,20584:JM,20592:JM,20578:JM,20598:JM,20711:JM,20603:JM,20604:JM,20573:JM,20590
20584 :: PRED :: IF :: Z :: if (v34 != #(0)) goto 109::CD,20585:CD,20590:CD,20711
20585 :: CALL :: call :: Z :: v37 = #(getDeclaringClass).equals(v24)::JM,20590:JM,20592:JM,20578:JM,20598:JM,20711:JM,20584:JM,20603:JM,20604:JM,20573
20590 :: PRED :: IF :: Z :: if (v37 == #(0)) goto 115::CD,20592:CD,20711:JM,20578:JM,20598:JM,20584:JM,20603:JM,20604:JM,20573:JM,20590
20592 :: CALL :: call :: Ljava/lang/String :: v40 = v24.substring(#(3))::JM,20592:JM,20578:JM,20598:JM,20711:JM,20584:JM,20603:JM,20604:JM,20573:JM,20590
20598 :: CALL :: call :: Z :: v31 = v24.startsWith(#(is))::JM,20592:JM,20578:JM,20598:JM,20711:JM,20584:JM,20603:JM,20604:JM,20573:JM,20590
20603 :: PRED :: IF :: Z :: if (v31 == #(0)) goto 144::CF,20711:CD,20604:JM,20592:JM,20578:JM,20598:JM,20584:JM,20603:JM,20573:JM,20590
20604 :: CALL :: call :: Ljava/lang/String :: v43 = v24.substring(#(2))::JM,20592:JM,20578:JM,20598:JM,20711:JM,20584:JM,20603:JM,20604:JM,20573:JM,20590
20609 :: CALL :: call :: I :: v46 = v44.length()::JM,20613
20613 :: PRED :: IF :: Z :: if (v46 <= #(0)) goto 272::CD,20614:CD,20619:CD,20623:CF,20704
20614 :: CALL :: call :: C :: v48 = v44.charAt(#(0))::JM,20623
20619 :: CALL :: call :: Z :: v50 = isUpperCase(v48)::JM,20623
20623 :: PRED :: IF :: Z :: if (v50 == #(0)) goto 272::CD,20624:CD,20628:CD,20629:CF,20704
20624 :: CALL :: call :: [Ljava/lang/Class :: v52 = v18.getParameterTypes()::JM,20624:JM,20628
20628 :: EXPR :: assign :: I :: v53 = v52.length::DD,20629
20629 :: PRED :: IF :: Z :: if (v53 != #(0)) goto 272::CD,20630:CD,20634:CD,20683:CD,20689:CD,20712:CF,20704
20630 :: CALL :: call :: I :: v55 = v44.length()::JM,20634
20634 :: PRED :: IF :: Z :: if (v55 != #(1)) goto 193::CD,20635:CD,20640:CD,20645:CD,20649:CD,20712
20635 :: CALL :: call :: Ljava/lang/String :: v61 = v44.toLowerCase()::JM,20712
20640 :: CALL :: call :: C :: v57 = v44.charAt(#(1))::JM,20649
20645 :: CALL :: call :: Z :: v59 = isUpperCase(v57)::JM,20649
20649 :: PRED :: IF :: Z :: if (v59 != #(0)) goto 240::CF,20712:CF,20650:CD,20651:CD,20657:CD,20661:CD,20669:CD,20674:CD,20679
20650 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v62 = new java.lang.StringBuilder::JM,20712
20651 :: CALL :: call :: Ljava/lang/String :: v64 = v44.substring(#(0), #(1))::
20657 :: CALL :: call :: Ljava/lang/String :: v66 = v64.toLowerCase()::
20661 :: CALL :: call :: Ljava/lang/String :: v68 = valueOf(v66)::
20669 :: CALL :: call :: Ljava/lang/String :: v71 = v44.substring(#(1))::JM,20712
20674 :: CALL :: call :: Ljava/lang/StringBuilder :: v73 = v62.append(v71)::JM,20712
20679 :: CALL :: call :: Ljava/lang/String :: v75 = v73.toString()::JM,20712
20683 :: CALL :: call :: Ljava/lang/Object :: v78 = v18.invoke(p1 $bean , #(null))::JM,20689:JM,20683:JM,20546:JM,20710:JM,20535:JM,20551:JM,20539:JM,20543
20689 :: PRED :: IF :: Z :: if (v78 == #(null)) goto 272::CD,20693:CD,20697:CF,20704
20690 :: EXPR :: reference :: Ljava/util/Map :: v79 = p0 $this .map::
20693 :: CALL :: call :: Ljava/lang/Object :: v81 = wrap(v78)::CL,20320
20697 :: CALL :: call :: Ljava/lang/Object :: v83 = v79.put(v76, v81)::
20704 :: EXPR :: assign :: Ljava/lang/Object :: v87 = v89 + #(1)::DD,20713
20705 :: EXPR :: assign :: I :: v17 = v16.length::CF,20706
20706 :: PRED :: IF :: Z :: if (v89 < v17) goto 45::CD,20560:CD,20564:CD,20568:CD,20704:CD,20705:CD,20713
20709 :: EXPR :: assign :: null :: PHI v11 = #(1), #(0)::DD,20545
20710 :: EXPR :: assign :: null :: PHI v16 = v15, v13::DD,20705
20711 :: EXPR :: assign :: null :: PHI v44 = #(), v40, #(), v43::JM,20613:JM,20623:JM,20634:JM,20649:DD,20712
20712 :: EXPR :: assign :: null :: PHI v76 = v61, v44, v75::JM,20689:JM,20683
20713 :: EXPR :: assign :: null :: PHI v89 = #(0), v87::DD,20704:DD,20706:CF,20705
7125 :: ENTR :: entry :: null :: ai.susi.tools.TimeoutMatcher.<clinit>()::CD,7145
7145 :: NORM :: declaration :: Ljava/util/concurrent/ConcurrentHashMap :: v10 = new java.util.concurrent.ConcurrentHashMap::
7161 :: ENTR :: entry :: null :: ai.susi.SusiServer.readConfig(java.nio.file.Path)::CD,7165:CD,7170:CD,7174:CD,7175:CD,7185:CD,7189:CD,7193:CD,7197:CD,7223:CD,7227:CD,7228:CD,7244:CD,7245:CD,7254:CD,7258:CD,7276:CD,7280:CD,7285:CD,7289:CD,7293:CD,7319:CD,7323
7165 :: NORM :: declaration :: Ljava/io/File :: v3 = new java.io.File::
7170 :: NORM :: declaration :: Ljava/util/Properties :: v6 = new java.util.Properties::JM,7206:JM,7227
7174 :: NORM :: declaration :: Ljava/io/FileInputStream :: v8 = new java.io.FileInputStream::CF,7175
7175 :: NORM :: declaration :: Ljava/io/File :: v9 = new java.io.File::
7185 :: CALL :: call :: V :: v6.load(v8)::
7189 :: NORM :: declaration :: Ljava/util/HashMap :: v14 = new java.util.HashMap::
7193 :: CALL :: call :: Ljava/util/Set :: v17 = v6.entrySet()::JM,7206:JM,7227
7197 :: CALL :: call :: Ljava/util/Iterator :: v19 = v17.iterator()::JM,7206:JM,7227
7202 :: CALL :: call :: Ljava/lang/Object :: v24 = v19.next()::JM,7206:JM,7227
7206 :: EXPR :: assign :: Ljava/lang/Object :: v25 = CHECKCAST v24::JM,7211:JM,7216
7207 :: CALL :: call :: Ljava/lang/Object :: v27 = v25.getKey()::JM,7211
7211 :: EXPR :: assign :: Ljava/lang/Object :: v28 = CHECKCAST v27::JM,7216
7212 :: CALL :: call :: Ljava/lang/Object :: v30 = v25.getValue()::JM,7216
7216 :: EXPR :: assign :: Ljava/lang/Object :: v31 = CHECKCAST v30::
7217 :: CALL :: call :: Ljava/lang/Object :: v33 = v14.put(v28, v31)::
7223 :: CALL :: call :: Z :: v21 = v19.hasNext()::JM,7206:JM,7227
7227 :: PRED :: IF :: Z :: if (v21 != #(0)) goto 63::CD,7202:CD,7206:CD,7207:CD,7211:CD,7212:CD,7216:CD,7217:CD,7223:JM,7227:JM,7228:JM,7245
7228 :: CALL :: call :: Ljava/nio/file/Path :: v36 = p1 $data .resolve(#(settings))::JM,7228:JM,7245
7244 :: NORM :: declaration :: Ljava/io/File :: v42 = new java.io.File::JM,7258:JM,7245
7245 :: CALL :: call :: Ljava/io/File :: v44 = v36.toFile()::JM,7245
7254 :: CALL :: call :: Z :: v48 = v42.exists()::JM,7258
7258 :: PRED :: IF :: Z :: if (v48 != #(0)) goto 192::CF,7276:CF,7259:CD,7260:CD,7269:CD,7273
7259 :: NORM :: declaration :: Ljava/io/BufferedWriter :: v49 = new java.io.BufferedWriter::CF,7260
7260 :: NORM :: declaration :: Ljava/io/FileWriter :: v50 = new java.io.FileWriter::
7269 :: CALL :: call :: V :: v49.write(#(# This file can be us...))::
7273 :: CALL :: call :: V :: v49.close()::
7276 :: NORM :: declaration :: Ljava/util/Properties :: v56 = new java.util.Properties::JM,7302:JM,7323
7280 :: NORM :: declaration :: Ljava/io/FileInputStream :: v58 = new java.io.FileInputStream::
7285 :: CALL :: call :: V :: v56.load(v58)::
7289 :: CALL :: call :: Ljava/util/Set :: v62 = v56.entrySet()::JM,7302:JM,7323
7293 :: CALL :: call :: Ljava/util/Iterator :: v64 = v62.iterator()::JM,7302:JM,7323
7298 :: CALL :: call :: Ljava/lang/Object :: v68 = v64.next()::JM,7302:JM,7323
7302 :: EXPR :: assign :: Ljava/lang/Object :: v69 = CHECKCAST v68::JM,7307:JM,7312
7303 :: CALL :: call :: Ljava/lang/Object :: v71 = v69.getKey()::JM,7307
7307 :: EXPR :: assign :: Ljava/lang/Object :: v72 = CHECKCAST v71::JM,7312
7308 :: CALL :: call :: Ljava/lang/Object :: v74 = v69.getValue()::JM,7312
7312 :: EXPR :: assign :: Ljava/lang/Object :: v75 = CHECKCAST v74::
7313 :: CALL :: call :: Ljava/lang/Object :: v77 = v14.put(v72, v75)::
7319 :: CALL :: call :: Z :: v66 = v64.hasNext()::JM,7302:JM,7323
7323 :: PRED :: IF :: Z :: if (v66 != #(0)) goto 232::CD,7298:CD,7302:CD,7303:CD,7307:CD,7308:CD,7312:CD,7313:CD,7319:JM,7323
7382 :: ENTR :: entry :: null :: ai.susi.DAO.init(java.util.Map,java.nio.file.Path)::CD,7392:CD,7397:CD,7399:CD,7406:CD,7413:CD,7417:CD,7421:CD,7423:CD,7424:CD,7431:CD,7432:CD,7439:CD,7443:CD,7448:CD,7454:CD,7456:CD,7462:CD,7464:CD,7468:CD,7483:CD,7485:CD,7489:CD,7496:CD,7498:CD,7502:CD,7509:CD,7510:CD,7511:CD,7523:CD,7525:CD,7527:CD,7531:CD,7538:CD,7539:CD,7540:CD,7542:CD,7546:CD,7560:CD,7562:CD,7563:CD,7565:CD,7569:CD,7580:CD,7581:CD,7588:CD,7590:CD,7594:CD,7650:JM,10656:JM,9382:CD,7661:CD,7682:CD,7686:JM,9331:JM,9277:JM,9261:JM,10461:JM,9327:CD,8072:CD,8073:CD,8082:CD,8083:CD,8090:CD,8092:CD,8093:CD,8100:CD,8102:CD,8104:CD,8108:CD,8125:JM,10753:JM,13923:JM,10756:JM,10884:JM,10821:JM,10792:JM,10828:JM,10768:JM,10835:JM,10780:JM,10845:JM,9406:JM,10814:JM,10750:JM,9407
7392 :: NORM :: declaration :: Ljava/io/File :: v6 = new java.io.File::DD,7397
7397 :: EXPR :: modify :: Ljava/io/File :: ai.susi.DAO.conf_dir = v6::
7399 :: NORM :: declaration :: Ljava/io/File :: v9 = new java.io.File::
7406 :: NORM :: declaration :: Ljava/io/File :: v12 = new java.io.File::
7413 :: CALL :: call :: Ljava/io/File :: v16 = p2 $dataPath .toFile()::JM,10753:JM,13923:JM,7413:JM,7417:JM,8108:JM,8125:JM,7421:JM,10845:JM,10750
7417 :: CALL :: call :: Ljava/io/File :: v18 = v16.getAbsoluteFile()::JM,10753:JM,13923:JM,7417:JM,8125:JM,7421:JM,10845:JM,10750
7421 :: EXPR :: modify :: Ljava/io/File :: ai.susi.DAO.data_dir = v18::
7423 :: NORM :: declaration :: Ljava/io/File :: v19 = new java.io.File::JM,7443
7424 :: EXPR :: reference :: Ljava/io/File :: v20 = ai.susi.DAO.data_dir::
7431 :: NORM :: declaration :: Ljava/io/File :: v23 = new java.io.File::JM,7468
7432 :: EXPR :: reference :: Ljava/io/File :: v24 = ai.susi.DAO.data_dir::
7439 :: CALL :: call :: Z :: v28 = v19.exists()::JM,7443
7443 :: PRED :: IF :: Z :: if (v28 != #(0)) goto 95::CF,7448:CD,7444
7444 :: CALL :: call :: Z :: v31 = v19.mkdirs()::
7448 :: NORM :: declaration :: Ljava/io/File :: v32 = new java.io.File::DD,7454
7454 :: EXPR :: modify :: Ljava/io/File :: ai.susi.DAO.susi_chatlog_dir = v32::
7456 :: NORM :: declaration :: Ljava/io/File :: v35 = new java.io.File::DD,7462
7462 :: EXPR :: modify :: Ljava/io/File :: ai.susi.DAO.susi_skilllog_dir = v35::
7464 :: CALL :: call :: Z :: v39 = v23.exists()::JM,7468
7468 :: PRED :: IF :: Z :: if (v39 == #(0)) goto 145::CD,7469:CD,7471:CD,7475
7469 :: EXPR :: reference :: Ljava/io/File :: v40 = ai.susi.DAO.susi_chatlog_dir::JM,7475
7471 :: CALL :: call :: Z :: v42 = v40.exists()::JM,7475
7475 :: PRED :: IF :: Z :: if (v42 != #(0)) goto 145::CD,7476:CD,7478
7476 :: EXPR :: reference :: Ljava/io/File :: v43 = ai.susi.DAO.susi_chatlog_dir::
7478 :: CALL :: call :: Z :: v45 = v23.renameTo(v43)::
7483 :: EXPR :: reference :: Ljava/io/File :: v46 = ai.susi.DAO.susi_chatlog_dir::JM,7489
7485 :: CALL :: call :: Z :: v48 = v46.exists()::JM,7489
7489 :: PRED :: IF :: Z :: if (v48 != #(0)) goto 161::CD,7490:CD,7492
7490 :: EXPR :: reference :: Ljava/io/File :: v49 = ai.susi.DAO.susi_chatlog_dir::
7492 :: CALL :: call :: Z :: v51 = v49.mkdirs()::
7496 :: EXPR :: reference :: Ljava/io/File :: v52 = ai.susi.DAO.susi_skilllog_dir::JM,7502
7498 :: CALL :: call :: Z :: v54 = v52.exists()::JM,7502
7502 :: PRED :: IF :: Z :: if (v54 != #(0)) goto 177::CF,7509:CD,7503:CD,7505
7503 :: EXPR :: reference :: Ljava/io/File :: v55 = ai.susi.DAO.susi_skilllog_dir::
7505 :: CALL :: call :: Z :: v57 = v55.mkdirs()::
7509 :: NORM :: declaration :: Ljava/io/File :: v58 = new java.io.File::DD,7523:CF,7510
7510 :: NORM :: declaration :: Ljava/io/File :: v59 = new java.io.File::
7511 :: EXPR :: reference :: Ljava/io/File :: v60 = ai.susi.DAO.data_dir::
7523 :: EXPR :: modify :: Ljava/io/File :: ai.susi.DAO.deleted_skill_dir = v58::
7525 :: EXPR :: reference :: Ljava/io/File :: v65 = ai.susi.DAO.deleted_skill_dir::JM,7531
7527 :: CALL :: call :: Z :: v67 = v65.exists()::JM,7531
7531 :: PRED :: IF :: Z :: if (v67 != #(0)) goto 217::CF,7538:CD,7532:CD,7534
7532 :: EXPR :: reference :: Ljava/io/File :: v68 = ai.susi.DAO.deleted_skill_dir::
7534 :: CALL :: call :: Z :: v70 = v68.mkdirs()::
7538 :: NORM :: declaration :: Ljava/io/File :: v71 = new java.io.File::DD,7560:CF,7539
7539 :: NORM :: declaration :: Ljava/io/File :: v72 = new java.io.File::
7540 :: EXPR :: reference :: Ljava/io/File :: v73 = ai.susi.DAO.data_dir::JM,7542:JM,7546
7542 :: CALL :: call :: Ljava/io/File :: v75 = v73.getParentFile()::JM,7542:JM,7546
7546 :: CALL :: call :: Ljava/io/File :: v77 = v75.getParentFile()::JM,7546
7560 :: EXPR :: modify :: Ljava/io/File :: ai.susi.DAO.model_watch_dir = v71::
7562 :: NORM :: declaration :: Ljava/io/File :: v81 = new java.io.File::
7563 :: EXPR :: reference :: Ljava/io/File :: v82 = ai.susi.DAO.data_dir::JM,7569:JM,7565
7565 :: CALL :: call :: Ljava/io/File :: v84 = v82.getParentFile()::JM,7569:JM,7565
7569 :: CALL :: call :: Ljava/io/File :: v86 = v84.getParentFile()::JM,7569
7580 :: NORM :: declaration :: Ljava/io/File :: v89 = new java.io.File::
7581 :: EXPR :: reference :: Ljava/io/File :: v90 = ai.susi.DAO.conf_dir::
7588 :: EXPR :: reference :: Ljava/io/File :: v92 = ai.susi.DAO.model_watch_dir::JM,7594
7590 :: CALL :: call :: Z :: v94 = v92.exists()::JM,7594
7594 :: PRED :: IF :: Z :: if (v94 == #(0)) goto 331::CD,7605:CD,7606:JM,8784:JM,8864:JM,8785:JM,8786:JM,8789:JM,8806:JM,8871:JM,8872:JM,8795:JM,8859
7605 :: NORM :: declaration :: Ljava/io/File :: v106 = new java.io.File::
7606 :: EXPR :: reference :: Ljava/io/File :: v107 = ai.susi.DAO.model_watch_dir::
7650 :: NORM :: declaration :: Ljava/io/File :: v116 = new java.io.File::
7661 :: NORM :: declaration :: Ljava/io/File :: v120 = new java.io.File::
7682 :: CALL :: call :: Z :: v130 = v128.loadPrivateKey()::JM,7686:CL,8965
7686 :: PRED :: IF :: Z :: if (v130 == #(0)) goto 437::CD,7689:CD,7693:CD,7715:CD,7726:CD,7733:CD,7740:CD,7744:CD,7749:CD,7756:CD,7760:CD,7765
7689 :: CALL :: call :: Z :: v133 = v131.loadPublicKey()::JM,7693:CL,9050
7693 :: PRED :: IF :: Z :: if (v133 != #(0)) goto 544::CF,7773:CD,7715:CD,7726:CD,7733:CD,7740:CD,7744:CD,7749:CD,7756:CD,7760:CD,7765:CD,7780:CD,7784:CD,7789:CD,7796:CD,7800:CD,7805
7715 :: CALL :: call :: V :: v162.setPrivateKey(v164, #(RSA))::CL,9119
7726 :: CALL :: call :: V :: v166.setPublicKey(v168, #(RSA))::CL,9160
7733 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v171 = new java.lang.StringBuilder::
7740 :: CALL :: call :: Ljava/lang/String :: v176 = v174.getPeerHashAlgorithm()::CL,9205
7744 :: CALL :: call :: Ljava/lang/StringBuilder :: v178 = v171.append(v176)::
7749 :: CALL :: call :: Ljava/lang/StringBuilder :: v180 = v178.append(#( ))::
7756 :: CALL :: call :: Ljava/lang/String :: v183 = v181.getPeerHash()::CL,9220
7760 :: CALL :: call :: Ljava/lang/StringBuilder :: v185 = v180.append(v183)::
7765 :: CALL :: call :: Ljava/lang/String :: v187 = v185.toString()::
7773 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v134 = new java.lang.StringBuilder::
7780 :: CALL :: call :: Ljava/lang/String :: v139 = v137.getPeerHashAlgorithm()::CL,9205
7784 :: CALL :: call :: Ljava/lang/StringBuilder :: v141 = v134.append(v139)::
7789 :: CALL :: call :: Ljava/lang/StringBuilder :: v144 = v141.append(#( ))::
7796 :: CALL :: call :: Ljava/lang/String :: v147 = v145.getPeerHash()::CL,9220
7800 :: CALL :: call :: Ljava/lang/StringBuilder :: v149 = v144.append(v147)::
7805 :: CALL :: call :: Ljava/lang/String :: v151 = v149.toString()::
8072 :: NORM :: declaration :: Ljava/io/File :: v304 = new java.io.File::
8073 :: EXPR :: reference :: Ljava/io/File :: v305 = ai.susi.DAO.data_dir::
8082 :: NORM :: declaration :: Ljava/io/File :: v308 = new java.io.File::DD,8090
8083 :: EXPR :: reference :: Ljava/io/File :: v309 = ai.susi.DAO.data_dir::
8090 :: EXPR :: modify :: Ljava/io/File :: ai.susi.DAO.external_data = v308::
8092 :: NORM :: declaration :: Ljava/io/File :: v312 = new java.io.File::DD,8100
8093 :: EXPR :: reference :: Ljava/io/File :: v313 = ai.susi.DAO.external_data::
8100 :: EXPR :: modify :: Ljava/io/File :: ai.susi.DAO.dictionaries = v312::
8102 :: EXPR :: reference :: Ljava/io/File :: v316 = ai.susi.DAO.dictionaries::
8104 :: CALL :: call :: Z :: v318 = v316.mkdirs()::
8108 :: CALL :: call :: Ljava/nio/file/Path :: v321 = p2 $dataPath .resolve(#(log))::JM,10753:JM,13923:JM,7413:JM,7417:JM,8108:JM,8125:JM,7421:JM,10845:JM,10750
8125 :: CALL :: call :: Ljava/io/File :: v329 = v321.toFile()::JM,10753:JM,13923:JM,7417:JM,8125:JM,7421:JM,10845:JM,10750
8553 :: CALL :: call :: Ljava/lang/Integer :: v8 = valueOf(p3 $mode )::
8770 :: EXPR :: reference :: Ljava/lang/Object :: v9 = p3 $watchpaths [v16]::DD,8774
8774 :: PRED :: IF :: Z :: if (v9 == #(null)) goto 30::CD,8779:CF,8783
8775 :: EXPR :: reference :: Ljava/lang/Object :: v11 = p3 $watchpaths [v16]::
8779 :: CALL :: call :: Z :: v13 = v11.mkdirs()::
8783 :: EXPR :: assign :: Ljava/lang/Object :: v15 = v16 + #(1)::DD,8872
8784 :: EXPR :: assign :: I :: v8 = p3 $watchpaths .length::CF,8785
8785 :: PRED :: IF :: Z :: if (v16 < v8) goto 18::CD,8774:CD,8783:CD,8784:CD,8872
8786 :: EXPR :: modify :: Ljava/io/File :: p0 $this .susi_chatlog_dir = p1 $susi_chatlog_dir ::
8789 :: EXPR :: modify :: Ljava/io/File :: p0 $this .susi_skilllog_dir = p2 $susi_skilllog_dir ::
8792 :: EXPR :: reference :: Ljava/io/File :: v17 = p0 $this .susi_chatlog_dir::DD,8795
8795 :: PRED :: IF :: Z :: if (v17 == #(null)) goto 66::CD,8799
8796 :: EXPR :: reference :: Ljava/io/File :: v18 = p0 $this .susi_chatlog_dir::
8799 :: CALL :: call :: Z :: v20 = v18.mkdirs()::
8803 :: EXPR :: reference :: Ljava/io/File :: v21 = p0 $this .susi_skilllog_dir::DD,8806
8806 :: PRED :: IF :: Z :: if (v21 == #(null)) goto 81::CD,8810
8807 :: EXPR :: reference :: Ljava/io/File :: v22 = p0 $this .susi_skilllog_dir::
8810 :: CALL :: call :: Z :: v24 = v22.mkdirs()::
8859 :: CALL :: call :: Lai/susi/mind/SusiMind :: v39 = p0 $this .observe()::CL,10199
8864 :: CALL :: call :: V :: v40.printStackTrace()::
8871 :: EXPR :: assign :: Ljava/lang/Exception :: v40 = catch <exc>::
8872 :: EXPR :: assign :: null :: PHI v16 = #(0), v15::DD,8783:DD,8785:CF,8784
8965 :: ENTR :: entry :: null :: ai.susi.server.Settings.loadPrivateKey()::CE,8966:CD,8969:CD,8974:CD,9024
8966 :: EXIT :: exit :: Z :: ai.susi.server.Settings.loadPrivateKey()::JM,7686
8969 :: CALL :: call :: Z :: v5 = p0 $this .has(#(private_key))::JM,8974:CL,10233
8974 :: PRED :: IF :: Z :: if (v5 == #(0)) goto 19::CD,8975:CD,8980:CD,8981
8975 :: CALL :: call :: Z :: v9 = p0 $this .has(#(key_algorithm))::JM,8980:CL,10233
8980 :: PRED :: IF :: Z :: if (v9 != #(0)) goto 23::CD,8981:CD,8982:CD,8987:CD,9020
8981 :: NORM :: compound :: Z :: return #(0)::DD,8966
8982 :: CALL :: call :: Ljava/lang/String :: v11 = p0 $this .getString(#(private_key))::CL,10249
8987 :: CALL :: call :: Ljava/lang/String :: v13 = p0 $this .getString(#(key_algorithm))::CL,10249
9020 :: NORM :: compound :: Z :: return #(1)::DD,8966
9024 :: NORM :: compound :: Z :: return #(0)::DD,8966
9050 :: ENTR :: entry :: null :: ai.susi.server.Settings.loadPublicKey()::CE,9051:CD,9054:CD,9059
9051 :: EXIT :: exit :: Z :: ai.susi.server.Settings.loadPublicKey()::JM,7693
9054 :: CALL :: call :: Z :: v5 = p0 $this .has(#(public_key))::JM,9059:CL,10233
9059 :: PRED :: IF :: Z :: if (v5 == #(0)) goto 19::CD,9060:CD,9065:CD,9066
9060 :: CALL :: call :: Z :: v9 = p0 $this .has(#(key_algorithm))::JM,9065:CL,10233
9065 :: PRED :: IF :: Z :: if (v9 != #(0)) goto 23::CD,9066:CD,9067:CD,9072:CD,9077:CD,9082
9066 :: NORM :: compound :: Z :: return #(0)::DD,9051
9067 :: CALL :: call :: Ljava/lang/String :: v11 = p0 $this .getString(#(public_key))::CL,10249
9072 :: CALL :: call :: Ljava/lang/String :: v13 = p0 $this .getString(#(key_algorithm))::CL,10249
9077 :: CALL :: call :: Ljava/security/PublicKey :: v15 = decodePublicKey(v11, v13)::JM,9082:CL,10313
9082 :: PRED :: IF :: Z :: if (v15 == #(null)) goto 61::CD,9089:CD,9092:CD,9093
9089 :: CALL :: call :: V :: p0 $this .setPeerHash()::CL,10353
9092 :: NORM :: compound :: Z :: return #(1)::DD,9051
9093 :: NORM :: compound :: Z :: return #(0)::DD,9051
9119 :: ENTR :: entry :: null :: ai.susi.server.Settings.setPrivateKey(java.security.PrivateKey,java.lang.String)::CD,9129:CD,9138
9129 :: CALL :: call :: Lorg/json/JSONObject :: v9 = p0 $this .put(#(private_key), v7)::CL,10424
9138 :: CALL :: call :: Lorg/json/JSONObject :: v12 = p0 $this .put(#(key_algorithm), p2 $algorithm )::CL,10424
9160 :: ENTR :: entry :: null :: ai.susi.server.Settings.setPublicKey(java.security.PublicKey,java.lang.String)::CD,9170:CD,9179:CD,9188
9170 :: CALL :: call :: Lorg/json/JSONObject :: v9 = p0 $this .put(#(public_key), v7)::CL,10424
9179 :: CALL :: call :: Lorg/json/JSONObject :: v12 = p0 $this .put(#(key_algorithm), p2 $algorithm )::CL,10424
9188 :: CALL :: call :: V :: p0 $this .setPeerHash()::CL,10353
9205 :: ENTR :: entry :: null :: ai.susi.server.Settings.getPeerHashAlgorithm()::CE,9206:CD,9209:CD,9217
9206 :: EXIT :: exit :: Ljava/lang/String :: ai.susi.server.Settings.getPeerHashAlgorithm()::
9209 :: NORM :: declaration :: Ljava/lang/String :: v3 = new java.lang.String::JM,9209:DD,9217
9210 :: EXPR :: reference :: Ljava/lang/String :: v4 = p0 $this .hash_algorithm::JM,9209
9217 :: NORM :: compound :: Ljava/lang/String :: return v3::DD,9206
9220 :: ENTR :: entry :: null :: ai.susi.server.Settings.getPeerHash()::CE,9221:CD,9224:CD,9232
9221 :: EXIT :: exit :: Ljava/lang/String :: ai.susi.server.Settings.getPeerHash()::
9224 :: NORM :: declaration :: Ljava/lang/String :: v3 = new java.lang.String::JM,9224:DD,9232
9225 :: EXPR :: reference :: Ljava/lang/String :: v4 = p0 $this .peer_hash::JM,9224
9232 :: NORM :: compound :: Ljava/lang/String :: return v3::DD,9221
9261 :: EXPR :: modify :: Ljava/io/File :: p0 $this .file_volatile = p2 $file_volatile ::
9274 :: EXPR :: reference :: Ljava/io/File :: v14 = p0 $this .file_volatile::DD,9277
9277 :: PRED :: IF :: Z :: if (v14 == #(null)) goto 134::CD,9281:CD,9285
9278 :: EXPR :: reference :: Ljava/io/File :: v16 = p0 $this .file_volatile::JM,9281:JM,9285
9281 :: CALL :: call :: Z :: v18 = v16.exists()::JM,9281:JM,9285
9285 :: PRED :: IF :: Z :: if (v18 == #(0)) goto 134::CD,9289:CD,9293:CD,9297:CD,9321:CD,9325
9289 :: CALL :: call :: Lorg/json/JSONObject :: v22 = readJson(v20)::CL,10474
9293 :: CALL :: call :: Ljava/util/Set :: v26 = v22.keySet()::JM,9325:CL,10537
9297 :: CALL :: call :: Ljava/util/Iterator :: v28 = v26.iterator()::JM,9325
9302 :: CALL :: call :: Ljava/lang/Object :: v32 = v28.next()::JM,9325
9310 :: CALL :: call :: Lorg/json/JSONObject :: v36 = v22.getJSONObject(v33)::CL,10550
9315 :: CALL :: call :: Ljava/lang/Object :: v38 = v34.put(v33, v36)::CL,10599
9321 :: CALL :: call :: Z :: v30 = v28.hasNext()::JM,9325
9325 :: PRED :: IF :: Z :: if (v30 != #(0)) goto 87::CD,9302:CD,9310:CD,9315:CD,9321:JM,9325
9327 :: CALL :: call :: V :: v23.printStackTrace()::
9331 :: EXPR :: assign :: Ljava/lang/Exception :: v23 = catch <exc>::
9382 :: CALL :: call :: V :: p0 $this .updateToFile()::CL,10677
9406 :: NORM :: declaration :: Lai/susi/json/JsonRepository :: v8 = new ai.susi.json.JsonRepository::JM,10753:JM,13923:JM,10756:JM,10884:JM,10821:JM,10792:JM,10828:JM,10768:JM,10835:JM,10780:JM,10845:JM,10814:JM,10750
9407 :: EXPR :: reference :: Lai/susi/json/JsonRepository$Mode :: v10 = ai.susi.json.JsonRepository$Mode.COMPRESSED::JM,10753:JM,13923:JM,10756:JM,10884:JM,10821:JM,10792:JM,10828:JM,10768:JM,10835:JM,10780:JM,10845:JM,10814:JM,10750
10199 :: ENTR :: entry :: null :: ai.susi.mind.SusiMind.observe()::CD,10219:CD,10220:CD,10222
10211 :: CALL :: call :: V :: p0 $this .observe(v7)::CL,12920
10215 :: EXPR :: assign :: Ljava/lang/Object :: v10 = v11 + #(1)::DD,10222
10216 :: EXPR :: reference :: [Ljava/io/File :: v4 = p0 $this .watchpaths::DD,10219
10219 :: EXPR :: assign :: I :: v5 = v4.length::CF,10220
10220 :: PRED :: IF :: Z :: if (v11 < v5) goto 7::CD,10211:CD,10215:CD,10219:CD,10222
10222 :: EXPR :: assign :: null :: PHI v11 = #(0), v10::DD,10215:DD,10220
10233 :: ENTR :: entry :: null :: org.json.JSONObject.has(java.lang.String)::CE,10234:CD,10241:CD,10246
10234 :: EXIT :: exit :: Z :: org.json.JSONObject.has(java.lang.String)::JM,8974:JM,8980:JM,9059:JM,9065:JM,11224:JM,11230:JM,11312:JM,15778:JM,15810:JM,15822:JM,17597:JM,17613:JM,17629
10238 :: EXPR :: reference :: Ljava/util/Map :: v4 = p0 $this .map::JM,10246
10241 :: CALL :: call :: Z :: v6 = v4.containsKey(p1 $key )::JM,10246
10246 :: NORM :: compound :: Z :: return v6::CF,10234
10249 :: ENTR :: entry :: null :: org.json.JSONObject.getString(java.lang.String)::CD,10254:CD,10264:CD,10269:CD,10273:CD,10278:CD,10283
10254 :: CALL :: call :: Ljava/lang/Object :: v5 = p0 $this .get(p1 $key )::CL,13224
10264 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v9 = new java.lang.StringBuilder::
10269 :: CALL :: call :: Ljava/lang/String :: v13 = quote(p1 $key )::CL,13280
10273 :: CALL :: call :: Ljava/lang/StringBuilder :: v15 = v9.append(v13)::
10278 :: CALL :: call :: Ljava/lang/StringBuilder :: v18 = v15.append(#(] not a string.))::
10283 :: CALL :: call :: Ljava/lang/String :: v20 = v18.toString()::
10313 :: ENTR :: entry :: null :: ai.susi.tools.IO.decodePublicKey(java.lang.String,java.lang.String)::CF,10314:CD,10318:CD,10331:CD,10335:CD,10340:CD,10344
10314 :: EXIT :: exit :: Ljava/security/PublicKey :: ai.susi.tools.IO.decodePublicKey(java.lang.String,java.lang.String)::JM,9082
10318 :: NORM :: declaration :: Ljava/security/spec/X509EncodedKeySpec :: v4 = new java.security.spec.X509EncodedKeySpec::JM,10340:JM,10335
10331 :: CALL :: call :: Ljava/security/KeyFactory :: v11 = getInstance(p2 $algorithm )::JM,10340:JM,10331:JM,10335
10335 :: CALL :: call :: Ljava/security/PublicKey :: v13 = v11.generatePublic(v4)::JM,10340:JM,10335
10340 :: NORM :: compound :: Ljava/security/PublicKey :: return v13::CF,10314
10344 :: NORM :: compound :: Ljava/security/PublicKey :: return #(null)::CF,10314
10353 :: ENTR :: entry :: null :: ai.susi.server.Settings.setPeerHash()::CD,10366:CD,10377:CD,10386
10366 :: CALL :: call :: Ljava/lang/String :: v7 = getKeyHash(v4, v5)::CL,13330
10377 :: CALL :: call :: Lorg/json/JSONObject :: v11 = p0 $this .put(#(peer_hash), v9)::CL,10424
10386 :: CALL :: call :: Lorg/json/JSONObject :: v15 = p0 $this .put(#(peer_hash_algorithm), v13)::CL,10424
10424 :: ENTR :: entry :: null :: ai.susi.json.JsonFile.put(java.lang.String,java.lang.Object)::CD,10430:CD,10433:CD,10439
10430 :: CALL :: call :: V :: p0 $this .updateToFile()::CL,10677
10433 :: CALL :: call :: Lorg/json/JSONObject :: v7 = p0 $this .put(p1 $key , p2 $value )::CL,13370
10439 :: CALL :: call :: V :: p0 $this .commit()::CL,13416
10461 :: NORM :: declaration :: Ljava/util/LinkedHashMap :: v5 = new java.util.LinkedHashMap::JM,10656
10474 :: ENTR :: entry :: null :: ai.susi.json.JsonFile.readJson(java.io.File)::JM,10656:CD,10483:JM,10488
10483 :: PRED :: IF :: Z :: if (p1 $file  == #(null)) goto 21::CD,10484:CD,10488:CD,10489:CD,10493
10484 :: CALL :: call :: Z :: v8 = p1 $file .exists()::JM,10488
10488 :: PRED :: IF :: Z :: if (v8 != #(0)) goto 33::CD,10489:CD,10493:JM,10656:JM,13684:JM,13718:JM,13750:JM,13690:JM,13694:JM,13695:CD,10513:JM,10488
10489 :: CALL :: call :: Z :: v18 = p1 $file .createNewFile()::JM,10488
10493 :: CALL :: call :: V :: writeJson(p1 $file , v3)::CL,13442
10513 :: CALL :: call :: V :: v3.putAll(v14)::CL,13778
10537 :: ENTR :: entry :: null :: org.json.JSONObject.keySet()::CE,10538:CD,10544:CD,10548
10538 :: EXIT :: exit :: Ljava/util/Set :: org.json.JSONObject.keySet()::JM,9325:JM,17700:JM,17802:JM,19312
10541 :: EXPR :: reference :: Ljava/util/Map :: v3 = p0 $this .map::JM,10548
10544 :: CALL :: call :: Ljava/util/Set :: v5 = v3.keySet()::JM,10548
10548 :: NORM :: compound :: Ljava/util/Set :: return v5::DD,10538
10550 :: ENTR :: entry :: null :: org.json.JSONObject.getJSONObject(java.lang.String)::CD,10555:CD,10565:CD,10570:CD,10574:CD,10579:CD,10584
10555 :: CALL :: call :: Ljava/lang/Object :: v5 = p0 $this .get(p1 $key )::CL,13224
10565 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v9 = new java.lang.StringBuilder::
10570 :: CALL :: call :: Ljava/lang/String :: v13 = quote(p1 $key )::CL,13280
10574 :: CALL :: call :: Ljava/lang/StringBuilder :: v15 = v9.append(v13)::
10579 :: CALL :: call :: Ljava/lang/StringBuilder :: v18 = v15.append(#(] is not a JSONObject.))::
10584 :: CALL :: call :: Ljava/lang/String :: v20 = v18.toString()::
10599 :: ENTR :: entry :: null :: ai.susi.tools.CacheMap.put(java.lang.Object,java.lang.Object)::CD,10609:CD,10615:CD,10623
10609 :: CALL :: call :: V :: p0 $this .checkSize()::CL,13796
10612 :: EXPR :: reference :: Ljava/util/LinkedHashMap :: v7 = p0 $this .map::
10615 :: CALL :: call :: Ljava/lang/Object :: v9 = v7.remove(p1 $key )::
10620 :: EXPR :: reference :: Ljava/util/LinkedHashMap :: v10 = p0 $this .map::
10623 :: CALL :: call :: Ljava/lang/Object :: v12 = v10.put(p1 $key , p2 $value )::
10656 :: PRED :: IF :: Z :: if (p1 $ordered  == #(0)) goto 19::CF,10662:CF,10657
10657 :: NORM :: declaration :: Ljava/util/LinkedHashMap :: v8 = new java.util.LinkedHashMap::
10662 :: NORM :: declaration :: Ljava/util/HashMap :: v6 = new java.util.HashMap::
10677 :: ENTR :: entry :: null :: ai.susi.json.JsonFile.updateToFile()::CD,10684:CD,10691:CD,10692
10681 :: EXPR :: reference :: Ljava/io/File :: v3 = p0 $this .file::JM,10691
10684 :: CALL :: call :: J :: v5 = v3.lastModified()::JM,10691
10688 :: EXPR :: reference :: J :: v6 = p0 $this .file_date::DD,10691
10691 :: EXPR :: assign :: Z :: v7 = v5 == v6::DD,10692
10692 :: PRED :: IF :: Z :: if (v7 != #(0)) goto 17::CD,10697:CD,10712:CD,10719
10697 :: CALL :: call :: Lorg/json/JSONObject :: v11 = readJson(v9)::CL,10474
10712 :: CALL :: call :: V :: p0 $this .putAll(v11)::CL,13778
10716 :: EXPR :: reference :: Ljava/io/File :: v18 = p0 $this .file::
10719 :: CALL :: call :: J :: v20 = v18.lastModified()::
10750 :: EXPR :: modify :: Ljava/io/File :: p0 $this .dump_dir = p1 $dump_dir ::
10753 :: EXPR :: modify :: Ljava/lang/String :: p0 $this .dump_file_prefix = p2 $dump_file_prefix ::
10756 :: NORM :: declaration :: Ljava/io/File :: v10 = new java.io.File::JM,13923:DD,10765
10757 :: EXPR :: reference :: Ljava/io/File :: v11 = p0 $this .dump_dir::JM,13923
10765 :: EXPR :: modify :: Ljava/io/File :: p0 $this .dump_dir_own = v10::
10768 :: NORM :: declaration :: Ljava/io/File :: v14 = new java.io.File::JM,13923:DD,10777
10769 :: EXPR :: reference :: Ljava/io/File :: v15 = p0 $this .dump_dir::JM,13923
10777 :: EXPR :: modify :: Ljava/io/File :: p0 $this .dump_dir_import = v14::
10780 :: NORM :: declaration :: Ljava/io/File :: v18 = new java.io.File::JM,13923:DD,10789
10781 :: EXPR :: reference :: Ljava/io/File :: v19 = p0 $this .dump_dir::JM,13923
10789 :: EXPR :: modify :: Ljava/io/File :: p0 $this .dump_dir_imported = v18::
10792 :: NORM :: declaration :: Ljava/io/File :: v22 = new java.io.File::JM,13923:DD,10801
10793 :: EXPR :: reference :: Ljava/io/File :: v23 = p0 $this .dump_dir::JM,13923
10801 :: EXPR :: modify :: Ljava/io/File :: p0 $this .dump_dir_buffer = v22::
10811 :: EXPR :: reference :: Ljava/io/File :: v29 = p0 $this .dump_dir_own::
10814 :: CALL :: call :: Z :: v31 = v29.mkdirs()::
10818 :: EXPR :: reference :: Ljava/io/File :: v32 = p0 $this .dump_dir_import::
10821 :: CALL :: call :: Z :: v34 = v32.mkdirs()::
10825 :: EXPR :: reference :: Ljava/io/File :: v35 = p0 $this .dump_dir_imported::
10828 :: CALL :: call :: Z :: v37 = v35.mkdirs()::
10832 :: EXPR :: reference :: Ljava/io/File :: v38 = p0 $this .dump_dir_buffer::
10835 :: CALL :: call :: Z :: v40 = v38.mkdirs()::
10845 :: PRED :: IF :: Z :: if (p3 $readme  == #(null)) goto 191::CF,10846:CD,10855:CD,10859
10846 :: NORM :: declaration :: Ljava/io/File :: v42 = new java.io.File::JM,10859
10847 :: EXPR :: reference :: Ljava/io/File :: v43 = p0 $this .dump_dir::
10855 :: CALL :: call :: Z :: v47 = v42.exists()::JM,10859
10859 :: PRED :: IF :: Z :: if (v47 != #(0)) goto 191::CF,10860:CD,10861:CD,10870:CD,10874
10860 :: NORM :: declaration :: Ljava/io/BufferedWriter :: v49 = new java.io.BufferedWriter::CF,10861
10861 :: NORM :: declaration :: Ljava/io/FileWriter :: v50 = new java.io.FileWriter::
10870 :: CALL :: call :: V :: v49.write(p3 $readme )::JM,13923
10874 :: CALL :: call :: V :: v49.close()::
10878 :: EXPR :: reference :: Ljava/io/File :: v56 = p0 $this .dump_dir_own::JM,13985:JM,13923:JM,13924:JM,13990:JM,13929:JM,13883:JM,13884
10881 :: EXPR :: reference :: Ljava/lang/String :: v57 = p0 $this .dump_file_prefix::JM,13985:JM,13923:JM,13924:JM,13990:JM,13929:JM,13883:JM,13884
10884 :: CALL :: call :: Ljava/io/File :: v59 = getCurrentDump(v56, v57, p4 $mode , p5 $dailyDump )::JM,13985:JM,13923:JM,13924:JM,13990:JM,13929:JM,13883:JM,13884:CL,13863
10969 :: ENTR :: entry :: null :: ai.susi.mind.SusiSkill.readEzDSkill(java.io.BufferedReader)::JM,14332:JM,14350:CD,10981:CD,10987:CD,11977:CD,11981:CD,12023:CD,12025:CD,12026:CD,12027:CD,12028:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,11901:JM,11517:JM,11391
10981 :: CALL :: call :: Lorg/json/JSONObject :: v9 = v3.put(#(intents), v5)::CL,13370
10987 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v11 = new java.lang.StringBuilder::
10992 :: CALL :: call :: Ljava/lang/String :: v18 = v15.trim()::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11981:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
10996 :: CALL :: call :: I :: v20 = v459.length()::JM,11000
11000 :: PRED :: IF :: Z :: if (v20 <= #(0)) goto 705::CD,11001:CD,11005:CD,11010:CD,11357:CD,11362:CD,11368:CD,11373:CD,12011:CD,12013:CD,12014:CD,12015:CD,12016:CD,12023:CD,12025:CD,12026:CD,12027:CD,12028:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,11901:JM,11517:JM,11391
11001 :: CALL :: call :: Ljava/lang/String :: v22 = v18.toLowerCase()::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11005 :: CALL :: call :: Z :: v25 = v22.equals(#(eol))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11010 :: PRED :: IF :: Z :: if (v25 == #(0)) goto 689::CF,12011:CD,11011:CD,11016:CD,11353:CD,12006:CD,12007:CD,12008
11011 :: CALL :: call :: Z :: v28 = v459.equals(#(javascript))::JM,11016
11016 :: PRED :: IF :: Z :: if (v28 == #(0)) goto 336::JM,10656:JM,14350:CD,11026:CD,11032:CD,11037:CD,11058:JM,14332:CD,11069:CD,11075:CD,11079:CD,11089:CD,11094:CD,11104:CD,11109:CD,11113:CD,11118:CD,11124:CD,11128:CD,11135:CD,11141:CD,11146:CD,11992:CD,11994:CD,11995:CD,11998:CD,12006:CD,12007:CD,12008
11026 :: CALL :: call :: Lorg/json/JSONObject :: v78 = v73.put(#(phrases), v75)::CL,13370
11032 :: CALL :: call :: [Ljava/lang/String :: v80 = v551.split(#(\|))::JM,11037
11037 :: EXPR :: assign :: I :: v81 = v80.length::DD,11058
11039 :: EXPR :: reference :: Ljava/lang/Object :: v82 = v80[v90]::
11043 :: CALL :: call :: Ljava/lang/String :: v84 = v82.trim()::
11047 :: CALL :: call :: Lorg/json/JSONObject :: v86 = simplePhrase(v84, v387)::CL,14366
11052 :: CALL :: call :: Lorg/json/JSONArray :: v88 = v75.put(v86)::CL,14622
11057 :: EXPR :: assign :: Ljava/lang/Object :: v89 = v90 + #(1)::DD,11998:CF,11992
11058 :: PRED :: IF :: Z :: if (v90 < v81) goto 191::CD,11043:CD,11047:CD,11052:CD,11057:CD,11992:CD,11994:CD,11995:CD,11998
11069 :: CALL :: call :: Lorg/json/JSONObject :: v97 = v91.put(#(type), v95)::CL,13370
11075 :: CALL :: call :: Ljava/lang/String :: v100 = v11.toString()::
11079 :: CALL :: call :: Lorg/json/JSONObject :: v102 = v91.put(#(expression), v100)::CL,13370
11089 :: CALL :: call :: Lorg/json/JSONArray :: v107 = v104.put(v91)::CL,14622
11094 :: CALL :: call :: Lorg/json/JSONObject :: v109 = v73.put(#(process), v107)::CL,13370
11104 :: CALL :: call :: [Ljava/lang/String :: v114 = v464.split(#(\|))::
11109 :: CALL :: call :: Lorg/json/JSONObject :: v116 = answerAction(v114)::CL,14640
11113 :: CALL :: call :: Lorg/json/JSONArray :: v118 = v111.put(v116)::CL,14622
11118 :: CALL :: call :: Lorg/json/JSONObject :: v120 = v73.put(#(actions), v118)::CL,13370
11124 :: CALL :: call :: I :: v122 = v446.length()::JM,11128
11128 :: PRED :: IF :: Z :: if (v122 <= #(0)) goto 325::CD,11129
11129 :: CALL :: call :: Lorg/json/JSONObject :: v125 = v73.put(#(example), v446)::CL,13370
11135 :: CALL :: call :: Lorg/json/JSONArray :: v127 = v5.put(v73)::CL,14622
11141 :: CALL :: call :: Z :: v31 = v459.equals(#(console))::JM,11146
11146 :: PRED :: IF :: Z :: if (v31 == #(0)) goto 682::CF,12006:JM,10656:JM,14350:CD,11156:CD,11162:CD,11167:CD,11188:JM,14332:CD,11199:CD,11207:JM,13617:JM,13621:JM,14733:JM,13684:JM,13718:JM,13750:JM,13690:JM,13694:JM,13695:CD,11219:CD,11224:CD,11999:CD,12000:CD,12001:CD,12002:CD,12005:CD,12007:CD,12008
11156 :: CALL :: call :: Lorg/json/JSONObject :: v39 = v32.put(#(phrases), v35)::CL,13370
11162 :: CALL :: call :: [Ljava/lang/String :: v42 = v551.split(#(\|))::JM,11167
11167 :: EXPR :: assign :: I :: v43 = v42.length::DD,11188
11169 :: EXPR :: reference :: Ljava/lang/Object :: v44 = v42[v52]::
11173 :: CALL :: call :: Ljava/lang/String :: v46 = v44.trim()::
11177 :: CALL :: call :: Lorg/json/JSONObject :: v48 = simplePhrase(v46, v377)::CL,14366
11182 :: CALL :: call :: Lorg/json/JSONArray :: v50 = v35.put(v48)::CL,14622
11187 :: EXPR :: assign :: Ljava/lang/Object :: v51 = v52 + #(1)::DD,12005:CF,11999
11188 :: PRED :: IF :: Z :: if (v52 < v43) goto 394::CD,11173:CD,11177:CD,11182:CD,11187:CD,11999:CD,12000:CD,12001:CD,12002:CD,12005
11199 :: CALL :: call :: Lorg/json/JSONObject :: v60 = v53.put(#(type), v58)::CL,13370
11207 :: CALL :: call :: Ljava/lang/String :: v64 = v11.toString()::
11219 :: CALL :: call :: Z :: v69 = v61.has(#(url))::JM,11224:CL,10233
11224 :: PRED :: IF :: Z :: if (v69 == #(0)) goto 682::CF,12006:CD,11225:CD,11230:CD,12007:CD,12008
11225 :: CALL :: call :: Z :: v72 = v61.has(#(path))::JM,11230:CL,10233
11230 :: PRED :: IF :: Z :: if (v72 == #(0)) goto 682::CF,12006:JM,14332:CD,11235:CD,11240:CD,11246:CD,11251:CD,11257:JM,14350:CD,11267:CD,11272:CD,11282:CD,11288:CD,11292:CD,11307:CD,11312:CD,11326:CD,11330:CD,11337:CD,11341:CD,11348:CD,12007:CD,12008
11235 :: CALL :: call :: Ljava/lang/Object :: v131 = v61.get(#(url))::CL,13224
11240 :: CALL :: call :: Lorg/json/JSONObject :: v133 = v128.put(#(url), v131)::CL,13370
11246 :: CALL :: call :: Ljava/lang/Object :: v135 = v61.get(#(path))::CL,13224
11251 :: CALL :: call :: Lorg/json/JSONObject :: v137 = v133.put(#(path), v135)::CL,13370:CL,10424
11257 :: CALL :: call :: Lorg/json/JSONObject :: v140 = v53.put(#(definition), v137)::CL,13370
11267 :: CALL :: call :: Lorg/json/JSONArray :: v144 = v141.put(v53)::CL,14622
11272 :: CALL :: call :: Lorg/json/JSONObject :: v146 = v32.put(#(process), v144)::CL,13370
11282 :: CALL :: call :: Lorg/json/JSONObject :: v150 = v32.put(#(actions), v147)::CL,13370
11288 :: CALL :: call :: I :: v152 = v462.length()::JM,11292
11292 :: PRED :: IF :: Z :: if (v152 <= #(0)) goto 597::CD,11293:CD,11298:CD,11302
11293 :: CALL :: call :: [Ljava/lang/String :: v154 = v462.split(#(\|))::
11298 :: CALL :: call :: Lorg/json/JSONObject :: v156 = answerAction(v154)::CL,14640
11302 :: CALL :: call :: Lorg/json/JSONArray :: v158 = v147.put(v156)::CL,14622
11307 :: CALL :: call :: Z :: v160 = v61.has(#(actions))::JM,11312:CL,10233
11312 :: PRED :: IF :: Z :: if (v160 == #(0)) goto 626::CD,11313:JM,11330
11313 :: CALL :: call :: Lorg/json/JSONArray :: v162 = v61.getJSONArray(#(actions))::CL,14746
11326 :: CALL :: call :: I :: v167 = v445.length()::JM,11330
11330 :: PRED :: IF :: Z :: if (v167 <= #(0)) goto 644::CD,11331:JM,11341
11331 :: CALL :: call :: Lorg/json/JSONObject :: v169 = v32.put(#(example), v445)::CL,13370
11337 :: CALL :: call :: I :: v171 = v452.length()::JM,11341
11341 :: PRED :: IF :: Z :: if (v171 <= #(0)) goto 663::CD,11342
11342 :: CALL :: call :: Lorg/json/JSONObject :: v174 = v32.put(#(expect), v452)::CL,13370
11348 :: CALL :: call :: Lorg/json/JSONArray :: v176 = v5.put(v32)::CL,14622
11353 :: CALL :: call :: V :: v11.setLength(#(0))::
11357 :: CALL :: call :: Ljava/lang/StringBuilder :: v185 = v11.append(v18)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11362 :: CALL :: call :: Ljava/lang/StringBuilder :: v188 = v185.append(#(10))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11368 :: CALL :: call :: Z :: v192 = v18.startsWith(#())::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11373 :: PRED :: IF :: Z :: if (v192 == #(0)) goto 1255::CD,11386:CD,11391:CD,11419:CD,11424:CD,11452:CD,11457:CD,11485:CD,11490:CD,11524:CD,11529:CD,11557:CD,11562:CD,11590:CD,11595:CD,11623:CD,11628:CD,11657:CD,11662:CD,11691:CD,11696:CD,12023:CD,12025:CD,12026:CD,12027:CD,12028:JM,11010:JM,11907:JM,11397:JM,11398:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11951:JM,11568:JM,11569:JM,11445:JM,11702:JM,11583:JM,11718:JM,11463:JM,11464:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11748:JM,11749:JM,11496:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,11901:JM,11517
11386 :: CALL :: call :: Z :: v203 = v18.startsWith(#(description))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11391 :: PRED :: IF :: Z :: if (v203 == #(0)) goto 798::CD,11392:CD,11397:JM,11010:JM,11907:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11392 :: CALL :: call :: I :: v206 = v18.indexOf(#(32))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11397 :: PRED :: IF :: Z :: if (v206 <= #(0)) goto 798::CD,11398:CD,11399:CD,11404:CD,11408:CD,11412:JM,11010:JM,11907:JM,11397:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11398 :: EXPR :: assign :: Ljava/lang/Object :: v207 = v206 + #(1)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11399 :: CALL :: call :: Ljava/lang/String :: v209 = v18.substring(v207)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11404 :: CALL :: call :: Ljava/lang/String :: v211 = v209.trim()::JM,11010:JM,11907:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517
11408 :: CALL :: call :: I :: v213 = v211.length()::JM,11616:JM,11937:JM,11683:JM,11813:JM,11944:JM,11951:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,11736:JM,12025:JM,12026:JM,12027:JM,12028:JM,11517:JM,11550:JM,11583
11412 :: PRED :: IF :: Z :: if (v213 <= #(0)) goto 798::CD,11413:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11413 :: CALL :: call :: Lorg/json/JSONObject :: v216 = v3.put(#(description), v211)::CL,13370
11419 :: CALL :: call :: Z :: v221 = v18.startsWith(#(image))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11424 :: PRED :: IF :: Z :: if (v221 == #(0)) goto 852::CD,11425:CD,11430:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11425 :: CALL :: call :: I :: v223 = v18.indexOf(#(32))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11430 :: PRED :: IF :: Z :: if (v223 <= #(0)) goto 852::CD,11431:CD,11432:CD,11437:CD,11441:CD,11445:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11431 :: EXPR :: assign :: Ljava/lang/Object :: v224 = v223 + #(1)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11432 :: CALL :: call :: Ljava/lang/String :: v226 = v18.substring(v224)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11437 :: CALL :: call :: Ljava/lang/String :: v228 = v226.trim()::JM,11010:JM,11907:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11937:JM,11683:JM,11813:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517
11441 :: CALL :: call :: I :: v230 = v228.length()::JM,11616:JM,11937:JM,11683:JM,11813:JM,11944:JM,11951:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,11736:JM,12025:JM,12026:JM,12027:JM,12028:JM,11517:JM,11550:JM,11583
11445 :: PRED :: IF :: Z :: if (v230 <= #(0)) goto 852::CD,11446:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11446 :: CALL :: call :: Lorg/json/JSONObject :: v233 = v3.put(#(image), v228)::CL,13370
11452 :: CALL :: call :: Z :: v238 = v18.startsWith(#(name))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11457 :: PRED :: IF :: Z :: if (v238 == #(0)) goto 906::CD,11458:CD,11463:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11458 :: CALL :: call :: I :: v240 = v18.indexOf(#(32))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11463 :: PRED :: IF :: Z :: if (v240 <= #(0)) goto 906::CD,11464:CD,11465:CD,11470:CD,11474:CD,11478:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11464 :: EXPR :: assign :: Ljava/lang/Object :: v241 = v240 + #(1)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11465 :: CALL :: call :: Ljava/lang/String :: v243 = v18.substring(v241)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11470 :: CALL :: call :: Ljava/lang/String :: v245 = v243.trim()::JM,11010:JM,11907:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11937:JM,11683:JM,11813:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11718:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517
11474 :: CALL :: call :: I :: v247 = v245.length()::JM,11616:JM,11937:JM,11683:JM,11813:JM,11944:JM,11951:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,11736:JM,12025:JM,12026:JM,12027:JM,12028:JM,11517:JM,11550:JM,11583
11478 :: PRED :: IF :: Z :: if (v247 <= #(0)) goto 906::CD,11479:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11479 :: CALL :: call :: Lorg/json/JSONObject :: v250 = v3.put(#(skill_name), v245)::CL,13370
11485 :: CALL :: call :: Z :: v255 = v18.startsWith(#(author))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11490 :: PRED :: IF :: Z :: if (v255 == #(0)) goto 970::CD,11491:CD,11496:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11491 :: CALL :: call :: Z :: v258 = v18.startsWith(#(author_url))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11496 :: PRED :: IF :: Z :: if (v258 != #(0)) goto 970::CD,11497:CD,11502:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11497 :: CALL :: call :: I :: v260 = v18.indexOf(#(32))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11502 :: PRED :: IF :: Z :: if (v260 <= #(0)) goto 970::CD,11503:CD,11504:CD,11509:CD,11513:CD,11517:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11391
11503 :: EXPR :: assign :: Ljava/lang/Object :: v261 = v260 + #(1)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11504 :: CALL :: call :: Ljava/lang/String :: v263 = v18.substring(v261)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11509 :: CALL :: call :: Ljava/lang/String :: v265 = v263.trim()::JM,11010:JM,11907:JM,11718:JM,11529:JM,11595:JM,11724:JM,11725:JM,11662:JM,11535:JM,11536:JM,11601:JM,11602:JM,11922:JM,11668:JM,11412:JM,11669:JM,11861:JM,11798:JM,11478:JM,11736:JM,11550:JM,11616:JM,11937:JM,11683:JM,11748:JM,11749:JM,11813:JM,11944:JM,11562:JM,11628:JM,11951:JM,11568:JM,11696:JM,11569:JM,11634:JM,11635:JM,11763:JM,11445:JM,11702:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11583
11513 :: CALL :: call :: I :: v267 = v265.length()::JM,11616:JM,11937:JM,11683:JM,11813:JM,11944:JM,11951:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,11736:JM,12025:JM,12026:JM,12027:JM,12028:JM,11517:JM,11550:JM,11583
11517 :: PRED :: IF :: Z :: if (v267 <= #(0)) goto 970::CD,11518:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11518 :: CALL :: call :: Lorg/json/JSONObject :: v270 = v3.put(#(author), v265)::CL,13370
11524 :: CALL :: call :: Z :: v274 = v18.startsWith(#(author_url))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11529 :: PRED :: IF :: Z :: if (v274 == #(0)) goto 1024::CD,11530:CD,11535:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11530 :: CALL :: call :: I :: v276 = v18.indexOf(#(32))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11535 :: PRED :: IF :: Z :: if (v276 <= #(0)) goto 1024::CD,11536:CD,11537:CD,11542:CD,11546:CD,11550:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11536 :: EXPR :: assign :: Ljava/lang/Object :: v277 = v276 + #(1)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11537 :: CALL :: call :: Ljava/lang/String :: v279 = v18.substring(v277)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11542 :: CALL :: call :: Ljava/lang/String :: v281 = v279.trim()::JM,11010:JM,11907:JM,11718:JM,11595:JM,11724:JM,11725:JM,11662:JM,11601:JM,11602:JM,11922:JM,11668:JM,11412:JM,11669:JM,11861:JM,11798:JM,11478:JM,11736:JM,11550:JM,11616:JM,11937:JM,11683:JM,11748:JM,11749:JM,11813:JM,11944:JM,11562:JM,11628:JM,11951:JM,11568:JM,11696:JM,11569:JM,11634:JM,11635:JM,11763:JM,11445:JM,11702:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11583
11546 :: CALL :: call :: I :: v283 = v281.length()::JM,11616:JM,11937:JM,11683:JM,11813:JM,11944:JM,11951:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,11736:JM,12025:JM,12026:JM,12027:JM,12028:JM,11517:JM,11550:JM,11583
11550 :: PRED :: IF :: Z :: if (v283 <= #(0)) goto 1024::CD,11551:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11551 :: CALL :: call :: Lorg/json/JSONObject :: v286 = v3.put(#(author_url), v281)::CL,13370
11557 :: CALL :: call :: Z :: v291 = v18.startsWith(#(developer_privacy_p...))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11562 :: PRED :: IF :: Z :: if (v291 == #(0)) goto 1078::CD,11563:CD,11568:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11563 :: CALL :: call :: I :: v293 = v18.indexOf(#(32))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11568 :: PRED :: IF :: Z :: if (v293 <= #(0)) goto 1078::CD,11569:CD,11570:CD,11575:CD,11579:CD,11583:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11445:JM,11702:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11569 :: EXPR :: assign :: Ljava/lang/Object :: v294 = v293 + #(1)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11570 :: CALL :: call :: Ljava/lang/String :: v296 = v18.substring(v294)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11575 :: CALL :: call :: Ljava/lang/String :: v298 = v296.trim()::JM,11010:JM,11907:JM,11718:JM,11595:JM,11724:JM,11725:JM,11662:JM,11601:JM,11602:JM,11922:JM,11668:JM,11412:JM,11669:JM,11861:JM,11798:JM,11478:JM,11736:JM,11550:JM,11616:JM,11937:JM,11683:JM,11748:JM,11749:JM,11813:JM,11944:JM,11628:JM,11951:JM,11696:JM,11634:JM,11635:JM,11763:JM,11445:JM,11702:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11583
11579 :: CALL :: call :: I :: v300 = v298.length()::JM,11616:JM,11937:JM,11683:JM,11813:JM,11944:JM,11951:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,11736:JM,12025:JM,12026:JM,12027:JM,12028:JM,11517:JM,11550:JM,11583
11583 :: PRED :: IF :: Z :: if (v300 <= #(0)) goto 1078::CD,11584:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11584 :: CALL :: call :: Lorg/json/JSONObject :: v303 = v3.put(#(developer_privacy_policy), v298)::CL,13370
11590 :: CALL :: call :: Z :: v308 = v18.startsWith(#(terms_of_use))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11595 :: PRED :: IF :: Z :: if (v308 == #(0)) goto 1132::CD,11596:CD,11601:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11596 :: CALL :: call :: I :: v310 = v18.indexOf(#(32))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11601 :: PRED :: IF :: Z :: if (v310 <= #(0)) goto 1132::CD,11602:CD,11603:CD,11608:CD,11612:CD,11616:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11861:JM,11478:JM,11736:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11602 :: EXPR :: assign :: Ljava/lang/Object :: v311 = v310 + #(1)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11603 :: CALL :: call :: Ljava/lang/String :: v313 = v18.substring(v311)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11608 :: CALL :: call :: Ljava/lang/String :: v315 = v313.trim()::JM,11010:JM,11907:JM,11718:JM,11724:JM,11725:JM,11662:JM,11922:JM,11668:JM,11412:JM,11669:JM,11861:JM,11798:JM,11478:JM,11736:JM,11550:JM,11616:JM,11937:JM,11683:JM,11748:JM,11749:JM,11813:JM,11944:JM,11628:JM,11951:JM,11696:JM,11634:JM,11635:JM,11763:JM,11445:JM,11702:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11583
11612 :: CALL :: call :: I :: v317 = v315.length()::JM,11616:JM,11937:JM,11683:JM,11813:JM,11944:JM,11951:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,11736:JM,12025:JM,12026:JM,12027:JM,12028:JM,11517:JM,11550:JM,11583
11616 :: PRED :: IF :: Z :: if (v317 <= #(0)) goto 1132::CD,11617:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11617 :: CALL :: call :: Lorg/json/JSONObject :: v320 = v3.put(#(terms_of_use), v315)::CL,13370
11623 :: CALL :: call :: Z :: v325 = v18.startsWith(#(dynamic_content))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11628 :: PRED :: IF :: Z :: if (v325 == #(0)) goto 1187::CD,11629:CD,11634:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11629 :: CALL :: call :: I :: v327 = v18.indexOf(#(32))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11634 :: PRED :: IF :: Z :: if (v327 <= #(0)) goto 1187::CD,11635:CD,11636:CD,11641:CD,11651
11635 :: EXPR :: assign :: Ljava/lang/Object :: v328 = v327 + #(1)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11636 :: CALL :: call :: Ljava/lang/String :: v330 = v18.substring(v328)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11641 :: CALL :: call :: Ljava/lang/String :: v332 = v330.trim()::JM,11010:JM,11907:JM,11718:JM,11724:JM,11725:JM,11662:JM,11922:JM,11668:JM,11412:JM,11669:JM,11861:JM,11798:JM,11478:JM,11736:JM,11550:JM,11616:JM,11937:JM,11683:JM,11748:JM,11749:JM,11813:JM,11944:JM,11951:JM,11696:JM,11763:JM,11445:JM,11702:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11583
11651 :: CALL :: call :: Lorg/json/JSONObject :: v339 = v3.put(#(dynamic_content), v336)::CL,14795
11657 :: CALL :: call :: Z :: v344 = v18.startsWith(#(tags))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11662 :: PRED :: IF :: Z :: if (v344 == #(0)) goto 1248::CD,11663:CD,11668:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11663 :: CALL :: call :: I :: v346 = v18.indexOf(#(32))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11668 :: PRED :: IF :: Z :: if (v346 <= #(0)) goto 1248::CD,11669:CD,11670:CD,11675:CD,11679:CD,11683
11669 :: EXPR :: assign :: Ljava/lang/Object :: v347 = v346 + #(1)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11670 :: CALL :: call :: Ljava/lang/String :: v349 = v18.substring(v347)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11675 :: CALL :: call :: Ljava/lang/String :: v351 = v349.trim()::JM,11010:JM,11907:JM,11718:JM,11724:JM,11725:JM,11922:JM,11412:JM,11861:JM,11798:JM,11478:JM,11736:JM,11550:JM,11616:JM,11937:JM,11683:JM,11748:JM,11749:JM,11813:JM,11944:JM,11951:JM,11696:JM,11763:JM,11445:JM,11702:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11583
11679 :: CALL :: call :: I :: v353 = v351.length()::JM,11616:JM,11937:JM,11683:JM,11813:JM,11944:JM,11951:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,11736:JM,12025:JM,12026:JM,12027:JM,12028:JM,11517:JM,11550:JM,11583
11683 :: PRED :: IF :: Z :: if (v353 <= #(0)) goto 1248::CD,11684
11684 :: CALL :: call :: Lorg/json/JSONObject :: v356 = v3.put(#(tags), v351)::CL,13370
11691 :: CALL :: call :: Z :: v412 = v18.startsWith(#(#))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11696 :: PRED :: IF :: Z :: if (v412 == #(0)) goto 1277::CD,11698:CD,11702:CD,12023:CD,12025:CD,12026:CD,12027:CD,12028:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,11901:JM,11517:JM,11391
11698 :: CALL :: call :: I :: v414 = v18.length()::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11702 :: PRED :: IF :: Z :: if (v414 <= #(0)) goto 1752::CD,11703:CD,11707:CD,12023:CD,12025:CD,12026:CD,12027:CD,12028
11703 :: CALL :: call :: I :: v416 = v546.length()::JM,11707
11707 :: PRED :: IF :: Z :: if (v416 <= #(0)) goto 1752::CD,11708:CD,11713:CD,11718:CD,12023:CD,12025:CD,12026:CD,12027:CD,12028
11708 :: CALL :: call :: [Ljava/lang/String :: v418 = v546.split(#(\|))::
11713 :: CALL :: call :: Z :: v421 = v18.startsWith(#(?))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11718 :: PRED :: IF :: Z :: if (v421 == #(0)) goto 1595::CD,11719:CD,11724:CD,11896:CD,11901:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11517:JM,11391
11719 :: CALL :: call :: I :: v424 = v18.indexOf(#(58))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11724 :: PRED :: IF :: Z :: if (v424 <= #(0)) goto 1595::CD,11725:CD,11726:CD,11731:CD,11736:CD,11737:CD,11738:CD,11744:CD,11748:CD,11896:CD,11901:CD,12023:CD,12025:CD,12026:CD,12027:CD,12028:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11601:JM,11602:JM,11861:JM,11478:JM,11616:JM,11490:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,11517:JM,11391
11725 :: EXPR :: assign :: Ljava/lang/Object :: v469 = v424 + #(1)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11726 :: CALL :: call :: Ljava/lang/String :: v471 = v18.substring(v469)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11731 :: CALL :: call :: I :: v473 = v471.indexOf(#(58))::JM,11616:JM,11937:JM,11010:JM,11907:JM,11683:JM,11813:JM,11944:JM,11951:JM,11922:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,11736:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11550:JM,11583
11736 :: EXPR :: assign :: Ljava/lang/Object :: v474 = v473 + v424::DD,11737
11737 :: EXPR :: assign :: Ljava/lang/Object :: v475 = v474 + #(1)::DD,11748:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391:DD,11847:JM,12023
11738 :: CALL :: call :: Ljava/lang/String :: v477 = v18.substring(#(1), v424)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11744 :: CALL :: call :: Ljava/lang/String :: v479 = v477.trim()::JM,11616:JM,11937:JM,11010:JM,11907:JM,11683:JM,11813:JM,11944:JM,11951:JM,11922:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,11736:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11550:JM,11583
11748 :: PRED :: IF :: Z :: if (v475 > v424) goto 1448::CD,11749:CD,11750:CD,11755:CD,11759:CD,11763:CD,11798:CD,11799:CD,11805:CD,11809:CD,11813:CD,11847:CD,11848:CD,11853:CD,11857:CD,11861
11749 :: EXPR :: assign :: Ljava/lang/Object :: v480 = v424 + #(1)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11750 :: CALL :: call :: Ljava/lang/String :: v482 = v18.substring(v480)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11755 :: CALL :: call :: Ljava/lang/String :: v484 = v482.trim()::JM,11616:JM,11937:JM,11010:JM,11907:JM,11683:JM,11813:JM,11944:JM,11951:JM,11922:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,11736:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11550:JM,11583
11759 :: CALL :: call :: I :: v486 = v484.length()::JM,11616:JM,11937:JM,11683:JM,11813:JM,11944:JM,11951:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,12025:JM,12026:JM,12027:JM,12028:JM,11517:JM,11550:JM,11583
11763 :: PRED :: IF :: Z :: if (v486 <= #(0)) goto 1752::CD,11764:CD,11769:CD,11774:CD,11779:CD,11783:CD,11792:CF,12023
11764 :: CALL :: call :: [Ljava/lang/String :: v515 = v484.split(#(\|))::
11769 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v516 = new java.lang.StringBuilder::
11774 :: CALL :: call :: Ljava/lang/StringBuilder :: v519 = v516.append(v479)::JM,11616:JM,11937:JM,11683:JM,11813:JM,11944:JM,11951:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,12025:JM,12026:JM,12027:JM,12028:JM,11517:JM,11550:JM,11583
11779 :: CALL :: call :: Ljava/lang/String :: v521 = v519.toString()::JM,11937:JM,11763:JM,11813:JM,11861:JM,11944:JM,12025:JM,11951
11783 :: CALL :: call :: Lorg/json/JSONObject :: v523 = answerIntent(v418, v521, v515, v367, v444, v451)::CL,14823
11792 :: CALL :: call :: Lorg/json/JSONArray :: v525 = v5.put(v523)::CL,14622
11798 :: EXPR :: assign :: Ljava/lang/Object :: v487 = v424 + #(1)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391:JM,12023
11799 :: CALL :: call :: Ljava/lang/String :: v489 = v18.substring(v487, v475)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11805 :: CALL :: call :: Ljava/lang/String :: v491 = v489.trim()::JM,11616:JM,11937:JM,11010:JM,11907:JM,11683:JM,11813:JM,11944:JM,11951:JM,11922:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,11736:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11550:JM,11583
11809 :: CALL :: call :: I :: v493 = v491.length()::JM,11616:JM,11937:JM,11683:JM,11813:JM,11944:JM,11951:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,12025:JM,12026:JM,12027:JM,12028:JM,11517:JM,11550:JM,11583
11813 :: PRED :: IF :: Z :: if (v493 <= #(0)) goto 1521::CD,11814:CD,11819:CD,11824:CD,11829:CD,11833:CD,11842:CF,11847
11814 :: CALL :: call :: [Ljava/lang/String :: v495 = v491.split(#(\|))::
11819 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v496 = new java.lang.StringBuilder::
11824 :: CALL :: call :: Ljava/lang/StringBuilder :: v500 = v496.append(v479)::JM,11616:JM,11937:JM,11683:JM,11813:JM,11944:JM,11951:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,12025:JM,12026:JM,12027:JM,12028:JM,11517:JM,11550:JM,11583
11829 :: CALL :: call :: Ljava/lang/String :: v502 = v500.toString()::JM,11937:JM,11763:JM,11813:JM,11861:JM,11944:JM,12025:JM,11951
11833 :: CALL :: call :: Lorg/json/JSONObject :: v504 = answerIntent(v418, v502, v495, v367, v444, v451)::CL,14823
11842 :: CALL :: call :: Lorg/json/JSONArray :: v506 = v5.put(v504)::CL,14622
11847 :: EXPR :: assign :: Ljava/lang/Object :: v507 = v475 + #(1)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11848 :: CALL :: call :: Ljava/lang/String :: v509 = v18.substring(v507)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11853 :: CALL :: call :: Ljava/lang/String :: v511 = v509.trim()::JM,11616:JM,11937:JM,11010:JM,11907:JM,11683:JM,11813:JM,11944:JM,11951:JM,11922:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,11736:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11550:JM,11583
11857 :: CALL :: call :: I :: v513 = v511.length()::JM,11616:JM,11937:JM,11683:JM,11813:JM,11944:JM,11951:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,12025:JM,12026:JM,12027:JM,12028:JM,11517:JM,11550:JM,11583
11861 :: PRED :: IF :: Z :: if (v513 <= #(0)) goto 1752::CD,11862:CD,11867:CD,11872:CD,11877:CD,11881:CD,11890:CF,12023
11862 :: CALL :: call :: [Ljava/lang/String :: v527 = v511.split(#(\|))::
11867 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v528 = new java.lang.StringBuilder::
11872 :: CALL :: call :: Ljava/lang/StringBuilder :: v532 = v528.append(v479)::JM,11616:JM,11937:JM,11683:JM,11813:JM,11944:JM,11951:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,12025:JM,12026:JM,12027:JM,12028:JM,11517:JM,11550:JM,11583
11877 :: CALL :: call :: Ljava/lang/String :: v534 = v532.toString()::JM,11937:JM,11763:JM,11813:JM,11861:JM,11944:JM,12025:JM,11951
11881 :: CALL :: call :: Lorg/json/JSONObject :: v536 = answerIntent(v418, v534, v527, v367, v444, v451)::CL,14823
11890 :: CALL :: call :: Lorg/json/JSONArray :: v538 = v5.put(v536)::CL,14622
11896 :: CALL :: call :: Z :: v428 = v18.startsWith(#(!))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11901 :: PRED :: IF :: Z :: if (v428 == #(0)) goto 1719::CD,11902:CD,11907:CD,11958:CD,11963:CD,11972:CD,12023:CD,12025:CD,12026:CD,12027:CD,12028:JM,11010:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,11901:JM,11517:JM,11391
11902 :: CALL :: call :: I :: v430 = v18.indexOf(#(58))::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11907 :: PRED :: IF :: Z :: if (v430 <= #(0)) goto 1719::CD,11908:CD,11914:CD,11918:CD,11922:CD,11923:CD,11928:CD,11932:CD,11937:CD,11958:CD,11963:CD,11972:CD,12023:CD,12025:CD,12026:CD,12027:CD,12028:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,11901:JM,11517:JM,11391
11908 :: CALL :: call :: Ljava/lang/String :: v432 = v18.substring(#(1), v430)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11914 :: CALL :: call :: Ljava/lang/String :: v434 = v432.trim()::JM,11616:JM,11937:JM,11010:JM,11683:JM,11813:JM,11944:JM,11951:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,11736:JM,12025:JM,12026:JM,12027:JM,12028:JM,11517:JM,11550:JM,11583
11918 :: CALL :: call :: Ljava/lang/String :: v436 = v434.toLowerCase()::JM,11616:JM,11937:JM,11683:JM,11813:JM,11944:JM,11951:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,12025:JM,12026:JM,12027:JM,12028:JM,11517:JM,11550:JM,11583
11922 :: EXPR :: assign :: Ljava/lang/Object :: v437 = v430 + #(1)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11923 :: CALL :: call :: Ljava/lang/String :: v439 = v18.substring(v437)::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11928 :: CALL :: call :: Ljava/lang/String :: v441 = v439.trim()::JM,11616:JM,11937:JM,11010:JM,11683:JM,11813:JM,11944:JM,11951:JM,11763:JM,11412:JM,11445:JM,11861:JM,11478:JM,11736:JM,12025:JM,12026:JM,12027:JM,12028:JM,11517:JM,11550:JM,11583
11932 :: CALL :: call :: Z :: v443 = v436.equals(#(example))::JM,11937:JM,11944:JM,12025:JM,11951
11937 :: PRED :: IF :: Z :: if (v443 == #(0)) goto 1665::CD,11939:CD,11944:CD,12023:CD,12025:CD,12026:CD,12027:CD,12028:JM,11937:JM,11951
11939 :: CALL :: call :: Z :: v450 = v436.equals(#(expect))::JM,11937:JM,11944:JM,12025:JM,11951
11944 :: PRED :: IF :: Z :: if (v450 == #(0)) goto 1682::CD,11946:CD,11951:CD,12023:CD,12025:CD,12026:CD,12027:CD,12028:JM,11937:JM,11944
11946 :: CALL :: call :: Z :: v457 = v436.equals(#(image))::JM,11937:JM,11944:JM,12025:JM,11951
11951 :: PRED :: IF :: Z :: if (v457 == #(0)) goto 1709::CD,11953:CD,12023:CD,12025:CD,12026:CD,12027:CD,12028
11953 :: CALL :: call :: V :: v11.setLength(#(0))::
11958 :: CALL :: call :: [Ljava/lang/String :: v541 = v18.split(#(\|))::
11963 :: CALL :: call :: Lorg/json/JSONObject :: v543 = answerIntent(v418, #(null), v541, v367, v444, v451)::CL,14823
11972 :: CALL :: call :: Lorg/json/JSONArray :: v545 = v5.put(v543)::CL,14622
11977 :: CALL :: call :: Ljava/lang/String :: v15 = p1 $br .readLine()::JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11981:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,12023:JM,12025:JM,12026:JM,12027:JM,12028:JM,11901:JM,11517:JM,11391
11981 :: PRED :: IF :: Z :: if (v15 != #(null)) goto 103::CD,10992:CD,10996:CD,11000:CD,11977:CD,12023:CD,12025:CD,12026:CD,12027:CD,12028:JM,11010:JM,11907:JM,11397:JM,11398:JM,11529:JM,11662:JM,11535:JM,11536:JM,11922:JM,11668:JM,11412:JM,11669:JM,11798:JM,11550:JM,11424:JM,11937:JM,11683:JM,11813:JM,11430:JM,11431:JM,11944:JM,11562:JM,11951:JM,11568:JM,11696:JM,11569:JM,11445:JM,11702:JM,11583:JM,11457:JM,11718:JM,11463:JM,11464:JM,11595:JM,11724:JM,11981:JM,11725:JM,11601:JM,11602:JM,11861:JM,11478:JM,11736:JM,11616:JM,11490:JM,11748:JM,11749:JM,11496:JM,11628:JM,11373:JM,11502:JM,11503:JM,11634:JM,11635:JM,11763:JM,11901:JM,11517:JM,11391
11992 :: EXPR :: assign :: null :: PHI v548 = v546, v548::DD,11992:DD,12006
11994 :: EXPR :: assign :: null :: PHI v446 = v444, v446::CF,11995:JM,11128:DD,11994:DD,12007
11995 :: EXPR :: assign :: null :: PHI v453 = v451, v453::DD,11995:DD,12008
11998 :: EXPR :: assign :: null :: PHI v90 = #(0), v89::DD,11057:DD,11058
11999 :: EXPR :: assign :: null :: PHI v547 = v546, v547::CF,12000:DD,11999:DD,12006
12000 :: EXPR :: assign :: null :: PHI v462 = v460, v462::CF,12001:JM,11292:DD,12000
12001 :: EXPR :: assign :: null :: PHI v445 = v444, v445::CF,12002:JM,11330:DD,12001:DD,12007
12002 :: EXPR :: assign :: null :: PHI v452 = v451, v452::JM,11341:DD,12002:DD,12008
12005 :: EXPR :: assign :: null :: PHI v52 = #(0), v51::DD,11187:DD,11188
12006 :: EXPR :: assign :: null :: PHI v549 = v548, v546, v547, v547, v547::CF,12007:DD,12011
12007 :: EXPR :: assign :: null :: PHI v447 = v446, v444, v445, v445, v445::CF,12008:DD,12015
12008 :: EXPR :: assign :: null :: PHI v454 = v453, v451, v452, v452, v452::DD,12016
12011 :: EXPR :: assign :: null :: PHI v550 = v546, v549::DD,12023
12013 :: EXPR :: assign :: null :: PHI v467 = v459, #()::CF,12014:DD,12025
12014 :: EXPR :: assign :: null :: PHI v468 = v460, #()::CF,12015:DD,12026
12015 :: EXPR :: assign :: null :: PHI v448 = v444, v447::CF,12016:DD,12027
12016 :: EXPR :: assign :: null :: PHI v455 = v451, v454::DD,12028
12023 :: EXPR :: assign :: null :: PHI v546 = #(), v550, #(), #(), v546, v546, v546, v546, v18::JM,11707:DD,11992:DD,11999:DD,12006:DD,12011:DD,12023
12025 :: EXPR :: assign :: null :: PHI v459 = #(), v467, v459, v459, v459, v459, v459, v436, v459::CF,12026:JM,11000:JM,11016:JM,11146:DD,12013:DD,12025
12026 :: EXPR :: assign :: null :: PHI v460 = #(), v468, v460, v460, v460, v460, v460, v441, v460::CF,12027:DD,12000:DD,12014:DD,12026
12027 :: EXPR :: assign :: null :: PHI v444 = #(), v448, #(), #(), v441, v444, v444, v444, v444::CF,12028:DD,11994:DD,12001:DD,12007:DD,12015:DD,12027
12028 :: EXPR :: assign :: null :: PHI v451 = #(), v455, #(), #(), v451, v441, v451, v451, v451::DD,11995:DD,12002:DD,12008:DD,12016:DD,12028
12920 :: ENTR :: entry :: null :: ai.susi.mind.SusiMind.observe(java.io.File)::CD,12925:CD,12929:CD,13112:CD,13117:CD,13121:CD,13126:CD,13131:CD,13135:CD,13140:CD,13147:CD,13153:JM,12935
12925 :: CALL :: call :: Z :: v5 = p1 $path .exists()::JM,12929:JM,12935
12929 :: PRED :: IF :: Z :: if (v5 != #(0)) goto 9::CD,12931:CD,12935:CD,13151:CD,13157:JM,12929
12931 :: CALL :: call :: [Ljava/io/File :: v8 = p1 $path .listFiles()::JM,12929:JM,12935
12935 :: EXPR :: assign :: I :: v9 = v8.length::DD,13151
12937 :: EXPR :: reference :: Ljava/lang/Object :: v10 = v8[v112]::JM,12945:JM,12954:JM,12964:JM,12959:JM,12969:JM,12974:JM,12979:JM,12984:JM,12994:JM,12989:JM,13003:JM,13021:JM,13016:JM,13047:JM,13052:JM,13061:JM,13066:JM,13076:JM,13071:JM,13095:JM,13100
12941 :: CALL :: call :: Z :: v12 = v10.isDirectory()::JM,12945
12945 :: PRED :: IF :: Z :: if (v12 == #(0)) goto 41::CD,12946:JM,12954
12946 :: CALL :: call :: V :: p0 $this .observe(v10)::CL,12920
12950 :: CALL :: call :: Z :: v15 = v10.isDirectory()::JM,12954
12954 :: PRED :: IF :: Z :: if (v15 != #(0)) goto 291::CD,12955:CD,12959:CD,12964:CF,13150
12955 :: CALL :: call :: Ljava/lang/String :: v17 = v10.getName()::JM,12964:JM,12959
12959 :: CALL :: call :: Z :: v20 = v17.startsWith(#(.))::JM,12964:JM,12959
12964 :: PRED :: IF :: Z :: if (v20 != #(0)) goto 291::CD,12965:CD,12969:CD,12974:CF,13150
12965 :: CALL :: call :: Ljava/lang/String :: v22 = v10.getName()::JM,12969:JM,12974
12969 :: CALL :: call :: Z :: v25 = v22.endsWith(#(.json))::JM,12969:JM,12974
12974 :: PRED :: IF :: Z :: if (v25 != #(0)) goto 96::CD,12975:CD,12979:CD,12984:CD,12998:CD,13003
12975 :: CALL :: call :: Ljava/lang/String :: v27 = v10.getName()::JM,12979:JM,12984
12979 :: CALL :: call :: Z :: v30 = v27.endsWith(#(.txt))::JM,12979:JM,12984
12984 :: PRED :: IF :: Z :: if (v30 != #(0)) goto 96::CD,12985:CD,12989:CD,12994:CD,12998:CD,13003
12985 :: CALL :: call :: Ljava/lang/String :: v32 = v10.getName()::JM,12994:JM,12989
12989 :: CALL :: call :: Z :: v35 = v32.endsWith(#(.aiml))::JM,12994:JM,12989
12994 :: PRED :: IF :: Z :: if (v35 == #(0)) goto 291::CD,12998:CD,13003:CF,13150
12995 :: EXPR :: reference :: Ljava/util/Map :: v36 = p0 $this .observations::JM,13003
12998 :: CALL :: call :: Z :: v38 = v36.containsKey(v10)::JM,13003
13003 :: PRED :: IF :: Z :: if (v38 == #(0)) goto 133::CD,13004:CD,13011:CD,13016:CD,13017:CD,13021:CD,13022:CD,13026:CD,13029:CD,13033:JM,14332:CD,13043:CD,13047:CD,13052:CD,13057:CD,13061:CD,13066:CD,13091:CD,13095:CD,13100:CD,13105
13004 :: CALL :: call :: J :: v40 = v10.lastModified()::JM,13021
13008 :: EXPR :: reference :: Ljava/util/Map :: v41 = p0 $this .observations::JM,13016
13011 :: CALL :: call :: Ljava/lang/Object :: v43 = v41.get(v10)::JM,13016
13016 :: EXPR :: assign :: Ljava/lang/Object :: v44 = CHECKCAST v43::JM,13021
13017 :: CALL :: call :: J :: v46 = v44.longValue()::JM,13021
13021 :: EXPR :: assign :: Z :: v47 = v40 == v46::DD,13022
13022 :: PRED :: IF :: Z :: if (v47 <= #(0)) goto 291::CD,13026:CD,13029:CD,13033:JM,14332:CD,13043:CD,13047:CD,13052:CD,13057:CD,13061:CD,13066:CD,13091:CD,13095:CD,13100:CD,13105:CF,13150
13023 :: EXPR :: reference :: Ljava/util/Map :: v48 = p0 $this .observations::
13026 :: CALL :: call :: J :: v50 = currentTimeMillis()::
13029 :: CALL :: call :: Ljava/lang/Long :: v52 = valueOf(v50)::
13033 :: CALL :: call :: Ljava/lang/Object :: v54 = v48.put(v10, v52)::
13043 :: CALL :: call :: Ljava/lang/String :: v58 = v10.getName()::JM,13047:JM,13052
13047 :: CALL :: call :: Z :: v60 = v58.endsWith(#(.json))::JM,13047:JM,13052
13052 :: PRED :: IF :: Z :: if (v60 == #(0)) goto 177::CD,13053
13053 :: CALL :: call :: Lorg/json/JSONObject :: v62 = readJsonSkill(v10)::CL,15531
13057 :: CALL :: call :: Ljava/lang/String :: v65 = v10.getName()::JM,13061:JM,13066
13061 :: CALL :: call :: Z :: v67 = v65.endsWith(#(.txt))::JM,13061:JM,13066
13066 :: PRED :: IF :: Z :: if (v67 != #(0)) goto 200::CF,13077:CD,13067:CD,13071:CD,13076:CD,13078:CD,13087
13067 :: CALL :: call :: Ljava/lang/String :: v69 = v10.getName()::JM,13076:JM,13071
13071 :: CALL :: call :: Z :: v72 = v69.endsWith(#(.ezd))::JM,13076:JM,13071
13076 :: PRED :: IF :: Z :: if (v72 == #(0)) goto 221::CF,13077:CD,13078:CD,13087
13077 :: NORM :: declaration :: Ljava/io/BufferedReader :: v73 = new java.io.BufferedReader::CF,13078
13078 :: NORM :: declaration :: Ljava/io/FileReader :: v74 = new java.io.FileReader::
13087 :: CALL :: call :: Lorg/json/JSONObject :: v78 = readEzDSkill(v73)::CL,10969
13091 :: CALL :: call :: Ljava/lang/String :: v81 = v10.getName()::JM,13095:JM,13100
13095 :: CALL :: call :: Z :: v83 = v81.endsWith(#(.aiml))::JM,13095:JM,13100
13100 :: PRED :: IF :: Z :: if (v83 == #(0)) goto 242::CD,13101
13101 :: CALL :: call :: Lorg/json/JSONObject :: v85 = readAIMLSkill(v10)::CL,15557
13105 :: CALL :: call :: Lai/susi/mind/SusiMind :: v88 = p0 $this .learn(v86, v10)::CL,15754
13112 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v90 = new java.lang.StringBuilder::
13117 :: CALL :: call :: Ljava/lang/String :: v94 = v10.getAbsolutePath()::
13121 :: CALL :: call :: Ljava/lang/StringBuilder :: v96 = v90.append(v94)::
13126 :: CALL :: call :: Ljava/lang/StringBuilder :: v99 = v96.append(#(, ))::
13131 :: CALL :: call :: Ljava/lang/String :: v101 = v89.getMessage()::
13135 :: CALL :: call :: Ljava/lang/StringBuilder :: v103 = v99.append(v101)::
13140 :: CALL :: call :: Ljava/lang/String :: v105 = v103.toString()::
13147 :: CALL :: call :: V :: v89.printStackTrace()::
13150 :: EXPR :: assign :: Ljava/lang/Object :: v110 = v112 + #(1)::DD,13157
13151 :: PRED :: IF :: Z :: if (v112 < v9) goto 26::CD,12941:CD,12945:CD,12950:CD,12954:CD,13150:CD,13157
13153 :: EXPR :: assign :: Ljava/lang/Exception :: v89 = catch <exc>::
13157 :: EXPR :: assign :: null :: PHI v112 = #(0), v110::DD,13150:DD,13151
13224 :: ENTR :: entry :: null :: org.json.JSONObject.get(java.lang.String)::CD,13236:CD,13243:CD,13248:CD,13252:CD,13257:CD,13262
13236 :: CALL :: call :: Ljava/lang/Object :: v6 = p0 $this .opt(p1 $key )::CL,15914
13243 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v8 = new java.lang.StringBuilder::
13248 :: CALL :: call :: Ljava/lang/String :: v12 = quote(p1 $key )::CL,13280
13252 :: CALL :: call :: Ljava/lang/StringBuilder :: v14 = v8.append(v12)::
13257 :: CALL :: call :: Ljava/lang/StringBuilder :: v17 = v14.append(#(] not found.))::
13262 :: CALL :: call :: Ljava/lang/String :: v19 = v17.toString()::
13280 :: ENTR :: entry :: null :: org.json.JSONObject.quote(java.lang.String)::CE,13281:CD,13284:CD,13293:CD,13298:CD,13303:CD,13305
13281 :: EXIT :: exit :: Ljava/lang/String :: org.json.JSONObject.quote(java.lang.String)::JM,19476
13284 :: NORM :: declaration :: Ljava/io/StringWriter :: v3 = new java.io.StringWriter::
13293 :: CALL :: call :: Ljava/io/Writer :: v8 = quote(p1 $string , v3)::JM,13303:CL,15936
13298 :: CALL :: call :: Ljava/lang/String :: v12 = v8.toString()::JM,13303
13303 :: NORM :: compound :: Ljava/lang/String :: return v12::DD,13281
13305 :: NORM :: compound :: Ljava/lang/String :: return #()::DD,13281
13330 :: ENTR :: entry :: null :: ai.susi.tools.IO.getKeyHash(java.security.PublicKey,java.lang.String)::CD,13335:CD,13339:CD,13343:CD,13350
13335 :: CALL :: call :: Ljava/security/MessageDigest :: v5 = getInstance(p2 $algorithm )::JM,13339
13339 :: CALL :: call :: [B :: v7 = p1 $pubkey .getEncoded()::JM,13339
13343 :: CALL :: call :: V :: v5.update(v7)::
13350 :: CALL :: call :: [B :: v12 = v5.digest()::
13370 :: ENTR :: entry :: null :: org.json.JSONObject.put(java.lang.String,java.lang.Object)::CD,13383
13383 :: PRED :: IF :: Z :: if (p2 $value  == #(null)) goto 40::CD,13384:CD,13390:CD,13397
13384 :: CALL :: call :: V :: testValidity(p2 $value )::CL,16124
13387 :: EXPR :: reference :: Ljava/util/Map :: v9 = p0 $this .map::
13390 :: CALL :: call :: Ljava/lang/Object :: v11 = v9.put(p1 $key , p2 $value )::JM,13383
13397 :: CALL :: call :: Ljava/lang/Object :: v7 = p0 $this .remove(p1 $key )::CL,16200:CL,16184
13416 :: ENTR :: entry :: null :: ai.susi.json.JsonFile.commit()::CD,13423
13423 :: CALL :: call :: V :: writeJson(v3, p0 $this )::CL,13442
13442 :: ENTR :: entry :: null :: ai.susi.json.JsonFile.writeJson(java.io.File,org.json.JSONObject)::CD,13461:CD,13465:CD,13470:CD,13471:CD,13475:CD,13476:CD,13480:CD,13488:CD,13493:CD,13496:CD,13501:CD,13510:CD,13511:CD,13515:CD,13516:CD,13520:CD,13528:CD,13533:CD,13547:CD,13559:CD,13564:CD,13569
13461 :: CALL :: call :: Z :: v6 = p1 $file .exists()::JM,13465
13465 :: PRED :: IF :: Z :: if (v6 != #(0)) goto 40::CF,13470:CD,13466:JM,13465
13466 :: CALL :: call :: Z :: v9 = p1 $file .createNewFile()::JM,13465
13470 :: NORM :: declaration :: Ljava/io/File :: v10 = new java.io.File::JM,13465
13471 :: CALL :: call :: Ljava/io/File :: v12 = p1 $file .getParentFile()::JM,13465
13475 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v13 = new java.lang.StringBuilder::JM,13465
13476 :: CALL :: call :: Ljava/lang/String :: v15 = p1 $file .getName()::JM,13465
13480 :: CALL :: call :: Ljava/lang/String :: v17 = valueOf(v15)::
13488 :: CALL :: call :: Ljava/lang/StringBuilder :: v21 = v13.append(#(.))::
13493 :: CALL :: call :: J :: v23 = currentTimeMillis()::
13496 :: CALL :: call :: Ljava/lang/StringBuilder :: v25 = v21.append(v23)::
13501 :: CALL :: call :: Ljava/lang/String :: v27 = v25.toString()::
13510 :: NORM :: declaration :: Ljava/io/File :: v29 = new java.io.File::JM,13465
13511 :: CALL :: call :: Ljava/io/File :: v31 = v10.getParentFile()::
13515 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v32 = new java.lang.StringBuilder::
13516 :: CALL :: call :: Ljava/lang/String :: v34 = v10.getName()::
13520 :: CALL :: call :: Ljava/lang/String :: v36 = valueOf(v34)::
13528 :: CALL :: call :: Ljava/lang/StringBuilder :: v40 = v32.append(#(1))::
13533 :: CALL :: call :: Ljava/lang/String :: v42 = v40.toString()::
13547 :: CALL :: call :: Ljava/lang/String :: v48 = p2 $json .toString(#(2))::CL,16223
13559 :: CALL :: call :: Z :: v52 = p1 $file .renameTo(v29)::JM,13465
13564 :: CALL :: call :: Z :: v54 = v10.renameTo(p1 $file )::JM,13465
13569 :: CALL :: call :: Z :: v56 = v29.delete()::
13617 :: CALL :: call :: Z :: v6 = p1 $reader .markSupported()::JM,13617:JM,13621
13621 :: PRED :: IF :: Z :: if (v6 == #(0)) goto 16::CF,13623:JM,13621
13623 :: NORM :: declaration :: Ljava/io/BufferedReader :: v8 = new java.io.BufferedReader::JM,13621
13684 :: CALL :: call :: Lorg/json/JSONException :: v40 = p1 $x .syntaxError(#(A JSONObject text mus...))::CL,16281
13690 :: CALL :: call :: C :: v10 = p1 $x .nextClean()::JM,13694:CL,16263
13694 :: PRED :: IF :: null :: switch v10::CD,13705:CD,13709:CD,13724:CD,13728:CD,13734:CD,13738
13695 :: CALL :: call :: Lorg/json/JSONException :: v37 = p1 $x .syntaxError(#(A JSONObject text mus...))::CL,16281
13705 :: CALL :: call :: Ljava/lang/Object :: v13 = p1 $x .nextValue()::CL,16373
13709 :: CALL :: call :: Ljava/lang/String :: v15 = v13.toString()::CL,16499:CL,16485:CL,16513
13718 :: CALL :: call :: Lorg/json/JSONException :: v34 = p1 $x .syntaxError(#(Expected a ':' after ...))::CL,16281
13724 :: CALL :: call :: Ljava/lang/Object :: v20 = p1 $x .nextValue()::CL,16373
13728 :: CALL :: call :: Lorg/json/JSONObject :: v22 = p0 $this .putOnce(v15, v20)::CL,16519
13734 :: CALL :: call :: C :: v24 = p1 $x .nextClean()::JM,13738:CL,16263
13738 :: PRED :: IF :: null :: switch v24::CD,13739:CD,13743
13739 :: CALL :: call :: C :: v26 = p1 $x .nextClean()::JM,13743:CL,16263
13743 :: PRED :: IF :: Z :: if (v26 != #(125)) goto 151::CD,13690:CD,13694
13750 :: CALL :: call :: Lorg/json/JSONException :: v31 = p1 $x .syntaxError(#(Expected a ',' or '}'))::CL,16281
13778 :: ENTR :: entry :: null :: org.json.JSONObject.putAll(org.json.JSONObject)::CD,13789
13783 :: EXPR :: reference :: Ljava/util/Map :: v4 = p0 $this .map::
13786 :: EXPR :: reference :: Ljava/util/Map :: v5 = p1 $other .map::
13789 :: CALL :: call :: V :: v4.putAll(v5)::
13796 :: ENTR :: entry :: null :: ai.susi.tools.CacheMap.checkSize()::CD,13803:CD,13810
13800 :: EXPR :: reference :: Ljava/util/LinkedHashMap :: v3 = p0 $this .map::JM,13810
13803 :: CALL :: call :: I :: v5 = v3.size()::JM,13810
13807 :: EXPR :: reference :: I :: v6 = p0 $this .maxSize::DD,13810
13810 :: PRED :: IF :: Z :: if (v5 < v6) goto 67::CD,13814:CD,13818:CD,13835:CD,13839
13811 :: EXPR :: reference :: Ljava/util/LinkedHashMap :: v7 = p0 $this .map::JM,13839
13814 :: CALL :: call :: Ljava/util/Set :: v9 = v7.keySet()::JM,13839
13818 :: CALL :: call :: Ljava/util/Iterator :: v11 = v9.iterator()::JM,13839
13823 :: EXPR :: reference :: Ljava/util/LinkedHashMap :: v19 = p0 $this .map::
13826 :: CALL :: call :: Ljava/lang/Object :: v21 = v11.next()::JM,13839
13830 :: CALL :: call :: Ljava/lang/Object :: v23 = v19.remove(v21)::JM,13839
13835 :: CALL :: call :: Z :: v13 = v11.hasNext()::JM,13839
13839 :: PRED :: IF :: Z :: if (v13 == #(0)) goto 67::CD,13843:CD,13850
13840 :: EXPR :: reference :: Ljava/util/LinkedHashMap :: v15 = p0 $this .map::JM,13850
13843 :: CALL :: call :: I :: v17 = v15.size()::JM,13850
13847 :: EXPR :: reference :: I :: v18 = p0 $this .maxSize::DD,13850
13850 :: PRED :: IF :: Z :: if (v17 > v18) goto 31::CD,13826:CD,13830:CD,13835:CD,13839
13863 :: ENTR :: entry :: null :: ai.susi.json.JsonRepository.getCurrentDump(java.io.File,java.lang.String,ai.susi.json.JsonRepository.Mode,boolean)::CD,13870:CD,13874:CD,13879:CD,13883:JM,13985:JM,13923:JM,13924:JM,13990:JM,13929:JM,13884
13870 :: NORM :: declaration :: Ljava/util/Date :: v6 = new java.util.Date::
13874 :: CALL :: call :: Ljava/lang/String :: v9 = dateSuffix(p4 $dailyDump , v6)::JM,13908:JM,13913:CL,16577
13879 :: CALL :: call :: [Ljava/lang/String :: v11 = p1 $path .list()::JM,13985:JM,13923:JM,13924:JM,13990:JM,13929:JM,13883:JM,13884
13883 :: PRED :: IF :: Z :: if (v11 == #(null)) goto 412::CD,13884:CD,14077:CD,14208
13884 :: EXPR :: assign :: I :: v13 = v11.length::DD,14077
13886 :: EXPR :: reference :: Ljava/lang/Object :: v15 = v11[v96]::JM,13908:JM,13913:JM,13914:JM,13919:JM,13924:JM,13929:JM,13930:JM,13935:JM,13985:JM,13923:JM,13990:JM,13883:JM,13884:JM,13991:JM,13996:JM,14004:JM,14008:JM,14009
13890 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v16 = new java.lang.StringBuilder::JM,13908:JM,13913:JM,13985:JM,13923:JM,13924:JM,13990:JM,13929:JM,13883:JM,13884
13891 :: CALL :: call :: Ljava/lang/String :: v18 = valueOf(p2 $prefix )::JM,13985:JM,13923:JM,13924:JM,13990:JM,13929:JM,13883:JM,13884
13899 :: CALL :: call :: Ljava/lang/StringBuilder :: v21 = v16.append(v9)::JM,13908:JM,13913
13904 :: CALL :: call :: Ljava/lang/String :: v23 = v21.toString()::JM,13908:JM,13913
13908 :: CALL :: call :: Z :: v25 = v15.startsWith(v23)::JM,13908:JM,13913
13913 :: PRED :: IF :: Z :: if (v25 == #(0)) goto 86::CD,13914:CD,13919:CD,13921:CD,13923
13914 :: CALL :: call :: Z :: v28 = v15.endsWith(#(.txt))::JM,13914:JM,13919
13919 :: PRED :: IF :: Z :: if (v28 == #(0)) goto 86::CD,13921:CD,13923
13921 :: EXPR :: reference :: Lai/susi/json/JsonRepository$Mode :: v29 = ai.susi.json.JsonRepository.COMPRESSED_MODE::CF,13923
13923 :: PRED :: IF :: Z :: if (p3 $mode  != v29) goto 187::CD,13924:CD,13929:CD,13985:CD,13990
13924 :: CALL :: call :: Z :: v31 = v15.startsWith(p2 $prefix )::JM,13924:JM,13929:JM,13985:JM,13923:JM,13990:JM,13883:JM,13884
13929 :: PRED :: IF :: Z :: if (v31 == #(0)) goto 323::CD,13930:CD,13935:CF,14076
13930 :: CALL :: call :: Z :: v33 = v15.endsWith(#(.txt))::JM,13930:JM,13935
13935 :: PRED :: IF :: Z :: if (v33 == #(0)) goto 323::CF,13936:CD,13942:CD,13943:CD,13944:CD,13952:CD,13957:CD,13966:CD,13970:CF,14076
13936 :: NORM :: declaration :: Ljava/io/File :: v39 = new java.io.File::
13942 :: NORM :: declaration :: Ljava/io/File :: v41 = new java.io.File::JM,13970:CF,13943
13943 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v42 = new java.lang.StringBuilder::
13944 :: CALL :: call :: Ljava/lang/String :: v44 = valueOf(v15)::
13952 :: CALL :: call :: Ljava/lang/StringBuilder :: v47 = v42.append(#(.gz))::
13957 :: CALL :: call :: Ljava/lang/String :: v49 = v47.toString()::
13966 :: CALL :: call :: Z :: v52 = v41.exists()::JM,13970
13970 :: PRED :: IF :: Z :: if (v52 == #(0)) goto 167::CD,13971
13971 :: CALL :: call :: Z :: v54 = v41.delete()::
13985 :: CALL :: call :: Z :: v35 = v15.startsWith(p2 $prefix )::JM,13985:JM,13990:JM,13923:JM,13924:JM,13929:JM,13883:JM,13884
13990 :: PRED :: IF :: Z :: if (v35 == #(0)) goto 323::CD,13991:CD,13996:CF,14076
13991 :: CALL :: call :: Z :: v38 = v15.endsWith(#(.gz))::JM,13991:JM,13996
13996 :: PRED :: IF :: Z :: if (v38 == #(0)) goto 323::CF,13997:CD,14003:CD,14004:CD,14008:CD,14009:CD,14020:CD,14024:CD,14029:CF,14076
13997 :: NORM :: declaration :: Ljava/io/File :: v58 = new java.io.File::
14003 :: NORM :: declaration :: Ljava/io/File :: v60 = new java.io.File::JM,14024:JM,14004:JM,14008
14004 :: CALL :: call :: I :: v62 = v15.length()::JM,14004:JM,14008
14008 :: EXPR :: assign :: Ljava/lang/Object :: v64 = v62 - #(3)::JM,14009
14009 :: CALL :: call :: Ljava/lang/String :: v66 = v15.substring(#(0), v64)::JM,14009
14020 :: CALL :: call :: Z :: v69 = v60.exists()::JM,14024
14024 :: PRED :: IF :: Z :: if (v69 == #(0)) goto 257::CD,14025
14025 :: CALL :: call :: Z :: v71 = v60.delete()::
14029 :: CALL :: call :: V :: gunzip(v58, v60, #(1))::CL,16620
14076 :: EXPR :: assign :: Ljava/lang/Object :: v94 = v96 + #(1)::DD,14208
14077 :: PRED :: IF :: Z :: if (v96 < v13) goto 42::CD,13890:CD,13891:CD,13899:CD,13904:CD,13908:CD,13913:CD,14076:CD,14208
14208 :: EXPR :: assign :: null :: PHI v96 = #(0), v94::DD,14076:DD,14077
14332 :: NORM :: declaration :: Ljava/util/HashMap :: v4 = new java.util.HashMap::DD,14336
14336 :: EXPR :: modify :: Ljava/util/Map :: p0 $this .map = v4::
14350 :: NORM :: declaration :: Ljava/util/ArrayList :: v4 = new java.util.ArrayList::JM,20113:DD,14354
14354 :: EXPR :: modify :: Ljava/util/ArrayList :: p0 $this .myArrayList = v4::
14366 :: ENTR :: entry :: null :: ai.susi.mind.SusiUtterance.simplePhrase(java.lang.String,boolean)::CD,14371:CD,14375:CD,14379:JM,14332:CD,14536:CD,14542:JM,14385:JM,14402:JM,14549:JM,14390:JM,14407:JM,14396:JM,14413
14371 :: CALL :: call :: Ljava/lang/String :: v5 = p1 $query .trim()::JM,14385:JM,14402:JM,14549:JM,14390:JM,14407:JM,14379:JM,14396:JM,14413
14375 :: CALL :: call :: I :: v7 = v5.length()::JM,14385:JM,14402:JM,14549:JM,14390:JM,14407:JM,14379:JM,14396:JM,14413
14379 :: PRED :: IF :: Z :: if (v7 <= #(0)) goto 194::CD,14380:CD,14385:CD,14549:JM,14402:JM,14390:JM,14407:JM,14379:JM,14396:JM,14413
14380 :: CALL :: call :: C :: v10 = v5.charAt(#(0))::JM,14385:JM,14402:JM,14549:JM,14390:JM,14407:JM,14379:JM,14396:JM,14413
14385 :: PRED :: IF :: Z :: if (v10 != #(94)) goto 101::CF,14549:CD,14386:CD,14390:CD,14391:CD,14396:CD,14449:CD,14454:CD,14499:CD,14504:CD,14550:JM,14385:JM,14402:JM,14407:JM,14379:JM,14413
14386 :: CALL :: call :: I :: v13 = v5.length()::JM,14385:JM,14402:JM,14549:JM,14390:JM,14407:JM,14379:JM,14396:JM,14413
14390 :: EXPR :: assign :: Ljava/lang/Object :: v15 = v13 - #(1)::JM,14385:JM,14402:JM,14549:JM,14390:JM,14407:JM,14379:JM,14396:JM,14413
14391 :: CALL :: call :: C :: v17 = v5.charAt(v15)::JM,14385:JM,14402:JM,14549:JM,14390:JM,14407:JM,14379:JM,14396:JM,14413
14396 :: PRED :: IF :: Z :: if (v17 != #(36)) goto 101::CF,14549:CD,14397:CD,14402:CD,14449:CD,14454:CD,14499:CD,14504:CD,14550:JM,14385:JM,14390:JM,14407:JM,14379:JM,14396:JM,14413
14397 :: CALL :: call :: C :: v20 = v5.charAt(#(0))::JM,14385:JM,14402:JM,14549:JM,14390:JM,14407:JM,14379:JM,14396:JM,14413
14402 :: PRED :: IF :: Z :: if (v20 != #(40)) goto 101::CF,14549:CD,14403:CD,14407:CD,14408:CD,14413:CD,14449:CD,14454:CD,14499:CD,14504:CD,14550:JM,14385:JM,14402:JM,14390:JM,14379:JM,14396
14403 :: CALL :: call :: I :: v23 = v5.length()::JM,14385:JM,14402:JM,14549:JM,14390:JM,14407:JM,14379:JM,14396:JM,14413
14407 :: EXPR :: assign :: Ljava/lang/Object :: v24 = v23 - #(1)::JM,14385:JM,14402:JM,14549:JM,14390:JM,14407:JM,14379:JM,14396:JM,14413
14408 :: CALL :: call :: C :: v26 = v5.charAt(v24)::JM,14385:JM,14402:JM,14549:JM,14390:JM,14407:JM,14379:JM,14396:JM,14413
14413 :: PRED :: IF :: Z :: if (v26 == #(41)) goto 194::CD,14449:CD,14454:CD,14499:CD,14504:CD,14549:CD,14550
14415 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v35 = new java.lang.StringBuilder::JM,14549
14416 :: CALL :: call :: Ljava/lang/String :: v37 = v49.substring(#(0), v30)::JM,14549:JM,14454:JM,14455
14422 :: CALL :: call :: Ljava/lang/String :: v39 = valueOf(v37)::JM,14549
14430 :: CALL :: call :: Ljava/lang/StringBuilder :: v42 = v35.append(#(32))::JM,14549
14435 :: CALL :: call :: Ljava/lang/String :: v44 = v49.substring(v30)::JM,14549:JM,14454:JM,14455
14440 :: CALL :: call :: Ljava/lang/StringBuilder :: v46 = v42.append(v44)::JM,14549
14445 :: CALL :: call :: Ljava/lang/String :: v48 = v46.toString()::JM,14549
14449 :: CALL :: call :: I :: v30 = v49.indexOf(#(46))::JM,14549:JM,14454:JM,14455
14454 :: PRED :: IF :: Z :: if (v30 <= #(0)) goto 164::CF,14550:CD,14455:CD,14456:CD,14461
14455 :: EXPR :: assign :: Ljava/lang/Object :: v31 = v30 - #(1)::JM,14461
14456 :: CALL :: call :: C :: v33 = v49.charAt(v31)::JM,14461
14461 :: PRED :: IF :: Z :: if (v33 != #(32)) goto 65::CF,14415:CD,14416:CD,14422:CD,14430:CD,14435:CD,14440:CD,14445:CD,14449:CD,14454:CD,14549:CD,14550
14463 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v58 = new java.lang.StringBuilder::JM,14550:CF,14464
14464 :: EXPR :: assign :: Ljava/lang/Object :: v59 = v51 + #(1)::
14465 :: CALL :: call :: Ljava/lang/String :: v61 = v74.substring(#(0), v59)::
14471 :: CALL :: call :: Ljava/lang/String :: v63 = valueOf(v61)::
14479 :: CALL :: call :: Ljava/lang/StringBuilder :: v66 = v58.append(#(32))::JM,14550
14484 :: EXPR :: assign :: Ljava/lang/Object :: v67 = v51 + #(1)::JM,14550
14485 :: CALL :: call :: Ljava/lang/String :: v69 = v74.substring(v67)::JM,14550
14490 :: CALL :: call :: Ljava/lang/StringBuilder :: v71 = v66.append(v69)::JM,14550
14495 :: CALL :: call :: Ljava/lang/String :: v73 = v71.toString()::JM,14550
14499 :: CALL :: call :: I :: v51 = v74.indexOf(#(46))::JM,14464:JM,14484:JM,14504:JM,14510:JM,14511
14504 :: PRED :: IF :: Z :: if (v51 < #(0)) goto 194::CD,14505:CD,14509:CD,14510
14505 :: CALL :: call :: I :: v53 = v74.length()::JM,14509
14509 :: EXPR :: assign :: Ljava/lang/Object :: v54 = v53 - #(1)::CF,14510
14510 :: PRED :: IF :: Z :: if (v51 >= v54) goto 194::CD,14511:CD,14512:CD,14517
14511 :: EXPR :: assign :: Ljava/lang/Object :: v55 = v51 + #(1)::JM,14517
14512 :: CALL :: call :: C :: v57 = v74.charAt(v55)::JM,14517
14517 :: PRED :: IF :: Z :: if (v57 != #(32)) goto 124::CF,14463:CD,14464:CD,14465:CD,14471:CD,14479:CD,14484:CD,14485:CD,14490:CD,14495:CD,14499:CD,14504:CD,14550
14536 :: CALL :: call :: Lorg/json/JSONObject :: v88 = v77.put(#(type), v86)::CL,13370
14542 :: CALL :: call :: Lorg/json/JSONObject :: v91 = v77.put(#(expression), v76)::CL,13370
14549 :: EXPR :: assign :: null :: PHI v49 = v5, v5, v5, v5, v48::JM,14549:JM,14454:JM,14455:JM,14461:DD,14550
14550 :: EXPR :: assign :: null :: PHI v74 = v49, v49, v73::JM,14550:JM,14464:JM,14484:JM,14504:JM,14510:JM,14511:JM,14509:JM,14517
14622 :: ENTR :: entry :: null :: org.json.JSONArray.put(java.lang.Object)::CD,14630
14627 :: EXPR :: reference :: Ljava/util/ArrayList :: v4 = p0 $this .myArrayList::
14630 :: CALL :: call :: Z :: v6 = v4.add(p1 $value )::
14640 :: ENTR :: entry :: null :: ai.susi.mind.SusiAction.answerAction(java.lang.String[])::JM,14350:CD,14648:CD,14664:JM,14332:CD,14675:CD,14687:CD,14693:CD,14700
14648 :: EXPR :: assign :: I :: v5 = p1 $answers .length::DD,14664
14650 :: EXPR :: reference :: Ljava/lang/Object :: v7 = p1 $answers [v14]::
14654 :: CALL :: call :: Ljava/lang/String :: v9 = v7.trim()::
14658 :: CALL :: call :: Lorg/json/JSONArray :: v11 = v3.put(v9)::CL,14622
14663 :: EXPR :: assign :: Ljava/lang/Object :: v13 = v14 + #(1)::DD,14700
14664 :: PRED :: IF :: Z :: if (v14 < v5) goto 23::CD,14654:CD,14658:CD,14663:CD,14700
14675 :: CALL :: call :: Lorg/json/JSONObject :: v22 = v15.put(#(type), v20)::CL,13370
14687 :: CALL :: call :: Lorg/json/JSONObject :: v28 = v22.put(#(select), v26)::CL,13370:CL,10424
14693 :: CALL :: call :: Lorg/json/JSONObject :: v31 = v28.put(#(phrases), v3)::CL,13370:CL,10424
14700 :: EXPR :: assign :: null :: PHI v14 = #(0), v13::DD,14663:DD,14664
14733 :: NORM :: declaration :: Ljava/io/StringReader :: v4 = new java.io.StringReader::JM,13617:JM,13621:JM,14733
14746 :: ENTR :: entry :: null :: org.json.JSONObject.getJSONArray(java.lang.String)::CD,14751:CD,14761:CD,14766:CD,14770:CD,14775:CD,14780
14751 :: CALL :: call :: Ljava/lang/Object :: v5 = p0 $this .get(p1 $key )::CL,13224
14761 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v9 = new java.lang.StringBuilder::
14766 :: CALL :: call :: Ljava/lang/String :: v13 = quote(p1 $key )::CL,13280
14770 :: CALL :: call :: Ljava/lang/StringBuilder :: v15 = v9.append(v13)::
14775 :: CALL :: call :: Ljava/lang/StringBuilder :: v18 = v15.append(#(] is not a JSONArray.))::
14780 :: CALL :: call :: Ljava/lang/String :: v20 = v18.toString()::
14795 :: ENTR :: entry :: null :: org.json.JSONObject.put(java.lang.String,boolean)::CD,14807
14807 :: CALL :: call :: Lorg/json/JSONObject :: v10 = p0 $this .put(p1 $key , v8)::CL,13370
14823 :: ENTR :: entry :: null :: ai.susi.mind.SusiIntent.answerIntent(java.lang.String[],java.lang.String,java.lang.String[],boolean,java.lang.String,java.lang.String)::CE,14824:CD,14832:JM,10656:JM,14350:CD,14841:CD,14847:CD,14868:CD,14869:CD,14894:CD,14906:CD,14922:CD,14928:CD,14932:CD,14937:CD,14938:JM,14874:JM,14899:JM,14911
14824 :: EXIT :: exit :: Lorg/json/JSONObject :: ai.susi.mind.SusiIntent.answerIntent(java.lang.String[],java.lang.String,java.lang.String[],boolean,java.lang.String,java.lang.String)::JM,17326
14832 :: NORM :: declaration :: Lorg/json/JSONObject :: v8 = new org.json.JSONObject::DD,14937
14841 :: CALL :: call :: Lorg/json/JSONObject :: v15 = v8.put(#(phrases), v11)::CL,13370
14847 :: EXPR :: assign :: I :: v16 = p1 $utterances .length::DD,14868
14849 :: EXPR :: reference :: Ljava/lang/Object :: v18 = p1 $utterances [v26]::
14853 :: CALL :: call :: Ljava/lang/String :: v20 = v18.trim()::
14857 :: CALL :: call :: Lorg/json/JSONObject :: v22 = simplePhrase(v20, p4 $prior )::CL,14366
14862 :: CALL :: call :: Lorg/json/JSONArray :: v24 = v11.put(v22)::CL,14622
14867 :: EXPR :: assign :: Ljava/lang/Object :: v25 = v26 + #(1)::DD,14938
14868 :: PRED :: IF :: Z :: if (v26 < v16) goto 46::CD,14853:CD,14857:CD,14862:CD,14867:CD,14938:CF,14869
14869 :: PRED :: IF :: Z :: if (p2 $condition  == #(null)) goto 116::CD,14870:CD,14874:CF,14894
14870 :: CALL :: call :: I :: v29 = p2 $condition .length()::JM,14874
14874 :: PRED :: IF :: Z :: if (v29 <= #(0)) goto 116::JM,14350:CD,14879:CD,14885:CD,14889:CF,14894
14879 :: CALL :: call :: Lorg/json/JSONObject :: v34 = v8.put(#(process), v30)::CL,13370
14885 :: CALL :: call :: Lorg/json/JSONObject :: v36 = simpleMemoryProcess(p2 $condition )::CL,16704
14889 :: CALL :: call :: Lorg/json/JSONArray :: v38 = v30.put(v36)::CL,14622
14894 :: PRED :: IF :: Z :: if (p5 $example  == #(null)) goto 139::CD,14895:CD,14899:JM,14832:JM,14911:CF,14906
14895 :: CALL :: call :: I :: v41 = p5 $example .length()::JM,14832:JM,14899:JM,14906:JM,14911
14899 :: PRED :: IF :: Z :: if (v41 <= #(0)) goto 139::CD,14900:CF,14906
14900 :: CALL :: call :: Lorg/json/JSONObject :: v44 = v8.put(#(example), p5 $example )::CL,13370
14906 :: PRED :: IF :: Z :: if (p6 $expect  == #(null)) goto 160::CD,14907:CD,14911:JM,14899
14907 :: CALL :: call :: I :: v46 = p6 $expect .length()::JM,14899:JM,14911
14911 :: PRED :: IF :: Z :: if (v46 <= #(0)) goto 160::CD,14912
14912 :: CALL :: call :: Lorg/json/JSONObject :: v49 = v8.put(#(expect), p6 $expect )::CL,13370
14922 :: CALL :: call :: Lorg/json/JSONObject :: v54 = v8.put(#(actions), v50)::CL,13370
14928 :: CALL :: call :: Lorg/json/JSONObject :: v56 = answerAction(p3 $answers )::CL,14640
14932 :: CALL :: call :: Lorg/json/JSONArray :: v58 = v50.put(v56)::CL,14622
14937 :: NORM :: compound :: Lorg/json/JSONObject :: return v8::DD,14824
14938 :: EXPR :: assign :: null :: PHI v26 = #(0), v25::DD,14867:DD,14868
15531 :: ENTR :: entry :: null :: ai.susi.mind.SusiSkill.readJsonSkill(java.io.File)::JM,10656:JM,13684:JM,13718:JM,13750:JM,13690:JM,13694:JM,13695
15557 :: ENTR :: entry :: null :: ai.susi.tools.AIML2Susi.readAIMLSkill(java.io.File)::CD,15561:CD,15562:CD,15571:CD,15581:CD,15585:CD,15589:CD,15590:CD,15604:CD,15607:CD,15611:CD,15623:CD,15627:JM,14332:JM,14350:CD,15639:CD,15686:CD,15690:CD,15692
15561 :: NORM :: declaration :: Ljava/io/BufferedReader :: v3 = new java.io.BufferedReader::JM,15585:CF,15562
15562 :: NORM :: declaration :: Ljava/io/FileReader :: v4 = new java.io.FileReader::
15571 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v7 = new java.lang.StringBuilder::
15576 :: CALL :: call :: Ljava/lang/StringBuilder :: v13 = v7.append(v10)::JM,15585
15581 :: CALL :: call :: Ljava/lang/String :: v10 = v3.readLine()::JM,15585
15585 :: PRED :: IF :: Z :: if (v10 != #(null)) goto 29::CD,15576:CD,15581
15589 :: NORM :: declaration :: Ljava/io/ByteArrayInputStream :: v15 = new java.io.ByteArrayInputStream::JM,15664:JM,15651:JM,15686:JM,15623:JM,15655:JM,15690:JM,15611:JM,15627:JM,15659:JM,15646
15590 :: CALL :: call :: Ljava/lang/String :: v17 = v7.toString()::
15604 :: CALL :: call :: Ljavax/xml/parsers/DocumentBuilderFactory :: v23 = newInstance()::JM,15664:JM,15651:JM,15686:JM,15607:JM,15623:JM,15655:JM,15690:JM,15611:JM,15627:JM,15659:JM,15646
15607 :: CALL :: call :: Ljavax/xml/parsers/DocumentBuilder :: v25 = v23.newDocumentBuilder()::JM,15664:JM,15651:JM,15686:JM,15607:JM,15623:JM,15655:JM,15690:JM,15611:JM,15627:JM,15659:JM,15646
15611 :: CALL :: call :: Lorg/w3c/dom/Document :: v27 = v25.parse(v15)::JM,15664:JM,15651:JM,15686:JM,15623:JM,15655:JM,15690:JM,15611:JM,15627:JM,15659:JM,15646
15623 :: CALL :: call :: Lorg/w3c/dom/Element :: v32 = v27.getDocumentElement()::JM,15664:JM,15651:JM,15686:JM,15623:JM,15655:JM,15690:JM,15627:JM,15659:JM,15646
15627 :: CALL :: call :: Lorg/w3c/dom/NodeList :: v34 = v32.getChildNodes()::JM,15664:JM,15651:JM,15686:JM,15655:JM,15690:JM,15627:JM,15659:JM,15646
15639 :: CALL :: call :: Lorg/json/JSONObject :: v41 = v35.put(#(intents), v37)::CL,13370
15646 :: CALL :: call :: Lorg/w3c/dom/Node :: v46 = v34.item(v64)::JM,15664:JM,15651:JM,15686:JM,15655:JM,15690:JM,15659:JM,15646
15651 :: CALL :: call :: Ljava/lang/String :: v48 = v46.getNodeName()::JM,15664:JM,15651:JM,15655:JM,15690:JM,15659
15655 :: CALL :: call :: Ljava/lang/String :: v50 = v48.toLowerCase()::JM,15664:JM,15655:JM,15659
15659 :: CALL :: call :: Z :: v53 = v50.equals(#(category))::JM,15664:JM,15659
15664 :: PRED :: IF :: Z :: if (v53 == #(0)) goto 218::CD,15670:CD,15674:CF,15685
15670 :: CALL :: call :: Lorg/json/JSONObject :: v57 = readAIMLCategory(v55)::JM,15674:CL,17250
15674 :: PRED :: IF :: Z :: if (v57 == #(null)) goto 218::CD,15675:CD,15679:CF,15685
15675 :: CALL :: call :: I :: v59 = v57.length()::JM,15679:CL,17373
15679 :: PRED :: IF :: Z :: if (v59 <= #(0)) goto 218::CD,15680:CF,15685
15680 :: CALL :: call :: Lorg/json/JSONArray :: v61 = v37.put(v57)::CL,14622
15685 :: EXPR :: assign :: Ljava/lang/Object :: v63 = v64 + #(1)::DD,15692
15686 :: CALL :: call :: I :: v44 = v34.getLength()::JM,15664:JM,15651:JM,15686:JM,15655:JM,15690:JM,15659:JM,15646
15690 :: PRED :: IF :: Z :: if (v64 < v44) goto 158::CD,15646:CD,15651:CD,15655:CD,15659:CD,15664:CD,15685:CD,15686:CD,15692:JM,15690
15692 :: EXPR :: assign :: null :: PHI v64 = #(0), v63::JM,15664:JM,15651:JM,15686:JM,15655:JM,15659:JM,15646:DD,15685:DD,15690
15754 :: ENTR :: entry :: null :: ai.susi.mind.SusiMind.learn(org.json.JSONObject,java.io.File)::JM,17425:JM,17429:JM,17434:JM,17419:JM,17420:CD,15765:CD,15769:CD,15773:CD,15778:CD,15789:CD,15801:CD,15805:CD,15810
15765 :: CALL :: call :: Lai/susi/mind/SusiLanguage :: v8 = v5.language()::CL,17509
15769 :: CALL :: call :: V :: learn(v8, p1 $json )::CL,17587
15773 :: CALL :: call :: Z :: v12 = p1 $json .has(#(console))::JM,15778:CL,10233
15778 :: PRED :: IF :: Z :: if (v12 == #(0)) goto 41::CD,15779:JM,14332
15779 :: CALL :: call :: Lorg/json/JSONObject :: v17 = p1 $json .getJSONObject(#(console))::CL,10550
15789 :: CALL :: call :: Ljava/util/Set :: v20 = v18.keySet()::CL,10537
15801 :: NORM :: declaration :: Ljava/util/ArrayList :: v24 = new java.util.ArrayList::
15805 :: CALL :: call :: Z :: v28 = p1 $json .has(#(rules))::JM,15810:CL,10233
15810 :: PRED :: IF :: Z :: if (v28 == #(0)) goto 100::CD,15811:CD,15817:CD,15822
15811 :: CALL :: call :: Lorg/json/JSONArray :: v37 = p1 $json .getJSONArray(#(rules))::CL,14746
15817 :: CALL :: call :: Z :: v31 = p1 $json .has(#(intents))::JM,15822:CL,10233
15822 :: PRED :: IF :: Z :: if (v31 == #(0)) goto 116::CD,15823:JM,14350
15823 :: CALL :: call :: Lorg/json/JSONArray :: v35 = p1 $json .getJSONArray(#(intents))::CL,14746
15914 :: ENTR :: entry :: null :: org.json.JSONObject.opt(java.lang.String)::CD,15919
15919 :: PRED :: IF :: Z :: if (p1 $key  != #(null)) goto 9::CD,15924
15921 :: EXPR :: reference :: Ljava/util/Map :: v5 = p0 $this .map::
15924 :: CALL :: call :: Ljava/lang/Object :: v7 = v5.get(p1 $key )::JM,15919
15936 :: ENTR :: entry :: null :: org.json.JSONObject.quote(java.lang.String,java.io.Writer)::CE,15937:CD,15941:JM,15946:JM,16011:JM,16012:JM,16045:JM,16013:JM,16014:JM,15951:JM,16015:JM,16050:JM,16051:JM,16028:JM,15966
15937 :: EXIT :: exit :: Ljava/io/Writer :: org.json.JSONObject.quote(java.lang.String,java.io.Writer)::JM,13303
15941 :: PRED :: IF :: Z :: if (p1 $string  == #(null)) goto 15::CD,15942:CD,15946:CD,15947:CD,15951:JM,15941:JM,16011:JM,16012:JM,16045:JM,16013:JM,16014:JM,16015:JM,16050:JM,16051:JM,16028:JM,15966
15942 :: CALL :: call :: I :: v6 = p1 $string .length()::JM,15941:JM,15946:JM,16011:JM,16012:JM,16045:JM,16013:JM,16014:JM,15951:JM,16015:JM,16050:JM,16051:JM,16028:JM,15966
15946 :: PRED :: IF :: Z :: if (v6 != #(0)) goto 23::CD,15947:CD,15951:CD,15952:CD,15956:CD,16045:CD,16046:CD,16050:CD,16051:CD,16052:JM,15941:JM,15946:JM,16011:JM,16012:JM,16013:JM,16014:JM,16015:JM,16028:JM,15966
15947 :: CALL :: call :: V :: p2 $w .write(#(''))::JM,15941:JM,15946:JM,16011:JM,16012:JM,16045:JM,16013:JM,16014:JM,15951:JM,16015:JM,16050:JM,16051:JM,16028:JM,15966
15951 :: NORM :: compound :: Ljava/io/Writer :: return p2 $w ::DD,15937
15952 :: CALL :: call :: I :: v9 = p1 $string .length()::JM,15941:JM,15946:JM,16011:JM,16012:JM,16045:JM,16013:JM,16014:JM,15951:JM,16015:JM,16050:JM,16051:JM,16028:JM,15966
15956 :: CALL :: call :: V :: p2 $w .write(#(34))::JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16012:JM,16028:JM,16045:JM,16013:JM,15966:JM,16014:JM,16015
15961 :: CALL :: call :: C :: v13 = p1 $string .charAt(v50)::JM,15941:JM,15946:JM,16011:JM,16012:JM,16045:JM,16013:JM,16014:JM,15951:JM,16015:JM,16050:JM,16051:JM,16028:JM,15966
15966 :: PRED :: IF :: null :: switch v13::CD,15967:CD,15971:CD,15976:CD,15981:CD,15986:CD,15991:CD,15996:CD,16001:CD,16006:CD,16011:JM,16050:JM,16051:JM,15941:JM,15946:JM,16012:JM,16028:JM,16045:JM,16013:JM,15966:JM,16014:JM,16015
15967 :: CALL :: call :: V :: p2 $w .write(#(92))::JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16012:JM,16028:JM,16045:JM,16013:JM,15966:JM,16014:JM,16015
15971 :: CALL :: call :: V :: p2 $w .write(v13)::JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16012:JM,16028:JM,16045:JM,16013:JM,15966:JM,16014:JM,16015
15976 :: PRED :: IF :: Z :: if (v49 != #(60)) goto 152::CD,15977:JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16012:JM,16028:JM,16045:JM,16013:JM,15966:JM,16014:JM,16015
15977 :: CALL :: call :: V :: p2 $w .write(#(92))::JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16012:JM,16028:JM,16045:JM,16013:JM,15966:JM,16014:JM,16015
15981 :: CALL :: call :: V :: p2 $w .write(v13)::JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16012:JM,16028:JM,16045:JM,16013:JM,15966:JM,16014:JM,16015
15986 :: CALL :: call :: V :: p2 $w .write(#(\b))::JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16012:JM,16028:JM,16045:JM,16013:JM,15966:JM,16014:JM,16015
15991 :: CALL :: call :: V :: p2 $w .write(#(\t))::JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16012:JM,16028:JM,16045:JM,16013:JM,15966:JM,16014:JM,16015
15996 :: CALL :: call :: V :: p2 $w .write(#(\n))::JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16012:JM,16028:JM,16045:JM,16013:JM,15966:JM,16014:JM,16015
16001 :: CALL :: call :: V :: p2 $w .write(#(\f))::JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16012:JM,16028:JM,16045:JM,16013:JM,15966:JM,16014:JM,16015
16006 :: CALL :: call :: V :: p2 $w .write(#(\r))::JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16012:JM,16028:JM,16045:JM,16013:JM,15966:JM,16014:JM,16015
16011 :: PRED :: IF :: Z :: if (v13 < #(32)) goto 246::CD,16012:CD,16016:CD,16020:CD,16024:CD,16028:CD,16029:CD,16035:JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16045:JM,16013:JM,15966:JM,16014:JM,16015
16012 :: PRED :: IF :: Z :: if (v13 < #(128)) goto 232::CD,16013:CD,16014
16013 :: PRED :: IF :: Z :: if (v13 < #(160)) goto 246::CD,16014:CD,16016:CD,16020:CD,16024:CD,16028:CD,16029:CD,16035:JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16012:JM,16045:JM,16013:JM,15966:JM,16015
16014 :: PRED :: IF :: Z :: if (v13 < #(8192)) goto 281::CD,16015:CD,16040:JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16012:JM,16028:JM,16045:JM,16013:JM,15966:JM,16014
16015 :: PRED :: IF :: Z :: if (v13 >= #(8448)) goto 281::CD,16016:CD,16020:CD,16024:CD,16028:CD,16029:CD,16035:CD,16040:JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16012:JM,16045:JM,16013:JM,15966:JM,16014:JM,16015
16016 :: CALL :: call :: V :: p2 $w .write(#(\u))::JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16012:JM,16028:JM,16045:JM,16013:JM,15966:JM,16014:JM,16015
16020 :: CALL :: call :: Ljava/lang/String :: v38 = toHexString(v13)::JM,16051:JM,16028
16024 :: CALL :: call :: I :: v42 = v38.length()::JM,16028
16028 :: EXPR :: assign :: Ljava/lang/Object :: v43 = #(4) - v42::JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16012:JM,16028:JM,16045:JM,16013:JM,15966:JM,16014:JM,16015
16029 :: CALL :: call :: V :: p2 $w .write(#(0000), #(0), v43)::JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16012:JM,16028:JM,16045:JM,16013:JM,15966:JM,16014:JM,16015
16035 :: CALL :: call :: V :: p2 $w .write(v38)::JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16012:JM,16028:JM,16045:JM,16013:JM,15966:JM,16014:JM,16015
16040 :: CALL :: call :: V :: p2 $w .write(v13)::JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16012:JM,16028:JM,16045:JM,16013:JM,15966:JM,16014:JM,16015
16044 :: EXPR :: assign :: Ljava/lang/Object :: v48 = v50 + #(1)::DD,16052:CF,16051
16045 :: PRED :: IF :: Z :: if (v50 < v9) goto 45::CD,15961:CD,15966:CD,16044:CD,16051:CD,16052:JM,15941:JM,15946:JM,16011:JM,16012:JM,16045:JM,16013:JM,16014:JM,15951:JM,16015:JM,16050:JM,16028
16046 :: CALL :: call :: V :: p2 $w .write(#(34))::JM,16050:JM,16051:JM,15941:JM,15946:JM,16011:JM,16012:JM,16028:JM,16045:JM,16013:JM,15966:JM,16014:JM,16015
16050 :: NORM :: compound :: Ljava/io/Writer :: return p2 $w ::DD,15937
16051 :: EXPR :: assign :: null :: PHI v49 = #(0), v13::CF,16052:DD,15976
16052 :: EXPR :: assign :: null :: PHI v50 = #(0), v48::JM,16051:JM,15946:JM,16011:JM,16012:JM,16028:JM,16013:JM,15966:JM,16014:JM,16015:DD,16044:DD,16045
16124 :: ENTR :: entry :: null :: org.json.JSONObject.testValidity(java.lang.Object)::
16184 :: ENTR :: entry :: null :: org.json.JSONObject.remove(java.lang.String)::CD,16192
16189 :: EXPR :: reference :: Ljava/util/Map :: v4 = p0 $this .map::
16192 :: CALL :: call :: Ljava/lang/Object :: v6 = v4.remove(p1 $key )::
16200 :: ENTR :: entry :: null :: ai.susi.json.JsonFile.remove(java.lang.String)::CD,16205:CD,16208:CD,16213
16205 :: CALL :: call :: V :: p0 $this .updateToFile()::CL,10677
16208 :: CALL :: call :: Ljava/lang/Object :: v6 = p0 $this .remove(p1 $key )::CL,16184
16213 :: CALL :: call :: V :: p0 $this .commit()::CL,13416
16223 :: ENTR :: entry :: null :: org.json.JSONObject.toString(int)::CE,16224:CD,16228:CD,16237:CD,16244:CD,16249
16224 :: EXIT :: exit :: Ljava/lang/String :: org.json.JSONObject.toString(int)::JM,16508
16228 :: NORM :: declaration :: Ljava/io/StringWriter :: v4 = new java.io.StringWriter::
16237 :: CALL :: call :: Ljava/io/Writer :: v10 = p0 $this .write(v4, p1 $indentFactor , #(0))::JM,16249:CL,17898
16244 :: CALL :: call :: Ljava/lang/String :: v12 = v10.toString()::JM,16249
16249 :: NORM :: compound :: Ljava/lang/String :: return v12::DD,16224
16263 :: ENTR :: entry :: null :: org.json.JSONTokener.nextClean()::CE,16264:CD,16267:CD,16271:CD,16273
16264 :: EXIT :: exit :: C :: org.json.JSONTokener.nextClean()::JM,13694:JM,13738:JM,13743:JM,16455:JM,16381:JM,18456:JM,18464:JM,18498:JM,18503
16267 :: CALL :: call :: C :: v4 = p0 $this .next()::JM,16272:JM,16273:JM,16271:CL,18112
16271 :: PRED :: IF :: Z :: if (v4 == #(0)) goto 16::CD,16272:CF,16273
16272 :: PRED :: IF :: Z :: if (v4 <= #(32)) goto 1::CD,16267:CD,16271:CF,16273
16273 :: NORM :: compound :: C :: return v4::DD,16264
16281 :: ENTR :: entry :: null :: org.json.JSONTokener.syntaxError(java.lang.String)::CD,16287:CD,16288:CD,16296:CD,16300:CD,16305
16287 :: NORM :: declaration :: Ljava/lang/StringBuilder :: v5 = new java.lang.StringBuilder::
16288 :: CALL :: call :: Ljava/lang/String :: v7 = valueOf(p1 $message )::
16296 :: CALL :: call :: Ljava/lang/String :: v10 = p0 $this .toString()::CL,18239
16300 :: CALL :: call :: Ljava/lang/StringBuilder :: v12 = v5.append(v10)::
16305 :: CALL :: call :: Ljava/lang/String :: v14 = v12.toString()::
16318 :: ENTR :: entry :: null :: org.json.JSONTokener.back()::
16373 :: ENTR :: entry :: null :: org.json.JSONTokener.nextValue()::CE,16374:CD,16377:CD,16381:CD,16444
16374 :: EXIT :: exit :: Ljava/lang/Object :: org.json.JSONTokener.nextValue()::
16377 :: CALL :: call :: C :: v4 = p0 $this .nextClean()::JM,16455:JM,16381:CL,16263
16381 :: PRED :: IF :: null :: switch v4::CF,16406:CD,16382:CD,16387:CD,16391:JM,10656:JM,13684:JM,13718:JM,13750:JM,13690:JM,13694:JM,13695:CD,16396:CD,16400:JM,18452:JM,18456:JM,18446:JM,18510:JM,14350:CD,16405:CD,16420:CD,16427:CD,16430:CD,16434:CD,16450:CD,16454:CD,16455
16382 :: CALL :: call :: Ljava/lang/String :: v37 = p0 $this .nextString(v4)::JM,16387:CL,18300
